<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Icyyoung</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-02-21T10:18:45.160Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>icyyoung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++的内存管理</title>
    <link href="http://example.com/2025/02/21/Cpp_learning_0/"/>
    <id>http://example.com/2025/02/21/Cpp_learning_0/</id>
    <published>2025-02-21T08:12:40.347Z</published>
    <updated>2025-02-21T10:18:45.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程内存"><a href="#进程内存" class="headerlink" title="进程内存"></a>进程内存</h2><p>堆、栈是C++中两种常见的内存段，均位于进程的虚拟内存空间中。</p><p>栈是所有局部变量存放的地方，包括函数参数，函数调用时，栈会自动分配内存空间，函数返回时，栈会自动释放内存空间。</p><p>每个线程都有自己的栈，所以栈内存可以认为是线程安全的。</p><p>堆是全局性的内存区域，会被进程内的所有线程共享，在使用new&#x2F;delete&#x2F;malloc&#x2F;calloc等函数时进行堆操作。</p><p>通常，堆是自低地址向高地址增长的，而栈是自高地址向低地址增长的，方向相反。</p><p><strong>栈内存的特点</strong>：</p><ul><li>栈是连续的内存块。</li><li>栈具有一个固定的最大容量，程序超过最大容量会导致崩溃，即栈溢出。</li><li>栈内存永远不会出现内存碎片。</li><li>栈内存的分配和释放速度非常快，有可能出现页缺失，但是非常少见。</li></ul><p><strong>堆内存的特点</strong>：</p><ul><li>多线程共享，因此使用时需要注意线程安全问题。</li><li>栈的内存分配具有顺序性，而堆的内存分配和释放具有随机性，出现内存碎片风险很大。</li></ul><h2 id="内存中的对象"><a href="#内存中的对象" class="headerlink" title="内存中的对象"></a>内存中的对象</h2><p>C++程序中的所有对象都驻留在内存中,下面介绍内存的创建与销毁，以及对象的内存布局。</p><h3 id="创建与销毁"><a href="#创建与销毁" class="headerlink" title="创建与销毁"></a>创建与销毁</h3><p>new&#x2F;delete用于在C++的堆上分配和释放内存，包含内存的分配过程以及构造函数的调用。</p><p>C++也允许我们将内存分配与对象的构造过程分开，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span>* memory = std::<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(User));<br><span class="hljs-keyword">auto</span>* user = ::<span class="hljs-built_in">new</span>(memory) <span class="hljs-built_in">User</span>(<span class="hljs-string">&quot;John&quot;</span>);<br>```cpp<br>这里使用的是placement <span class="hljs-keyword">new</span>，即在已经分配好的内存上构造对象，::<span class="hljs-keyword">new</span>表示使用全局的<span class="hljs-keyword">new</span>运算符，而不是类内部的<span class="hljs-keyword">new</span>运算符，避免重载。<br><br>此时，我们需要手动调用析构函数来销毁对象：<br>```cpp<br>user-&gt;~<span class="hljs-built_in">User</span>();<br>std::<span class="hljs-built_in">free</span>(memory);<br></code></pre></td></tr></table></figure><p>C++17在<memory>中引入了一组函数，用于在创建&#x2F;销毁对象时不必分匹配或释放内存，可以使用其中以std::uninitialized_开头的函数进行构造、拷贝、移动对象到一个未被初始化的内存区域，不必调用placement new，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span>* memory = std::<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(User));<br><span class="hljs-keyword">auto</span>* user_ptr = <span class="hljs-built_in">reinterpret_cast</span>&lt;User*&gt;(memory);<br>std::<span class="hljs-built_in">unininitialized_fill_n</span>(user_ptr, <span class="hljs-number">1</span>, <span class="hljs-built_in">User</span>(<span class="hljs-string">&quot;John&quot;</span>));<br>std::<span class="hljs-built_in">destory_at</span>(user_ptr);<br>std::<span class="hljs-built_in">free</span>(memory);<br></code></pre></td></tr></table></figure><p>C++20引入了对等destroy_at的std::construct_at，可以取代unininitialized_fill_n。</p><p>运算符new delete允许重载，可以定制内存处理机制。</p><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><p>CPU每次从内存中读入一个字，64架构是64位。C++中的每一种类型都有其对齐要求。</p><p>可用alignof来查看对齐方式。</p><p>new和malloc()确保总是返回适当对其的内存，我们也可以手动指定内存对齐形式，决定两个对象间的内存间隙的大小。</p><p>还可以强制将两个变量分配到不同的缓存行中（假设其大小为64字节），如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">alignas</span>(<span class="hljs-number">64</span>) <span class="hljs-type">int</span> x&#123;&#125;;<br><span class="hljs-built_in">alignas</span>(<span class="hljs-number">64</span>) <span class="hljs-type">int</span> y&#123;&#125;;<br></code></pre></td></tr></table></figure><h3 id="内存补齐"><a href="#内存补齐" class="headerlink" title="内存补齐"></a>内存补齐</h3><p>编译器有时需要为用户自定义的类型添加额外的字节进行补齐，对于Class和Struct中定义的数据成员，编译器会按照其声明的顺序补齐，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Document</span>&#123;<br>    <span class="hljs-type">bool</span> is_cached&#123;&#125;;<br>    <span class="hljs-type">double</span> rank&#123;&#125;;<br>    <span class="hljs-type">int</span> id&#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>编译器会将其补齐为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Document</span>  <span class="hljs-comment">/* size: 24, align: 8 */</span><br>&#123;<br>  <span class="hljs-type">bool</span> is_cached;                 <span class="hljs-comment">/* offset: 0, size: 1</span><br><span class="hljs-comment">  char __padding[7];                            size: 7 */</span><br>  <span class="hljs-type">double</span> rank;                    <span class="hljs-comment">/* offset: 8, size: 8 */</span><br>  <span class="hljs-type">int</span> id;                         <span class="hljs-comment">/* offset: 16, size: 4</span><br><span class="hljs-comment">  char __padding[4];                            size: 4 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="内存所有权"><a href="#内存所有权" class="headerlink" title="内存所有权"></a>内存所有权</h3><ul><li>局部变量是由当前作用域所有，离开作用域时自动销毁。</li><li>静态变量由程序所有，程序结束时销毁。</li><li>数据成员由所属的类的示例所有。</li><li>只有动态变量才没有默认的所有者，需要注意控制其生命周期</li></ul><p>借助RAII，使用自定义的类对象包装动态内存，可以确保在对象销毁时自动释放内存。</p><p>也可以借助于标准容器，容器本省拥有对象的所有权。还可以用std::optional来处理哪些可能存在也可能不存在的对象的生命周期。</p><p><strong>智能指针</strong>：</p><h4 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h4><p>独占所有权的智能指针，不能复制，使用完释放。</p><p>非常高效，与普通指针相比，增加的开销是由于std::unique的析构函数是一个非平凡析构函数，这意味着（与原始指针不同），当他被传递给一个函数时，不能在CPU的寄存器中传递，因此比原始指针慢。</p><h4 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h4><p>共享所有权的智能指针，可以复制，引用计数为0后释放。</p><p>std::shared_ptr是内部线程安全的，所以计数器需要原子更新以防止竞态条件。</p><p>推荐使用std::make_shared<T>()，因为他相比new后分配更加高效，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> user = std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">double</span>&gt;(<span class="hljs-number">10.0</span>);   <span class="hljs-comment">//只需要一次内存分配</span><br><span class="hljs-keyword">auto</span> i = std::<span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-type">double</span>&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">double</span>(<span class="hljs-number">10.0</span>)); <span class="hljs-comment">//需要两次</span><br></code></pre></td></tr></table></figure><h4 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a>std::weak_ptr</h4><p>弱引用，不需要只为我而保留它，可用于打破<strong>循环引用（两个共享指针互相指着对方，通过彼此的引用保持不被销毁）</strong>。</p><p>为什么不直接使用原始指针？因为原始指针无法保证对象的生命周期，如果指针指向的对象被销毁，那么指针就变成了悬空指针。</p><h3 id="小对象优化"><a href="#小对象优化" class="headerlink" title="小对象优化"></a>小对象优化</h3><p>在 C++ 编程中，容器如 <code>std::vector</code> 和 <code>std::string</code> 提供了灵活和高效的内存管理。然而，对于只包含少量元素的容器，动态内存分配可能会带来不必要的性能开销。小对象优化通过避免小对象的动态内存分配，提升性能。</p><p>核心：对于小对象，我们不在堆上申请，而是将其存储到栈上。</p><p>在<code>std::string</code>的实现中，许多字符串在普通程序中通常是短小的。因此，为了提高效率，标准库通常会为短字符串提供一个内部的小缓冲区。当字符串长度较短时，直接使用这个缓冲区；而当字符串超出缓冲区大小时，则切换到动态分配的堆内存。</p><p>一种简单但浪费内存的方式是，在字符串类中始终保留一个固定的缓冲区。然而，这样即使不使用小缓冲区，也会增加字符串类的大小。</p><p>更节省内存的解决方案是使用联合体 。联合体允许字符串在短模式下使用内部缓冲区，而在长模式下切换到动态分配的缓冲区。这种方式既节省了内存，又提高了性能。</p><p>以下是一个简化的例子，展示了 LLVM 的 libc++ 中 std::string 在 64 位系统上的实现方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-type">size_t</span> allocated = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span> </span>&#123;<br>    <span class="hljs-type">void</span>* p = std::<span class="hljs-built_in">malloc</span>(size);<br>    allocated += size;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>* p)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">free</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    allocated = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> s = std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 使用空字符串测试</span><br>    <span class="hljs-comment">// autp s = std::string(&quot;1234567890123456789012&quot;); // 使用长22字符的字符串测试</span><br>    <span class="hljs-comment">// autp s = std::string(&quot;12345678901234567890123&quot;); // 使用长23字符的字符串测试</span><br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Stack space = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(s)<br>              &lt;&lt; <span class="hljs-string">&quot;, Heap space = &quot;</span> &lt;&lt; allocated<br>              &lt;&lt; <span class="hljs-string">&quot;, Capacity = &quot;</span> &lt;&lt; s.<span class="hljs-built_in">capacity</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先重载了全局的<code>new</code>和<code>delete</code>，以便跟踪内存分配。现在，测试空字符串，看看其性能，输出如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Stack</span> space = <span class="hljs-number">24</span>, Heap space = <span class="hljs-number">0</span>, Capacity = <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>可以看到，std::string在栈上占用了24字节，没有使用堆内存，并且其容量为22。</p><p>对于长为22的字符串，输出相同，表明没有动态分配空间。</p><p>测试长为23字符的字符串：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Stack</span> space = <span class="hljs-number">24</span>, Heap space = <span class="hljs-number">32</span>, Capacity = <span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>此时，字符串超出了内部缓冲区的容量，切换到了动态分配的堆内存。它被分配了32个字节，容量为31，这是因为libc++总是在内部存储一个以零结尾的字符串，因此需要额外的1个字节表示来表示空字符串的结尾。</p><p><code>std::string</code>的实现方式是使用两种不同布局的联合体，一种用于短字符串，另一种用于长字符串。</p><p>长模式的布局大概如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Long</span> &#123;<br>    <span class="hljs-type">size_t</span> capacity_&#123;&#125;;     <span class="hljs-comment">// 动态分配的容量</span><br>    <span class="hljs-type">size_t</span> size_&#123;&#125;;         <span class="hljs-comment">// 字符串长度</span><br>    <span class="hljs-type">char</span>* data_&#123;&#125;;          <span class="hljs-comment">// 指向堆内存的指针</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>每个成员都是8字节的，所以总大小为24字节。char指针data_只想用于存储长字符串的动态分配的内存。</p><p>短模式的布局大概如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Short</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> size_&#123;&#125;;  <span class="hljs-comment">// 字符串长度（最多 22）</span><br>    <span class="hljs-type">char</span> data_[<span class="hljs-number">23</span>]&#123;&#125;;       <span class="hljs-comment">// 内部缓冲区</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>长度只能在0到22之间，所以size_只需要1个字节。内部缓冲区有23个字节，总大小为24字节。</p><p>两种布局使用联合体组合：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">union</span> <span class="hljs-title class_">StringStorage</span> &#123;<br>    Short short_;<br>    Long long_;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>还有一点！</strong>字符串如何知道是使用哪种布局？它存放在哪里？</p><p>结果表明，在长模式下，libc++在capacity_字段中使用了最低有效位，在短模式下，在size_字段中使用了最低有效位。</p><p>长模式下，这个位是多余的，因为字符串分配的内存大小总是2的倍数，而短模式下，可以只用7位存储大小，这样就有一位可以作为标志位！</p>]]></content>
    
    
    <summary type="html">内存所有权、RAII、智能指针......</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="Operater System" scheme="http://example.com/tags/Operater-System/"/>
    
  </entry>
  
  <entry>
    <title>从edge看程序的多进程设计</title>
    <link href="http://example.com/2025/02/21/Edge_multi_process/"/>
    <id>http://example.com/2025/02/21/Edge_multi_process/</id>
    <published>2025-02-21T05:09:01.287Z</published>
    <updated>2025-02-21T05:46:29.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>参考链接：<a href="https://blogs.windows.com/msedgedev/2020/09/30/microsoft-edge-multi-process-architecture/">Microsoft Edge’s multi-process architecture</a></p><p>进程是程序运作的基本单位，而线程隶属于进程，一个进程可以有包含主线程在内的多个线程，用来提升性能。</p><p>平时在编程中，很少会遇到需要额外创建进程的情况，自己编写的代码几乎都是一个进程就够了。但是在实际的开发中，多进程也是很常用的策略，但是我了解不多，因此借着Edge的设计来看看多进程设计。</p><h2 id="1-Edge的多进程设计"><a href="#1-Edge的多进程设计" class="headerlink" title="1.Edge的多进程设计"></a>1.Edge的多进程设计</h2><p>浏览器含有多个进程模块：</p><ul><li>1.Browser process：是主进程，组织打开的窗口、页面，控制浏览器本身的一些基本元素（上方的地址栏、前进后退按钮），并且对网络、文件等进程拥有特殊权限。</li><li>2.Renderer processes：执行代码渲染网页，处理HTML、CSS、JavaScript、images等，占用的资源受内容影响很大。</li><li>3.GPU process：与GPU关联，借助GPU加速上面提到的网页渲染。</li><li>4.Utility process：音频播放、网络服务、摄像头视频捕捉、解码、信息收集等，便于Edge掌握总体资源。</li><li>5.Plug-in processes and extension processes：包含Flash等插件以及其他扩展。</li><li>6.Crashpad handler process：用于将crash信息传递给微软。</li></ul><p>示意图片：</p><img src="/img/Edge_multi_process.png"><img src="/img/Edge_multi_process_2.png"><img src="/img/Edge_multi_process_3.png"><h2 id="2-多进程架构的优点"><a href="#2-多进程架构的优点" class="headerlink" title="2. 多进程架构的优点"></a>2. 多进程架构的优点</h2><h3 id="2-1-安全设计"><a href="#2-1-安全设计" class="headerlink" title="2.1 安全设计"></a>2.1 安全设计</h3><ul><li><p><strong>进程隔离</strong><br>每个进程独立运行，防止恶意网页或攻击利用漏洞跨进程传播。例如，如果恶意软件利用其中一个renderer进程的漏洞，会因权限受到严格限制而难以影响其他部分，从而保护用户的敏感信息。</p></li><li><p><strong>权限受限</strong><br>由于renderer进程权限较低，即使受到攻击，也仅限于网页渲染这一环节，攻击者难以获得更高权限或控制整个系统。</p></li><li><p><strong>资源访问控制</strong><br>用单独的工具进程管理音频、网络、视频捕捉和数据解码等资源，可以更好地保护这些操作，减少潜在的安全风险。</p></li></ul><h3 id="2-2-提高可靠性"><a href="#2-2-提高可靠性" class="headerlink" title="2.2 提高可靠性"></a>2.2 提高可靠性</h3><ul><li><p><strong>进程崩溃隔离</strong><br>当某个网页、扩展或插件崩溃时，仅该进程受到影响，其他进程仍能继续稳定运行，大大提升了浏览器的整体稳定性和用户体验。</p></li><li><p><strong>容错和恢复能力</strong><br>多进程架构使得浏览器能够更容易地检测和隔离出问题的部分，从而快速恢复正常状态，避免全局崩溃的情况发生。</p></li></ul><h3 id="2-3-资源可控性与效率"><a href="#2-3-资源可控性与效率" class="headerlink" title="2.3 资源可控性与效率"></a>2.3 资源可控性与效率</h3><ul><li><p><strong>资源监控</strong><br>每个进程独立运行，让用户可以在任务管理器中清晰地看到各个进程的资源占用情况（如CPU、内存、GPU等），从而判断是浏览器自身、网站内容还是扩展或插件在消耗资源。</p></li><li><p><strong>优化资源调度</strong><br>将任务分散到不同的进程中，系统可以更高效地进行资源分配，保证各模块在不同硬件环境下都能得到最佳性能。</p></li></ul><h3 id="2-4-性能优化"><a href="#2-4-性能优化" class="headerlink" title="2.4 性能优化"></a>2.4 性能优化</h3><ul><li><p><strong>并行处理</strong><br>多进程设计使得浏览器可以同时处理多个任务（如页面渲染、视频处理和数据解码），减少任务间的互相干扰，从而实现更流畅的用户体验。</p></li><li><p><strong>提高系统响应速度</strong><br>在重负载情况下，各个进程独立运行可以减缓整体系统的压力，提升浏览器和操作系统的响应速度。</p></li></ul>]]></content>
    
    
    <summary type="html">Microsoft Edge’s multi-process architecture</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="Operater System" scheme="http://example.com/tags/Operater-System/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_10/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_10/</id>
    <published>2024-10-29T13:21:09.465Z</published>
    <updated>2024-10-29T13:26:33.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-2020-年的-C"><a href="#10-2020-年的-C" class="headerlink" title="10. 2020 年的 C++"></a>10. 2020 年的 C++</h1><p>本节我们来查看一下在二十一世纪的第二个十年里，C++ 如何被使用，以及用来做什么：</p><ul><li><a href="#101-c-%E7%94%A8%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88">§10.1</a>：C++ 用来做什么？</li><li><a href="#102-c-%E7%A4%BE%E5%8C%BA">§10.2</a>：C++ 社区</li><li><a href="#103-%E6%95%99%E8%82%B2%E5%92%8C%E7%A0%94%E7%A9%B6">§10.3</a>：教育和科研</li><li><a href="#104-%E5%B7%A5%E5%85%B7">§10.4</a>：工具</li><li><a href="#105-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC">§10.5</a>：编程风格</li><li><a href="#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>：核心指南</li></ul><p>C++ 的使用领域绝大部分与 2006 年相同（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。虽然有一些新的领域，但在大多数情况下，我们看到的 C++ 还是在相同或类似的领域中被更加广泛和深入地使用。C++ 没有突然成为一种面向 Web 应用开发的语言，虽然即使在那种场景下仍有人用 C++ [Obiltschnig et al. 2005]。对于大多数程序员来说，C++ 依然是某种隐没在后台的东西，稳定、可靠、可移植、高性能。最终用户是看不见 C++ 的。</p><p>编程风格则有更加巨大的变化。比起 C++98，C++11 是门好得多的语言。它更易于使用，表达能力更强，性能还更高。2020 年发布的 C++20 则在 C++11 的基础上做出了类似程度的改进。</p><h2 id="10-1-C-用来做什么？"><a href="#10-1-C-用来做什么？" class="headerlink" title="10.1 C++ 用来做什么？"></a>10.1 C++ 用来做什么？</h2><p>大致而言，C++ 可谓无处不在、无所不用。但是，大象无形，大多数 C++ 的使用并不可见，被深深隐藏在重要系统的基础设施内部。</p><p>C++ 被用在哪里，是如何被使用的，没人能够完整了解。2015 年，捷克公司 JetBrains 委托进行了一项研究 [Kazakova 2015]，结果显示在北美、欧洲、中东以及亚太地区 C++ 被大量使用，在南美也有一些使用。“在南美的一些使用”就有 40 万开发者，而 C++ 开发者的总人数则达到了 440 万。使用 C++ 的行业有（按顺序）金融、银行、游戏、前台、电信、电子、投资银行、营销、制造和零售。所有迹象表明，自 2015 年以来，C++ 的用户数量和使用领域一直在稳步增长。</p><p>在这里，我将对 2006 到 2020 年期间内 C++ 的应用领域给出一个可能有些个人化的、印象派的、非常不完整的概览：</p><ul><li><strong>工业界</strong>：电信（例如 AT&amp;T、爱立信、华为和西门子）、移动设备（基本上是所有，信号处理、屏幕渲染、对性能或可移植性有重大要求的应用）、微电子（例如 AMD、英特尔、Mentor Graphics 和英伟达）、金融（例如摩根士丹利和文艺复兴）、游戏（几乎所有）、图形和动画（例如 Maya、迪士尼和 SideFx）、区块链实现（例如 Ripple）、数据库（例如 SAP、Mongo、MySQL 和 Oracle）、云（例如谷歌、微软、IBM 和 Amazon）、人工智能和机器学习（例如 TensorFlow 库）、运营支持（例如 Maersk 和 AT&amp;T）。</li><li><strong>科学</strong>：航空航天（例如 Space X、火星漫游者、猎户座载人飞行器、詹姆斯·韦伯太空望远镜）、高能物理（例如 CERN 欧洲核子研究中心、SLAC 国家加速器实验室、费米实验室）、生物学（遗传学、基因组测序）、超大规模计算。</li><li><strong>教学</strong>：全球大多数工程院校。</li><li><strong>软件开发</strong>：TensorFlow、工具、库、编译器、Emscripten（从 C++ 生成 asm.js 和 WebAssembly）、运行期代码生成、LLVM（许多新语言的后台支柱，也大量用于工具构建中）、XML 和 JSON 解析器、异构计算（例如 SYCL [Khronos Group 2014–2020] 和 HPX [Stellar Group 2014–2020]）。</li><li><strong>Web 基础设施</strong>：浏览器（Chrome、Edge、FireFox 和 Safari）、JavaScript 引擎（V8 和 SpiderMonkey）、Java 虚拟机（HotSpot 和 J9）、谷歌和类似组织（搜索、map-reduce 和文件系统）。</li><li><strong>主要 Web 应用</strong>：阿里巴巴、Amadeus（机票）、Amazon、苹果、Facebook、PayPal、腾讯（微信）、Yandex。</li><li><strong>工程应用</strong>：达索（CAD&#x2F;CAM）、洛克希德·马丁（飞机）。</li><li><strong>汽车</strong>：辅助驾驶 [ADAS Wikipedia 2020; Mobileye 2020; NVIDIA 2020]、软件架构 [Autosar 2020; Autosar Wikipedia 2020]、机器视觉 [OpenCV 2020; OpenCV Wikipedia 2020]、宝马、通用、梅赛德斯、特斯拉、丰田、沃尔沃、大众、Waymo（谷歌自动驾驶汽车）。</li><li><strong>嵌入式系统</strong>：智能手表和健康监控器（例如佳明）、相机和视频设备（例如奥林巴斯和佳能）、导航辅助设备（例如 TomTom）、咖啡机（例如 Nespresso）、农场动物监控器（例如 Big Dutchman）、生产线温度控制（例如嘉士伯）。</li><li><strong>安全</strong>：卡巴斯基、美国国家安全局、赛门铁克。</li><li><strong>医疗和生物学</strong>：医学监测和成像（例如西门子、通用电气、东芝和飞利浦）、断层扫描（例如 CT）、基因组分析、生物信息学、放射肿瘤学（例如 Elekta 和 Varian）。</li></ul><p>虽然这只是冰山一角，但它展示了 C++ 使用的广度和深度。大多数 C++ 的使用对其（间接）用户不可见。某些对 C++ 的使用早于 2006 年，但也有很多是之后才开始的。没有一个主要现代系统只用单一语言写就，但是 C++ 在所有这里提到的应用场合中发挥了重要作用。</p><p>我们常常忘记那些平凡的却在我们的生活中起着重要作用的应用。没错，C++ 可以帮助运行美国国家航空航天局的深空网络，但也可以在人们日常熟悉的小设备中运行，例如咖啡机、立体声扬声器和洗碗机。让我惊讶的是，C++ 竟然也被应用于运转现代养猪场的先进系统中。</p><h2 id="10-2-C-社区"><a href="#10-2-C-社区" class="headerlink" title="10.2 C++ 社区"></a>10.2 C++ 社区</h2><p>与 2006 年相比，2020 年的 C++ 社区更加壮大，不断蓬勃发展、积极向上、富有成效，并且急切地想看到未来的进一步改进。</p><p>与大多数编程语言社区相比，C++ 社区一向是出奇地无组织和分散。这个问题早已有之，因为我就没有建立组织的才能。当时我的雇主 AT&amp;T 贝尔实验室并不想建立一个 C++ 社区，但是似乎其他所有人都非常感兴趣，并且愿意花钱来建立他们的用户群。最终的结果是，许多公司，例如苹果、Borland、GNU、IBM、微软和 Zortech 都建立了以其客户为中心的 C++ 社区，但是却没有总体的 C++ 社区，社区没有中心。有杂志，读的人不多（相对于 C++ 社区的规模）。虽然有会议，但它们倾向于被一般的“面向对象”的会议或“软件开发”的会议所吸收或者就演变成了那些一般性会议。没有总体的 C++ 用户组。</p><p>如今，世界上有数十个本地、国家和国际 C++ 用户组，这些用户组之间也经常进行一些合作。除此之外，还有数十个 C++ 会议，每个会议都有数百人参加：</p><ul><li><strong>C++ 基金会</strong>——成立于 2014 年，是一家非盈利性组织，旨在推广 ISO C++（而不是任何特定供应商的 C++），它主办 CppCon 年度会议。</li><li><strong>Boost</strong>——成立于 1999 年，它是一组经过同行评审的库、以及建造使用它们的社区。Boost 举行年度会议。</li><li>**Meeting C++**——成立于 2012 年，是一个非常活跃的用户团体网络，定期举行会议（最初在德国活跃）。在不同地方有数十个 Meeting C++ 的会议和聚会。</li><li><strong>ACCU</strong>——成立于 1984 年，最初作为 C 用户组而建立，是所有现存 C++ 组织中的爷爷辈了；它出版两本杂志，并举行年度会议（主要在英国活跃）。</li><li><strong>isocpp.org</strong>——C++ 基金会的网站，其中包含与 C++ 有关的新闻，标准化进程相关的信息，以及有用的链接。</li><li><strong>cppreference.com</strong>——出色的在线参考资料；它甚至有一个历史部分！</li><li><strong>会议</strong>——CppCon、ACCU、Meeting++、C++ Now（以前称为 BoostCon）、Qt、NDC、std::cpp 的会议，以及在波兰、俄罗斯、中国、以色列和其他地方的一些会议。此外，很多通用软件会议上也在越来越多的安排 C++ 专题。</li><li><strong>博客</strong>——有许多，播客也是。</li><li><strong>视频</strong>——视频已成为有关 C++ 的最新进展的主要信息来源。主要的 C++ 会议通常会录制演讲视频并将其发布以供免费访问（例如 CppCon、C++Now 和 Meeting++）。视频采访已变得很流行。最多最受欢迎的托管网站是 YouTube，但不幸的是，YouTube 在有些拥有大型 C++ 开发者群体的国家（例如中国）被封了。</li><li><strong>GitHub</strong>——使共享代码和组织联合项目开发变得更加容易。</li></ul><p>跟某些语言和供应商的集中组织相比，这还差得很远。但是，这些 C++ 社区和组织富有活力，彼此保持联系，并且比在 2006 年的时候活跃得多。此外，一些企业的用户组和会议也仍然活跃。</p><h2 id="10-3-教育和研究"><a href="#10-3-教育和研究" class="headerlink" title="10.3 教育和研究"></a>10.3 教育和研究</h2><p>从 2006 年不太理想的状态（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）到现在，C++ 的教育是否得到了改善？也许吧，但是对于 C++ 来说，教育仍然不是强项，大多数教育还都集中在为业内人士提供信息和培训上。在大多数国家&#x2F;地区，很多大学毕业生对 C++ 语言及使用它的关键技术只能算一知半解。对于 C++ 社区来说，这是一个严重的问题。因为，对于一门语言来说，如果没有热情洋溢的程序员们源源不断、前赴后继地精通其关键设计和实现技术，那它是无法在工业规模上取得成功的。假如更多使用 C++ 的开发者知道如何更好地使用它，那他们就能做太多太多的事来改进软件！如果毕业生带着更准确的 C++ 视角进入工作岗位，那么太多太多的事情会变得容易得多！</p><p>C++ 教学所面临的一个问题是教育机构经常将编程视为低级技能，而不是基础课目。好的软件对我们的文明至关重要。为了把控软件，我们需要像对待数学和物理学一样，严肃认真地对待关键系统的软件开发。那种削足适履的方式对于教育和软件开发是行不通的。一个学期的教学也远远不够。我们永远都不会期望在教了短短几个月英语之后，学生就会懂得欣赏莎士比亚。同样，了解语言的基本机制与精通内行所使用的惯用法和技巧之间是有差距的。就像任何主要的现代编程语言一样，教授 C++ 也需要根据学生的背景和需求相应地调整教学方法。即使教育机构意识到了这些问题并愿意做出一些弥补，奈何学生已经课满为患，教师也很难保持不跟工业实践脱节。SG20（教育）正试图总结教授和使用现代 C++ 的方法来提供一些帮助。SG15（工具）则可能提供更多支持教学的工具，从而越来越多地发挥重要作用。</p><p>从 C++11 开始，我们对此有了越来越多的认识。例如，Kate Gregory 制作了一些很棒的视频，介绍了如何教授 C++ [Gregory 2015, 2017, 2018]。最近的一些书籍认识到在支持教育方面，不同的受众存在不同的需求，并试图迎头解决这些问题：</p><ul><li>《C++ 程序设计原理与实践》（*Programming: Principles and Practice Using C++*）[Stroustrup 2008a]——这是一本针对刚入门的大学生和自学人士的教科书。</li><li>《C++ 语言导学》（*A Tour of C++*）[Stroustrup 2014d，2018f]——针对经验丰富的程序员的简短概述（200 页）。</li><li>《发现现代 C++》（*Discovering Modern C++*）[Gottschling 2015]——这是一本专门为数学背景较强的学生准备的书。</li></ul><p>我也写了一些半学术性质的论文（<em>Software Development for Infrastructure</em> [Stroustrup 2012] 和 <em>What should we teach software developers? Why?</em> [Stroustrup 2010b]），并在 CppCon 2017 开幕式上作了关于 C++ 教育的主题演讲（<em>Learning and Teaching Modern C++</em> [Stroustrup 2017c]）。</p><p>自 2014 年左右以来，视频和在线课程的使用急剧增加。这对 C++ 的教学来说很有帮助，因为这样就不需要一个中心组织或大量资金的支持。</p><p>以下列出了从 2006 到 2020 年间，与 C++ 语言相关的学术研究成果：</p><ul><li><strong>概念</strong>：泛型编程 [Dehnert and Stepanov 2000]、C++0x 概念 [Gregor et al. 2006]、使用模式 [Dos Reis and Stroustrup 2006]、库设计 [Sutton and Stroustrup 2011]。</li><li><strong>理论与形式化体系</strong>：继承模型 [Wasserrab et al. 2006]、模板和重载 [Dos Reis and Stroustrup 2005a]、模板语义 [Siek and Taha 2006]、对象布局 [Ramananandro et al. 2011]、构造和析构 [Ramananandro et al. 2012]、用于代码处理的表示形式 [Dos Reis and Stroustrup 2009，2011]、资源模型 [Stroustrup et al. 2015]。</li><li><strong>动态查找</strong>：快速动态类型转换 [Gibbs and Stroustrup 2006]、模式匹配 [Solodkyyet et al. 2012]、多重方法 [Pirkelbauer et al. 2010]。</li><li><strong>静态分析</strong>：可靠的表示法 [Yang et al. 2012]、实践经验 [Bessey 2010]。</li><li><strong>性能</strong>：代码膨胀 [Bourdev and Järvi 2006，2011]、异常实现 [Renwicket et al. 2019]。</li><li><strong>语言比较</strong>：泛型编程 [Garcia et al. 2007]。</li><li><strong>并发和并行编程</strong>：内存模型 [Batty et al. 2013，2012，2011]、HPX（一个适用于任何规模的并行和分布式应用程序的通用 C++ 运行时系统 [Kaiser et al. 2009Sept]）、STAPL（自适应泛型并行 C++ 库 [Zandifar et al. 2014]）、TBB（英特尔的任务并行库 [Reinders 2007]）。</li><li><strong>协程</strong>：数据库优化 [Jonathan et al. 2018; Psaropoulos et al. 2017]。</li><li><strong>软件工程</strong>：代码的组织和优化 [Garcia and Stroustrup 2015]、常量表达式求值 [Dos Reis and Stroustrup 2010]</li></ul><p>看起来还有更多的关于 C++ 的学术研究机会，关于语言的特性和技巧（例如，异常处理、编译期编程和资源管理），以及其使用的有效性（例如，静态分析或基于真实世界代码和经验的研究）。</p><p>C++ 社区中最活跃的成员中很少有人会考虑撰写学术论文，写书似乎更受欢迎（例如，[Čukić 2018; Gottschling 2015; Meyers 2014; Stepanov and McJones 2009; Vandevoorde et al. 2018; Williams 2018]）。</p><h2 id="10-4-工具"><a href="#10-4-工具" class="headerlink" title="10.4 工具"></a>10.4 工具</h2><p>与其他语言相比，在 1990 年代初期到中期，C++ 在用于工业用途的工具和编程环境方面做得相当不错。例如，图形用户界面和集成软件开发环境都率先应用于 C++。后来，开发和投资的重点转移到专属语言，例如 Java（Sun）、C#（微软）和 Objective-C（苹果）以及更简单的语言，例如 C（GNU）。</p><p>在我看来，有两个主要原因：</p><ul><li>资金：组织倾向于使用他们可以控制的语言和工具，从而提供比竞争对手更大的差异化优势。从这个角度来看，C++ 由正式的标准委员会控制、强调所有人的利益，这反倒成了一个缺点——某种公地悲剧的变体。</li><li>宏和文本定义：C++ 没有一个简单，可广泛使用的内部表示形式来简化基于源代码的工具构建，并且大量使用宏必然导致程序员看到的跟编译器所分析的有所不同。和 C 一样，C++ 是根据字符序列来定义的，而非根据直接表示抽象且更易于操作的构件来定义。我与 Gabriel Dos Reis 一起定义了这样一个表示形式 [Dos Reis and Stroustrup 2009, 2011]，但事实证明 C++ 社区中面向字符的传统难以克服。当初建造时没有意识到的规范化结构，想通过翻新加上去就难了。</li></ul><p>因此，在 2006–2020 年期间，与其他语言相比，C++ 被支持工具方面的问题严重困扰。但是，随着以下这些工具的涌现，这种情况得到了稍许改善：</p><ul><li>工业级的集成软件开发环境：例如微软的 Visual Studio [Microsoft 2020; VStudio Wikipedia 2020] 和 JetBrains 的 CLion [CLion Wikipedia 2020; JetBrains 2020]。这些环境不仅支持编辑和调试，还支持各种形式的分析和简单的代码转换。</li><li>在线编译器：例如 Compiler Explorer [Godbolt 2016] 和 Wandbox [Wandbox 2016–2020]。这些系统允许从任何浏览器中编译 C++ 程序，有时甚至可以执行。它们可用于实验，检查代码质量，还有比较不同的编译器及编译器和库的不同版本。</li><li>GUI 库和工具：例如 Qt [Qt 1991–2020]、GTKmm [GTKmm 2005–2020] 和 wxWidgets [wxWidgets 1992–2020]。不幸的是，Qt 依赖于元对象协议（meta-object protocol，缩写为 MOP），因此 Qt 程序还不是标准的 ISO C++ 应用。静态反射（<a href="09.md#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）使我们最终能够解决这个问题。C++ 社区的问题不是没有好的 GUI 库，而是太多了，因此会有选择困难。</li><li>分析器：例如 Coverity [Coverity 2002–2020]，Visual Studio 的 C++ Core Guidelines 分析器（<a href="#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）和 Clang Tidy [Clang Tidy 2007–2020]。</li><li>编译器工具支持：例如 LLVM 编译器后端基础设施，可简化代码生成和代码分析 [LLVM 2003–2020]。除了 C++ 本身，这为许多新语言提供了福利。</li><li>构建系统：例如 build2 [Build2 2014–2020] 和 CMake [CMake 2000–2020]，以及 GNUmake[GNUmake 2006–2020]。同样，在没有标准的情况下，选择会有困难。</li><li>包管理器：例如 Conan [Conan 2016–2020] 和 vcpkg [vcpkg 2016–2020]。</li><li>运行时环境：例如 WebAssembly：将 ISO C++ 编译为字节码以在浏览器中部署的系统 [WebAssembly 2017–2020]。</li><li>运行时编译、JIT 和链接：例如 Cling [Cling 2014–2020; Naumann 2012; Naumann et al. 2010] 和 RC++ [RC++ 2010–2020]。</li></ul><p>上面列出的只是一些示例。像往常一样，C++ 用户面临的问题是可选方案的数量众多，例如：[RC++ 2010–2020] 列出了 26 个用于在编译时生成代码的系统，并且有数十个程序包管理器。因此，我们需要的是某种形式的标准化。</p><p>截至 2020 年，工具仍不是 C++ 的强项，但我们正在大范围内取得进展。</p><h2 id="10-5-编程风格"><a href="#10-5-编程风格" class="headerlink" title="10.5 编程风格"></a>10.5 编程风格</h2><p>针对大多数现实问题的最佳解决方案需要组合使用多种技术，这也是 C++ 演进的主要动力。自然地，这让那些声称拥有单个简单最佳解决方案（“编程范式”）的人感到不爽，但是支持多种风格一直是 C++ 的根本优势。考虑一下“绘制所有形状”的例子，这个例子自 Simula 发展早期（绘图设备为湿墨绘图仪）以来就一直用于说明面向对象编程。用 C++20，我们可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw_all</span><span class="hljs-params">(range <span class="hljs-keyword">auto</span>&amp; seq)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (Shape&amp; s : seq)<br>        s.<span class="hljs-built_in">draw</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>该段代码是什么编程范式？</p><ul><li>显然，它是面向对象编程：使用了虚函数和类层次结构。</li><li>显然是泛型编程：使用了模板（通过使用 <code>range</code> 概念进行参数化，我们得到一个模板）。</li><li>显然，这是普通的命令式编程：使用了 <code>for</code> 循环，并按照常规 <code>f(x)</code> 语法定义了一个将要被调用的函数。</li></ul><p>对这个例子我可以进一步展开：<code>Shape</code> 通常具有可变状态；我可以使用 lambda 表达式，也可以调用 C 函数；我可以用 <code>Drawable</code> 的概念对参数进行更多约束。对于各种“更好”的定义，适当的技术组合比我能想到的任何一种单一范式所能提供的解决方案更好。</p><p>C++ 支持多种编程风格（如您坚持，也可以称为“范式”），其背后的想法并不是要让我们选择一种最喜欢的样式进行编程，而是可以将多种风格组合使用，以表达比单一风格更好的解决方案。</p><h3 id="10-5-1-泛型编程"><a href="#10-5-1-泛型编程" class="headerlink" title="10.5.1 泛型编程"></a>10.5.1 泛型编程</h3><p>在 2006 年，许多 C++ 代码仍然是面向对象的风格和 C 风格编程的混合体。自然而然的，到 2020 年仍然有很多类似这样的代码。但是，随着 C++98 的到来，STL 风格的泛型编程（通常称为 GP）变得广为人知，并且用户代码也逐渐开始使用 GP，而不只是简单地使用标准库。C++11 中对 GP 的更好支持为在生产代码中更广泛的使用 GP 提供了极大的便利。但是，C++17 中缺少概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>），这仍然阻碍了 C++ 中泛型编程的使用。</p><p>基本上，所有专家都阅读过 Alex Stepanov 的《编程原本》（<em>Elements of Programming</em>，通常称为 <em>EoP</em>）[Stepanov and McJones 2009]，并受到其影响。</p><p>基于模板的泛型编程是 C++ 标准库的支柱：容器、范围（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）、算法、iostream、文件系统（<a href="08.md#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>）、随机数（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）、线程（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）、锁（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>）、时间（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）（<a href="09.md#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>）、字符串、正则表达式（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）和格式化（<a href="09.md#937-%E6%A0%BC%E5%BC%8F%E5%8C%96">§9.3.7</a>）。</p><h3 id="10-5-2-元编程"><a href="#10-5-2-元编程" class="headerlink" title="10.5.2 元编程"></a>10.5.2 元编程</h3><p>C++ 中的元编程出自泛型编程，因为两者都依赖于模板。它的起源可以追溯到 C++ 模板的早期，当时人们发现模板是图灵完备的 [Vandevoorde and Josuttis 2002; Veldhuizen 2003]，并以某种有用的形式提供编译期纯函数式编程。</p><p>模板元编程（通常称为 TMP）往往非常丑。有时，这种丑陋通过使用宏来掩盖，从而造成了其他问题。TMP 几乎无处不在，这也证明了它确实有用。例如，如果没有元编程，就无法实现 C++14 标准库。许多技巧和实验在 2006 年前就有了，但是 C++11 具有更好的编译器、变参模板（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）和 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>），这些推动了 TMP 成为主流用法。C++ 标准库还增加了更多元编程的支持，比如：编译期选择模板 <code>conditional</code>，允许代码依赖于类型属性的类型特征（type trait）如“能否安全地按位复制类型 X？”（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>），还有 <code>enable_if</code>（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">conditional&lt;(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)&lt;<span class="hljs-number">4</span>),<span class="hljs-type">double</span>,<span class="hljs-type">int</span>&gt;::type x; <span class="hljs-comment">// 如果 int 小，就用 double</span><br></code></pre></td></tr></table></figure><p>计算类型以精确地反映需求，这可以说是 TMP 的本质。我们还可以计算值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">unsigned</span> n&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fac</span> &#123;<br>    <span class="hljs-keyword">enum</span> &#123; val = n * fac&lt;n<span class="hljs-number">-1</span>&gt;::val &#125;;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fac</span>&lt;<span class="hljs-number">0</span>&gt; &#123;   <span class="hljs-comment">// 0 的特化：fac&lt;0&gt; 为 1</span><br>    <span class="hljs-keyword">enum</span> &#123; val = <span class="hljs-number">1</span> &#125;;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> fac7 = fac&lt;<span class="hljs-number">7</span>&gt;::val;  <span class="hljs-comment">// 5040</span><br></code></pre></td></tr></table></figure><p>注意，模板特化在其中起着关键作用，这一点在大多数 TMP 中是必不可少的。它已用于计算复杂得多的数值，也可以表示控制流（例如，在编译期计算决策表，进行循环展开，等等）。在 C++98 [Stroustrup 2007] 中，模板特化是一个很大程度上没有得到足够重视的特性。</p><p>在设计精巧的库中以及在现实世界的代码中，诸如 <code>enable_if</code> 之类的原语已成为数百甚至数千行的程序的基础。TMP 的早期示例包含一个完整的编译期 Lisp 解释器 [Czarnecki and Eisenecker 2000]。此类代码极难调试，而维护它们更是可怕的差事。我见识过这样的情形，几百行基于 TMP 的代码（不得不承认非常聪明），在一台 30G 内存的计算机上编译需要好几分钟的时间，由于内存不足而导致最终编译失败。即使是简单的错误，编译器的错误信息也可以达到几千行。然而，TMP 仍被广泛使用。理智的程序员发现，尽管 TMP 有着各种问题，仍比起其他方案要好。我见过 TMP 生成的代码比我认为一个合格的人类程序员会手写的汇编代码要更好。</p><p>因此，问题变成了如何更好地满足这种需求。当人们开始把像 <code>fac&lt;&gt;</code> 这样的代码视为正常时，我为此而感到担心。这不是表达普通数值算法的好方法。概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和编译期求值函数（<code>constexpr</code>（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>））可以大大简化元编程。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (n&gt;<span class="hljs-number">1</span>) r*=n--;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> fac7 = <span class="hljs-built_in">fac</span>(<span class="hljs-number">7</span>);  <span class="hljs-comment">// 5040</span><br></code></pre></td></tr></table></figure><p>这个例子说明，当我们需要一个值时，函数是最佳的计算方式，即使——尤其——在编译期。传统<strong>模板</strong>元编程最好只保留用于计算新的类型和控制结构。</p><p>Jaakko Järvi 的 Boost.Lambda [Järvi and Powell 2002; Järvi et al. 2003a] 是 TMP 的早期使用案例，它帮助说服了人们 lambda 表达式是有用的，并且他们需要直接的语言支持。</p><p>Boost 元编程库 Boost.MPL [Gurtovoy and Abrahams 2002–2020] 展示了传统 TMP 的最好和最坏的方面。更现代的库 Boost.Hana [Boost Hana 2015–2020] 使用 <code>constexpr</code> 函数。WG21 的 SG7（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）试图开发一种更好的标准元编程系统，其中还包括编译期反射（<a href="09.md#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）。</p><h2 id="10-6-编码指南"><a href="#10-6-编码指南" class="headerlink" title="10.6 编码指南"></a>10.6 编码指南</h2><p>我对 C++ 语言的最终目标是：</p><ul><li>使用和学习上都要比 C 或当前的 C++ 容易得多</li><li>完全类型安全——没有隐式类型违规，没有悬空指针</li><li>完全资源安全——没有泄漏，不需要垃圾收集器</li><li>为其构建工具要相对简单——不要有宏</li><li>跟当前 C++ 一样快或更快——零开销原则</li><li>性能可预测——适用于嵌入式系统</li><li>表达力不亚于当前的 C++——很好地处理硬件</li></ul><p>这和《C++ 语言的设计和演化》[Stroustrup 1994] 及更早版本中阐述的设计目标并没有太多不同。显然，这是一项艰巨的任务，并且与较旧的 C 和 C++ 的多数用法不兼容。</p><p>最早，在 C++ 还是“带类的 C”的时候，人们就建议创建语言的安全子集，并使用编译器开关来强制执行这种安全性。但是，由于许多原因中的某一个原因，这些建议失败了：</p><ul><li>没有足够的人在“安全”的定义上达成一致。</li><li>不安全特性（对每种“不安全”的定义来说）是构建基本安全抽象的基础。</li><li>安全子集的表达能力不足。</li><li>安全子集效率低下。</li></ul><p>第二个原因意味着，你不能仅仅通过禁止不安全的功能来定义一个安全的 C++。“通过限制以达到完美”这个方法，对于编程语言的设计来说，在极其有限的场合下才能发挥作用。你需要考虑那些一般来说不安全但有安全用途的特性的使用场景和特征。此外，该标准不能放弃向后兼容（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>），所以我们需要一种不同的方法。</p><p>从一开始，C++ 就采用了不同的哲学 [Stroustrup 1994]：</p><blockquote><p>让良好的编程成为可能比防止错误更重要。</p></blockquote><p>这意味着我们需要“良好使用”的指南，而不是语言规则。但是，为了在工业规模上有用，指南必须可以通过工具强制执行。例如，从 C 和 C++ 的早期开始，我们就知道悬空指针存在的问题。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>&#125;;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">delete</span>[] p;    <span class="hljs-comment">// 删除 p 指向的数组</span><br>               <span class="hljs-comment">// 现在 p 没有指向有效对象，处于“悬空”状态</span><br><span class="hljs-comment">// ...</span><br>*p = <span class="hljs-number">7</span>;        <span class="hljs-comment">// 多半会发生灾难</span><br></code></pre></td></tr></table></figure><p>虽然许多程序员已经开发出防止指针悬空的技术。但是，在大多数大型代码库中，悬空指针仍然是一个主要问题，安全性问题比过去更加关键。一些悬空的指针可以作为安全漏洞被利用。</p><h3 id="10-6-1-一般方法"><a href="#10-6-1-一般方法" class="headerlink" title="10.6.1 一般方法"></a>10.6.1 一般方法</h3><p>在 2004 年，我帮助制定了一套用于飞行控制软件 [Lockheed Martin Corporation 2005] 的编码指南，这套指南接近于我对安全性、灵活性和性能的构想。2014 年，我开始编写一套编码指南，以解决这一问题，并在更广泛的范围内应用。这一方面是为了回应对用好 C++11 的实用指南的强烈需求，另外一方面是有人认为的好的 C++11 让我看着害怕。与人们交谈后，我很快发现了一个明显的事实：我并不是唯一沿着这样的路线思考和工作的人。因此，一些经验丰富的 C++ 程序员、工具制作者和库构建者齐心协力，与来自 C++ 社区的众多参与者一起启动了 <strong>C++ 核心指南</strong>项目 [Stroustrup and Sutter 2014–2020]。该项目是开源的（MIT 许可证），贡献者列表可以在 GitHub 上找到。早期，来自摩根士丹利（主要是我）、微软（主要是 Herb Sutter、Gabriel Dos Reis 和 Neil Macintosh）、Red Hat（主要是 Jonathan Wakely）、CERN、Facebook 和谷歌的贡献者都做出了突出贡献。</p><p>核心指南绝不是唯一的 C++ 编码指南项目，但却是最突出、最雄心勃勃的。它们的目标明确而清晰，那就是显著提升 C++ 代码的质量。例如，早在 Bjarne Stroustrup、Herb Sutter 和 Gabriel Dos Reis 的论文中 [Stroustrup et al. 2015] 就阐明了关于完全类型和资源安全的理想和基础模型。</p><p>为了实现这些雄心勃勃的目标，我们采用了一种“鸡尾酒式”的混合方法：</p><ul><li><strong>规则</strong>：一套庞大的规则集，意图在 C++ 里实现使用上的类型安全和资源安全，推荐那些已知的有效实践，并禁止已知的错误和低效的来源。</li><li><strong>基础库</strong>：一组库组件，使程序员可以有效的编写低层次程序，而无需使用已知的容易出错的功能，并且从总体上为编程提供更高层次的基础。大多数组件来自标准库，其中一些来自以 ISO 标准 C++ 编写的小型指南支持库（Guidelines Support Library，GSL）。</li><li><strong>静态分析</strong>：检测违规行为、并强制执行指南关键部分的工具。</li></ul><p>这些方法中的每一种都有很长的历史，但是每一项都无法单独在工业规模上解决这些问题。例如，我是静态分析的忠实拥护者，但是如果程序员使用动态链接的方式在一个单独编译的程序中编写任意复杂的代码，那么我最感兴趣的分析算法（例如，消除悬空指针）是不能求解成功的。这里的“不能”是指“一般说来，理论上是不可能的”，以及“对于工业规模的程序而言在计算上过于昂贵”。</p><p>基本方式不是简单的限制，而是我称之为“超集的子集”或 SELL 的方法 [Stroustrup 2005]：</p><ul><li>首先，通过库功能对语言进行扩展，从而为正确的使用语言奠定坚实的基础。</li><li>然后，通过删除不安全、易出错及开销过高的功能来设置子集。</li></ul><p>对于库，我们主要依赖标准库的各个部分，例如 <code>variant</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）和 <code>vector</code>。小型<strong>指南支持库</strong>（GSL）提供了类型安全的访问支持，例如 <code>span</code> 可以提供在给定类型的连续元素序列上的带范围检查的访问（<a href="09.md#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>）。我们的想法是通过将 GSL 吸收到 ISO 标准库中，从而最终也就不需要它了。例如，<code>span</code> 已被添加到 C++20 标准库中。当时机成熟时，GSL 中对于契约的微弱支持也应当被合适的契约实现所替代（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）。</p><h3 id="10-6-2-静态分析"><a href="#10-6-2-静态分析" class="headerlink" title="10.6.2 静态分析"></a>10.6.2 静态分析</h3><p>为了能规模化，静态分析完全是局部的（一次仅一个函数或一个类）。最难的问题与对象的生命周期有关。RAII 是必不可少的：我们已经不止一次的看到，手动资源管理的方法在很多语言中都很容易出错。此外，也有很多现存的程序，以一种有原则的方式使用指针和迭代器。我们必须接受此类使用方式。要使一个程序安全很容易，我们只需禁止一切不安全的功能。然而，保持 C++ 的表现力和性能是核心指南的目标之一，所以我们不能仅仅通过限制来获得安全。我们的目的是一个更好的 C++，而不是一个缓慢或被阉割的子集。</p><p>通过阐明原则、让那些优秀的做法更加显而易见、以及对已知问题进行机械化检查，这些指南可以帮助我们把教学的重点放在那些让 C++ 更有效的方面。这些指南还有助于减轻对语言本身的压力，以适应最新的发展趋势。</p><p>对于对象的生命周期，主要有两个要求：</p><ul><li>切勿指向超出范围的对象。</li><li>切勿访问无效的对象。</li></ul><p>考虑以下“基础模型”论文中的一个例子 [Stroustrup et al. 2015]）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> glob = <span class="hljs-number">666</span>;<br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">4</span>;          <span class="hljs-comment">// 局部变量</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &amp;x;          <span class="hljs-comment">// 不行，会指向一个被销毁的栈帧</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &amp;glob ;      <span class="hljs-comment">// 可以，指向某个“永远存在”的对象</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">7</span>&#125;;  <span class="hljs-comment">// 可以（算是可以吧：不悬空，</span><br>                        <span class="hljs-comment">//       但是把所有者作为 int* 返回了）</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> p;           <span class="hljs-comment">// 可以，来自调用者</span><br>&#125;<br></code></pre></td></tr></table></figure><p>指针指向已知会超过函数生命周期的对象（例如，作为参数被传递到函数中），我们可以返回它，但对于指向局部资源的指针就不行。在遵循该指南的程序中，我们可以确保作为参数的指针指向某资源或为 <code>nullptr</code>。</p><p>为避免泄漏，上面示例中的“裸 <code>new</code>”操作应当通过使用资源句柄（RAII）或所有权标注来消除。</p><p>如果指针所指向的对象已重新分配，则该指针会变为无效。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; v = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br><span class="hljs-type">int</span>* p = &amp;v[<span class="hljs-number">2</span>];<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// v 的元素可能会被重新分配</span><br>*p = <span class="hljs-number">5</span>;         <span class="hljs-comment">// 错误：p 可能已失效</span><br><span class="hljs-type">int</span>* q = &amp;v[<span class="hljs-number">2</span>];<br>v.<span class="hljs-built_in">clear</span>();      <span class="hljs-comment">// v 所有的元素都被删除</span><br>*q = <span class="hljs-number">7</span>;         <span class="hljs-comment">// 错误：q 无效</span><br></code></pre></td></tr></table></figure><p>无效检查甚至比检查简单的悬空指针还要困难，因为很难确定哪个函数会移动对象以及是否将其视为失效（指针 <code>p</code> 仍然指向某个东西，但从概念上讲已经指向了完全不同的元素）。尚不清楚在没有标注或非本地状态的情况下，静态分析器是否可以完全处理无效检查。在最初的实现中，每个将对象作为非 <code>const</code> 操作的函数都被假定为会使指针无效，但这太保守了，导致了太多的误报。最初，关于对象生命周期检查的详细规范是由 Herb Sutter [Sutter 2019] 编写的，并由他在微软的同事实现。</p><p>范围检查和 <code>nullptr</code> 检查是通过库支持（GSL）完成的。然后使用静态分析来确保库的使用是一致的。</p><p>静态分析设想最早是由 Neil Macintosh 实现的，目前已作为微软 Visual Studio 的一部分进行发布。有一些检查规则已经成为了 Clang 和 HSR 的 Cevelop（Eclipse 插件）[Cevelop 2014–2020] 的一部分。一些课程和书籍中都加入了关于这些规则的介绍（例如 [Stroustrup 2018f]）。</p><p>核心指南是为逐步和有选择地采用而设计的。因此，我们看到其中一部分在工业和教育领域被广泛采用，但很少被完全采用。要想完全采用，良好的工具支持必不可少。</p>]]></content>
    
    
    <summary type="html">2020 年的 C++</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_11/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_11/</id>
    <published>2024-10-29T13:21:09.465Z</published>
    <updated>2024-10-29T13:26:54.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-回顾"><a href="#11-回顾" class="headerlink" title="11. 回顾"></a>11. 回顾</h1><p>编程语言设计的最终目的，是在程序员交付有用的程序的同时，改进他们的思考方式和工作方式。尽管有些程序语言被视为“只是实验性的”，但是一旦程序语言被用于和语言本身无关的实际工作，这门语言的设计者们就应对他们的用户承担相应的责任。正确、合适、稳定性和足够的性能就成为重要的课题。对 C++ 来说，这些事情在 1979 年仅用了 6 个月就发生了。C++ 已经茁壮成长了 40 年之久。为什么能成功？又是如何成功的？</p><p>我之前的 HOPL 论文 [Stroustrup 1993, 2007] 以 1991 到 2006 年的观点回答了这些问题。从那时起发生的变化，除了语言的特性和组件库之外，主要是标准委员会的作用和影响（<a href="03.md#3-c-%E6%A0%87%E5%87%86%E5%A7%94%E5%91%98%E4%BC%9A">§3</a>）。</p><p>这里，我主要考虑：</p><ul><li><a href="#111-c-%E6%A8%A1%E5%9E%8B">§11.1</a>：C++ 模型</li><li><a href="#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>：技术上的成功</li><li><a href="#113-%E9%9C%80%E8%A6%81%E5%B7%A5%E4%BD%9C%E7%9A%84%E9%A2%86%E5%9F%9F">§11.3</a>：需要努力的领域</li><li><a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>：教训</li><li><a href="#115-%E6%9C%AA%E6%9D%A5">§11.5</a>：未来</li></ul><h2 id="11-1-C-模型"><a href="#11-1-C-模型" class="headerlink" title="11.1 C++ 模型"></a>11.1 C++ 模型</h2><p>C++ 为高要求的应用而生，并成长为一种重要的编程语言——在某些领域，它甚至是主导语言。这是在没有认真的商业支持和没有营销的情况下达到的。许多现代语言拷贝了它的特性和理念。关键的语言技术贡献有：</p><ul><li>静态类型系统，对内置类型和用户定义类型具有同等支持（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）</li><li>既有值语义，又有引用语义（<a href="04.md#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>系统和通用资源管理（RAII）（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>）</li><li>支持高效的面向对象编程（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）</li><li>支持灵活的和高效的泛型编程（<a href="10.md#1051-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B">§10.5.1</a>）</li><li>支持编译期编程（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）</li><li>直接使用机器和操作系统资源（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>）</li><li>通过库提供并发支持（往往使用内建函数实现）（<a href="04.md#41-c11%E5%B9%B6%E5%8F%91%E6%94%AF%E6%8C%81">§4.1</a>）（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）</li></ul><p>相较于目前占主导地位的依靠垃圾收集器和广泛运行期支持的“托管”模式——典型的如 Java、C#、Python 和 JavaScript（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）等语言——C++ 提供了一种不同的、对许多应用领域来说更好的软件模式。我所说的 “更好”是指更容易编写、更有可能正确、更可维护、使用更少的内存、耗能更低和更快。</p><p>这些贡献的领域是互帮互助的，举例来说：</p><ul><li>引用语义（例如，指针和智能指针）支持使用值语义（例如，<code>jthread</code> 和 <code>vector</code>）高效地实现高级类型。</li><li>对内置类型和用户定义类型的统一规则，简化了泛型编程（内置类型不是特殊情况）。</li><li>编译期编程使得一系列的抽象技术因为能够有效使用硬件而变得负担得起。</li><li>RAII 允许使用用户定义的类型，而无需采取特定的操作来支持其实现对资源（包括非内存资源）的使用。</li></ul><h2 id="11-2-技术上的成功"><a href="#11-2-技术上的成功" class="headerlink" title="11.2 技术上的成功"></a>11.2 技术上的成功</h2><p>C++ 成功的根本原因很简单——它填补了编程领域的一个重要的“生态位”：</p><blockquote><p>需要有效使用硬件和管理高复杂性的应用程序</p></blockquote><p>如果你能负担得起“浪费”25% 甚至 99% 的硬件机能，那可供选择的编程语言和环境就多了。如果你的底层模块需要仅仅千行的底层代码，C 语言或者汇编语言可以效劳。40 年以来，C++ 的独特“生态位”足以使其社区不断成长。</p><p>这里有一个现代（2014 年）的 C++ 总结：</p><blockquote><ul><li>直接映射到硬件<ul><li>指令和基本数据类型</li><li>最初来自于 C 语言</li></ul></li><li>零开销抽象<ul><li>带构造和析构函数的类、继承、泛型编程、函数对象</li><li>最初来自于 Simula 语言（当时还不是零开销的）</li></ul></li></ul></blockquote><p>Simula 开创了许多抽象机制和一个灵活的类型系统，但在运行时间和空间成本上，它们带来了沉重的代价。与 1995 年的 C++（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）描述相比，关注点从编程技术转向了问题领域。这更多的是解释风格和人们兴趣的不同，而不是语言设计的不同。这两个总结现在和当时都是准确的。</p><p>在过去几十年的基础上，21 世纪的关键技术进步包括：</p><ul><li>内存模型（<a href="04.md#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>）</li><li>类型安全的并发支持：线程和锁（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）、并行算法（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）、汇合线程（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）</li><li>类型推导：<code>auto</code>（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）、概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）、模板参数推导（<a href="08.md#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）、变参模板（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）</li><li>简化使用：<code>auto</code>（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）、范围 <code>for</code>（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）、并行算法（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）、范围（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）、lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）</li><li>移动语义（<a href="04.md#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>编译期编程：<code>constexpr</code>（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）、编译期循环（<a href="05.md#55-constexpr-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">§5.5</a>）、可确保的编译期求值和容器（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）、元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）</li><li>泛型编程：STL（<a href="10.md#1051-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B">§10.5.1</a>）、概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）、用户定义类型作为模板参数（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）、lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）</li><li>元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）</li></ul><p>它们都与零开销原则相关，但最后两个有点令人惊讶，因为在 2006 至 2020 年期间内，C++ 对它们的支持并不完全。</p><p>假如 C++ 分裂成互不兼容的方言，或者成为你无法长期依赖的东西，以上这些就都失去意义了：</p><ul><li>稳定性和兼容性至关重要（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>）（<a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>）</li></ul><p>新特性（C++11 以来）带来了标准库的改进（例如：<code>unique_ptr</code>、<code>chrono</code>、<code>format</code> 和 <code>scoped_lock</code>），也带来了很多其他库的改进。</p><p>C++ 的目的是成为构建应用程序的工具，许多用 C++ 开发的伟大应用程序，例如在（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）和（<a href="10.md#101-c-%E7%94%A8%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88">§10.1</a>）章节提到的那些，是 C++ 真正的成功。</p><h2 id="11-3-需要工作的领域"><a href="#11-3-需要工作的领域" class="headerlink" title="11.3 需要工作的领域"></a>11.3 需要工作的领域</h2><p>没有一种语言对所有人和所有事都是完美的。对于这点，没有人比既懂多种语言、又严肃使用其中一种并努力支持它的人了解更多了。阻碍进步的很少是单纯的无知。相反，重大改进的主要障碍是缺乏方向、缺乏开发资源以及害怕破坏现有代码。</p><p>C++ 苦于诞生过早，在现代化的集成开发环境（IDE）、构建系统、图形界面（GUI）系统和 Unicode 问世之前就已经诞生了。我期待 C++ 能慢慢赶上来。举例来说：</p><ul><li><strong>工具使用</strong>：从 C 语言开始，用字符和词法标记来说明语义，以及用 <code>#include</code> 和宏来组织源代码，这一直是有效工具建设的主要障碍。模块应该会有所帮助（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>），而且是有可能为 C++ 设计出一个合理的内部表示的 [Dos Reis and Stroustrup 2009, 2011]。</li><li><strong>教育</strong>：今天的 C++ 教学大多仍然过时和落后（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）是对实践进行现代化的一种方法。WG21 的教育研究小组（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）和许多面向教育的会议报告表明，这些问题得到了重视和并正在解决中。</li><li><strong>打包和发布</strong>：C++ 诞生时，由独立开发、维护的模块组成的软件并不常见。今天，已经有了用于 C++ 的构建系统和打包管理程序。然而，还没有一个是标准的，有些难以用于简单的任务，有些则不够通用，不能应对使用 C++ 构建的大规模系统。我在 2017 年的 CppCon 主题演讲中提出了这个问题，并向社区发起挑战 [Stroustrup 2017c] 来解决它。我认为我们正在看到进展。此外，C++ 社区还缺少一个标准的地方来寻找有用的库。Boost [Boost 1998–2020] 是解决这个问题的一个努力，GitHub 正逐渐成为一个通用的资源库。但要达到让相对的新手能找到、下载、安装和运行几个主流的库这样的方便程度，我们的路还很长。</li><li><strong>字符集和图形</strong>：C++ 语言和标准库依赖于 ASCII，但大多数应用程序使用某种形式的 Unicode。WG21 工作组现在有一个研究小组试图找到一个方式去标准化 Unicode 支持（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。缺乏标准的图形和图形界面则是更难的问题。</li><li><strong>清理陈年烂账</strong>：这非常困难，而且令人不快。例如，我们知道内置类型之间的隐式窄化转换会导致无穷无尽的问题（<a href="09.md#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>），但是有数以万亿计的 C++ 代码行，这些代码以难以预测的方式依赖于那些转换。试图通过添加“更现代”的特性来替换旧特性来进行改进很容易成为 N+1 问题（<a href="04.md#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）的牺牲品。改进的工具（例如静态程序分析和程序转换）提供了希望。</li></ul><p>大型语言社区所面临的挑战是多种多样的，不可能有单一而简单的解决方案。这不仅仅是一个语法、类型理论或基本语言设计的问题。有些问题是商业性的。在工业规模上取得成功所需的各种技能范围令人望而生畏。时间会证明，C++ 社区是否能处理好所有这些问题，以及更多的其他问题。这点上我适度乐观，因为现在所有领域都已经有一些积极的举措（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。</p><h2 id="11-4-教训"><a href="#11-4-教训" class="headerlink" title="11.4 教训"></a>11.4 教训</h2><p>C++ 是由一个大型委员会控制的，成员多种多样，并且会不断变化（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。因此，除了技术问题外，我们必须考虑在语言的演化过程中什么是有效的：</p><ul><li><strong>问题驱动</strong>：C++ 开发应该被那些真实世界中的具体问题的需求所驱动。</li><li><strong>简单</strong>：C++ 应该从简单、高效、易用的解决方案中进行推广而成长。</li><li><strong>高效</strong>：C++ 语言和标准库应该遵循零开销原则。</li><li><strong>稳定性</strong>：不要搞砸我的代码！</li></ul><p>大部分（全部？）C++ 最成功部分的开发都遵从了那些“经验法则”。它们自然会限制语言的发展范围，但这是好事。C++ 并不意味着对所有的人都是无所不能的。此外，这些原则迫使 C++ 在现实世界的挑战中相对缓慢地成长，并从反馈中受益。也请参见《C++ 语言的设计和演化》中的其他“经验法则” [Stroustrup 1994] 和我的 HOPL2 论文 [Stroustrup 1993]。这里面一直有连续性。</p><p>相比之下，一个功能如果设计时没有明确专注在解决大部分开发者实际面临的问题上，那它通常会失败：</p><ul><li><strong>只为专家</strong>：某个功能从开始的时候就要满足所有专家的需要。</li><li><strong>模仿</strong>：我们需要这个功能，因为它在另外某个语言里很流行。</li><li><strong>理论性</strong>：语言理论里说语言里一定要有这个特性。</li><li><strong>革命性</strong>：此功能非常重要，以至于我们必须打破兼容性，或者摒弃那些不好的老方法。</li></ul><p>我的结论是，尽早确定方向和期望至关重要。稍晚一些，就会有太多的人有太多的不同意见，因而无法达成一套连贯而一致的想法。</p><p>给定一个方向和一组原则，一种语言可以基于不同的工具来发展，如反馈、用户体验、实验和理论。这是好的工程方法；反之，则是无原则的实用主义或教条的理想主义。</p><p>C++ 标准委员会的章程几乎只关注语言和库的设计。这是有局限性的。一直以来，像动态链接、构建系统和静态分析之类的重要主题大多被忽略了。这是个错误。工具是软件开发人员世界的一个重要组成部分，要是能不把它们置于语言设计的外围就好了。</p><p>热衷于各种不同的想法具有危险性。在 2018 年的一篇论文 [Stroustrup 2018d] 中，我列出了 51 条最近的提案：</p><blockquote><p>我列出了我认为有可能显著改变我们编写代码方式的论文，每一篇对教学、维护和编码指导都有重要的影响，其中许多对实现也有影响。</p><p>单独来说，许多（大多数）提案都是有道理的，但是放在一起却是疯狂的，甚至足以危及 C++ 的未来。</p></blockquote><p>那篇论文的题目是《记住瓦萨号！》（*Remember the Vasa!*）。瓦萨号是 17 世纪瑞典的一艘宏伟战舰，由于设计上不断后期添加以及测试不充分，在首航时就沉没在斯德哥尔摩港。在 1990 年代，委员会经常提醒自己记得瓦萨号，但在 2010 年代，这一教训似乎已经被遗忘。</p><p>为了对委员会的流程进行组织约束，方向组提出 C++ 程序员的“权利法案” [Dawes et al. 2018]：</p><ol><li><strong>编译期稳定性</strong>：新版本标准中的每一个重要行为变化都可以被支持以前版本的编译器检测到。</li><li><strong>链接期稳定性</strong>：除极少数情况外，应避免 ABI 兼容性破坏，而且这些情况应被很好地记录下来并有书面理由支持。</li><li><strong>编译期性能稳定性</strong>：更改不会导致现有代码的编译时间开销有明显增加。</li><li><strong>运行期性能稳定性</strong>：更改不会导致现有代码的运行时间开销有明显增加。</li><li><strong>进步</strong>：标准的每一次修订都会为某些重要的编程活动提供更好的支持，或为某些重要编程群体提供更好的支持。</li><li><strong>简单性</strong>：每一次对标准的修订都会简化某些重要的编程活动。</li><li><strong>准时性</strong>：每一次标准的修订都会按照公布的时间表按时交付。</li></ol><p>接下来的几十年，我们将会看到结果到底怎么样。</p><h2 id="11-5-未来"><a href="#11-5-未来" class="headerlink" title="11.5 未来"></a>11.5 未来</h2><p>从近期来说，C++20 会像 C++11 那样，让 C++ 社区受益良多。在 2020 年 2 月的布拉格会议上，委员会对 C++20 进行了定稿，也投票同意了 Ville Voutilainen 的“C++23 大胆计划” [Voutilainen 2019b]：</p><p>“在 C++23 努力做到以下几点：”</p><ul><li>对协程的库支持（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）</li><li>模块化的标准库（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）</li><li>通用异步计算模型（执行器）（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）</li><li>网络（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）</li></ul><p>注意关注点是在库上。“同时也在以下方面取得进展：”</p><ul><li>静态反射功能（<a href="09.md#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）</li><li>函数式编程风格的模式匹配（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）</li><li>契约（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）</li></ul><p>鉴于这些议题的工作已经相当深入，委员会有可能会完成大部分工作。这一大群充满热情的人还能拿出什么东西并达成共识，就不那么容易预测了。对于未来几年，方向小组（我是其中的一员）提到了一些有希望进一步开展工作的领域 [Hinnant et al. 2020]：</p><ul><li>改进 Unicode 的支持</li><li>支持简单图形和简单用户交互</li><li>支持新类型的硬件</li><li>探索错误处理的更好表达方式和实现方法</li></ul><p>在委员会之外，我期望在构建系统、包管理和静态分析方面取得重大进展（<a href="10.md#104-%E5%B7%A5%E5%85%B7">§10.4</a>）。</p><p>再往后的五年、十年或更远的未来，我在预测水晶球里就有点看不清了。在这个时间范围内，我们需要着眼于根本，而不是具体的语言特性。我希望标准委员会能注意到学到的教训（<a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>），并把重点放在根本上（<a href="#111-c-%E6%A8%A1%E5%9E%8B">§11.1</a>）：</p><ul><li>把完全资源安全和类型安全的 C++ 作为追求目标</li><li>很好地支持各种各样的硬件</li><li>保持 C++ 的稳定性记录（兼容性）</li></ul><p>保持稳定性需要在关注兼容性的同时，抵制试图通过添加大量“完美”特性来取代不完美或不时髦的旧方式来大幅改善 C++ 的冲动。新的特性总是会带来意外（有些令人愉快，有些则不那么令人愉快），旧的特性不会简单地消失。记住瓦萨号！[Stroustrup 2018d]（<a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>）。很多情况下，库、指南和工具是比修改语言更好的方法。</p><p>对于单线程计算来说，硬件已无法变得更快，所以对效率的重视将持续存在，而有效支持各种形式的并发和并行的压力将不断增加（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。专用硬件将大量涌现（例如，各种内存架构和特殊用途的处理器）；这将使 C++ 这样的、可以利用这些硬件的语言受益。唯一比硬件性能增长更快的是人们的期望。</p><p>随着系统越来越复杂，开销可负担的抽象机制的重要性也在增加。对于依赖实时交互的系统，可预测的性能是至关重要的（例如，许多实时系统禁止使用自由存储（动态内存））。</p><p>随着我们对计算机化系统的依赖程度的增加、高手黑客数量的增多，安全问题只会越来越重要。为了防御，我看好硬件保护，看好更结构化、能支持更好的静态分析的系统，而非无休止的临时运行期检查和低级代码。</p><p>语言和系统之间的互操作性仍会至关重要；很少有大系统会只用一种语言来编写。</p><p>随着系统变得越来越复杂，对可靠性的要求也越来越高，对设计和编码质量的需求也急剧增加。我认为 C++ 已经为此做好了充分的准备，C++23 的计划是要进一步加强它。然而，仅靠语言特性是不足以满足未来需求的。我们需要有工具支持的使用指南，以确保语言的有效使用（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。特别是，我们需要确保完全的类型安全和资源安全，这必须反映在教育中。为了蓬勃发展，C++ 需要为新手提供更好的教育材料，也需要帮助有经验的程序员掌握现代 C++。仅仅介绍奇技淫巧和高级用法是不够的，而且反而会因为增强了 C++ 的复杂性名声而对语言造成伤害。</p><p>由于种种原因，我们需要简化大多数的 C++ 使用的场景。C++ 的演进已经使之成为可能，而我预计这一趋势将继续下去（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）。改进的优化器——有能力利用代码中使用的类型系统和抽象——让优化这件事变得不同了。在过去的几年里，这极大地改变了我优化代码的方式。我从放弃精巧而复杂的东西开始，那是错误的藏身之处；并且，如果我难以理解发生了什么，编译器和优化器也会如此。我发现，这种方法通常会给我带来从适度到惊人的性能提高，同时也简化了未来的维护。只有当这种方法不能给我带来我想要的性能时，我才会求助于高级（又称复杂）的数据结构和算法。这是 C++ 抽象机制设计上的一大胜利。</p><p>我期待着看到用 C++ 构建更多令人兴奋的应用程序，并看到新的编程惯用法和设计技巧的发展。</p><p>我也希望其他语言能从 C++ 的成功中学习。假如从 C++ 的演化中吸取的经验教训仅局限于 C++ 社区，那将是可悲的。我希望并期待在其他语言和系统中看到 C++ 模型的关键方面，这将是一个真正的成功衡量标准。在一定程度上，这已经发生了（<a href="02.md#24-%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80">§2.4</a>）。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>我痛苦地意识到</p><ul><li>这篇论文太长了。</li><li>对大多数技术主题的描述都省略了很多可以看作是根本的内容。很多情况下，许多人经年累月的工作会被简化为一页甚至一句话。特别是，我忽略了并发性这个极其重要的话题；它应该有一篇专门的长篇论文来进行详述。</li></ul><p>感谢让 C++ 成功的数以百万计的程序员，他们创建的应用是我们这个世界的关键部件。</p><p>感谢本文草稿的审稿人，包括 Al Aho、A. Bratterud、Shigeru Chiba、J. Daniel Garcia、Brent Hailpern、Howard Hinnant、Roger Orr、Aaron Satlow、Yannis Smaragdakis、David Vandevoorde、J.C. Van Winkel 和 Michael Wong。本文的完整性和准确性在很大程度上依靠这些审稿人。当然，错误归我自己。</p><p>感谢 Guy Steele 帮我顺利解决了 LaTex 和 BibTex 中的谜团，把文章引用做到满足 ACM 要求的形式。</p><p>感谢所有在标准上努力工作的人。还有很多我没有提到的名字，可以在 WG21 论文的作者和这些论文的致谢部分中找到。我参考和引用的许多“P”和“N”编号的论文保存在 <a href="http://open-std.org/jtc1/sc22/wg21/docs/papers/">open-std.org&#x2F;jtc1&#x2F;sc22&#x2F;wg21&#x2F;docs&#x2F;papers&#x2F;</a>。没有这些论文，本文的一些内容就会过度依赖我的记忆了。</p>]]></content>
    
    
    <summary type="html">回顾</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_08/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_08/</id>
    <published>2024-10-29T13:21:09.464Z</published>
    <updated>2024-10-29T13:26:14.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-C-17：大海迷航"><a href="#8-C-17：大海迷航" class="headerlink" title="8. C++17：大海迷航"></a>8. C++17：大海迷航</h1><p>在经过 C++14 这个小版本标准之后，C++17 [Smith 2017] 原本被看作是一个大版本。C++17 有很多新的特性，但没有一个我认为称得上重大。尽管我们已经有给 C++11 和 C++14 带来成功的工作流程，标准社区也更丰富、更强大、更热情，但对于 C++17 的关键问题是：为什么所有的辛劳却没有带来更显著的改进？</p><p>C++17 有大约 21 个新的语言特性（取决于你的计数方式），包括：</p><ul><li>构造函数模板参数推导——简化对象定义（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）</li><li>推导指引——解决构造函数模板参数推导歧义的明确写法（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）</li><li>结构化绑定——简化写法并消除一种未初始化变量的来源（<a href="#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）</li><li><code>inline</code> 变量——简化了那些仅有头文件的库实现中的静态分配变量的使用 [Finkel and Smith 2016]</li><li>折叠表达式——简化变参模板的一些用法 [Sutton and Smith 2014]</li><li>条件中的显式测试——有点像 for 语句中的条件（<a href="#87-%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%98%BE%E5%BC%8F%E6%B5%8B%E8%AF%95">§8.7</a>）</li><li>保证的复制消除——去除了很多不必要的拷贝操作 [Smith 2015]</li><li>更严格的表达式求值顺序——防止了一些细微的求值顺序错误 [Dos Reis et al. 2016b]</li><li><code>auto</code> 当作模板参数类型——值模板参数的类型推导 [Touton and Spertus 2016]</li><li>捕捉常见错误的标准属性——<code>[[maybe_unused]]</code>、<code>[[nodiscard]]</code> 和 <code>[[fallthrough]]</code> [Tomazos 2015]</li><li>十六进制浮点字面量 [Köppe 2016a]</li><li>常量表达式 <code>if</code>——简化编译期求值的代码 [Voutilainen and Vandevoorde 2016]</li></ul><p>不幸的是，这并不是完整的功能扩展列表。相当一部分是如此之小，我们很难简单地描述它们。</p><p>C++17 标准库中增加了大约 13 个新特性，并加上了许多小的修改：</p><ul><li><code>optional</code>、<code>any</code> 和 <code>variant</code>——用于表达“可选”的标准库类型（<a href="#83-variantoptional-%E5%92%8C-any">§8.3</a>）</li><li><code>shared_mutex</code> 和 <code>shared_lock</code>（读写锁）和 <code>scoped_lock</code>（<a href="#84-%E5%B9%B6%E5%8F%91">§8.4</a>）</li><li>并行 STL——标准库算法的多线程及矢量化版本（<a href="#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）</li><li>文件系统——可移植地操作文件系统路径和目录的能力（<a href="#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>）</li><li><code>string_view</code>——对不可变字符序列的非所有权引用 [Yasskin 2014]</li><li>数学特殊函数——包括拉盖尔和勒让德多项式、贝塔函数、黎曼泽塔函数 [Reverdy 2012]</li></ul><p>尽管我也喜欢 C++17 中的某些功能，但令人困扰的是这些功能没有统一的主题，没有整体的规划，似乎只是由于可以达到投票多数而被扔进语言和标准库中的一组“聪明的想法”。这种状况可能给未来语言的发展带来更大的弊端，因此必须采取一些措施做出改变 [Stroustrup 2018d]。方向小组的成立是 WG21 针对这个问题的回应（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>）的一部分。</p><p>不可否认，C++17 提供了一些可以在小方面帮助大多数程序员的东西，但没有什么可以让我认为是重大的。在这里，我将“重大”定义为“对我们思考编程和组织代码的方式产生影响”。在此，我描述了我猜想会产生最大积极影响的功能。</p><p>我也检查了一些尽管经过严肃考虑、仍没有进入 C++17 标准的例子：</p><ul><li><a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>：概念（C++20）</li><li><a href="#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：网络库</li><li><a href="#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>：点运算符（<code>operator.()</code>）</li><li><a href="#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>：统一函数调用</li><li><a href="#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>：简单类型的默认比较运算符 <code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code> 和 <code>&gt;=</code></li><li><a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>：协程（C++20）</li></ul><p>我怀疑如果它们被采纳的话，其中的任何一项都会成为 C++17 最重要的特性之一。它们符合 C++ 应该成为什么的一致观点（<a href="09.md#92-%E6%88%91%E7%9A%84-c17-%E6%B8%85%E5%8D%95">§9.2</a>）；即使只有少数几项，也会极大地改变 C++17 的使用方式。</p><p>在 C++11 中我看到了相互支持的特性网，它们带来了更好的代码编写方式。对于 C++17，我没有看到。但是，C++20 完善了这样一张网，使 C++ 又向前迈进了一大步（<a href="09.md#9-c20%E6%96%B9%E5%90%91%E4%B9%8B%E4%BA%89">§9</a>）。可以说 C++17 只是通向 C++20 路上的垫脚石，但是委员会的讨论对此毫无暗示，重点始终放在单独的特性上。我甚至听到有人说“列车模型”（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）不适合长期规划；事实并非如此。</p><h2 id="8-1-构造函数模板参数推导"><a href="#8-1-构造函数模板参数推导" class="headerlink" title="8.1 构造函数模板参数推导"></a>8.1 构造函数模板参数推导</h2><p>几十年来，人们好奇为什么模板参数可以从其他函数参数中推导出来，却不能从构造函数参数中推导。例如，在 C++98、C++11 和 C++14 中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">pair&lt;string,<span class="hljs-type">int</span>&gt; <span class="hljs-title">p0</span> <span class="hljs-params">(string(<span class="hljs-string">&quot;Hi!&quot;</span>),<span class="hljs-number">129</span>)</span></span>;  <span class="hljs-comment">// 不需要推导</span><br><span class="hljs-keyword">auto</span> p1 = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Hi!&quot;</span>s,<span class="hljs-number">129</span>);          <span class="hljs-comment">// p1 是 pair&lt;string,int&gt;</span><br><span class="hljs-function">pair <span class="hljs-title">p2</span> <span class="hljs-params">(<span class="hljs-string">&quot;Hi!&quot;</span>s,<span class="hljs-number">129</span>)</span></span>;    <span class="hljs-comment">// 错误：pair 缺少模板参数</span><br></code></pre></td></tr></table></figure><p>很自然，在我第一次设计模板的时候，我也考虑过从构造函数参数中推导出模板参数的可能性，但因为担心出现歧义而止步。解决方案也有技术障碍，但 Michael Spertus 和 Richard Smith 克服了这些障碍。所以在 C++17 中，我们可以写上面最后一个例子中那样的代码（<code>p2</code>）而不会报错，这样一来就不需要 <code>make_pair()</code> 了。</p><p>这简化了类型的使用，例如 <code>pair</code> 和 <code>tuple</code>，还有当编写并行的代码时用到的锁和互斥锁（<a href="#84-%E5%B9%B6%E5%8F%91">§8.4</a>）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">shared_lock lck &#123;m&#125;;    <span class="hljs-comment">// 不需要显式写出锁类型</span><br></code></pre></td></tr></table></figure><p>这是一个在 C++17 中少见的例子，相互支持的特性促成了明显的代码简化。不幸的是，这些简化被接受与否都是个案，而非总体的简化努力的结果。所以，在类型推导规则中“填坑”的努力仍在继续 [Spertus et al. 2018]。</p><p>除了这里的描述之外，这套机制提供了解决歧义的一种写法（<a href="#83-variantoptional-%E5%92%8C-any">§8.3</a>）。</p><h2 id="8-2-结构化绑定"><a href="#8-2-结构化绑定" class="headerlink" title="8.2 结构化绑定"></a>8.2 结构化绑定</h2><p>结构化绑定始于 Herb Sutter、Bjarne Stroustrup 和 Gabriel Dos Reis 的一个简单的提案 [Sutter et al. 2015]，旨在简化写法和消除剩余的几个变量未初始化的来源。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(vector&lt;pair&lt;T,U&gt;&gt;&amp; v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x,y] : v)<br>        cout &lt;&lt; <span class="hljs-string">&#x27;&#123;&#x27;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>名称 <code>x</code> 和 <code>y</code> 被分别绑定于 <code>pair</code> 的第一个和第二个元素。这可算作是写法上的重大便利。</p><p>C++14 给我们提供了返回多个值的方便方式。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">tuple&lt;T1,T2,T3&gt; <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-comment">/*...*/</span>)</span>  <span class="hljs-comment">// 优美的声明语法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;a,b,c&#125;;  <span class="hljs-comment">// 优美的返回语法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我认为在当前的 C++ 中，<code>tuple</code> 有点被过度使用了，当多个值并不互相独立的时候，我倾向于使用明确定义的类型，但从写法上讲，这没有什么区别。然而，C++14 并没有提供像创建多返回值那样方便的方式去解包它们。这导致了繁琐的变通解决方案、变量未初始化或运行期开销。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tuple&lt;T1,T2,T3&gt; res = <span class="hljs-built_in">f</span>();<br>T1&amp; alpha = <span class="hljs-built_in">get</span>&lt;<span class="hljs-number">0</span>&gt;(res);    <span class="hljs-comment">// 通过 alpha 来间接访问</span><br>T2&amp; val = <span class="hljs-built_in">get</span>&lt;<span class="hljs-number">1</span>&gt;(res);<br>T3 err_code = <span class="hljs-built_in">get</span>&lt;<span class="hljs-number">2</span>&gt;(res);  <span class="hljs-comment">// 拷贝</span><br></code></pre></td></tr></table></figure><p>很多专家更喜欢用标准库函数 <code>tie()</code> 去解包 <code>tuple</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">T1 x;<br>T2 y;<br>T3 z;<br><span class="hljs-comment">// ...</span><br><span class="hljs-built_in">tie</span>(x,y,z) = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 使用现有变量的优美调用方式</span><br></code></pre></td></tr></table></figure><p>向 <code>tie()</code> 函数赋值的时候，会向 <code>tie()</code> 函数的参数赋值。然而，使用 <code>tie</code>，你必须分别定义变量，并且写出它们的类型以匹配 <code>f()</code> 返回的对象的成员（在这个例子中就是 <code>T1</code>、<code>T2</code>、和 <code>T3</code>）。不幸的是，这会导致局部变量“设置前使用”的错误，及“初始化后赋值”的开销。并且，大多数程序员并不知道 <code>tie()</code> 的存在，或者认为在真实代码中使用它太奇怪了。</p><p>Herb Sutter 建议了一种跟正常返回语法类似的方案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> &#123;x,y,z&#125; = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 优美的调用语法，会引入别名</span><br></code></pre></td></tr></table></figure><p>这对任何有三个成员的 <code>struct</code> 都有效，而不仅仅只对 <code>tuple</code>。消除核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）中未初始化变量的倒数第二个来源是我的主要动机。是的，我喜欢这种写法，但更重要的是它使得 C++ 更接近于其理想。</p><p>不是每个人都喜欢这个想法，而且我们几乎没能在 C++17 中及时讨论它。提出结构化绑定的论文 [Sutter et al. 2015] 比较晚，而正当 2015 年 11 月底在科纳 Ville Voutilainen 刚要结束 EWG 会议时，我注意到我们离午饭还有 45 分钟，我觉得小组应该会想要看到这个提案。2015 年科纳的会议是我们冻结 C++17 的功能集的时间点，所以这 45 分钟很关键。我们甚至没时间去另一个小组找到 Herb，我就直接讲了这个提案。EWG 喜欢这个提案，会议纪要说<strong>鼓掌以资鼓励；EWG 想要这样的东西</strong>。</p><p>现在，真正的工作开始了。</p><p>在这个及以后的会议中，几个人——尤其是 Chandler Carruth——指出要达到 C++ 的理想，我们需要扩展将一个对象分解为多个值的能力，以应对不是 <code>tuple</code> 或普通 <code>struct</code> 的类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">complex&lt;<span class="hljs-type">double</span>&gt; z = <span class="hljs-number">2</span>+<span class="hljs-number">3</span>i;<br><span class="hljs-keyword">auto</span> &#123;re,im&#125; = <span class="hljs-built_in">sqrt</span>(z);      <span class="hljs-comment">// sqrt() 返回复数值</span><br></code></pre></td></tr></table></figure><p>标准库类型 <code>complex</code> 并没有暴露其内部表示。</p><p>在 C++17 中我们通过允许用户定义一系列 <code>get</code> 函数解决了这个问题，如 <code>get&lt;0&gt;</code> 和 <code>get&lt;1&gt;</code>，实际上是把计算结果当成 <code>tuple</code>。这能工作，但需要用户提供一些不优雅的重复样板代码。关于潜在改进的讨论仍在继续，但没有明显的简化被纳入 C++20。</p><p>有人要求让这种方式也能适用于返回数组的函数和返回带位域的 <code>struct</code> 的函数。我们加入了对那些情况的支持，所以最终设计至少比原始提案复杂了一倍。</p><p>有一个冗长的争论（跨多次会议），是关于是否可能（或必须）显式地指定被引入的局部变量类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> &#123;<span class="hljs-type">int</span> x, <span class="hljs-type">const</span> <span class="hljs-type">double</span>* y, string&amp; z&#125; = <span class="hljs-built_in">f</span>();    <span class="hljs-comment">// 非 C++</span><br></code></pre></td></tr></table></figure><p>关于这种做法的理由——其中最雄辩的当属 Ville Voutilainen——如果没有显式类型，写法的可读性将会降低，从而损害可维护性，还可能导致错误。这跟常见的反对 <code>auto</code> 的理由很相似，而显式类型也会有它们自己的问题。如果类型跟返回值不匹配怎么办？有人说这应该属于错误。有些人说，转换到指定的类型将是非常有用的（例如，<code>char[20]</code> 返回到 <code>string</code> 中）。我指出结构化绑定应该引入零开销别名，而任何意味着表示变化的类型转换将导致显著的开销。并且，结构化绑定的一个目的是优化写法，而要求显式类型会导致代码比现有的方式更加冗长。</p><p>最初的提案使用花括号（<code>&#123;&#125;</code>）来组合引入的名字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> &#123;x,y,z&#125; = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 优美的调用语法，引入别名</span><br></code></pre></td></tr></table></figure><p>然而一些成员，如 Chandler Carruth 和 David Vandevoorde，怕语法上会有歧义，而坚持认为这样会令人困惑，“因为 <code>&#123;&#125;</code> 意味着作用域”。所以我们有了 <code>[]</code> 语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> [x,y,z] = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 调用语法，引入别名</span><br></code></pre></td></tr></table></figure><p>这是个小改动，但我认为是个错误。这个最后一刻的改动，导致了属性写法的小小复杂化（比如 <code>[[fallthrough]]</code>）（<a href="04.md#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）。我对关于美学或作用域的论据并不买账，并且在 2014 年我就展示了关于为 C++ 添加函数式编程风格的模式匹配的想法，以 <code>&#123; … &#125;</code> 表示用模式将值分解出来（<a href="#83-variantoptional-%E5%92%8C-any">§8.3</a>）。结构化绑定的设计就是为了适应这一总体方案。</p><p>这些并不是唯一的后期修改提案。每个提案都增加了或将增加复杂性。</p><p>对语言每次升级仅孤立地增加一项功能是危险的。除非符合更大的规划，最后一刻的改变也是危险的，容易导致在要求“完整性”的过程中“膨胀”。在这个结构化绑定的例子中，我不相信允许结构化绑定指定位域能提供充分的效用，值得为之提高复杂性。</p><h2 id="8-3-variant、optional-和-any"><a href="#8-3-variant、optional-和-any" class="headerlink" title="8.3 variant、optional 和 any"></a>8.3 <code>variant</code>、<code>optional</code> 和 <code>any</code></h2><p>可以使用 <code>union</code> 来无运行期开销地表示多个可选的类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">union</span> <span class="hljs-title class_">U</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span>* p;<br>&#125;;<br><br>U u;<br><span class="hljs-comment">// ...</span><br><span class="hljs-type">int</span> x = u.i;    <span class="hljs-comment">// 正确：当且仅当 u 持有整数</span><br><span class="hljs-type">char</span>* p = u.p;  <span class="hljs-comment">// 正确：当且仅当 u 持有指针</span><br></code></pre></td></tr></table></figure><p>从 C 语言最早期开始，这就被当作一个不同的类型之间“分时共享”内存的基本方法来使用和误用。没有编译期和运行期的检查来确保这个地址仅被用作其真实指代的类型。确保 <code>union</code> 成员在使用上一致，是程序员的职责，然而令人头痛的是程序员常在这个地方出错。</p><p>有经验的程序员通过将联合体封装在类中来避免问题，用类来确保正确使用。Boost 特别提供了三种这样的类型：</p><ul><li><code>optional&lt;T&gt;</code>——持有 <code>T</code> 或什么都不持有</li><li><code>variant&lt;T,U&gt;</code>——持有 <code>T</code> 或 <code>U</code></li><li><code>any</code>——持有任意类型</li></ul><p>这些类型的巨大效用已经在 C++ 和许多其他语言中得到了证明。</p><p>委员会决定对这三种类型进行标准化。不幸的是，这三种类型的设计被分开讨论，好像它们的使用情况毫不相干一样。相对于标准库而言，直接语言支持的可能性似乎从未被认真考虑。结果是三种标准库类型（就像它们的 Boost 祖先一样）彼此之间有很大的不同。因此，尽管这些类型的效用毋庸置疑，但它们是委员会设计的一个典型案例。试考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">optional&lt;<span class="hljs-type">int</span>&gt; var1 = <span class="hljs-number">7</span>;<br>variant&lt;<span class="hljs-type">int</span>,string&gt; var2 = <span class="hljs-number">7</span>;<br>any var3 = <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">auto</span> x1 = *var1 ;               <span class="hljs-comment">// 对 optional 解引用</span><br><span class="hljs-keyword">auto</span> x2 = <span class="hljs-built_in">get</span>&lt;<span class="hljs-type">int</span>&gt;(var2);       <span class="hljs-comment">// 像访问 tuple 一样访问 variant</span><br><span class="hljs-keyword">auto</span> x3 = <span class="hljs-built_in">any_cast</span>&lt;<span class="hljs-type">int</span>&gt;(var3);  <span class="hljs-comment">// 转换 any</span><br></code></pre></td></tr></table></figure><p>为了提取存储的值，需要使用三种不兼容的写法之一。这对程序员来讲是一种负担。没错，有经验的程序员会习惯的，但这种非要人们去习惯的不规则性本就不该存在。</p><p>为了简化 <code>variant</code> 的使用，有一种访问者机制。首先我们需要一个辅助模板去定义一个重载集合：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 简单访问的样板代码：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">overloaded</span> : Ts... &#123; <span class="hljs-function"><span class="hljs-keyword">using</span> <span class="hljs-title">Ts::operator</span><span class="hljs-params">()</span>...</span>; &#125;;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-title">overloaded</span><span class="hljs-params">(Ts...)</span> -&gt; overloaded&lt;Ts...&gt;</span>;<br></code></pre></td></tr></table></figure><p>模板 <code>overloaded</code> 真应该成为标准。只有那些熟悉变参模板（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）和模板参数推导（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）的人才会觉得它比较简单。不过，有了 <code>overloaded</code>，我就能根据变体的类型来构造出分支：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-type">var_t</span> = std::variant&lt;<span class="hljs-type">int</span>, <span class="hljs-type">long</span>, <span class="hljs-type">double</span>, std::string&gt;; <span class="hljs-comment">// variant 类型</span><br><br><span class="hljs-comment">// 简单访问的样板代码：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">overloaded</span> : Ts... &#123; <span class="hljs-function"><span class="hljs-keyword">using</span> <span class="hljs-title">Ts::operator</span><span class="hljs-params">()</span>...</span>; &#125;;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-title">overloaded</span><span class="hljs-params">(Ts...)</span> -&gt; overloaded&lt;Ts...&gt;</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::vector&lt;<span class="hljs-type">var_t</span>&gt; vec = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20L</span>, <span class="hljs-number">30.40</span>, <span class="hljs-string">&quot;hello&quot;</span>&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; var : vec) &#123;<br>        std::<span class="hljs-built_in">visit</span> (overloaded &#123;<br>            [](<span class="hljs-keyword">auto</span> arg) &#123; cout &lt;&lt; arg &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; &#125;,    <span class="hljs-comment">// 处理整数类型</span><br>            [](<span class="hljs-type">double</span> arg) &#123; cout &lt;&lt; <span class="hljs-string">&quot;double : &quot;</span> &lt;&lt; arg &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; &#125;,<br>            [](<span class="hljs-type">const</span> std::string&amp; arg) &#123; cout &lt;&lt; <span class="hljs-string">&quot;\&quot;&quot;</span> &lt;&lt; arg &lt;&lt; <span class="hljs-string">&quot;\&quot;\n&quot;</span>; &#125;,<br>        &#125;, var);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>毋庸置疑，<code>variant</code> 和它的伙伴们解决了一个重要问题，但其方式并不优雅。或许将来的工作能减轻接口不一致上的困惑，从而让人能专注于真正需要区分的地方。同时，应该让更多的 C++ 同仁去使用这些新的类型，从而消除 <code>union</code> 经年累月带来的老问题。</p><p>我认为这三种可辨识 <code>union</code> 的变体只是权宜之计。要解决 <code>union</code> 的问题，函数式编程风格的模式匹配要优雅、通用得多，也潜在地更为高效。在 2014 年 11 月在伊利诺伊大学厄巴纳——香槟分校举行的会议上，我发表了关于模式匹配相关设计问题的演讲 [Solodkyy et al. 2014]，部分内容基于我同得州农工大学的 Yuriy Solodkyy 和 Gabriel Dos Reis 合作的研究 [Solodkyy et al. 2013]。我们有一个库的实现，它的性能和函数式编程语言相若，尽管它没有和编译器进行集成。这个库既能应对包含多个可选类型的封闭集合（代数类型），也能应对开放集合（类层次结构）。我们的目的之一是消除对访问者模式的使用 [Gamma et al. 1994]。然而，我们没有一种能让人普遍接受的语法。我演讲的目的是提高人们的兴趣，并设定长期的目标。人们对此很感兴趣。在 C++17 完成后，工作就开始了 [Murzin et al. 2019, 2020]。或许模式匹配能加入到 C++23 中（<a href="11.md#115-%E6%9C%AA%E6%9D%A5">§11.5</a>）。</p><h2 id="8-4-并发"><a href="#8-4-并发" class="headerlink" title="8.4 并发"></a>8.4 并发</h2><p>在 C++17 中，以下类型的加入极大地简化了锁的使用：</p><ul><li><code>scoped_lock</code>——获取任意数量的锁，而不会造成死锁</li><li><code>shared_mutex</code> 和 <code>shared_lock</code>——实现读写锁</li></ul><p>例如，我们能获取多个锁，而不用担心会产生死锁：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    scoped_lock lck &#123;mutex1, mutex2, mutex3&#125;; <span class="hljs-comment">// 获得所有三把锁</span><br>    <span class="hljs-comment">// ... 操作共享数据 ...</span><br>&#125; <span class="hljs-comment">// 隐式地释放所有锁</span><br></code></pre></td></tr></table></figure><p>C++11 和 C++14 没能带给我们读写锁。这显然是个严重的疏忽，原因是各种提议的压力，以及处理提议所需的时间。C++17 通过加入 <code>shared_mutex</code> 解决了这一问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">shared_mutex mx;    <span class="hljs-comment">// 一个可以被共享的锁</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reader</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    shared_lock lck &#123;mx&#125;;  <span class="hljs-comment">// 跟其他 reader 共享访问</span><br>    <span class="hljs-comment">// ... 读 ...</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unique_lock lck &#123;mx&#125;;  <span class="hljs-comment">// writer 需要独占访问</span><br>    <span class="hljs-comment">// ... 写 ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>多个读线程可以“共享”该锁（即同时进入临界区），而写线程则需要独占访问。</p><p>我认为这些例子很好体现了“简单的事情简单做”的哲学。有时，我同很多 C++ 程序员一样在想，“是什么让他们花了这么长时间？”</p><p>请注意使用从构造函数参数推导出来的模板参数是如何简化了写法的（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）。</p><h2 id="8-5-并行-STL"><a href="#8-5-并行-STL" class="headerlink" title="8.5 并行 STL"></a>8.5 并行 STL</h2><p>从长远来看，并行算法的使用将是非常重要的，因为从用户角度看，没有什么比只说“请执行这个算法”更简单的了。从实现者的角度来看，算法中有一套特定接口而没有对算法的串行约束将是一个机会。C++17 只迈出了一小步，但这远比没有开始好得多，因为它指明了方向。不出意外，委员会中有一些反对的声音，大多数来自于希望为专家级用户提供复杂接口的人。有些人对这样简单的一个方案是否可行表示严重怀疑，并主张推迟这一方案。</p><p>基本的想法是，为每个标准库算法提供一个额外参数，允许用户请求向量化和&#x2F;或多线程。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(par_unseq, <span class="hljs-built_in">begin</span>(v), <span class="hljs-built_in">end</span>(v));  <span class="hljs-comment">// 考虑并行和向量化</span><br></code></pre></td></tr></table></figure><p>但这还只适用于 STL 算法，所以重要的 <code>find_any</code> 和 <code>find_all</code> 算法被忽略了。将来我们会看到专门为并行使用而设计的算法。这正在 C++20 中变为现实。</p><p>另一个弱点是，仍然没有取消一个线程的标准方法。例如，在搜索中找到一个对象后，一个线程不能停止其他正在并行执行的搜索。这是 POSIX 干预的结果，它反对所有形式的取消操作（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）。C++ 20 提供了协作式取消（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）。</p><p>C++17 的并行算法也支持向量化。这很重要，因为对 SIMD 的优化支持是硬件在单线程性能方面仍然（2017 年后）有巨大增长的少数领域之一。</p><p>在 C++20 中，我们（总算）能用范围库（<a href="06.md#63-concepts-ts">§6.3</a>）来避免显式使用容器的元素序列，只要这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(v);<br></code></pre></td></tr></table></figure><p>不幸的是，并行版本的范围在 C++20 中没有及时完成，因此我们只能等到 C++23 才能这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(par_unseq, v);  <span class="hljs-comment">// 使用并行和向量化来对 v 进行排序</span><br></code></pre></td></tr></table></figure><p>不想等 23 的话，我们可以自己实现适配器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> execution_policy = std::is_execution_policy&lt;T&gt;::value;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(execution_policy <span class="hljs-keyword">auto</span>&amp;&amp; ex, std::random_access_range <span class="hljs-keyword">auto</span>&amp; r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(ex, <span class="hljs-built_in">begin</span>(r), <span class="hljs-built_in">end</span>(r));  <span class="hljs-comment">// 使用执行策略 ex 来排序</span><br>&#125;<br></code></pre></td></tr></table></figure><p>毕竟标准库是可扩展的。</p><h2 id="8-6-文件系统"><a href="#8-6-文件系统" class="headerlink" title="8.6 文件系统"></a>8.6 文件系统</h2><p>2002 年，Beman Dawes 编写了 Boost 文件系统库，成为最受欢迎的 Boost 库之一 [Boost 1998–2020]。2014 年，Boost 文件系统库 [Dawes 2002–2014]（经修改后）被加入了 TS [Dawes 2014, 2015]，又经过进一步修改被加入了 C++17 标准。跟文件名和文件系统打交道是很棘手的，因为它涉及到并行、多种自然语言和操作系统间的差异。最终能通过标准方式操作目录（文件夹）是件好事（正如 Boost 从 15 年前开始做的那样）。提供的关键类型是 <code>path</code>，对字符集和文件系统的不同写法进行了抽象。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; name)</span></span><br><span class="hljs-function"></span>&#123;<br>    path p &#123;name&#125;;  <span class="hljs-comment">// name 可能是俄语或阿拉伯语</span><br>                    <span class="hljs-comment">// name 可能使用 Windows 或 Linux 文件写法</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exists</span>(p)) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_regular_file</span>(p))<br>                cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; regular file, size: &quot;</span> &lt;&lt; <span class="hljs-built_in">file_size</span>(p) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_directory</span>(p)) &#123;<br>                cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; directory, containing:\n&quot;</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; x : <span class="hljs-built_in">directory_iterator</span>(p))<br>                    cout &lt;&lt; <span class="hljs-string">&quot;    &quot;</span> &lt;&lt; x.<span class="hljs-built_in">path</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; exists\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; does not exist\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> filesystem_error&amp; ex) &#123;<br>        cerr &lt;&lt; ex.<span class="hljs-built_in">what</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">throw</span>;<br>    &#125;<br>    <span class="hljs-comment">// ... 使用 p ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>捕捉异常可以防止罕见的错误，比如有人在 <code>exists(p)</code> 检查后、执行详细检索前删除了文件。文件系统接口同时为罕见（异常）和常见（预期）错误提供了支持（<a href="07.md#72-%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98">§7.2</a>）。</p><h2 id="8-7-条件的显式测试"><a href="#8-7-条件的显式测试" class="headerlink" title="8.7 条件的显式测试"></a>8.7 条件的显式测试</h2><p>我认为“很多小的提案”是危险的，即使每个都能帮助一些人。考虑为条件增加显式测试的能力 [Köppe 2016b]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y); p-&gt;m&gt;<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>p-&gt;m&gt;0</code> 是一个显式测试，它的意思是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y);<br>    <span class="hljs-keyword">if</span> (p-&gt;m&gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是对 C++98 里在条件里同时声明和测试的推广（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> pd = <span class="hljs-built_in">dynamic_cast</span>&lt;Derived*&gt;(pb)) &#123; <span class="hljs-comment">// 如果 pd 指向 Derived 类型则为真</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>问题是这种推广是否足够明显和有用，值得作为提案引入。我的回答是否定的。然而，这是我被否决的一个例子（不是很罕见）。</p><p>我的观点是，显式测试最好体现在 <code>if</code> 语句中。那里更不容易被忽视，而且遵循常规有其好处，特别是对那些不仅仅使用 C++ 语言编程的人。另一方面，显式测试似乎在有的人那里很受欢迎，他们的代码设计成需要对每个函数的结果都做错误检查。我个人非常反感那种设计风格（<a href="07.md#75-%E5%9B%9E%E5%BD%92%E5%9F%BA%E7%A1%80">§7.5</a>）。</p><p>有些人为了用上新特性而积极地重写代码。我听说过好几个例子，有人一看到下面这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y)) &#123;<br>    <span class="hljs-keyword">if</span> (p-&gt;m&gt;<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>就立刻重写为这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y); p-&gt;m&gt;<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>并声称这样更优雅和简洁。自然，当 <code>p==nullptr</code> 时它会崩溃，而最初的代码不会。无论我们从中能得到什么好处，这样的重写可能带来新的错误和混乱。</p><p>为了通用，显式测试也可以用在 <code>switch</code> 和 <code>while</code> 条件中。在 C++20 中，这一机制被进一步扩展到可以在范围 <code>for</code> 语句中包含初始化 [Köppe 2017c]。</p><h2 id="8-8-C-17-中未包含的提议"><a href="#8-8-C-17-中未包含的提议" class="headerlink" title="8.8 C++17 中未包含的提议"></a>8.8 C++17 中未包含的提议</h2><p>除了概念（<a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>）以外，一些我认为很重要的提案没有加入 C++17。如果不提及它们，C++ 的历史就不完整：</p><ul><li><a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>：概念（C++20）</li><li><a href="#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：网络</li><li><a href="#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>：点运算符</li><li><a href="#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>：统一调用语法</li><li><a href="#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>：默认比较</li><li><a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>：协程（C++20）</li></ul><p>静态反射是在一个研究小组（<a href="03.md#3-c-%E6%A0%87%E5%87%86%E5%A7%94%E5%91%98%E4%BC%9A">§3</a>）中处理的，并不在 C++17 的既定规划之中。但作为一项重要工作，它是在这一时期启动的。</p><h3 id="8-8-1-网络库"><a href="#8-8-1-网络库" class="headerlink" title="8.8.1 网络库"></a>8.8.1 网络库</h3><p>在 2003 年，Christopher M. Kohlhoff 开始开发一个名叫 <em>asio</em> 的库，以提供网络支持 [Kohlhoff 2018]：</p><blockquote><p>“Asio 是用于网络和底层 I&#x2F;O 编程的一个跨平台 C++ 库，它采用现代化 C++ 的方式，为开发者提供了一致的异步模型”</p></blockquote><p>在 2005 年，它成为了 Boost [Kohlhoff 2005] 的一部分，并在 2006 年被提案进入标准 [Kohlhoff 2006]。在 2018 年，它成为了 TS [Wakely 2018]。尽管经过了 13 年的重度生产环境使用，它还是未能进入 C++17 标准。更糟糕的是，让网络库进入 C++20 标准的工作也停滞不前。这意味着，在 asio 得以在生产环境中使用 15 年之后，我们还是不得不至少等到 2023 年，才能看到它成为标准的一部分。延误原因在于，我们仍在进行严肃的讨论，如何最好地将 asio 中和其他场合中处理并发的方式一般化。为此提出的“执行器（executors）”提案得到了广泛的支持，并且有人还期望它能成功进入 C++20 [Hoberock et al. 2019, 2018]。我认为 C++20 中执行器和网络库的缺失，正是“最好是好的敌人”的一个例子。</p><h3 id="8-8-2-点运算符"><a href="#8-8-2-点运算符" class="headerlink" title="8.8.2 点运算符"></a>8.8.2 点运算符</h3><p>在标准化进程启动之初，首个对 C++ 扩展的提案，就是由 Jim Adcock 在 1990 年提出的允许重载点（<code>.</code>）运算符的提案 [Adcock 1990]。从 1984 年开始，我们就可以重载箭头运算符（<code>-&gt;</code>），并且该机制被重度使用，以实现“智能指针”（比如 <code>shared_ptr</code>）。人们当时希望（并且现在仍然希望）能重载点运算符以实现智能引用（代理）。基本上，人们想要有一种方式，使得 <code>x.f()</code> 意味着 <code>x.operator.().f()</code>，从而 <code>operator.()</code> 可以控制对成员的访问。然而，关于该议题的讨论总是陷入僵局，因为大家对于重载版的点运算符是否应该应用到其隐式使用上无法达成一致。举个例子：<code>++x</code> 对于用户定义类型，被解释为 <code>x.operator++()</code>。现在，如果用户定义类型定义了 <code>operator.()</code>，<code>++x</code> 是否应该表示 <code>x.operator.().operator++()</code>？Andrew Koenig 和 Bjarne Stroustrup 在 1991 年 [Koenig and Stroustrup 1991a] 尝试过解决这个问题，但被最初的提案者 Jim Adcock 所强烈反对。Gary Powell、Doug Gregor 和 Jaakko Järvi 在 2004 年再度进行了尝试，试图提案到 C++0x [Powell et al. 2004]，但在委员会那里又一次陷入僵局。最后，在 2014 年，Bjarne Stroustrup 和 Gabriel Dos Reis 又进行了一次尝试，试图提案到 C++17，我认为该提案 [Stroustrup and Dos Reis 2014] 是更为全面的，也是更为合理的。举例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ref</span> &#123;  <span class="hljs-comment">// 智能引用（带有所有权）</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Ref</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> : p&#123;</span><span class="hljs-keyword">new</span> X&#123;a&#125;&#125; &#123;&#125;<br>    X&amp; <span class="hljs-keyword">operator</span>.() &#123; <span class="hljs-comment">/* 这里可以有代码 */</span> <span class="hljs-keyword">return</span> *p; &#125;<br>    ~<span class="hljs-built_in">Ref</span>() &#123; <span class="hljs-keyword">delete</span> p; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rebind</span><span class="hljs-params">(X* pp)</span> </span>&#123; <span class="hljs-keyword">delete</span> p; p=pp; &#125;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">private</span>:<br>    X* p;<br>&#125;;<br><br>Ref&lt;X&gt; x &#123;<span class="hljs-number">99</span>&#125;;<br>x.<span class="hljs-built_in">f</span>();                <span class="hljs-comment">// 意思是 (x.operator.()).f() 即  (*x.p).f()</span><br>x = X&#123;<span class="hljs-number">9</span>&#125;;             <span class="hljs-comment">// 意思是 x.operator.() = X&#123;9&#125; 即 (*x.p)=X&#123;9&#125;</span><br>x.<span class="hljs-built_in">rebind</span>(<span class="hljs-keyword">new</span> X&#123;<span class="hljs-number">77</span>&#125;);  <span class="hljs-comment">// 意思是 x 持有并拥有那个新的 X</span><br></code></pre></td></tr></table></figure><p>其基本想法是，在“句柄”（这里是 <code>Ref</code> 类）中定义的运算（比如构造、析构、<code>operator.()</code> 和 <code>rebind()</code>）会作用于句柄之上，而没有在“句柄”中定义的运算则作用于该句柄所对应的 “值”，也就是 <code>operator.()</code> 的结果之上。</p><p>在付出很多努力之后 [Stroustrup and Dos Reis 2016]，这个提案也失败了。2014 年的这份提案失败的原因颇为有趣。当然，设计中还存在一些常见的措辞问题和模糊的“阴暗角落”，但我认为，这份提案本来是可以获得成功的，如果不是因为委员会对智能引用的想法太过激动以至于逐渐偏离了目标，再加上 Mathias Gaunard 和 Dietmar Kühl [Gaunard and Kühl 2015] 以及 Hubert Tong 和 Faisal Vali [Tong and Vali 2016] 也分别提交了替代方案的话。这两份提案中，前者需要所有试图定义 <code>operator.()</code> 的使用者去重度使用模板元编程，而后者基本上是面向对象的，引入了一种新的继承形态和隐式转换。</p><p><code>operator.()</code> 的动作应该取决于将被访问的成员呢？还是说 <code>operator.()</code> 应该是个一元运算符，仅仅依赖于它应用的对象呢（就像 <code>operator-&gt;()</code> 一样）？前者是 Gaunard 和 Kühl 的提案的核心。Bjarne Stroustrup 和 Gabriel Dos Reis 也考虑过让 <code>operator.()</code> 成为二元运算符，但结论是这种方案过于复杂，而且在这件事上跟箭头运算符（<code>-&gt;</code>）保持匹配是重要的。</p><p>最后，虽然初始的提案并没有被真正拒绝（它被 EWG 所批准，但从未进入全体委员会投票的阶段），但由于缺乏新的输入从而无法在相互竞争的提案中间赢得共识，进一步的进展也就停滞不前了。另外，最初的提议者（Bjarne Stroustrup 和 Gabriel Dos Reis）也被更为重要的提案以及他们的“日常工作”分散了精力，比如概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）。我认为点运算符的历程是一个典型案例，体现了委员会成员对于 C++ 是什么和它应该发展成什么样（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>）缺乏共同的看法。三十年的时间，六个提案，很多次的讨论，大量的设计和实现工作，然后我们仍然一无所获。</p><h3 id="8-8-3-统一调用语法"><a href="#8-8-3-统一调用语法" class="headerlink" title="8.8.3 统一调用语法"></a>8.8.3 统一调用语法</h3><p>对概念的首次讨论是在 2003 年，在这个过程中提及了函数调用需要一个统一的语法 [Stroustrup and Dos Reis 2003b]。也就是说，理想情况下 <code>x.f(y)</code> 和 <code>f(x,y)</code> 应该含义相同。重点是，当编写泛型库时，你必须决定调用参数做运算时是采用面向对象的写法还是函数式的写法（<code>x.f(y)</code> 或 <code>f(x,y)</code>）。而作为用户，你不得不适应库的设计者所做出的选择。不同的库和不同的组织会有不同的选择。对于运算符，如 <code>+</code> 和 <code>*</code>，统一的重载决策是一直以来的规则；也就是说，一个使用（比如 <code>x+y</code>）既会找到成员函数，也会找到独立函数。在标准库中，我们使用泛滥成灾的成对的函数来应对这种困境（例如，让 <code>begin(x)</code> 和 <code>x.begin()</code> 都能使用）。</p><p>我应该在 1985 年左右，在委员会纠结于细节和潜在问题之前，就把这个问题解决掉。但我当时没能把运算符的情形推广。</p><p>在 2014 年，Herb Sutter 和我各自提案了“统一函数调用语法” [Stroustrup 2014a; Sutter 2014]。当然，这两份提案并不兼容，但我们立刻解决了兼容问题，并将它们合并成了一份联合提案 [Stroustrup and Sutter 2015]。</p><p>Herb 的部分动力来自于希望在 IDE 里面支持自动完成，并且倾向于“面向对象”的写法（例如 <code>x.f(y)</code>），而我则主要出于泛型编程的考虑，并且倾向于传统的数学式写法（例如 <code>f(x,y)</code>）。</p><p>一如既往地，第一个严重的反对意见是兼容性问题；也就是，我们可能会破坏现有的代码。最初的提案确实可能会破坏一些代码，因为它倾向于更好的匹配或使得调用变得含糊，而我们的辩论主张是它是值得的，并且往往是有益的。但我们在这场辩论中失败了，之后我们重新准备了一份修改过的版本，其工作方式基于一个原则，<code>x.f(y)</code> 会首先查找 <code>x</code> 的类，仅当无法找到 <code>f</code> 成员函数时，才考虑 <code>f(x,y)</code>。类似的，<code>f(x,y)</code> 只会在没有相应的独立函数的情况下才会查找 <code>x</code>  对应的类。这个方案并不会让 <code>f(x,y)</code> 和 <code>x.f(y)</code> 完全等价，但显然它不会破坏现有代码。</p><p>这看起来很有希望，但却遭到了一片愤怒的嚎叫：它将意味着稳定接口的终结！这个观点主要由来自谷歌的人提出，他们认为依赖于重载决策的接口无法再保持稳定了，因为添加一个函数就有可能改变现有代码的含义。这当然是真的。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">double</span>)</span></span>;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span>);       <span class="hljs-comment">// 打印 &#x27;a&#x27; 的整数值</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">char</span>)</span></span>; <span class="hljs-comment">// 添加一个 print () 以改变重载集合</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span>);       <span class="hljs-comment">// 打印字符 &#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p>我对于这个观点的回应就是，几乎任何程序都可被相当多的各种新增声明改变其含义。而且，重载的一个常见用法，就是通过添加函数，来提供语义上更佳的方案（往往是为了修复缺陷）。我们总是强烈建议，不要在程序的半途添加会导致重载集合的调用语义发生变化的重载（比如上例中的 <code>print(char)</code>）。换句话说，这个“稳定”的定义是不切实际的。我（和其他人）指出，这个问题对于类成员也早就存在了。反方的基本回应是说，类成员的集合是封闭的，所以这个问题在类成员上是可控的。我观察到，通过使用命名空间，和某个类相关的独立函数集合几乎可以像成员一样来识别 [Stroustrup 2015b]。</p><p>在这个时候，大量的争议和混乱爆发了，新的提案也开始出现，并和正处于讨论中的提案竞争。英国的代表建议采用 C# 风格的拓展方法 [Coe and Orr 2015]，而其他一些人，尤其是 John Spicer 坚持认为，如果我们需要一种统一的函数调用写法，那它应该是一种全新的写法，以和现有的两种相区分。我还是不能看出添加第三种写法（例如所建议的 <code>.f(x,y)</code>）能统一什么。这只会变成 N+1 问题（<a href="04.md#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）的又一个案例。</p><p>在提案被否决后，我被要求在有了模块后（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）重新审视该问题。到那时，对独立函数名字的查找范围就可以被限定在它第一个参数的类所在的模块。这可能可以使统一函数调用的提案起死回生，但我仍然无法看出这可以怎样解决（在我看来过于夸大的）关于接口稳定性的顾虑。</p><p>又一次，对 C++ 的角色和未来缺乏共同的看法阻碍了事情的进展（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>）。</p><p>回过头来看，我认为面向对象的写法（如 <code>x.f(y)</code>）压根就不该被引入。传统的数学式写法 <code>f(x,y)</code> 就足够了。而且作为一个附带的好处，数学式写法可以很自然的给我们带来多方法（multi-methods），从而将我们从访问者模式这个变通方案 [Solodkyy et al. 2012] 中拯救出来。</p><h3 id="8-8-4-缺省比较"><a href="#8-8-4-缺省比较" class="headerlink" title="8.8.4 缺省比较"></a>8.8.4 缺省比较</h3><p>和 C 一样，C++ 并没有给数据结构提供缺省的比较。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">int</span> b;<br>&#125;;<br><br>S s1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br>S s2 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">text</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    S s3 = s1 ;       <span class="hljs-comment">// 可以，初始化</span><br>    s2 = s1 ;         <span class="hljs-comment">// 可以，赋值</span><br>    <span class="hljs-keyword">if</span> (s1 == s2) &#123; <span class="hljs-comment">/* ... */</span> &#125;  <span class="hljs-comment">// 错误：== 对 S 未定义</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其原因在于，考虑到 <code>S</code> 的通常内存布局，在持有 <code>S</code> 的内存中的部分会有“未使用的比特位”，因此 <code>s1==s2</code> 的朴素实现，也就是比较持有 <code>s1</code> 和 <code>s2</code> 的字的比特位的方式，可能会给出 <code>false</code> 值。如果不是由于这些“未使用的比特位”，C 语言至少会有缺省的等值比较。我在 1980 年代早期曾经和 Dennis Ritchie 进行过讨论，但我们当时都太忙了，因而没时间为解决这个问题做些什么。这个问题对于复制（如 <code>s1=s2</code>）不是个问题，朴素而传统的方案就是简单的复制所有比特位。</p><p>由于简单实现的效率，允许赋值而不允许比较在 1970 年代是合适的，而到了 2010 年代就不合适了。现在我们的优化器可以很容易地处理这个问题，而且我——跟其他很多人一样——已经厌倦了解释为什么没有提供这样的缺省比较。尤其是很多 STL 算法需要 <code>==</code> 或 <code>&lt;</code>，如果用户没有显式地为这些数据结构定义 <code>operator==()</code> 和&#x2F;或 <code>operator&lt;()</code>，它们就无法支持简单的数据结构。</p><p>在 2014 年，Oleg Smolsky [Smolsky 2014] 提议了一种定义比较运算符的简单方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Thing</span> &#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    std::string d;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这处理了正确的问题，但它是繁琐的（长长的六行代码就为了说明“我想要缺省的运算符”），并且，和缺省就有比较运算符相比，这绝对是退而求其次了。它还有些其他的技术问题（例如“但这个方案是侵入式的：如果我不能修改一个类，我就没法给它添加比较能力”），但现在竞赛已经是在如何更好地在 C++17 支持运算符上了。</p><p>我写了一篇论文讨论这个问题 [Stroustrup 2014c]，并且提议为简单类提供缺省比较 [Stroustrup 2014b]。事实证明，在这个上下文中，很难定义“一个类是简单的”意味着什么，而且 Jens Maurer 发现了一些令人不愉快的作用域问题，关于在有了缺省运算符的同时又自定义比较运算符的组合情况（例如，“在使用了缺省的 <code>==</code> 之后，如果我们在不同的作用域又定义了 <code>operator==()</code>，这意味着什么？”）。</p><p>Oleg、我还有其他人写了更多的其他论文，但提案都停滞了。人们开始在提案上堆积更多的要求。比如，要求缺省比较的性能在简单使用情况下要和三路比较相等。Lawrence Crowl 写了对通用的比较的分析 [Crowl 2015b]，论及如全序、弱序和偏序这样的问题。EWG 的普遍观点是 Lawrence 的分析非常棒，但他需要时间机器才能把这些机制加入到 C++ 中。</p><p>最后，在 2017 年，Herb Sutter 给出了一份提案（部分基于 Lawrence Crowl 的工作），该提案基于三路比较运算符 <code>&lt;=&gt;</code>（如在各种语言中可见到的），基于该运算符可以生成其他常用的运算符 [Sutter 2017a]。它没有为我们提供缺省的运算符，但至少它让我们可以用一行公式去定义它们：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">friend</span> std::strong_order <span class="hljs-built_in">operator</span>&lt;=&gt;(S,S) = <span class="hljs-keyword">default</span>;<br>&#125;;<br><br>S s1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br>S s2 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-type">bool</span> b0 = s1==s2;    <span class="hljs-comment">// true</span><br><span class="hljs-type">int</span> b1 = s1&lt;=&gt;s2;    <span class="hljs-comment">// 0</span><br><span class="hljs-type">bool</span> b2 = s1&lt;s2;     <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上述方案是 Herb Sutter 所推荐的，因为它带来的问题最少（例如跟重载和作用域相关的），但它是侵入式的。我无法在不能修改的类中使用这个方案。在这种情况下，可以定义一个非成员函数的 <code>&lt;=&gt;</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">int</span> b;<br>&#125;;<br><br>std::strong_order <span class="hljs-built_in">operator</span>&lt;=&gt;(S,S) = <span class="hljs-keyword">default</span>;<br></code></pre></td></tr></table></figure><p>关于 <code>&lt;=&gt;</code> 的提案包含了一个可选项，为简单类隐式定义 <code>&lt;=&gt;</code>，但不出所料，认为一切都是显式的才更安全的人们投票否决了这个选项。</p><p>于是，我们得到的并不是一个让简单的例子在新手手中按预期工作的功能，而是一个允许专家仔细打造精妙比较运算的复杂功能。</p><p>尽管这个 <code>&lt;=&gt;</code> 的提案并没有可用的实现，并且对标准库有强烈潜在影响。它还是比其他任何我能想到的近期的提案都更容易地通过了委员会。不出所料，这个提案带来了很多惊讶（<a href="09.md#934-">§9.3.4</a>），包括导致之前 <code>==</code> 提案未能成功的查找问题。我猜测，关于比较运算符的讨论让很多人相信了我们总得做些什么，而 <code>&lt;=&gt;</code> 提案解决了很多各种问题，并与其他语言中熟悉的内容相吻合。</p><p>将来的某个时间，我很可能会再次提议为简单类缺省定义 <code>==</code> 和 <code>&lt;=&gt;</code>。C++ 的新人和普通用户理当享有这种简单性。</p><p><code>&lt;=&gt;</code> 被提议于 2017 年，错过了 C++17，但经过后来很多进一步的工作，它进入了 C++20（<a href="09.md#934-">§9.3.4</a>）。</p>]]></content>
    
    
    <summary type="html">C++17：大海迷航</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_09/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_09/</id>
    <published>2024-10-29T13:21:09.464Z</published>
    <updated>2024-10-29T13:26:22.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-C-20：方向之争"><a href="#9-C-20：方向之争" class="headerlink" title="9. C++20：方向之争"></a>9. C++20：方向之争</h1><p>由超过 350 名成员所组成的委员会来进行设计，不太可能产生一个连贯一致的结果。大家都有截然不同的背景（包括不同的教育背景），也都在各自的“日常工作”中承受不同的压力，自然会在方向上、优先级上和委员会程序上有不同的见解。粗略估算一下，对于每个提案，大概都有十多位成员会强烈反对其中部分内容。考虑到 WG21 希望同意人数达到 80% 或 90% 才宣告达成共识，C++ 到目前为止的成功令人惊讶。</p><h2 id="9-1-设计原则"><a href="#9-1-设计原则" class="headerlink" title="9.1 设计原则"></a>9.1 设计原则</h2><p>C++ 想发展成什么样？或者说，WG21 对于它在努力做什么有一个清晰的观点么？我认为答案是否定的。每位成员对于这个问题都有想法，但没有一个想法既被广泛接受，同时又足够具体到可以指导实际的讨论和决策。</p><p>ISO C++ 标准委员会既没有一组得到广泛认可的设计标准，也没有一组得到广泛认可的采纳某个特性的标准。这并不是因为缺少这方面的尝试。我曾经反复不断地明确强调以下设计标准：</p><ul><li>在《C++ 语言的设计和演化》[Stroustrup 1994]（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）中提出的“经验法则”包括 RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）、面向对象编程、泛型编程和静态类型安全。</li><li>“简单的事情简单做！”（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）则引出洋葱原则（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）。</li><li>从代码到硬件的直接映射和零开销抽象（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>）（<a href="11.md#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>）。</li><li>基于意见反馈来发展 C++，以解决现实世界的实际问题（<a href="11.md#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>）。</li><li>保持稳定性和兼容性 [Koenig and Stroustrup 1991b; Stroustrup 1994]。</li><li>直接和硬件打交道的能力，强有力的可组合的抽象机制，以及最小化的运行时系统（参见我在 HOPL3 的论文 [Stroustrup 2007] 中的回顾）。</li></ul><p>问题在于，人们发现要在解释上达成一致太难，而要忽视他们所不喜欢的又太容易。这种倾向，使得在“什么才是重要的”这个问题上的根本分歧得以发酵。大家基于他们所受的教育和他们的日常工作中所获得的理解，来做出设计决策。这种背景上的多样性，再加上标准委员会内部对于 C++ 广泛应用领域的不均衡覆盖（<a href="03.md#33-%E5%AF%B9%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BD%B1%E5%93%8D">§3.3</a>），就构成了一个问题。许多人只是对于自己的观点过于确定无疑 [Stroustrup 2019b]。而要分辨清楚到底什么只是一时的流行，什么从长远来看才对 C++ 社区有帮助，确实很困难。通常来说，第一个提出的解决方案往往不是最好的那个。</p><p>人们很容易在细节中迷失而忽略了大局。人们很容易关注当前的问题而忘记长期目标（以十年计）。相反，委员会成员是如此专注于通用的原则和遥远的未来，以至于对迫在眉睫的实际问题视而不见。</p><p>在 2017 年，一群国家标准机构代表团的领导人 [van Winkel et al. 2017] 要求对 C++ 的方向性问题予以正式严肃的考量，在他们的敦促之下，WG21 建立了<strong>方向组</strong>（Direction Group，通常称之为 DG）以试图解决设计目标和方向的问题（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。DG 在 2018 年 发布了它的第一个广泛而详尽的声明 [Dawes et al. 2018]，强调了要遵守明确清晰的原则、一致性，并鼓励用流程来确保这些。比如说：</p><blockquote><p>我们从根本上需要：</p><ul><li>稳定性：有用的代码“存活”达数十年。</li><li>不断演进：世界在不断变化，而 C++ 也需要不断改变以面对新的挑战。</li></ul><p>这里有一种内在的张力。</p></blockquote><p>DG 强调一致性有必要贯穿整个标准：</p><blockquote><p>现如今，某些最为强大的设计技术融合了传统的面向对象编程方面、泛型编程方面、函数式编程方面以及一些传统的命令式编程技术。这种组合，而不是理论上的纯粹，才是理想的。</p><ul><li>提供在风格（语法和语义）和使用风格上一致的特性。</li></ul><p>该要求适用于库、语言特性，以及这两者的组合</p></blockquote><p>当然了，还有静态类型：</p><blockquote><p>C++ 极其依赖于静态类型安全，以达成其表达能力、性能和安全性。理想的情况下应有</p><ul><li>完全的类型安全和资源安全（没有内存损坏和内存泄漏）</li></ul><p>该要求可以在不增加额外开销的情况下达成，尤其是，不需要添加垃圾收集器，也不需要限制表达能力。</p></blockquote><p>国家机构领导的要求 [van Winkel et al. 2017] 和 DG 的文档 [Dawes et al. 2018] 都强调了委员会成员需要了解 C++ 的历史，以确保一定程度的连续性。一个缺乏历史的组织无法对他们的设计内容保持一致性的观点。因此，HOPL 论文 [Stroustrup 1993, 2007] 和《C++ 语言的设计和演化》[Stroustrup 1994] 扮演了基石角色。</p><p>传统上，为符合 WG21 在 ISO 的章程，C++ 演化方面的工作主要都聚焦于语言和库的课题。然而，开发者不仅仅需要考虑语言：程序是工具链（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>）的产物。令人震惊的是，C++ 并没有关于动态链接库的标准，也没有标准化的构建系统。工具研究小组 SG15 在 2018 年成立，以尝试应对工具方面的形形色色的问题（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。</p><h2 id="9-2-我的-C-17-清单"><a href="#9-2-我的-C-17-清单" class="headerlink" title="9.2 我的 C++17 清单"></a>9.2 我的 C++17 清单</h2><p>我一直努力鼓励委员会关注重要的改进——而不只去做那些容易完成和容易达成一致的事情——作为这个努力的一部分，我制定了一个清单，包含了我认为重要且适合引入 C++17 的内容及其理由：</p><ul><li>概念——它让我们可以精确描述泛型程序，并解决对于错误信息质量的广泛抱怨。</li><li>模块——只要它可以显著地提高与宏的隔离并大大优化编译时间。</li><li>范围库和其他关键 STL 组件对概念的使用——为主流用户改进错误信息质量和提高库规范的精确性（“STL2”）。</li><li>统一调用语法——简化模板库的规范和使用。</li><li>协程——应该非常快速而简单。</li><li>网络库支持——基于 asio 库，如相应 TS 所描述。</li><li>契约——不一定需要在 C++17 的库规范中使用。</li><li>SIMD 向量和并行算法。</li><li>标准库词汇类型，比如 <code>optional</code>、<code>variant</code>、<code>string_view</code> 和 <code>array_view</code>。</li><li>一种在栈上提供数组（<code>stack_array</code>）的“魔法类型”，合理支持安全、便捷的使用。</li></ul><p>在 2015 年 4 月份，在 Kansas 州 Lenexa 的 WG21 会议中，我在晚间会议上向一些有共鸣的观众展示了这个清单。然而，几乎没有人感受到足够的动力去根据这个清单调整工作焦点。这个清单后来“泄露”了出去，并且在网上引起了混乱的讨论，因此我不得不把它正式写出来 [Stroustrup 2015a]。</p><p>如果是在一个团结的委员会中，该清单上的每一项都应该已经准备好进入 C++17 了。实际上我认为，如果我们专注于这个列表，完成其中的大约一半提案还是可行的。然而我还是过于乐观了。我们唯一达成共识的也就只有关于标准库词汇类型的那一项。其中 <code>array_view</code> 被重命名为 <code>span</code>，成了 C++20（<a href="#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>）的一部分。</p><p>幸运的是，列表上的大部分条目进入了 C++20。除了</p><ul><li>网络库（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）——现在是个 TS [Wakely 2018]</li><li>契约（<a href="#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）——差一点进入 C++20</li><li>统一函数调用（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）</li><li>SIMD 向量——目前在一个 TS 中 [Hoberock 2019]</li><li><code>stack_array</code></li></ul><p>这份列表带来了日程安排上的争论。鉴于概念的提案（<a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>）在 2016 年的失败看起来是不可避免了，我被询问——由整个委员会——是否我打算提议推迟标准的发布一到两年，来把概念加入到标准中，让标准变成 C++18 或者 C++19。我拒绝了，因为我认为可预见的发布周期对于整个社区而言更为重要，其重要性要超过某个单项的改进。而且，当时也无法确保一定会就该提案形成共识，再说一次日程延误很可能会造成更多的延误。如果一份提案被认为值得推迟标准发布，那么就会有人主张也有其他的提案同样值得标准发布的推迟。这样的逻辑使得 C++0x 变成了 C++11，哪怕当时曾有人希望是 C++06。</p><h2 id="9-3-C-20-特性"><a href="#9-3-C-20-特性" class="headerlink" title="9.3 C++20 特性"></a>9.3 C++20 特性</h2><p>WG21 将针对 C++20 的新提案的截止日期定为 2018 年 11 月，并在 2019 年 2 月会议之后宣布“特性冻结”。2020 年 2 月，在捷克共和国布拉格举行的一次会议上，技术投票结果为 79 比 0，一票弃权 [Smith 2020]。所有 15 个国家成员体的代表团团长均投了赞成票。官方标准将由 ISO 在 2020 年末发布。C++20 特性包括：</p><ul><li><a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>：<strong>概念</strong>——对泛型代码的要求进行明确规定</li><li><a href="#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>：<strong>模块</strong>——支持代码的模块化，使代码更卫生并改善编译时间</li><li><a href="#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>：<strong>协程</strong>——无栈协程</li><li><a href="#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>：<strong>编译期</strong>计算支持</li><li><a href="#934-">§9.3.4</a>：**&lt;&#x3D;&gt;**——三路比较运算符</li><li><a href="#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>：<strong>范围</strong>——提供灵活的范围抽象的库</li><li><a href="#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>：<strong>日期</strong>——提供日期类型、日历和时区的库</li><li><a href="#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>：<strong>跨度</strong>——提供对数组进行高效和安全访问的库</li><li><a href="#937-%E6%A0%BC%E5%BC%8F%E5%8C%96">§9.3.7</a>：<strong>格式化</strong>——提供类型安全的类似于 printf 的输出的库</li><li><a href="#94-%E5%B9%B6%E5%8F%91">§9.4</a>：<strong>并发改进</strong>——例如作用域线程和停止令牌</li><li><a href="#95-%E6%AC%A1%E8%A6%81%E7%89%B9%E6%80%A7">§9.5</a>：<strong>很多次要特性</strong>——例如 C99 风格的指派初始化器和使用字符串字面量作为模板参数</li></ul><p>以下内容在 C++20 时尚未准备就绪，但可能会成为 C++23 的主要特性：</p><ul><li><a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：<strong>网络</strong>——网络库（sockets 等）</li><li><a href="#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>：<strong>静态反射</strong>——根据周围程序生成代码的功能</li><li><strong>模式匹配</strong>——根据类型和对象值选择要执行的代码 [Murzin et al. 2019]</li></ul><p>C++20 提供了一组反映 C++ 长期目标的特性，并解决了一些根本问题。例如，在 1994 年的《C++ 语言的设计和演化》[Stroustrup 1994] 一书中就提到了模块和概念，而协程在整个 1980 年代都是“带类的 C”和 C++ 的一部分。C++20 对 C++ 的影响将与 C++11 一样大。</p><p>不幸的是，C++20 没有对模块和协程提供标准库支持。这可能会成为一个严重的问题，但当时实在没有时间来准备并赶上 C++20 的时间要求。C++23 应该会提供所需的支持（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）。</p><h3 id="9-3-1-模块"><a href="#9-3-1-模块" class="headerlink" title="9.3.1 模块"></a>9.3.1 模块</h3><p>在 C++ 程序中改进模块化是一个显然的需求。C++ 从 C 语言中继承了 <code>#include</code> 机制，它依赖于从头文件使用文本形式包含 C++ 源代码，这些头文件中包含了接口的文本定义。一个流行的头文件可以在大型程序的各个单独编译的部分中被 <code>#include</code> 数百次。基本问题是：</p><ul><li><strong>不够卫生</strong>：一个头文件中的代码可能会影响同一翻译单元中包含的另一个 <code>#include</code> 中的代码的含义，因此 <code>#include</code> 并非顺序无关。宏是这里的一个主要问题，尽管不是唯一的问题。</li><li><strong>分离编译的不一致性</strong>：两个翻译单元中同一实体的声明可能不一致，但并非所有此类错误都被编译器或链接器捕获。</li><li><strong>编译次数过多</strong>：从源代码文本编译接口比较慢。从源代码文本反复地编译同一份接口非常慢。</li></ul><p>自“开辟鸿蒙”而始，这已经众所周知（例如，参见《C++ 语言的设计和演化》[Stroustrup 1994] 第 18 章），但随着越来越多的信息被放入头文件（<code>inline</code> 函数、<code>constexpr</code> 函数，还有尤其是模板），这些问题在这些年里变得越来越严重。在 C++ 的早期，通常 10% 的文本来自头文件，但现在它更可能是 90% 甚至 99%。考虑下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段典型的代码有 70 个字符，但是在 <code>#include</code> 之后，它会产生 419909 个字符需要编译器来消化。尽管现代 C++ 编译器已有骄人的处理速度，但模块化问题已经迫在眉睫。</p><p>在委员会的鼓励下（并得到了我的支持），David Vandevoorde 在二十一世纪产出了一系列模块设计 [Vandevoorde 2007，2012]，但进展非常缓慢。委员会的首要任务是完成 C++0x，而不是在模块上取得进展。David 主要靠自己奋斗，此外基本就只得到一些精神支持了。在 2012 年，Doug Gregor 从苹果提交了一个完全不同的模块系统设计 [Gregor 2012]。在 Clang 编译器基础设施中，这一设计已经针对 C 和 Objective C 实现 [Clang 2014]。它依赖于语言之外的文件映射指令，而不是 C++ 语言里的构件。该设计还强调了不需要对头文件进行修改。</p><p>在 2014 年，由 Gabriel Dos Reis 领导的微软团队成员根据他们的工作提出了一项提案 [Dos Reis et al. 2014]。从精神层面上讲，它更接近于 David Vandevoorde 的设计，而不是 Clang&#x2F;苹果的提议，并且很大程度上是基于 Gabriel Dos Reis 和 Bjarne Stroustrup 在得州农工大学所做的关于 C++ 源代码的最优图表示的研究（于 2007 年发布并开源 [Dos Reis 2009; Dos Reis and Stroustrup 2009, 2011]）。</p><p>这为在模块方面取得重大进展奠定了基础，但同时也为苹果&#x2F;谷歌&#x2F;Clang 方式（和实现）及微软方式（和实现）之间的一系列冲突埋下了伏笔。</p><p>为此一个模块研究小组被创建。3 年后，该小组主要基于 Gabriel Dos Reis 的设计 [Dos Reis 2018] 制订了 TS。</p><p>在 2017 年，然后在 2018 年又发生了一次，将 Modules TS 纳入 C++20 标准的建议受阻，就因为谷歌提出了不同的设计 [Smith 2018a,b]。争论的主要焦点是在 Gabriel Dos Reis 的设计中宏无法导出。谷歌的人认为这是一个致命缺陷，而 Gabriel Dos Reis（和我）认为这对于模块化至关重要 [Stroustrup 2018c]：</p><blockquote><p>模块化是什么意思？顺序独立性：<code>import X; import Y;</code> 应该与 <code>import Y; import X;</code> 相同。换句话说，任何东西都不能隐式地从一个模块“泄漏”到另一个模块。这是 <code>#include</code> 文件的一个关键问题。<code>#include</code> 中的任何内容都会影响所有后续的 <code>#include</code>。</p></blockquote><p>我认为顺序独立性是“代码卫生”和性能的关键。通过坚持这种做法，Gabriel Dos Reis 的模块实现也比使用头文件在编译时间上得到了 10 倍量级的性能提升——即使在旧式编译中使用了预编译头文件也是如此。迎合传统头文件和宏的常规使用的方式很难做到这一点，因为需要将模块单元保持为允许宏替换（“标记汤”）的形式，而不是 C++ 逻辑实体的图。</p><p>经过精心设计的一系列折中，我们最终达成了一个被广泛接受的解决方案。这一多年努力的关键人物有 Richard Smith（谷歌）和 Gabriel Dos Reis（微软），以及 GCC 的模块实现者 Nathan Sidwell（Facebook），还有其他贡献者 [Dos Reis and Smith 2018a,b; Smith and Dos Reis 2018]。从 2018 年年中开始，大多数讨论都集中在需要精确规范的技术细节上，以确保实现之间的可移植性 [Sidwell 2018; Sidwell and Herring 2019]。</p><p>考虑如下代码所示的 C++20 模块的简单示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">export</span> <span class="hljs-keyword">module</span> map_printer;  <span class="hljs-comment">// 定义一个模块</span><br><br><span class="hljs-keyword">import</span> iostream;       <span class="hljs-comment">// 使用 iostream</span><br><span class="hljs-keyword">import</span> containers;     <span class="hljs-comment">// 使用我自己的 containers</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">export</span>                 <span class="hljs-comment">// 让 print_map() 对 map_printer 的用户可用</span><br><span class="hljs-keyword">template</span>&lt;Sequence S&gt;<br>    <span class="hljs-keyword">requires</span> Printable&lt;Key_type&lt;S&gt;&gt; &amp;&amp; Printable&lt;Value_type&lt;S&gt;&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_map</span><span class="hljs-params">(<span class="hljs-type">const</span> S&amp; m)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [key,val] : m)  <span class="hljs-comment">// 分离键和值</span><br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码定义了一个模块 <code>map_printer</code>，该模块提供函数 <code>print_map</code> 作为其用户接口，并使用了从模块 <code>iostream</code> 和 <code>containers</code> 导入的功能来实现该函数。为了强调与旧的 C++ 风格的区别，我使用了概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和结构化绑定（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）。</p><p>关键思想：</p><ul><li><code>export</code> 指令使实体可以被 <code>import</code> 到另一个模块中。</li><li><code>import</code> 指令使从另一个模块 <code>export</code> 出来的实体能够被使用。</li><li><code>import</code> 的实体不会被隐式地再 <code>export</code> 出去。</li><li><code>import</code> 不会将实体添加到上下文中；它只会使实体能被使用（因此，未使用的 <code>import</code> 基本上是无开销的）。</li></ul><p>最后两点不同于 <code>#include</code>，并且它们对于模块化和编译期性能至关重要。</p><p>这个简单的例子纯粹是基于模块的；这是理想情况。但是，已经部署的 C++ 代码也许有五千亿行，而头文件和 <code>#include</code> 并不会在一夜之间被淘汰，可能再过几十年都不会。好几个人和组织指出，我们需要一些过渡机制，使得头文件和模块可以在程序中共存，并让库为不同代码成熟度的用户同时提供头文件和模块的接口。请记住，在任何给定的时刻，都有用户依赖 10 年前的编译器。</p><p>考虑在无法修改 <code>iostream</code> 和 <code>container</code> 头文件的约束下实现 <code>map_printer</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">export</span> <span class="hljs-keyword">module</span> map_printer;  <span class="hljs-comment">// 定义一个模块</span><br><br><span class="hljs-keyword">import</span> &lt;iostream&gt;      <span class="hljs-comment">// 使用 iostream 头文件</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;containers&quot;</span>    <span class="hljs-comment">// 使用我自己的 containers 头文件</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">export</span>                 <span class="hljs-comment">// 让 print_map() 对 map_printer 的用户可用</span><br><span class="hljs-keyword">template</span>&lt;Sequence S&gt;<br>    <span class="hljs-keyword">requires</span> Printable&lt;Key_type&lt;S&gt;&gt; &amp;&amp; Printable&lt;Value_type&lt;S&gt;&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_map</span><span class="hljs-params">(<span class="hljs-type">const</span> S&amp; m)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [key,val] : m)  <span class="hljs-comment">// 分离键和值</span><br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指名某个头文件的 <code>import</code> 指令工作起来几乎与 <code>#include</code> 完全一样——宏、实现细节以及递归地 <code>#include</code> 到的头文件。但是，编译器确保 <code>import</code> 导入的“旧头文件”不会相互依赖。也就是说，头文件的 <code>import</code> 是顺序无关的，因此提供了部分、但并非全部的模块化的好处。例如，像 <code>import &lt;iostream&gt;</code> 这样导入单个头文件，程序员就需要去决定该导入哪些头文件，也因为与文件系统进行不必要的多次交互而降低编译速度，还限制了来自不同头文件的标准库组件的预编译。我个人希望看到颗粒度更粗的模块，例如，标准的 <code>import std</code> 表示让整个标准库都可用。然而，更有雄心的标准库重构 [Clow et al. 2018] 必须要推迟到 C++23（<a href="11.md#115-%E6%9C%AA%E6%9D%A5">§11.5</a>）了。</p><p>像 <code>import</code> 头文件这样的功能是谷歌&#x2F;Clang 提案的重要组成部分。这样做的一个原因是有些库的主要接口就是一堆宏。</p><p>在设计&#x2F;实现&#x2F;标准化工作的后期，反对意见集中在模块对构建系统的可能影响上。当前 C 和 C++ 的构建系统对处理头文件已经做了大量优化。数十年的工作已经花费在优化这一点上，一些与传统构建系统相关的人表示怀疑，是否可以不经（负担不起的）重大重新设计就顺利引入模块，而使用模块的构建会不允许并行编译（因为当前要导入的模块依赖于某个先前已导入模块的编译结果）[Bindels et al. 2018; Lopes et al. 2019; Rivera 2019a]。幸运的是，早期印象过于悲观了 [Rivera 2019b]，build2 系统已经为处理模块进行了修改，微软和谷歌报告说他们的构建系统在处理模块方面显示出良好的效果，最后 Nathan Sidwell 报告说他在仅两周的业余时间里修改了 GNU 的构建系统来处理模块 [Sidwell 2019]。这些经验的最终演示及关键模块实现者（Gabriel Dos Reis、Nathan Sidwell、Richard Smith 和 David Vandevoorde）的联署论文打动了几乎所有反对者 [Dos Reis et al. 2019]。</p><p>在 2019 年 2 月，模块得到了 46 比 6 的多数票，进入了 C++20；投票者中包含了所有的实现者 [Smith 2019]。在那时，主要的 C++ 实现已经接近 C++20 标准。模块有望成为 C++20 提供的最重要的单项改进。</p><h3 id="9-3-2-协程"><a href="#9-3-2-协程" class="headerlink" title="9.3.2 协程"></a>9.3.2 协程</h3><p>协程提供了一种协作式多任务模型，比使用线程或进程要高效得多。协程曾是早期 C++ 的重要组成部分。如果没有提供协程的任务库，C++ 将胎死腹中，但是由于多种原因，协程并没有进入 C++98 标准（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>）。</p><p>C++20 协程的历史始于 Niklas Gustafsson（微软）关于“可恢复函数”的提案 [Gustafsson 2012]。其主要目的是支持异步 I&#x2F;O；“能够处理成千上万或以百万计客户的服务器应用程序”[Kohlhoff 2013]。它相当于当时引入到 C#（2015 年的 6.0 版）的 async&#x2F;await 功能。类似的功能已经存在于 Python、JavaScript 和其他语言里。Niklas 的提案引发了来自 Oliver Kowalke 和 Nat Goodspeed [Kowalke and Goodspeed 2013] 的基于 Boost.Coroutine 的竞争提案，并引起了人们的浓厚兴趣。<code>await</code> 设计无栈、不对称且需要语言支持，而源自 Boost 的设计则使用栈、具有对称控制原语且基于库。无栈协程只能在其自身函数体中挂起，而不能从其调用的函数中挂起。这样，挂起仅涉及保存单个栈帧（“协程状态”），而不是保存整个栈。对于性能而言，这是一个巨大的优势。</p><p>协程的设计空间很大，因此很难达成共识。委员会中的许多人（包括我在内）都希望能够综合考虑这两种方式的优点，因此一群感兴趣的成员对可选方案进行了分析 [Goodspeed 2014]。结论是，有可能同时利用这两种方式的优点，但这需要认真研究。这项研究花了数年时间，但没有得出明确的结果。与此同时，出现了更多的提案。</p><p>至于密切相关的并发主题（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>），对所编写、演示和讨论的提案的完整解释超出了本文的范围。在这里，我只描述一个概况。因为复杂的细节简直太多，在此也只能简而言之；仅论文就有数百页，许多讨论都取决于高级用例的（有时是假设的）高度优化实现的性能。讨论发生在 SG1（并发）、EWG（演化）、LEWG（库演化）、CWG（核心语言）、LWG（库），甚至在晚间会议和全体会议上。</p><p>在这些讨论和提案中，三种想法反复出现：</p><ul><li>将协程的状态及其操作表示为 lambda 表达式，从而使协程优雅地适配 C++ 类型系统，而不需要 <code>await</code> 式协程 [Kohlhoff 2013] 所使用的某些“编译器魔法”。</li><li>为无栈和有栈协程提供通用接口——也可能为其他类型的并发机制，例如线程和纤程，提供通用接口。[Kowalke 2015; Riegel 2015]。</li><li>为了在最简单和最关键的用途（生成器和管道）上获得最佳性能（运行时间和空间），无栈协程需要编译器支持，并且一定不能为了支持更高级的用例而在接口上作妥协 [Nishanov 2018，2019b]。</li></ul><p>你不可能同时满足这三者。我非常喜欢通用接口的想法，因为这样可以最大限度地减少学习需要的努力，并使得实验大为便捷。类似地，使用完全普通的对象来表示协程将开放整个语言来支持协程。然而，最终性能论胜出。</p><p>在 2017 年，Gor Nishanov 基于 <code>await</code> 无栈方式的提案被接受为 TS [Nishanov 2017]。这一提案（不可避免地被戏称为“Gor-routines”）获得批准的原因是，它的实现在其关键用例（管道和生成器）中表现出了卓越的性能 [Jonathan et al. 2018; Psaropoulos et al. 2017]。之所以把它写成 TS，而不是放到标准中，是因为许多人喜欢更通用（但速度较慢）的有栈协程，有些人仍然希望这两种方式的零开销统一。我当时（今天仍没有变）的观点是，在合理的时间段里，统一并不可能。我已经等了近 30 年的时间让协程重新回到 C++ 中，我可不想等待一个可能永远不会到来的突破：“最好是好的敌人。”</p><p>和往常一样，命名是一个有争议的问题。特别是，TS 草案使用了关键字 <code>yield</code>，这很快被判定为一个流行的标识符（例如，在金融和农业领域）。而且，协程产生的结果需要被包到一个调用者可以等待的结构中（例如，<code>future</code>（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）），因此，协程 <code>return</code> 语句的语义与普通 <code>return</code> 语句的语义不是完全一样。所以，有些人就反对 <code>return</code> 的“复用”。作为回应，演化工作组引入了关键字 <code>co_return</code>、<code>co_yield</code> 和 <code>co_await</code>，用于协程中的三个关键操作。使用下划线是为了防止母语为英语的人将 <code>coreturn</code>、<code>coyield</code> 和 <code>coawait</code> 误读为 <code>core-turn</code>、<code>coy-ield</code> 和 <code>coa-wait</code>。人们也探索了使 <code>yield</code> 和 <code>await</code> 成为上下文敏感的关键词的可能性，但没有达成共识。这些新的关键词并不漂亮，它们很快就成为了那些出于任何原因不喜欢 TS 协程的人们的靶子。</p><p>在 2018 年，TS 协程被提议纳入 C++20 标准，但在最后那一刻，来自谷歌的 Geoff Romer、James Dennett 和 Chandler Carruth 提出了一个对新手颇不友好的提案 [Romer et al. 2018]。谷歌的提案名为“核心协程”（Core Coroutines），它和 Gor 的提案一样，需要库支持来使基本机制对非专家用户变得友好。所需要的库当时还没有设计好。核心协程被宣称比 TS 协程更高效，并且解决了谷歌的一个用例，用于不基于异常的错误传播。其思想基于将协程的状态表示为 lambda 表达式。为了避免人们普遍鄙视的关键词 <code>co_return</code>、<code>co_yield</code> 和 <code>co_await</code>，核心协程提供了据称更友好的运算符 <code>[-&gt;]</code> 和 <code>[&lt;-]</code>。令人惊讶的是，作为运算符，<code>[-&gt;]</code> 有四个字符长，并且有四个操作数，“<code>[</code>”和“<code>]</code>”是标记的一部分。不幸的是，核心协程没有实现，因此可用性和效率的主张无法得到验证。这推迟了关于协程的进一步决定。</p><p>TS 协程的一个重要且可能致命的问题是，它依赖于自由存储区（动态内存、堆）上的分配。在某些应用程序中，这是很大的开销。更糟糕的是，对于许多关键的实时和嵌入式应用程序，自由存储区的使用是不允许的，因为它可能导致不可预测的响应时间和内存碎片的可能性。核心协程没有这个问题。然而，Gor Nishanov 和 Richard Smith 论证了，TS 协程可以通过多种方式之一保证几乎所有用法下都不使用自由存储区（并对其他用法进行检测和预防）[Smith and Nishanov 2018]。特别是，对于几乎所有的关键用例，都可以将自由存储区使用优化为栈分配（所谓的“Halo 优化”<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：Heap Allocation eLision Optimization">[1]</span></a></sup>）。</p><p>随着时间的推移，核心协程不断发展和完善 [Romer et al. 2019a]，但完整的实现一直没有出现。在 2018 年，保加利亚国家标准机构反对 TS 协程设计 [Mihaylov and Vassilev 2018]，并提出了另一种设计 [Mihaylov and Vassilev 2019]。又一次，提案宣称具有优雅、通用性和高性能，但同样地，没有任何实现存在。</p><p>这时候，演化小组的负责人 Ville Voutilainen 要求这三个仍然活跃的提案的作者撰写两份评估和比较论文：</p><ul><li><em>Coroutines: Use-cases and Trade-offs</em>（《协程：用例与取舍》）[Romer et al. 2019b]</li><li><em>Coroutines: Language and Implementation Impact</em>（《协程：语言与实现影响》）[Smith et al. 2019]</li></ul><p>这三个提案（Gor、谷歌和保加利亚）都是无栈的，需要栈的用例被留给未来的提案。所有这些提案都有数量惊人的定制点 [Nishanov 2018]，它们的实现者和专家用户都认为这些是必不可少的。结果表明，在不同的提案中，关键用例的表达并没有显著不同。因此，这些差异可以认为很大程度上只是表面文章，不用多理会。例如，<code>co_await</code> 比 <code>[&lt;-]</code> 更丑吗？</p><p>这就只留下性能问题有待讨论。Gor 的提案，因为有着四年的生产环境使用，并在微软和 Clang 编译器中都有实现，而具有明显的优势。在 C++20 的关键投票之前的最后几次会议上，委员会听取了来自 Sandia [Hollman 2019]、微软 [Jonathan et al. 2018] 和 Facebook [Howes et al. 2018] 的人的体验报告，并考虑了一些关于基于使用体验的改进和简化的建议 [Baker 2019]。然而，（据我判断）打动委员会、使其以 48 比 4 的绝对优势投票支持 Gor-routine 的要点是，在使用“普通的 lambda 表达式”来代表协程状态的策略中发现了一个根本性的缺陷。为了使表示协程状态的 lambda 表达式与其他 lambda 表达式一样，必须在编译的第一阶段就知道其大小。只有这样，我们才能在栈上分配协程状态、复制它们、移动它们，并以语言允许的各种方式使用它们。但是，在优化器运行之前，栈帧（根本上，这就是无栈协程的状态）的大小是未知的。没有从优化器返回到编译器早期阶段的信息路径。优化器可能会通过消除变量来减小帧的大小，也可能会通过添加有用的临时变量来增加帧的大小。因此，用来代表某个协程状态的 lambda 表达式不能是“普通的”。</p><p>最后，考虑一个 C++20 协程的简单例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">generator&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 生成 0,1,1,2,3,5,8,13 ...</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 初值</span><br>    <span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span> next = a+b;<br>        <span class="hljs-keyword">co_yield</span> a;    <span class="hljs-comment">// 返回下一个斐波那契数</span><br>        a = b;         <span class="hljs-comment">// 更新值</span><br>        b = next;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : <span class="hljs-built_in">fibonacci</span>())<br>        cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>co_yield</code> 使 <code>fibonacci()</code> 成为一个协程。<code>generator&lt;int&gt;</code> 返回值将保存生成的下一个 <code>int</code> 和 <code>fibonacci()</code> 等待下一个调用所需的最小状态。对于异步使用，我们将用 <code>future&lt;int&gt;</code> 而不是 <code>generator&lt;int&gt;</code>。对协程返回类型的标准库支持仍然不完整，不过库就应该在生产环境的使用中成熟。</p><p>委员会本来可以更好地处理协程提案吗？也许可以吧；C++20 协程与 Niklas Gustafsson 2012 年的提案非常相似。我们探索了替代方案固然很好，但我们真的需要 7 年时间吗？许多有能力的人所做的大量努力是否可以更多协作、更少竞争？我觉得更好的学术知识在早期阶段会有所帮助。毕竟，协程有约 60 年的历史，例如 [Conway 1963]。人们是知道 C++ 和相关语言中的现代方法的，但我们的理解既未共享，也不系统。如果我们当初花上几个月或一年的时间对基本设计选择、实现技术、关键用例和文献进行彻底审核，我怀疑我们早在 2014 年就可以得出 2019 年 2 月得出的结论。之后的几年本可以花在对我们所选择的基本方法进行增量改进和功能添加上。</p><p>我们取得的进展和最后的成功很大程度上归功于 Gor Nishanov。要不是有他的坚韧不拔和扎实实现（他完成了微软和 Clang 两种编译器里的实现），我们在 C++20 也不会有协程。锲而不舍是在委员会成功的关键要素。</p><h3 id="9-3-3-编译期计算支持"><a href="#9-3-3-编译期计算支持" class="headerlink" title="9.3.3 编译期计算支持"></a>9.3.3 编译期计算支持</h3><p>多年以来，在 C++ 中编译期求值的重要性一直在稳步提高。STL 严重依赖于编译期分发 [Stroustrup 2007]，而模板元编程主要旨在将计算从运行期转移到编译期（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。甚至在早期的 C++ 中，对重载的依赖以及虚函数表的使用都可以看作是通过将计算从运行期转移到编译期来获得性能。因此，编译期计算一直是 C++ 的关键部分。</p><p>C++ 从 C 继承了只限于整型且不能调用函数的常量表达式。曾有一段时间，宏对于任何稍微复杂点的事情都必不可少。但这些都不好规模化。一经引入模板并发现了模板元编程，模板元编程就被广泛用于在编译期计算值和类型上（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。在 2010 年，Gabriel Dos Reis 和 Bjarne Stroustrup 发表了一篇论文，指出编译期的值计算可以（也应该）像其他计算一样表达，一样地依赖于表达式和函数的常规规则，包括使用用户定义的类型 [Dos Reis and Stroustrup 2010]。这成为了 C++11 里的 <code>constexpr</code> 函数（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>），它是现代编译期编程的基础。C++14 推广了 <code>constexpr</code> 函数（<a href="05.md#55-constexpr-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">§5.5</a>），而 C++20 增加了好几个相关的特性：</p><ul><li><code>consteval</code>——保证在编译期进行求值的 <code>constexpr</code> 函数 [Smith et al. 2018a]</li><li><code>constinit</code>——保证在编译期初始化的声明修饰符 [Fiselier 2019]</li><li>允许在 <code>constexpr</code> 函数中使用成对的 <code>new</code> 和 <code>delete</code> [Dimov et al. 2019]</li><li><code>constexpr string</code> 和 <code>constexpr vector</code> [Dionne 2018]</li><li>使用 <code>virtual</code> 函数 [Dimov and Vassilev 2018]</li><li>使用 <code>unions</code>、异常、<code>dynamic_cast</code> 和 <code>typeid</code> [Dionne and Vandevoorde 2018]</li><li>使用用户定义类型作为值模板参数——最终允许在任何可以用内置类型的地方使用用户定义类型 [Maurer 2012]</li><li><code>is_constant_evaluated()</code> 谓词——使库实现者能够在优化代码时大大减少平台相关的内部函数的使用 [Smith et al. 2018b]</li></ul><p>随着这一努力，标准库正在变得对编译期求值更加友好。</p><p>这一努力的最终目的是为了让 C++23 或更高版本支持静态反射（<a href="#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）。在我最初设计模板时，曾期望使用用户自定义类型作为模板参数类型，使用字符串作为模板参数，但以我当时的能力无法恰当地设计和实现出这一功能。</p><p>有些人希望<strong>每一个</strong> C++ 构件在编译期都能可用。特别是，他们希望能够在 <code>constexpr</code> 函数中使用完整的标准库。那可能就好过头了。比如，你真的需要在编译期使用线程吗？是的，这可行。没有使所有函数在编译期都可用，这就给我们留下了一个问题：哪些应该可用，哪些不应该可用。到目前为止，答案有点临场发挥而并不连贯。这需要进一步完善。</p><p>要让一个语言的构件或库组件成为 <code>constexpr</code>，我们必须非常精确地进行描述，并消除未定义行为的可能性。因此，推动编译期求值已经成为更精确的规范说明、平台依赖性分析和未定义行为根源分析的主要驱动力。</p><p>显然，这种对编译期计算的推动为编译器带来了更多的工作。接口里需要增加更多的信息，来允许编译器完成所有的工作，这个问题正在通过模块来解决（<a href="#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）。编译器还通过缓存结果进行补偿，依赖并行构建的系统也很常见。然而，C++ 程序员必须学会限制编译期计算和元编程的使用，只有在值得为了代码紧凑性和运行期性能而引入它们的地方才使用。</p><h3 id="9-3-4"><a href="#9-3-4" class="headerlink" title="9.3.4 &lt;&#x3D;&gt;"></a>9.3.4 &lt;&#x3D;&gt;</h3><p>参见（<a href="08.md#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>）。紧接在“飞船运算符”（<code>&lt;=&gt;</code>）投票进入 C++20 之后，很明显，在语言规则及其与标准库的集成方面都需要进一步的认真工作。出于对解决跟比较有关的棘手问题的过度热情和渴望，委员会成了意外后果定律的受害者。一些委员（包括我在内）担心引入 <code>&lt;=&gt;</code> 过于仓促。然而，在我们的担忧坐实的时候，早已经有很多工作在假设 <code>&lt;=&gt;</code> 可用的前提下完成了。此外，三路比较可能带来的性能优势让许多委员会成员和其他更广泛的 C++ 社区成员感到兴奋。因此，当发现 <code>&lt;=&gt;</code> 在重要用例中导致了显著的低效时，那就是一个相当令人不快的意外了。类型有了 <code>&lt;=&gt;</code> 之后，<code>==</code> 是从 <code>&lt;=&gt;</code> 生成的。对于字符串，<code>==</code> 通常通过首先比较大小来优化：如果字符数不同，则字符串不相等。从 <code>&lt;=&gt;</code> 生成的 <code>==</code> 则必须读取足够的字符串以确定它们的词典顺序，那开销就会大得多了。经过长时间的讨论，我们决定不从 <code>&lt;=&gt;</code> 生成 <code>==</code>。这一点和其他一些修正 [Crowl 2018; Revzin 2018, 2019; Smith 2018c] 解决了手头的问题，但损害了 <code>&lt;=&gt;</code> 的根本承诺：所有的比较运算符都可以从一行简单的代码中生成。此外，由于 <code>&lt;=&gt;</code> 的引入，<code>==</code> 和 <code>&lt;</code> 现在有了许多不同于其他运算符的规则（例如，<code>==</code> 被假定为对称的）。无论好坏，大多数与运算符重载相关的规则都将 <code>&lt;=&gt;</code> 作为特例来对待。</p><h3 id="9-3-5-范围"><a href="#9-3-5-范围" class="headerlink" title="9.3.5 范围"></a>9.3.5 范围</h3><p><strong>范围库</strong>始于 Eric Niebler 对 STL 序列观念的推广和现代化的工作 [Niebler et al. 2014]。它提供了更易于使用、更通用及性能更好的标准库算法。例如，C++20 标准库为整个容器的操作提供了期待已久的更简单的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(vector&lt;string&gt;&amp; vs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(vs);   <span class="hljs-comment">// 而不是 sort(vs.begin(),vs.end())</span><br>&#125;<br></code></pre></td></tr></table></figure><p>C++98 [Stroustrup 1993] 所采用的原始 STL 将序列定义为一对迭代器。这遗漏了指定序列的两种重要方式。范围库提供了三种主要的替代方法（现在称为 <code>ranges</code>）：</p><ul><li><code>(首项,尾项过一)</code> 用于当我们知道序列的开始和结束位置时（例如“对 vector 的开始到结束位置进行排序”）。</li><li><code>(首项,元素个数)</code> 用于当我们实际上不需要计算序列的结尾时（例如“查看列表的前 10 个元素”）。</li><li><code>(首项,结束判据)</code> 用于当我们使用谓词（例如，一个哨位）来定义序列的结尾时（例如“读取到输入结束”）。</li></ul><p><code>range</code> 本身是一种 <code>concept</code>（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。所有 C++20 标准库算法现在都使用概念进行了精确规定。这本身就是一个重大的改进，并使得我们在算法里可以推广到使用范围，而不仅仅是迭代器。这种推广允许我们把算法如管道般连接起来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><br><span class="hljs-keyword">auto</span> even = [](<span class="hljs-type">int</span> i)&#123; <span class="hljs-keyword">return</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>; &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : vec | view::<span class="hljs-built_in">filter</span>(even)<br>                 | view::<span class="hljs-built_in">transform</span>( [](<span class="hljs-type">int</span> i) &#123; <span class="hljs-keyword">return</span> i*i; &#125; )<br>                 | view::<span class="hljs-built_in">take</span>(<span class="hljs-number">5</span>))<br>    cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;    <span class="hljs-comment">// 打印前 5 个偶整数的平方</span><br></code></pre></td></tr></table></figure><p>像在 Unix 中一样，管道运算符 <code>|</code> 将其左操作数的输出作为输入传递到其右操作数（例如 <code>A|B</code> 表示 <code>B(A)</code>）。一旦人们开始使用协程（<a href="#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）来编写管道过滤器，这就会变得有趣得多。</p><p>在 2017 年，范围库成为了 TS [Niebler and Carter 2017]；在 2019 年 2 月，它被投进了 C++20 [Niebler et al. 2018]。</p><h3 id="9-3-6-日期和时区"><a href="#9-3-6-日期和时区" class="headerlink" title="9.3.6 日期和时区"></a>9.3.6 日期和时区</h3><p>日期库是 Howard Hinnant（现在任职于 Ripple，之前任职于苹果）的作品，为 C++ 提供标准的日历和时区支持 [Hinnant and Kamiński 2018]。它基于 <code>chrono</code> 标准库的时间支持。Howard 也是 <code>chrono</code> 标准库（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）背后的主要人物。日期库是多年工作和实际使用的结果。在 2018 年，它通过投票进入了 C++20，并和旧的时间工具一起放在 <code>&lt;chrono&gt;</code> 中。</p><p>考虑如何表达时间点（<code>time_point</code>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> tp = <span class="hljs-number">2016</span>y/May/<span class="hljs-number">29</span>d + <span class="hljs-number">7</span>h + <span class="hljs-number">30</span>min + <span class="hljs-number">6</span>s + <span class="hljs-number">153</span>ms;<br>cout &lt;&lt; tp &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;    <span class="hljs-comment">// 2016-05-29 07:30:06.153</span><br></code></pre></td></tr></table></figure><p>这一写法很传统（使用用户定义的字面量<a href="04.md#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>）），日期表示为 <code>年,月,日</code> 结构。但是，当需要时，日期会在编译期映射到标准时间线（<code>system_time</code>）上的某个点（使用 <code>constexpr</code> 函数（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）），因此它极其快速，也可以在常量表达式中使用。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">static_assert</span>(<span class="hljs-number">2016</span>y/May/<span class="hljs-number">29</span>==Thursday);  <span class="hljs-comment">// 编译期检查</span><br></code></pre></td></tr></table></figure><p>默认情况下，时区是 UTC（又称 Unix 时间），但转换为不同的时区很容易：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">zoned_time zt = &#123;<span class="hljs-string">&quot;Asia/Tokyo&quot;</span>, tp&#125;;<br>cout &lt;&lt; zt &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;          <span class="hljs-comment">// 2016-05-29 16:30:06.153 JST</span><br></code></pre></td></tr></table></figure><p>日期库还可以处理星期几（例如，<code>Monday</code> 和 <code>Friday</code>）、多个日历（例如，格里历和儒略历），以及更深奥（但必要）的概念，比如闰秒。</p><p>除了有用和快速之外，日期库还有趣在它提供了非常细粒度的静态类型检查。常见错误会在编译期捕获。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> d1 = <span class="hljs-number">2019</span>y/<span class="hljs-number">5</span>/<span class="hljs-number">4</span>;    <span class="hljs-comment">// 错误：是 5 月 4 日还是 4 月 5 日？</span><br><span class="hljs-keyword">auto</span> d2 = <span class="hljs-number">2019</span>y/May/<span class="hljs-number">4</span>;  <span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">auto</span> d2 = May/<span class="hljs-number">4</span>/<span class="hljs-number">2019</span>;   <span class="hljs-comment">// 正确（日跟在月后面）</span><br><span class="hljs-keyword">auto</span> d3 = d2+<span class="hljs-number">10</span>;        <span class="hljs-comment">// 错误：是加 10 天、10 个月还是 10 年？</span><br></code></pre></td></tr></table></figure><p>日期库是标准库组件中的一个少见的例子，它直接服务于某应用领域，而非“仅仅”提供支持性的“计算机科学”抽象。我希望在将来的标准中能看到更多这样的例子。</p><h3 id="9-3-7-格式化"><a href="#9-3-7-格式化" class="headerlink" title="9.3.7 格式化"></a>9.3.7 格式化</h3><p>iostream 库提供了类型安全的 I&#x2F;O 的扩展，但是它的格式化工具比较弱。另外，还有的人不喜欢使用 <code>&lt;&lt;</code> 分隔输出值的方式。格式化库提供了一种类 <code>printf</code> 的方式去组装字符串和格式化输出值，同时这种方法类型安全、快捷，并能和 iostream 协同工作。这项工作主要是由 Victor Zverovich [Zverovich 2019] 完成的。</p><p>类型中带有 <code>&lt;&lt;</code> 运算符的可以在一个格式化的字符串中输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;foo&quot;</span>;<br>cout &lt;&lt; format(<span class="hljs-string">&quot;The string &#x27;&#123;&#125;&#x27; has &#123;&#125; characters&quot;</span>,s,s.<span class="hljs-built_in">size</span>());<br></code></pre></td></tr></table></figure><p>输出结果是 <code>The string &#39;foo&#39; has 3 characters</code>。</p><p>这是“类型安全的 <code>printf</code>”变参模板思想的一个变体（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。大括号 <code>&#123;&#125;</code> 简单地表示了插入参数值的默认表示形式。</p><p>参数值可以按照任意顺序被使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// s 在 s.size() 前：</span><br>cout &lt;&lt; format(<span class="hljs-string">&quot;The string &#x27;&#123;0&#125;&#x27; has &#123;1&#125; characters&quot;</span>,s,s.<span class="hljs-built_in">size</span>());<br><span class="hljs-comment">// s.size() 在 s 前：</span><br>cout &lt;&lt; format(<span class="hljs-string">&quot;The string &#x27;&#123;1&#125;&#x27; has &#123;0&#125; characters&quot;</span>,s.<span class="hljs-built_in">size</span>(),s);<br></code></pre></td></tr></table></figure><p>像 <code>printf()</code> 一样，<code>format()</code> 为展现格式化细节提供了一门小而完整的编程语言，比如字段宽度、浮点数精度、整数基和字段内对齐。不同于 <code>printf()</code>，<code>format()</code> 是可扩展的，可以处理用户定义类型。下面是 <code>&lt;chrono&gt;</code> 库中（<a href="#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>）一个打印日期的例子 [Zverovich et al. 2019]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s1 = format(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, birthday);<br>string s2 = format(<span class="hljs-string">&quot;&#123;0:&gt;15%Y-%m-%d&#125;&quot;</span>, birthday);<br></code></pre></td></tr></table></figure><p>“年-月-日”是默认格式。<code>&gt;15</code> 意味着使用 15 个字符和右对齐文本。日期库中还包含了另一门小的格式化语言可以同 <code>format()</code> 一起用。它甚至可以用来处理时区和区域：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::format(std::locale&#123;<span class="hljs-string">&quot;fi_FI&quot;</span>&#125;, <span class="hljs-string">&quot;&#123;&#125;&quot;</span>, zt);<br></code></pre></td></tr></table></figure><p>这段代码将会给出芬兰的当地时间。默认情况下，格式化不依赖于区域，但是你可以选择是否根据区域来格式化。相比于传统的 iostream，默认区域无关的格式化大大提升了性能，尤其是当你不需要区域信息的时候。</p><p>输入（<code>istream</code>）没有等价的 <code>format</code> 支持。</p><h3 id="9-3-8-跨度"><a href="#9-3-8-跨度" class="headerlink" title="9.3.8 跨度"></a>9.3.8 跨度</h3><p>越界访问，有时也称为缓冲区溢出，从 C 的时代以来就一直是一个严重的问题。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>* p, <span class="hljs-type">int</span> n)</span>  <span class="hljs-comment">// n 是什么？</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; ++i)<br>        p[i] = <span class="hljs-number">7</span>;  <span class="hljs-comment">// 可以吗？</span><br>&#125;<br></code></pre></td></tr></table></figure><p>试问一个工具，比如编译器要如何知道 <code>n</code> 代表着所指向的数组中元素的个数？一个程序开发人员如何要能够在一个大型程序中对此始终保持正确？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">f</span>(a,x);    <span class="hljs-comment">// 可以</span><br><span class="hljs-built_in">f</span>(a,x/<span class="hljs-number">2</span>);  <span class="hljs-comment">// 可以：a 的前半部分</span><br><span class="hljs-built_in">f</span>(a,x+<span class="hljs-number">1</span>);  <span class="hljs-comment">// 灾难！</span><br></code></pre></td></tr></table></figure><p>几十年来，像“灾难”这样的评论一向是准确的，范围错误也一直是大多数重大安全问题的根因。编译器不能够捕获范围错误，而运行期检查所有的下标则普遍被认为对于生产代码来说代价过于高昂。</p><p>显而易见的解决方案就是提供一种抽象机制，带有一个指针再加上一个大小。举例来说，1990 年，Dennis Ritchie 向 C 标准委员会提议：“‘胖指针’，它的表示中包括了内存空间以存放运行期可调整的边界。”[Ritchie 1990]。由于各种原因，C 标准委员会没有通过这个提案。在当时，我听到一条极可笑的评论：“Dennis 不是 C 的专家；他从不来参加会议。”我没记住这到底是谁说的，也许这是件好事。</p><p>2015 年，Neil MacIntosh（那个时候他还在微软）在 C++ 核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）里恢复了这一想法，那里我们需要一种机制来鼓励和选择性地强制使用高效编程风格。<code>span&lt;T&gt;</code> 类模板就这样被放到 C++ 核心指南的支持库中，并立即被移植到微软、Clang 和 GCC 的 C++ 编译器里。2018 年，它投票进入了 C++20。</p><p>使用 <code>span</code> 的一个例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(span&lt;<span class="hljs-type">int</span>&gt; a)</span>  <span class="hljs-comment">// span 包含一根指针和一条大小信息</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>&amp; x : a)<br>        x = <span class="hljs-number">7</span>;  <span class="hljs-comment">// 可以</span><br>&#125;<br></code></pre></td></tr></table></figure><p>范围 <code>for</code> 从跨度中提取范围，并准确地遍历正确数量的元素（无需代价高昂的范围检查）。这个例子说明了一个适当的抽象可以同时简化写法并提升性能。对于算法来说，相较于挨个检查每一个访问的元素，明确地使用一个范围（比如 <code>span</code>）要容易得多，开销也更低。</p><p>如果有必要的话，你可以显式地指定一个大小（比如操作一个子范围）。但这样的话，你需要承担风险，并且这种写法比较扎眼，也易于让人警觉：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">f</span>(a);        <span class="hljs-comment">// 模板参数推导：f(span&lt;int&gt;&#123;a, 100&#125;)</span><br><span class="hljs-built_in">f</span>(&#123;a,x/<span class="hljs-number">2</span>&#125;);  <span class="hljs-comment">// 可以：a 的前半部分</span><br><span class="hljs-built_in">f</span>(&#123;a,x+<span class="hljs-number">1</span>&#125;);  <span class="hljs-comment">// 灾难</span><br></code></pre></td></tr></table></figure><p>自然，简单的元素访问也办得到，比如 <code>a[7]=9</code>，同时运行期也能进行检查。<code>span</code> 的范围检查是 C++ 核心指南支持库（GSL）的默认行为。</p><p>事实证明，将 <code>span</code> 纳入 C++20 的最具争议的部分在于下标和大小的类型。C++ 核心指南中 <code>span::size()</code> 被定义返回一个有符号整数，而不是标准库容器所使用的无符号整数。下标的情况也类似。像在数组中，下标一向是有符号的整数，而在标准库容器中下标却是无符号整数。这导致了一个古老争议的重演：</p><ul><li>一组人认为显然下标作为非负数应该使用无符号整数。</li><li>一组人认为与标准库容器保持一致性更重要，这点使得使用无符号整数是不是一个过去的失误变得无关紧要。</li><li>一组人认为使用无符号整数去表示一个非负数是一种误导（给人一种虚假的安全感），并且是错误的主要来源之一。</li></ul><p>不顾 <code>span</code> 最初的设计者（包括我在内）和实现者的强烈反对，第二组赢得了投票，并受到第一组热情地支持。就这样，<code>std::span</code> 拥有无符号的范围大小和下标。我个人认为那是一个令人悲伤的失败，即未能利用一个难得的机会来弥补一个令人讨厌的老错误 [Stroustrup 2018e]。C++ 委员会选择了与问题兼容而不是消除一个重大的错误来源，这在某种程度上是可以预见的，也算不无道理吧。</p><p>但是用无符号整数作为下标会出什么问题呢？这似乎是一个相当情绪化的话题。我曾收到很多封与之相关的仇恨邮件。存在两个基本问题：</p><ul><li>无符号数并不以自然数为模型：无符号数使用模算数，包括减法。比如，如果 <code>ch</code> 是个 <code>unsigned char</code>，<code>ch+100</code> 将永远不会溢出。</li><li>整数和无符号数彼此相互转换，稍不留意负数值就会变成巨大的无符号数值，反之亦然。比如，<code>-2&lt;2u</code> 为假；<code>2u</code> 是 <code>unsigned</code>，因此 <code>-2</code> 在比较前会被转换为一个巨大的正整数。</li></ul><p>这是一个在真实环境下偶尔可见的无限循环的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = n<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123; <span class="hljs-comment">/* ... */</span> &#125;  <span class="hljs-comment">// “反向循环”</span><br></code></pre></td></tr></table></figure><p>不幸的是，标准库中的类型 <code>size_t</code> 是无符号类型，然后很明显结果永远 <code>&gt;=0</code>。</p><p>总的来说，作为 C++ 继承自 C 的特性，有符号和无符号类型之间的转换规则几十年来都是那种难以发现的错误的一个主要来源。但说服委员会去解决那些老问题总是很难的。</p><h2 id="9-4-并发"><a href="#9-4-并发" class="headerlink" title="9.4 并发"></a>9.4 并发</h2><p>尽管做出了英勇的努力，并正在形成广泛的共识，但是人们所期望的通用并发模型（“执行器”）在 C++20 中还没有准备好（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）。这并非是因为缺乏努力，我们的努力中包括了 2018 年 9 月在华盛顿州贝尔维尔举行的为期两天的特别会议，约有 25 人出席，其中有来自英伟达、Facebook 和美国国家实验室的代表。不过，有几个不那么剧烈的有用改进还是及时完成了，其中包括：</p><ul><li><code>jthread</code> 和停止令牌 [Josuttis et al. 2019a]</li><li><code>atomic&lt;shared_ptr&lt;T&gt;&gt;</code> [Sutter 2017b]</li><li>经典的信号量 [Lelbach et al. 2019]</li><li>屏障和锁存器 [Lelbach et al. 2019]</li><li>小的内存模型的修复和改进 [Meredith and Sutter 2017]</li></ul><p><code>jthread</code>（“joining thread”的缩写）是一个遵守 RAII 的线程；也就是说，如果 <code>jthread</code> 超出作用域了，它的析构函数将汇合线程而不是终止程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">some_fct</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    thread t1;<br>    jthread t2;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在作用域的最后，<code>t1</code> 的析构函数会终止程序，除非 <code>t1</code> 的任务已经完成，已经 <code>join</code> 或 <code>detach</code>，而 <code>t2</code> 的析构函数将会等待其任务完成。</p><p>一开始的时候（C++11 之前），很多人（包括我在内）都希望 <code>thread</code> 可以拥有如今 <code>jthread</code> 的行为，但是根植于传统操作系统线程的人坚持认为终止一个程序要远比造成死锁好得多。2012 年和 2013 年，Herb Sutter 曾经提出过汇合线程（joining thread）[Sutter 2012, 2013a]。这引发了一系列讨论，但最终却没有作出任何决定。2016 年，Ville Voutilainen 总结了这些问题，并为将汇合线程纳入 C++17 发起了投票 [Voutilainen 2016a]。投票支持者众多以至于我（只是半开玩笑地）建议我们甚至可以把汇合线程作为一个错误修复提交给 C++14。但是不知何故，进展又再次停滞。到了 2017 年，Nico Josuttis 又一次提出了这个问题。最终，在八次修订和加入了停止令牌之后，这个提案才成功进入了 C++20 [Josuttis et al. 2019a]。</p><p>“停止令牌”解决了一个老问题，即如何在我们对线程的结果不再感兴趣后停止它。基本思想是使用协作式的线程取消方式（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）。假如我想要一个  <code>jthread</code> 停止，我就设置它的停止令牌。线程有义务不时地去检查停止令牌是否被设置了，如果被设置了就进行清理和退出。这个技巧由来已久，几乎对于每一个有主循环的线程都能完好高效地工作，在这个主循环里就可以对停止令牌进行检查。</p><p>像往常一样，命名成了问题：<code>safe_thread</code>、<code>ithread</code>（<code>i</code> 代表可中断）、<code>raii_thread</code>、<code>joining_thread</code>，最终成了 <code>jthread</code>。C++ 核心指南支持库 (GSL) 中称其为 <code>gsl::thread</code>。说真的，最合适的名字就是 <code>thread</code>，但是很不幸，那个名字已经被一类不太有用的线程占用了。</p><h2 id="9-5-次要特性"><a href="#9-5-次要特性" class="headerlink" title="9.5 次要特性"></a>9.5 次要特性</h2><p>C++20 提供了许多次要的新特性，包括：</p><ul><li>C99 风格的指派初始化器 [Shen et al. 2016]</li><li>对 lambda 捕获的改进 [Köppe 2017b]</li><li>泛型 lambda 表达式的模板参数列表 [Dionne 2017]</li><li>范围 <code>for</code> 中初始化一个额外的变量（<a href="08.md#87-%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%98%BE%E5%BC%8F%E6%B5%8B%E8%AF%95">§8.7</a>）</li><li>不求值语境中的 lambda 表达式 [Dionne 2016]</li><li>lambda 捕获中的包展开 [Revzin 2017]</li><li>在一些情况下移除对 <code>typename</code> 的需要 [Vandevoorde 2017]</li><li>更多属性：<code>[[likely]]</code> 和 <code>[[unlikely]]</code> [Trychta 2016]</li><li>在不使用宏的情况下，<code>source_location</code> 给出一段代码中的源码位置 [Douglas and Jabot 2019]</li><li>功能测试宏 [Voutilainen and Wakely 2018]</li><li>条件 <code>explicit</code> [Revzin and Lavavej 2018]</li><li>有符号整数保证是 2 的补码 [Bastien 2018]</li><li>数学上的常数，比如 <code>pi</code> 和 <code>sqrt2</code> [Minkovsky and McFarlane 2019]</li><li>位的操作，比如轮转和统计 1 的个数 [Maurer 2019]</li></ul><p>其中有些属于改进，但是我担心的是晦涩难懂的新特性的数量之大会造成危害 [Stroustrup 2018d]。对于非专家来说，它们使得语言变得更加难以学习，代码更加难以理解。我反对一些利弊参半的特性（比如，使用指派初始化器的地方原本可以使用构造函数，那会产生更易于维护的代码）。很多特性具有特殊用途，有些是“专家专用”。不过，有的人总是领会不到，一个对某些人有某种好处的特性，对于 C++ 整体可能是个净负债。当然，那些增加写法和语义上的通用性和一致性的小特性，则总是受欢迎的。</p><p>从标准化的角度来看，即使最小的特性也需要花时间去处理、记录和实现。这些时间是省不掉的。</p><h2 id="9-6-进行中的工作"><a href="#9-6-进行中的工作" class="headerlink" title="9.6 进行中的工作"></a>9.6 进行中的工作</h2><p>当然，很多把目标放在 C++20 之后版本的工作还在进行中，而另一些原本目标是在 C++20 发布的工作则没能及时完成，尤其是：</p><ul><li><a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：网络和执行器——再度延迟。</li><li><a href="#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>：契约——断言、前置条件和后置条件；原本目标是 C++20，但延迟了。</li><li><a href="#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>：反射——基于当前编译的代码将代码注入程序；目标是 C++23。</li></ul><p>另外，工作组和研究组也仍有工作正在进行中（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）[Stroustrup 2018d]。</p><h3 id="9-6-1-契约"><a href="#9-6-1-契约" class="headerlink" title="9.6.1 契约"></a>9.6.1 契约</h3><p>契约的特殊之处在于，不但很多人希望它可以进入 C++20，而且契约是被投票写入 C++20 的工作文件中的，只是在最后一刻被从中移除。一个由 John Spicer 主持的新的研究组 SG21 已经成立，试图为 C++23 或者 C++26 提供某种形式的契约。契约于 C++20 的遭遇是令人惋惜的，但可能也能给人以启发。</p><p>各种形式的契约在 C++ 和其他语言中都有着悠久的历史。我记得在 1970 年代初，当我第一次遇到 Peter Naur 的不变量 [Naur 1966] 的时候，我一度被它深深吸引。在 1990 年代早期，一个被称为 A++ 的断言系统被考虑用于 C++，但却被认为涉及面太广而不现实。在 1980 年代晚期，Bertrand Meyer 曾推广过 Eiffel 里“契约”的概念 [Meyer 1994]。作为 C++0x 努力的一部分，一些提案 [Crowl and Ottosen 2006] 在 C++ 委员会受到了高度重视，但最终却失败了，主要原因在于被认为过于复杂，写法也不优雅。</p><p>多年来，Bloomberg（那家纽约市的金融信息公司）一直使用一个名为“契约”的实时断言系统去捕获代码中的问题。2013 年，来自 Bloomberg 的 John Lakos 提议标准化该系统 [Lakos and Zakharov 2013]。这个提案受到了好评，但它遇到两个问题：</p><ul><li>它基于宏</li><li>它严格来说是代码实现中的断言，而不是可以增强接口的东西</li></ul><p>修订接踵而至，但是共识却并没有出现。为了打破僵局，一群来自微软、Facebook、谷歌和马德里的卡洛斯三世大学的人提出一个“简单契约”的系统，该系统不使用宏，并且对前置条件和后置条件提供支持（正如 C++0x 所尝试的）[Garcia et al. 2015]。和 Bloomberg 的提案一样，这一提案得到了多年大规模工业应用的背书，但它的重点是在静态分析中使用契约。J. Daniel Garcia（卡洛斯三世大学）努力工作以求做出满足各方面需求的设计，但该提案也遭到了反对。</p><p>经过了无数次的会议、多篇论文和（偶尔激烈的）讨论之后，妥协显然是难以达成了。两个小组请求我来进行协调。我之前宣称，讨论太专注在细枝末节上了，而我们需要一个最小提案，包含两个小组的核心诉求，而不是有争议的细节。他们要我来证明我的推断，拿一个这样的最小提案出来。在我和两个小组的代表轮番讨论、工作了相当一段时间之后，我们最终联合各方共同起草了联合提案 [Dos Reis et al. 2016a]。我认为这个设计技术上是相当充分的，并非一个政治上的妥协。它旨在满足三方面的需求（按重要性排序）：</p><ul><li>系统和可控的运行期测试</li><li>为静态分析器提供信息</li><li>为优化器提供信息</li></ul><p>在 J. Daniel Garcia 领导的进一步工作之后，该提案最终在 2018 年 6 月正式被 C++20 采纳 [Dos Reis et al. 2018]。</p><p>为避免引入新的关键字，我们使用属性语法。例如，<code>[[assert: x+y&gt;0]]</code>。一个契约对一个有效的程序不起任何作用，因此这种方式满足属性的原来概念（<a href="04.md#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）。</p><p>有三种契约：</p><ul><li><code>assert</code>——可执行代码中的断言</li><li><code>expects</code>——函数声明中的前置条件</li><li><code>ensure</code>——函数声明中的后置条件</li></ul><p>有三种不同等级的契约检查：</p><ul><li><code>audit</code>——“代价高昂的”谓词，仅在某些“调试模式”检查</li><li><code>default</code>——“代价低廉的”谓词，即使在生产代码中检查也是可行的</li><li><code>axiom</code>——主要给静态分析器看的谓词，在运行期从不检查</li></ul><p>在违反契约时，将执行（可能是用户安装的）契约违反处理程序。默认行为是程序立即终止。</p><p>我发现一个有意思的事：有一种构建模式允许程序在契约失败后继续执行。我的第一反应是“疯了吧！契约旨在防止违反契约的程序运行”。那算是最最常见的反应了。不论如何，John Lakos 坚信，基于 Bloomberg 代码的相关经验，当你把契约加入一个大型的古老代码仓库，契约总是会被违反：</p><ul><li>某些代码会违反契约，而实际上并没有做任何该契约所要防止的事情。</li><li>某些新契约本身就包含错误。</li><li>某些新契约具有意料之外的效果。</li></ul><p>有了继续的选项，你可以使用契约违反处理程序去记录日志并继续运行。这样的话，你既可以在单次运行中检测到多次违规，也可以让契约在假定正确的老代码中启用。人们相信这是逐步采用契约的关键。</p><p>我们并没有找到充足的理由去添加类不变量，或允许在覆盖函数中削弱前置条件，或允许在覆盖函数中增强后置条件。要点是简单。理想情况是先为 C++20 提供一个最小的初始设计，然后如有需要再于其上添砖加瓦。</p><p>这个设计由 J. Daniel Garcia 实现，并于 2018 年 6 月投票通过进入 C++ 委员会的 C++20 的工作文件中。像往常一样，虽然规范还有一些问题，但我们相信能够赶在最终标准发布前的两年内修复所有的问题。例如，人们发现工作文件文本中允许编译器基于所有契约（无论检查与否）进行优化。那并非有意而为之。从所有的契约在正确的程序中都有效的角度看，这是合理的，但是这么做，对于那些带有特别为捕获“不可能的错误”而写的契约的程序来说却是灾难性的。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[assert: p!=<span class="hljs-literal">nullptr</span>]]<br>p-&gt;m = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure><p>假如 <code>p==nullptr</code>，那么 <code>p-&gt;m</code> 将是未定义行为。编译器被允许假设未定义行为不会发生；由此编译器优化掉那些导致未定义行为的代码。这样做的结果可能让人大吃一惊。在这样的情况下，如果违反契约之后程序能够继续执行，编译器将被允许假定 <code>p-&gt;m</code> 是有效的，因此 <code>p!=nullptr</code>；然后编译器会消除契约关于 <code>p==nullptr</code> 的检查。这种被称为“时间旅行优化”的做法当然是与契约的初衷大相径庭，还好若干补救方案被及时提出 [Garcia 2018; Stroustrup 2019c; Voutilainen 2019a]。</p><p>2018 年 8 月，在 C++20 新提案的最后期限过后，由 John Lakos 领导的 Bloomberg 的一个小组，包括 Hyman Rosen 和 Joshua Berne 在内，提出了一系列重新设计的提案 [Berne et al. 2018; Berne and Lakos 2018a,b; Lakos 2018]。特性冻结的日期（审议新提案的最后一天）是由委员会全体投票表决确定的。这些提案则是基于在契约自身中规定契约行为的方案。例如，<code>[[assert check_maybe_continue: x&gt;0]]</code> 和 <code>[[assert assume: p!=nullptr]]</code>。</p><p>与其使用构建模式去控制所有契约（比如，激活所有默认契约或关闭所有基于契约的运行期检查）的行为，你不如直接修改单个契约的代码。在这方面，这些新方案与工作文件中决议通过的设计大相径庭。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[assert assume: p!=<span class="hljs-literal">nullptr</span>]]<br></code></pre></td></tr></table></figure><p>这将使得 2014 年被否决的基于宏的方案卷土重来，因为管理代码变化的显然方式是用宏，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[assert MODE1: p!=<span class="hljs-literal">nullptr</span>]]<br></code></pre></td></tr></table></figure><p>这里的 <code>MODE1</code> 可以被 <code>#define</code> 成所支持的若干选项之一，如 <code>assume</code> 和 <code>default</code>。或者，大致等效地，通过命令行上的参数（类似于命令行宏）来定义诸如 <code>assume</code> 之类的限定符的含义。</p><p>本质上，契约违约后继续执行的可能性与程序员对契约含义的控制的两者的结合，将把契约机制从断言系统转变为一种新的控制流机制。</p><p>一些提案甚至建议放弃对静态分析的支持。类似这样的提案有几十个变种，全都来得太晚，没一个能增进共识。</p><p>大量涌入的新奇提案（来自 Bloomberg 团队和其他团队，比如，[Berne 2019; Berne and Lakos 2019; Khlebnikov and Lakos 2019; Lakos 2019; Rosen et al. 2019]）和成百上千讨论这些提案的电子邮件阻碍了真正必需的讨论，即对工作文件中的设计现状进行问题修复。正如我曾不断警告的那样（比如 [Stroustrup 2019c]），这些企图重新设计契约的提案的结果是，在 Nico Josuttis 的提议下，契约被从 C++20 中移除 [Josuttis et al. 2019b]。我认为去年关于契约的讨论是一个典型的例子，谁都得不到任何东西，因为有人只想要按他们的方式来。新的研究组 SG21 能否为 C++23 或 C++26 交付某种能够被更广泛接受的东西，时间将会给出答案。</p><h3 id="9-6-2-静态反射"><a href="#9-6-2-静态反射" class="headerlink" title="9.6.2 静态反射"></a>9.6.2 静态反射</h3><p>2013 年，一个研究“反射”的研究组（SG7）成立了，并发出了征集意见的呼吁 [Snyder and Carruth 2013]。有一个广泛的共识，那就是 C++ 需要静态反射机制。更确切地说，我们需要一种方法来写出能检查它自己是属于哪个程序的一部分的代码，并基于此往该程序中注入代码。这样我们就可以用简洁的代码替换冗长而棘手的样板代码、宏和语言外的生成器。比如，我们可以为下面的场景自动生成函数，如：I&#x2F;O 流、日志记录、比较、用于存储和网络的封送处理（marshalling）、构建和使用对象映射、枚举的“字符串化”、测试支持，及其他的更多可能 [Chochlík et al. 2017; Stroustrup 2018g]。反射研究组的目标是为 C++20 或 C++23 做好准备；我们认为 C++17 并不是一个现实的目标。</p><p>大家普遍认同，依赖在运行期遍历一个始终存在的数据结构的反射&#x2F;内省方式不适合 C++，因为这种数据的大小、语言构件的完整表示的复杂性和运行期遍历的成本都会是问题。</p><p>很快出现了一些提案 [Chochlík 2014; Silva and Auresco 2014; Tomazos and Spertus 2014]，并且，在接下来的数年里，由 Chandler Carruth 主持的研究组召开了多次会议试图决定其范围和方向。选定的方式基于类型，这些类型以经典的面向对象的类层次结构来组织，需要泛型的地方由概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）支持 [Chochlík 2015; Chochlík and Naumann 2016; Chochlík et al. 2017]。该方式主要由 Matóš Chochlík、Axel Naumann 和 David Sankel 发展和实现。结果作为一项技术规范在 2019 得以批准 [Sankel 2018]。</p><p>在静态反射（预期的）长时间的酝酿期内，基于 constexpr 函数（<a href="#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）的编译期计算稳步发展，最终出现了基于函数而不是类层次结构的静态反射的提案。主要的拥护者是 Andrew Sutton、Daveed Vandevoorde、Herb Sutter 和 Faisal Vali [Sutton and Sutter 2018; Sutton et al. 2018]。设计焦点转移的主要论据，一部分是由于分析和生成代码这些事天生就是函数式的，而且基于 constexpr 函数的编译期计算已经发展到元编程和反射相结合的地步。这种方法的另一个优点（最先由 Daveed Vandevoorde 提出）是，用于函数的编译器内部数据结构，跟用于类型层次结构的比起来，会更小巧，生命周期也更短，因此它们使用内存会少得多，编译起来也快得多。</p><p>2019 年 2 月在科隆召开的标准会议上，David Sankel 和 Michael Park 展示了一个结合了这两个方法优点的设计 [Sankel and Vandevoorde 2019]。在最根本的层面上仅有一个单一的类型存在。这达到了最大的灵活性，并且编译器开销也最小。</p><p>最重要的是，静态类型的接口可以通过一种类型安全的转换来实现（从底层的单一类型 <code>meta::info</code> 到更具体的类型，如 <code>meta::type_</code> 和 <code>meta::class_</code>）。这里有一个基于 [Sankel and Vandevoorde 2019] 的例子。通过概念重载（<a href="06.md#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>），它实现了从 <code>meta::info</code> 到更具体类型的转换。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> meta &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">consteval</span> std::span&lt;type_&gt; <span class="hljs-title">get_member_types</span><span class="hljs-params">(class_ c)</span> <span class="hljs-type">const</span></span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">baz</span> &#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">E</span> &#123; <span class="hljs-comment">/*...*/</span> &#125;;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Buz</span>&#123; <span class="hljs-comment">/*...*/</span> &#125;;<br>    <span class="hljs-keyword">using</span> Biz = <span class="hljs-type">int</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(meta::enum_)</span></span>;    <span class="hljs-comment">// 打印一个枚举类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(meta::class_)</span></span>;   <span class="hljs-comment">// 打印一个类类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(meta::type_)</span></span>;    <span class="hljs-comment">// 打印任何类型</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">constexpr</span> meta::class_ metaBaz = <span class="hljs-built_in">reflexpr</span>(baz);<br>    <span class="hljs-function"><span class="hljs-keyword">template</span> <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-keyword">constexpr</span> meta::type_ member : get_member_types(metaBaz))</span></span><br><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(meta::most_derived(member))</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里关键的新语言特性是 <code>reflexpr</code> 运算符，它返回一个（元）对象，该对象描述了它的参数，还有 <code>template for</code> [Sutton et al. 2019]，根据一个异质结构中的元素的类型扩展每个元素，从而遍历该结构的各元素。</p><p>此外，我们也有机制可以将代码注入正在编译的程序中。</p><p>类似这样的东西很可能会在 C++23 或 C++26 中成为标准。</p><p>作为一个副作用，在反射方案上的雄心勃勃的工作也刺激了编译期求值功能的改进：</p><ul><li>标准中的类型特征集（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）</li><li>源代码位置的宏（如 <code>__FILE__</code> 和 <code>__LINE__</code>）被内在机制所替代 [Douglas and Jabot 2019]</li><li>编译期计算的功能（例如，用于确保编译期求值的 <code>consteval</code>）</li><li>展开语句（<code>template for</code>——到 C++23 就可以用来遍历元组中的元素 [Sutton et al. 2019]）。</li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：Heap Allocation eLision Optimization<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">C++20：方向之争</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_06/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_06/</id>
    <published>2024-10-29T13:21:09.463Z</published>
    <updated>2024-10-29T13:25:45.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-概念"><a href="#6-概念" class="headerlink" title="6. 概念"></a>6. 概念</h1><p>对 C++ 来说，泛型编程和使用模板的元编程已经取得了巨大的成功。但是，对泛型组件的接口却迟迟未能以一种令人满意的方式进行合适的规范。例如，在 C++98 中，标准库算法大致是如下规定的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Forward_iterator, <span class="hljs-keyword">typename</span> Value&gt;</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">find</span><span class="hljs-params">(Forward_iterator first, Forward_iterator last,</span></span><br><span class="hljs-params"><span class="hljs-function">                              <span class="hljs-type">const</span> Value &amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (first != last &amp;&amp; *first != val)<br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 标准规定：</p><ul><li>第一个模板参数必须是前向迭代器。</li><li>第二个模板参数类型必须能够使用 <code>==</code> 与该迭代器的值类型进行比较。</li><li>前两个函数参数必须标示出一个序列。</li></ul><p>这些要求是隐含在代码中的：编译器所要做的就是在函数体中使用模板参数。结果是：极大的灵活性，对正确调用生成出色的代码，以及对不正确的调用有糟糕得一塌糊涂的错误信息。解决方案显而易见，将前两项条件作为模板接口的一部分来指定：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;forward_iterator Iter, <span class="hljs-keyword">typename</span> Value&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> equality_comparable&lt;Value, Iter::value_type&gt;</span><br><span class="hljs-function">forward_iterator <span class="hljs-title">find</span><span class="hljs-params">(Iter first, Iter last, <span class="hljs-type">const</span> Value&amp; val)</span></span>;<br></code></pre></td></tr></table></figure><p>这大致就是 C++20 所提供的了。注意 <code>equity_comparable</code> 概念，它捕获了两个模板参数之间必需有的关系。这样的多参数概念非常常见。</p><p>表达第三个要求（[first:last) 是一个序列）需要一个库扩展。C++20 在 Ranges 标准库组件（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）中提供了该特性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;range R, <span class="hljs-keyword">typename</span> Value&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> equality_comparable&lt;Value, Range::value_type&gt;</span><br><span class="hljs-function">forward_iterator <span class="hljs-title">find</span><span class="hljs-params">(R r, <span class="hljs-type">const</span> Value&amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> first = <span class="hljs-built_in">begin</span>(r);<br>    <span class="hljs-keyword">auto</span> last = <span class="hljs-built_in">end</span>(r);<br>    <span class="hljs-keyword">while</span> (first!=last &amp;&amp; *first!=val)<br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了规范模板对其参数的要求，对其提供良好支持，有过数次尝试。本节会进行描述：</p><ul><li><a href="#61-%E6%A6%82%E5%BF%B5%E7%9A%84%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">§6.1</a>：概念的早期历史</li><li><a href="#62-c0x-%E6%A6%82%E5%BF%B5">§6.2</a>：C++0x 中的概念</li><li><a href="#63-concepts-ts">§6.3</a>：Concepts TS</li><li><a href="#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>：C++20 中的概念</li></ul><h2 id="6-1-概念的早期历史"><a href="#6-1-概念的早期历史" class="headerlink" title="6.1 概念的早期历史"></a>6.1 概念的早期历史</h2><p>1980 年，我猜想泛型编程可以通过 C 风格的宏来有效支持 [Stroustrup 1982]。然而我完全错了。一些有用的简单泛型抽象能通过这种方法表达，1980 年代的标准化之前的 C++ 通过 <code>&lt;generic.h&gt;</code> 中的一组宏为泛型编程提供支持，但宏在大型项目或广泛使用的情况下无法有效管理。尽管泛型编程在当时流行的“面向对象的思想”中并没有一席之地，我确实发现了一个问题，需要解决它才能达到我对“带类的 C”的目标。</p><p>大约在 1987 年，我尝试设计具有合适接口的模板 [Stroustrup 1994]，但失败了。我需要三个基本属性来支持泛型编程：</p><ul><li><strong>全面的通用性&#x2F;表现力</strong>——我明确不希望这些功能只能表达我想到的东西。</li><li><strong>与手工编码相比，零额外开销</strong>——例如，我想构建一个能够与 C 语言的数组在时间和空间性能方面相当的 vector。</li><li><strong>规范化的接口</strong>——我希望类型检查和重载的功能与已有的非泛型的代码相类似。</li></ul><p>那时候没人知道如何做到全部三个方面，因此 C++ 所做到的是：</p><ul><li>图灵完备性 [Veldhuizen 2003]</li><li>优于手动编码的性能</li><li>糟糕的接口（基本上是编译期鸭子类型），但仍然做到了静态类型安全</li></ul><p>前两个属性使模板大获成功。</p><p>由于缺乏规范化的接口，我们在这些年里看到了极其糟糕的错误信息，到了 C++17 还仍然是这样。缺乏规范化的接口这一问题，让我和很多其他人困扰很多年。它让我非常困扰的原因是，模板无法满足 C++ 的根本的设计标准 [Stroustrup 1994]。我们（显然）需要一种简单的、没有运行期开销的方法来指定模板对其模板参数的要求。</p><p>多年以来，一些人（包括我）相信模板参数的要求可以在 C++ 本身中充分指定。1994 年，我在 [Stroustrup 1994] 中记录了基本的想法，并在我的网站上发布了示例 [Stroustrup 2004–2020]。自 2006 年以来，基于 Jeremy Siek 的作品，Boost 提供了该想法的一个变体，Boost 概念检查库 [Siek and Lumsdaine 2000–2007]。不知何故，它并未像我所希望的那样广泛流行。我怀疑原因是它不够通用、不够优雅（Boost 感到有义务使用宏隐藏细节），并且在标准中不受支持。许多人将其视为一种奇技淫巧。</p><p>为 C++ 定义的概念可以追溯到 Alex Stepanov 在泛型编程上的工作，这是 1970 年代末开始的，一开始用的名称是“代数结构” [Kapur et al. 1981]。注意，那差不多比 Haskell 的类型类设计 [Wadler and Blott 1989] 要早十年，比我尝试解决 C++ 的类似问题要早 5 年。对于这种需求，Alex Stepanov 早在 1990 年代末期的讲座中就使用了“概念”这一名称，并记录在 [Dehnert and Stepanov 2000]。我之所以提到这些，是因为许多人猜测概念是从 Haskell 类型类派生而来但被错误命名了。Alex 使用“概念”这一名称是因为概念此处用来代表应用领域（如代数）中的基本概念。</p><p>目前把概念当作依靠使用模式来描述操作的类型谓词，这起源于二十一世纪初期 Bjarne Stroustrup 和 Gabriel Dos Reis 的工作，并记录在 [Dos Reis and Stroustrup 2005b, 2006; Stroustrup and Dos Reis 2003b, 2005a] 之中。这种方法在 1994 年的《设计和演化》[Stroustrup 1994] 一书也被提及，但是我不记得我第一次进行尝试的时间了。将概念建立于使用模式的主要原因是为了以一种简单而通用的方式处理隐式转换和重载。我们了解 Haskell 类型类，但它们对当前的 C++ 设计影响不大，因为我们认为它们太不灵活了。</p><p>精确指定并检查一个模板对于参数的要求曾经是 C++0x 的最出彩之处，会对泛型编程提供关键支持。可是，它最终甚至没能进入 C++17。</p><p>Bjarne Stroustrup 和 Gabriel Dos Reis 在 2003 年发表的论文 [Stroustrup 2003; Stroustrup and Dos Reis 2003a,b] 明确指出，概念是简化泛型编程的宏伟计划的一部分。例如，一个 <code>concept</code> 可以被定义为一组<strong>使用模式</strong>的约束，就是说，作为对某种类型有效的语言构件 [Stroustrup and Dos Reis 2003b]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> Value_type &#123;<br>    <span class="hljs-built_in">constraints</span>(Value_type a)<br>    &#123;<br>        Value_type b = a;      <span class="hljs-comment">// 拷贝初始化</span><br>        a = b;                 <span class="hljs-comment">// 拷贝赋值</span><br>        Value_type v[] = &#123;a&#125;;  <span class="hljs-comment">// 不是引用</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Value_type V&gt;</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(V&amp; a, V&amp; b)</span></span>;  <span class="hljs-comment">// swap() 的参数必须是值类型</span><br></code></pre></td></tr></table></figure><p>但是，当时的语法和语义还很不成熟。我们主要是试图建立设计标准 [Stroustrup and Dos Reis 2003a]。从现代（2018 年）的角度来看，[Stroustrup 2003; Stroustrup and Dos Reis 2003a,b] 有很多缺陷。但是，它们为概念提供了设计约束，并在以下方面提出了建议：</p><ul><li>概念——用于指定对模板参数要求的编译期谓词。</li><li>根据使用模式来指定原始约束——以处理重载和隐式类型转换。</li><li>多参数概念——例如 <code>Mergeable&lt;In1,In2,Out&gt;</code>。</li><li>类型和值概念——也就是说，概念既可以将值也可以将类型当作参数，例如 <code>Buffer&lt;unsigned char,128&gt;</code>。</li><li>模板的“类型的类型”简略写法—例如 <code>template&lt;Iterator Iter&gt; …</code>。</li><li>“模板定义的简化写法”——例如 <code>void f(Comparable&amp;);</code> 使泛型编程更接近于“普通编程”。</li><li><code>auto</code> 作为函数参数和返回值中约束最少的类型。</li><li>统一函数调用（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）——减少泛型编程与面向对象编程之间的风格差异问题（例如 <code>x.f(y)</code>、<code>f(x,y)</code> 和 <code>x+y</code>）。</li></ul><p>奇怪的是，我们没有建议通用的 <code>requires</code> 子句（<a href="#622-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.2.2</a>）。这些都是后面所有概念变体的一部分。</p><h2 id="6-2-C-0x-概念"><a href="#6-2-C-0x-概念" class="headerlink" title="6.2 C++0x 概念"></a>6.2 C++0x 概念</h2><p>2006 年，基本上每个人都期望 [Gregor et al. 2006; Stroustrup 2007] 中所描述的概念版本会成为 C++09 的一部分，毕竟它已经投票进入了 C++ 标准草案（工作文件）。但是，C++0x 变成了 C++11，并且在 2009 年，概念因复杂性和可用性问题陷入困境 [Stroustrup 2009a,b]，委员会以绝对多数票一致同意放弃概念设计 [Becker 2009]。失败的原因多种多样，而且可能使我们获得在 C++ 标准化努力之外的教训。</p><p>在 2004 年，有两项独立的工作试图将概念引入 C++。因为主要支持者分别来自印第安纳大学和得克萨斯农工大学，这两派通常就被称为“印第安纳”和“得克萨斯”：</p><ul><li><strong>印第安纳</strong>：一种与 Haskell 类型类相关的方法，主要依赖于操作表来定义概念。这派认为，程序员应当显式声明一个类型“模拟”了一个概念；也就是说，该类型提供了一组由概念指定的操作 [Gregor et al. 2006]。关键人物是 Andrew Lumsdaine（教授）和 Douglas Gregor（博士后和编译器作者）。</li><li><strong>得克萨斯</strong>：一种基于编译期类型谓词和谓词逻辑的方法。这派认为，可用性很重要，因而程序员<strong>不必</strong>显式指定哪些类型与哪些概念相匹配（这些匹配可以由编译器计算）。对于 C++，优雅而有效地处理隐式转换、重载以及混合类型的表达式被认为是必需的 [Dos Reis and Stroustrup 2006; Stroustrup and Dos Reis 2003b]。关键人物是 Bjarne Stroustrup（教授）和 Gabriel Dos Reis（博士后，后来成为教授）。</li></ul><p>根据这些描述，这些方法似乎是不可调和的，但是对于当时的参与人员而言，这并不明显。实际上，我认为这些方法在理论上是等效的 [Stroustrup and Dos Reis 2003b]。该论点的确可能是正确的，但对于 C++ 上下文中的详细语言设计和使用的实际影响并不等同。另外，按照委员会成员的解释，WG21 的共识流程强烈鼓励合作和联合提案，而不是在竞争性的提案上工作数年，最后在它们之间进行大决战（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。我认为后一种方法是创造方言的秘诀，因为失败的一方不太可能放弃他们的实现和用户，并就此消失。请注意，上面提到的所有的人在一起与 Jeremy Siek（印第安纳的研究生和 AT&amp;T 实验室的暑期实习生）和 Jaakko Järvi（印第安那的博士后，得州农工大学教授）是 OOPSLA 论文的合著者，论文展示了折中设计的第一个版本。印第安纳和得克萨斯的团体从未完全脱节，我们为达成真正的共识而努力。另外，从事这项工作之前，我已经认识 Andrew Lumsdaine 很多年。我们确实希望折中方案能够正常工作。</p><p>在实现方面，印第安纳的设计的进度远远领先于得克萨斯的设计的进度，并且具有更多人员参与，所以我们主要基于此进行。印第安纳的设计也更加符合常规，基于函数签名，并且与 Haskell 类型类有明显相似之处。考虑到涉及的学术界人士的数量，重要的是印第安纳的设计被视为更符合常规并且学术上更为得体。看来我们“只是”需要</p><ul><li>使编译器足够快</li><li>生成有效的代码</li><li>处理重载和隐式转换。</li></ul><p>这个决定使我们付出了三年的辛勤工作和许多争论。</p><p>C++0x 概念设计在 [Gregor et al. 2006; Stroustrup 2007] 中得到阐述。前一篇论文包含一个标准的学术“相关工作”部分，将这个设计与 Java、C#、Scala、Cecil、ML、Haskell 和 G 中的工具进行比较。在这里，我使用 [Gregor et al. 2006] 中的例子进行总结。</p><h3 id="6-2-1-概念定义"><a href="#6-2-1-概念定义" class="headerlink" title="6.2.1 概念定义"></a>6.2.1 概念定义</h3><p>概念被定义为一组操作和相关类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> EqualityComparable&lt;<span class="hljs-keyword">typename</span> T&gt; &#123;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y);<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y) &#123; <span class="hljs-keyword">return</span> !(x==y); &#125;<br>&#125;<br><br><span class="hljs-keyword">concept</span> InputIterator&lt;<span class="hljs-keyword">typename</span> Iter&gt; &#123;<br>    <span class="hljs-comment">// Iter 必须有 value_type 成员：</span><br>    <span class="hljs-keyword">typename</span> value_type = Iter::value_type;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>某些人（印第安纳）认为概念和类之间的相似性是一种优势。</p><p>但是，概念中指定的函数并不完全类似于类中定义的函数。例如，在一个 <code>class</code> 中定义的运算符具有隐式参数（“<code>this</code>”），而 <code>concept</code> 中声明的运算符则没有。</p><p>将概念定义为一组操作的方法中存在一个严重的问题。考虑在 C++ 中传递参数的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X&amp;)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> X&amp;)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X&amp;&amp;)</span></span>;<br></code></pre></td></tr></table></figure><p>暂时不考虑 <code>volatile</code>，因为它在泛型代码参数中很少见到，但是我们仍然有四种选择。在一个 <code>concept</code> 中，我们是否</p><ul><li>将 <code>f</code> 表示为一个函数，用户是否为调用选择了正确的参数？</li><li>是否重载了 <code>f</code> 的所有可能？</li><li>将 <code>f</code> 表示为一个函数，并要求用户定义一个 <code>concept_map</code>（<a href="#623-%E6%A6%82%E5%BF%B5%E6%98%A0%E5%B0%84">§6.2.3</a>）映射到 <code>f</code> 的所需的参数类型？</li><li>语言是否将用户的参数类型隐式映射到模板的参数类型？</li></ul><p>对于两个参数，我们将有 16 种选择。尽管很少有三个参数泛型函数，但是这种情况我们会有 4*4*4 种选择。变参模板会如何呢？我们会有 4<sup>N</sup> 种选择，如（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。</p><p>传递参数的不同方式的语义并不相同，因此我们自然而然地转向接受指定的参数类型，将匹配的负担推到了类型设计者和 <code>concept_maps</code> 的作者（<a href="#623-%E6%A6%82%E5%BF%B5%E6%98%A0%E5%B0%84">§6.2.3</a>）。</p><p>类似地，我们到底是在为 <code>x.f(y)</code>（面向对象样式）指定 <code>concept</code> 还是为 <code>f(x,y)</code>（函数样式），还是两者兼而有之。这个问题在我们尝试描述二元运算符时，例如 <code>+</code>，会立刻出现。</p><p>回想起来，我们对于在以特定类型的操作或特定的伪签名定义的概念框架内解决这些问题太过乐观了。“伪签名”某种程度上代表了对此处概述的问题的解决方案。</p><p>概念之间的关系通过显式<strong>细化</strong>定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> BidirectionalIterator&lt;<span class="hljs-keyword">typename</span> Iter&gt;    <span class="hljs-comment">// BidirectionalIterator 是</span><br>    : ForwardIterator&lt;Iter&gt; &#123;                   <span class="hljs-comment">// 一种 ForwardIterator</span><br>        <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>细化有点像，但又不那么像类派生。这个想法是为了让程序员明确地建立概念的层次结构。不幸的是，这给系统引入了严重的不灵活性。概念（按常规的英语含义）通常不是严格的层次结构。</p><h3 id="6-2-2-概念使用"><a href="#6-2-2-概念使用" class="headerlink" title="6.2.2 概念使用"></a>6.2.2 概念使用</h3><p>一个概念既可以用作 <code>where</code> 子句中的推断，也可以用在简略写法里：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>    where LessThanComparable&lt;T&gt;    <span class="hljs-comment">// 显式谓词</span><br><span class="hljs-function"><span class="hljs-type">const</span> T&amp; <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x&lt;y ? x : y;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;GreaterThanComparable T&gt;  <span class="hljs-comment">// 简略写法</span><br>    <span class="hljs-function"><span class="hljs-type">const</span> T&amp; <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x&gt;y ? x : y;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于简单的“类型的类型”的概念，简略写法（最早在 [Stroustrup 2003] 中提出）很快变得非常流行。但是，我们很快发现，现有代码中的标识符中 <code>where</code> 太过于流行，于是将其重命名为 <code>requires</code>。</p><h3 id="6-2-3-概念映射"><a href="#6-2-3-概念映射" class="headerlink" title="6.2.3 概念映射"></a>6.2.3 概念映射</h3><p>概念和类型之间的关系是由 <code>concept_map</code> 的特化来定义的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">concept_map EqualityComparable&lt;<span class="hljs-type">int</span>&gt; &#123;&#125;;  <span class="hljs-comment">// int 满足 EqualityComparable</span><br><br><span class="hljs-comment">// student_record 满足 EqualityComparable：</span><br>concept_map EqualityComparable&lt;student_record&gt; &#123;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> student_record&amp; a, <span class="hljs-type">const</span> student_record&amp; b)<br>    &#123;<br>        <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">id_equal</span>(b);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>对于 <code>int</code>，我们可以简单地说 <code>int</code> 类型具有 <code>EqualityComparable</code> 所要求的属性（也就是说，它具有 <code>==</code> 和 <code>!=</code>），然而，<code>student_record</code> 没有 <code>==</code>，但是我们可以在 <code>concept_map</code> 中添加一个。因此，<code>concept_map</code> 是一种非常强大的机制，可以在特定的环境中非侵入性地往类型中添加属性。</p><p>既然编译器已经知道 <code>int</code> 是可比较的，为什么我们还要再告诉编译器?</p><p>这一直是一个争论的焦点。“印第安纳小组”一般认为明确表达意图（永远）是好的，而“得克萨斯小组”倾向于认为除非一条概念映射能增加新的功能，写它就不只是没用，更可能有害。显式的声明是否能使用户避免因为语义上无意义的“意外”语法匹配而导致的严重错误？还是说这种错误会很少见，显式的建模语句多半只是增加了编写麻烦和犯错误的机会？折中的解决方案是允许在 <code>concept</code> 的定义处通过加上 <code>auto</code> 来声明使用某条 <code>concept_map</code> 是可选的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> <span class="hljs-keyword">concept</span> EqualityComparable&lt;<span class="hljs-keyword">typename</span> T&gt; &#123;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y);<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y) &#123; <span class="hljs-keyword">return</span> !(x==y); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，当一个类型被要求是 <code>EqualityComparable</code> 时，即使用户没有提供该类型的特化，编译器也会自动使用指向 <code>EqualityComparable</code> 的 <code>concept_map</code>。</p><h3 id="6-2-4-定义检查"><a href="#6-2-4-定义检查" class="headerlink" title="6.2.4 定义检查"></a>6.2.4 定义检查</h3><p>编译器根据模板参数的概念检查模板定义中的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;InputIterator Iter, <span class="hljs-keyword">typename</span> Val&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> EqualityComparable&lt;Iter::value_type,Val&gt;</span><br><span class="hljs-function">Iter <span class="hljs-title">find</span><span class="hljs-params">(Iter first, Iter last, Val v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (first&lt;last &amp;&amp; !(*first==v))  <span class="hljs-comment">// 错误：EqualityComparable 中没有 &lt;</span><br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们用到了 <code>&lt;</code> 比较迭代器，但 <code>EqualityComparable</code> 只保证了 <code>==</code>，因此这个定义不能通过编译。捕获这种无保障操作的使用那时被视为一个重要的好处，但是事实证明这会带来严重的负面影响：（<a href="#625-%E6%95%99%E8%AE%AD">§6.2.5</a>）和（<a href="#631-%E5%AE%9A%E4%B9%89%E6%A3%80%E6%9F%A5">§6.3.1</a>）。</p><h3 id="6-2-5-教训"><a href="#6-2-5-教训" class="headerlink" title="6.2.5 教训"></a>6.2.5 教训</h3><p>初始提案得到了相对迅速的批准，之后的若干年，我们忙于为初始的设计堵漏，还要应付在通用性、可实现性、规范质量和可用性方面的意见。</p><p>作为主要实现者，Doug Gregor 为生成高质量的代码做出了英勇的表现，但最终，支持概念的编译器在速度上仍然比只实现了无约束模板的编译器慢了 10 倍以上。我怀疑实现问题的根源是在编译器中采用类的结构来表示概念。这样可以快速获得早期结果，但却让概念用上了本来为类精心打造的表示方式，但概念并不是类。将概念表示为一组函数（类似于虚成员函数），导致在处理隐式转换和混合类型操作时出问题。将来自不同上下文的代码灵活的加以组合，原本是支撑泛型编程和元编程的强大代码生成技术的“秘诀”，但这种组合却无法使用 C++0x 的概念来指定。要赶上（无约束的）模板性能，用于指定概念的函数就不能作为可被调用的函数出现在生成的代码中（更糟糕的是，间接的函数调用也不行）。</p><p>我不愉快地联想到了许多早期 C++ 编译器作者由于采用了 C 编译器的结构和代码库而遇到的问题，当时用来处理 C++ 作用域和重载的代码没法合适地放到 C 语言的编译器框架中。本着设计概念应该直接以代码表示的观点，Cfront（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）使用了特定的作用域类来避免这种问题，然而，大多数 C 语言背景的编译器作者认为他们可以使用熟悉的 C 技巧走捷径，最终还是不得不从头开始重写 C++ 前端代码。语言设计和实现技巧可以非常强烈地彼此影响。</p><p>很快，事情就变得很明显：为了完成从无约束的模板到使用概念的模板的转换，我们需要语言支持。在 C++0x 的设计中，这两类模板非常不同：</p><ul><li>受约束模板不能调用无约束模板，因为不知道无约束模板使用什么操作，因此无法对受约束模板进行定义检查。</li><li>无约束模板可以调用受约束模板，但是检查必须推迟到实例化的时候，因为在那之前我们不知道无约束模板在调用中使用什么类型。</li></ul><p>第一个问题的解决方案是允许程序员使用 <code>late_check</code> 块，告诉编译器“别检查这些来自受约束模板的调用” [Gregor et al. 2008]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Semigroup T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T x, T y)</span> </span>&#123;<br>    T r = x + y;    <span class="hljs-comment">// 用 Semigroup&lt;T&gt;::operator+</span><br>    late_check &#123;<br>        r = x + y;  <span class="hljs-comment">// 使用在实例化的时候找到的 operator+</span><br>                    <span class="hljs-comment">// （不考虑 Semigroup&lt;T&gt;::operator+）</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一“解决方案”充其量只能算是个补丁，而且有一个特殊的问题，即调用到的无约束模板中不会知道 <code>Semigroup</code> 的 <code>concept_map</code>。这样就导致一个“有趣效果”，即一个对象可以在一段程序的两个地方以一模一样的方式被使用，但却表达不同的语义。这样一来，类型系统就以一种实在难以追踪的方式被破坏了。</p><p>随着概念的使用越来越多，语义在概念（实际上是类型和库）设计中的作用变得越来越清晰，委员会中的许多人开始推动一种表达语义规则的机制。这并不奇怪，Alex Stepanov 喜欢说“概念全都是语义问题”。然而，大部分人那时都像对待其他语言功能一样对待概念，他们更关心语法和命名查找规则。</p><p>2009年，Gabriel Dos Reis（在我大力支持下）提出了一种称为 <code>axiom</code>（公理）的写法并获得批准 [Dos Reis et al. 2009]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> TotalOrdering&lt;<span class="hljs-keyword">typename</span> Op, <span class="hljs-keyword">typename</span> T&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Op, T, T)</span></span>;<br>    <span class="hljs-function">axiom <span class="hljs-title">Antisymmetry</span><span class="hljs-params">(Op op, T x, T y)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">op</span>(x, y) &amp;&amp; <span class="hljs-built_in">op</span>(y, x))<br>            x &lt;=&gt; y;<br>    &#125;<br>    <span class="hljs-function">axiom <span class="hljs-title">Transitivity</span><span class="hljs-params">(Op op, T x, T y, T z)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">op</span>(x, y) &amp;&amp; <span class="hljs-built_in">op</span>(y, z))<br>        <span class="hljs-built_in">op</span>(x, z);<br>    &#125;<br>    <span class="hljs-function">axiom <span class="hljs-title">Totality</span><span class="hljs-params">(Op op, T x, T y)</span> </span>&#123;<br>        <span class="hljs-built_in">op</span>(x, y) || <span class="hljs-built_in">op</span>(y, x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>奇怪的是，要让公理的概念被接受很困难。主要的反对意见似乎是，提议者们明确拒绝了让编译器针对它们所使用的类型来对公理进行测试“以捕获错误”的想法。显然，<code>axiom</code> 就是数学意义上的公理（也就是说，是因为你通常无法检查而允许作的一些假设），这一观念对于某些委员是陌生的。另外一些人则不相信指定公理还可以帮助编译器以外的工具。不过，<code>axiom</code> 还是被纳入了 <code>concept</code> 规范中。</p><p>我们在概念的定义和实现上都存在明显的问题，但我们有了一套相当完整的工具，努力地试图通过使用标准库 [Gregor and Lumsdaine 2008] 和其他库中定义的概念来解决这些问题并获得经验。</p><h3 id="6-2-6-哪里出错了？"><a href="#6-2-6-哪里出错了？" class="headerlink" title="6.2.6 哪里出错了？"></a>6.2.6 哪里出错了？</h3><p>2009年，我不情愿地得出结论，概念工作陷入了困境。我期望能被我们解决掉的问题仍在加剧，而新的问题又层出不穷：</p><ul><li>我们仍然没有达成一致意见，在大多数情况下，到底应使用隐式还是显式建模（隐式或显式使用 <code>concept_map</code>），哪种才是正确的方法。</li><li>我们仍然没有达成一致意见，是要依赖概念之间隐式还是显式的关系陈述（我们是否应该以某种非常类似面向对象的继承的方式，显式地构建“精化”关系的层次结构？）。</li><li>我们仍不断看到一些实例，由受概念约束的代码生成出来的代码不及无约束模板生成出来的代码。来自模板的后期组合机会仍然显示出惊人的优势。</li><li>编写概念来捕获我们在泛型和非泛型 C++ 中惯于使用的每种转换和重载情况仍然很困难。</li><li>我们看到了越来越多的例子，这些例子中，足够复杂的 <code>concept_map</code> 和 <code>late_check</code> 的组合导致了对类型的不一致的看法（也就是对类型系统的惊人和几乎无法追踪的破坏）。</li><li>标准草案中规范的复杂性吹气球般迅速膨胀，超出了所有人的预期（有 91 页，这还不包括库中对概念的使用），我们中的一些人认为它基本上不可读。</li><li>用于描述标准库的概念集越来越大（大约有 125 个概念，仅 STL 就有 103 个）。</li><li>编译器在代码生成方面越来越好（因为 Doug Gregor 的英勇努力），但速度仍未提高。一些主要的编译器供应商私下里向我透露，如果一个支持概念的编译器比旧的编译器慢 20% 以上，他们就不得不反对这些概念，不管它们有多好。当时，支持概念的编译器要慢 10 倍以上。</li></ul><p>在 2009 年春季，在标准的邮件群组上进行过一场广泛的讨论。起头的是 Howard Hinnant，他提出一个关于概念使用的非常实际的问题：他正在设计的工具可以通过两种方式来完成：一种将需要大量用户——不一定是专家用户——编写概念映射。另一种——远不够优雅的——设计将避免使用概念映射（和概念），以免要求用户了解有关概念的任何重要知识。“普通用户”需要理解概念吗？理解到足以使用它们就行？还是要能理解到足以定义它们？</p><p>这个讨论主题后来被称作“码农小明是否需要概念？”。谁是“码农小明”？Peter Gottschling 问道。这是个好问题，我回答道：</p><blockquote><p>我认为大多数 C++ 程序员都是“码农小明”（我再次表示反对该术语），我大部分时间和使用大多数库的时候都是“码农小明”，我预料我一直都会是，因为我会一直保持学习新技术和库。但是，我想使用概念（并且在必要时使用概念映射），我希望“使用原则”比现在这样仅供专家使用的精细功能要简单得多。</p></blockquote><p>换句话说，我们是应该将概念设计成为供少数语言专家进行细微控制的精密设备，还是供大多数程序员使用的健壮工具？在语言特性和标准库组件的设计中，这个问题反复出现。关于类，我多年以来都听到这样的声音；某些人认为，显然不应该鼓励大多数程序员定义类。在某些人眼里，普通的程序员（有时被戏称为“码农小明”）显然不够聪明或没有足够的知识来使用复杂的特性和技巧。我一向强烈认为大多数程序员可以学会并用好类和概念等特性。一旦他们做到了，他们的编程工作就变得更容易，并且他们的代码也会变得更好。整个 C++ 社区可能需要花费数年的时间来吸取教训；但是如果做不到的话，我们——作为语言和库的设计者——就失败了。</p><p>为了回应这场讨论，并反映我对 C++0x 概念的工作方向的日益关注，我写了一篇论文 <em>Simplifying the use of concepts</em> [Stroustrup 2009c] 概述了在我看来要让概念在 C++0x 中变得可接受所必须做的最小改进：</p><ul><li>尽量少使用 <code>concept_map</code>。</li><li>使所有 <code>concept_map</code> 隐式&#x2F;自动化。</li><li>概念如需要 <code>begin(x)</code>，那它也得接受 <code>x.begin()</code>，反之亦然（统一函数调用）；（<a href="#61-%E6%A6%82%E5%BF%B5%E7%9A%84%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">§6.1</a>），（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）</li><li>使所有标准库概念隐式&#x2F;自动化。</li></ul><p>这篇论文非常详细地包含了多年来出现的许多例子和建议。</p><p>我坚持让<strong>所有</strong>概念都成为隐式&#x2F;自动的原因之一是观察到，如果给一个选择，最不灵活和最不轻信的程序员可能会强迫每个人都接受他们所选择的显式概念。库作者们表现出一种强烈的倾向，即通过使用显式的（非自动的）概念把决策推到用户那去做，即便是对于那些最明显的选择也一样。</p><p>我当时注意到，C++ 泛型编程之父 Alex Stepanov 不久之前所写的《编程原本》（<em>Elements of Programming</em>）[Stepanov and McJones 2009] 并没有使用哪怕是一条 <code>concept_map</code> 来描述 STL 工具的超集和当时常见的泛型编程技术的超集。</p><p>委员展开了一次讨论回应我的论文，焦点是，为了及时加入标准，我们是否来得及达成共识。结论也很显然，没多大希望。我们没法同意“修补”概念让它对大多数程序员可用，同时还能（多少）及时地推出标准。这样，“概念”，这个许多有能力的人多年工作的成果，被移出了标准草案。我对“删除概念”决定的总结 [Stroustrup 2009a,b] 比技术论文和讨论更具可读性。</p><p>当委员会以压倒多数投票赞成删除概念时（我也投票赞成删除），每个发言的人都再次确认他们想要概念。投票只是反映出概念设计还没有准备好进行标准化。我认为问题要严重得多：委员会想要概念，但委员们对他们想要什么样的概念没有达成一致。委员会没有一套共同的设计目标。这仍然是一个问题，也不仅仅出现在概念上。委员之间存在着深刻的“哲学上”的分歧，特别是：</p><ul><li><strong>显式还是隐式</strong>：为了安全和避免意外，程序员是否应该显式地说明如何从潜在可选方案中做决策？该讨论最终涉及有关重载决策、作用域决策、类型与概念的匹配、概念之间的关系，等等。</li><li><strong>专家与普通人</strong>：关键语言和标准库工具是否应该设计为供专家使用？如果是这样，是否应该鼓励“普通程序员”只使用有限的语言子集，是否应该为“普通程序员”设计单独的库？这个讨论出现在类、类层次结构、异常、模板等的设计和使用的场景中。</li></ul><p>这两种情况下，回答“是”都会使功能的设计偏向于复杂的特性，这样就需要大量的专业知识和频繁使用特殊写法才能保证正确。从系统的角度，我倾向于站在这类论点的另一端，更多地信任普通程序员，并依靠常规语言规则，通过编译器和其他工具进行检查以避免令人讨厌的意外。对于棘手的问题，采用显式决策的方式比起依靠（隐式）的语言规则，程序员犯错的机会只多不少。</p><p>不同的人从 C++0x 概念的失败中得出了不同的结论，我得出三点主要的：</p><ul><li>我们过分重视早期实现。我们原本应该花更多的精力来确定需求、约束、期望的使用模式，以及相对简单的实现模型。此后，我们可以依靠使用反馈来让我们的实现逐步增强。</li><li>有些分歧是根本的（哲学上的），无法通过折中解决，我们必须尽早发现并阐明此类问题。</li><li>没有一套功能集合能做到既满足一个大型专家委员会的所有不同愿望，又不会变得过分庞大，这种膨胀会成为实现者的难题和用户的障碍。我们必须确定核心需求，并用简单的写法来满足；对于更复杂的用法和罕见的用例，则可以用对使用者的专业知识要求更高的功能和写法。</li></ul><p>这些结论与概念没有什么特别的关系。它们是对大团体内的设计目标和决策过程的一般观察。</p><h2 id="6-3-Concepts-TS"><a href="#6-3-Concepts-TS" class="headerlink" title="6.3 Concepts TS"></a>6.3 Concepts TS</h2><p>2009 年，几乎是在概念刚从 C++0x 移除之后，Gabriel Dos Reis、Andrew Sutton 和我开始重新设计概念。这次设计是根据我们最初的想法、从 C++0x 语言设计中得到的经验、使用 C++0x 概念的经验，以及标准委员会的反馈。我们的结论是</p><ul><li>概念必须有语义上的意义</li><li>概念数量应该相对较少</li><li>概念应该基本，而非最小</li></ul><p>我们认为 C++ 标准库中包含的大部分单独使用的概念是没有意义的 [Sutton and Stroustrup 2011]。“对于任何合理的‘概念’定义，STL 都用不了 103 个‘概念’！”我在和 Andrew Sutton 的讨论中大声嚷道，“基础代数都没有超过十几个概念！”语言设计的讨论可以变得相当热烈。</p><p>2011年，在 Andrew Lumsdaine 的敦促下，Alex Stepanov 在 Palo Alto 召集了为期一周的会议。一个相当大的团队，包含了大多数与 C++0x 概念工作密切相关的人，加上 Sean Parent 和 Alex Stepanov，一起讨论从用户的角度来解决这个问题：理想情况下，一个被适度约束的 STL 算法集应当是什么样子？然后，我们回家记录我们以用户为导向的设计，并发明语言机制以接近这个理想设计 [Stroustrup and Sutton 2012]。这一努力重新启动了标准工作，而且使用的是一种全新的、与 C++0x 工作完全不同且更好的方法。2016 年 ISO 出版的概念的 TS（技术规范）[Sutton 2017] 和 C++20 概念（<a href="#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）就是该会议的直接结果。Andrew Sutton 的实现从 2012 年开始就被用于实验，并作为 GCC 6.0 或更高版本的一部分发布。</p><p>在 Concepts TS 中 [Sutton 2017]</p><ul><li>概念基于编译期谓词（包括多参数谓词和值参数）。</li><li>以使用模式来描述原始要求 [Dos Reis 和 Stroustrup 2006]（<code>requires</code> 表达式）。</li><li>概念可以用在一般的 <code>requires</code> 子句中，当作模板形参定义中 <code>typename</code> 的替代，也可以当作函数形参定义中类型名的替代。</li><li>从类型到概念的匹配是隐式的（没有 <code>concept_map</code>）。</li><li>重载中概念间是隐式的关系（通过计算得出，而不需要为概念进行显式细化）。</li><li>没有定义检查（至少目前还没有，所以也没有 <code>late_check</code>）。</li><li>没有 <code>axiom</code>，但这只是因为我们不想因为一个潜在有争议的特性而让设计更加复杂、产生拖延。C++0x 的 <code>axiom</code> 也可以是一个好起点。</li></ul><p>与 C++0x 的概念相比，这里非常强调简化概念的使用，其中的一个主要部分是不要求程序员做显式表达，而让编译器根据明确规定的、简单的算法来解决问题。</p><p>支持由用户显式决策的人认为以上的方案重语义而轻语法，并警告会有“意外匹配”和“惊吓”。最常见的例子是 <code>Forward_iterator</code> 与 <code>Input_iterator</code> 的区别仅在于语义：<code>Forward_iterator</code> 允许在其序列中做多遍扫描。没有人否认这种例子的存在，但围绕这些例子的重要性以及如何解决它们的争论却没断过（仍然很起劲）。我认为让几个罕见的复杂例子主导设计是大错特错。</p><p>Concepts TS 设计是基于这样的看法（有大量经验支持），即上面这样的例子非常罕见（特别是在精心设计的概念中 [Stroustrup 2017]），通常被概念编写者很好地理解，而且常常可以通过在最受约束的概念上添加操作以反映语义上的差异来解决。例如，<code>Forward_iterator</code>&#x2F;<code>Input_iterator</code> 问题的一个简单解决方案是要求 <code>Forward_iterator</code> 提供一个 <code>can_multipass()</code> 操作。此操作甚至不需要做任何事情；它存在只是为了让概念决策机制能够检查它的存在。因此，不需要专门添加新的语言特性来解决可能出现的意外歧义。</p><p>因为这一点经常被忽视，我必须强调，概念是谓词，它们不是类或类层次结构。根本上，我们只是问某个类型一些简单的问题，如“你是迭代器吗？”并问类型的集合关于它们的互操作的问题，如“你们之间能用 <code>==</code> 来相互比较吗？”（<a href="#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>）。使用概念时，我们只问那些可以在编译期回答的问题，不涉及运行期求值。潜在的歧义是通过比较类型（或类型集合）所涉及的谓词来检测的，而不是让程序员写决策规则（<a href="#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>）。</p><p>出于对 C++0x 概念（<a href="#626-%E5%93%AA%E9%87%8C%E5%87%BA%E9%94%99%E4%BA%86">§6.2.6</a>）中所发生问题的敏感，我们小心翼翼地设计概念，以求使用它们不会隐含显著的编译期开销。即使是 Andrew Sutton 的编译器的早期版本，编译使用了概念的模板的速度也比编译使用变通方案（例如 <code>enable_if</code>（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>））的程序要<strong>快</strong>。</p><h3 id="6-3-1-定义检查"><a href="#6-3-1-定义检查" class="headerlink" title="6.3.1 定义检查"></a>6.3.1 定义检查</h3><p>在 Palo Alto 会议后几个月之内的某个时间点，Andrew Sutton、Gabriel Dos Reis 和我做出决定，分阶段着手设计和实现概念的语言特性。这样，我们可以从实现的经验中学习，并在“设计冻结”之前获得早期的反馈。特别是，我们决定推迟实现<strong>定义检查</strong>（<a href="#624-%E5%AE%9A%E4%B9%89%E6%A3%80%E6%9F%A5">§6.2.4</a>）；也就是说，检查并确保模板没有使用并未为其参数指定的功能。考虑 <code>std::advance()</code> 的一个简化版本，它将迭代器在序列中向前移动 <code>n</code> 个位置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Forward_iterator Iter&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">advance</span><span class="hljs-params">(Iter p, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    p+=n;  <span class="hljs-comment">// p 前进 n 个位置</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Forward_iterator</code> 不提供 <code>+=</code>，只提供 <code>++</code>，所以定义检查会把它当作错误抓出来。如果不单独（在使用前）检查 <code>advance()</code> 的函数体，我们将只会从 <code>+=</code> 的（错误）使用中得到糟糕的实例化时的错误信息，请注意，模板实例化生成的代码总会经过类型检查，所以不做定义检查不会导致运行期错误。</p><p>我们认为，概念带来的约 90% 的好处会从使用点检查中收获，而对于那些相对专家级的受约束模板作者来说，没有定义检查也能将就一段时间。这里 90% 显然是基于有限信息的临时估计，但得益于十年间在概念上的工作，我认为这是一个不错的猜测。作为语言特性和库的设计者，对我们来说，更重要的是从使用中获得经验，这一经验获得的过程始于 Palo Alto 技术备忘录 [Stroustrup and Sutton 2012] 中的 STL 算法示例。我们重视反馈胜于重视理论完整性。这种看法曾是激进的。回顾一下关于概念的文档（在 C++ 和其他语言中），之所以将概念作为语言特性提供，定义检查总是被强调成一个主要原因 [Gregor et al. 2006; Stroustrup and Dos Reis 2003b]。</p><p>这种新设计一度被称为<strong>轻量概念</strong>（Concepts Lite），许多人认为它不完整，甚至没用。但是，我们很快发现，<strong>不</strong>进行定义检查会带来真正的好处 [Sutton and Stroustrup 2011]。</p><ul><li>有了定义检查，我们在开发过程中就没办法使用部分概念检查。在构建一个大程序的初始阶段中，不知道全部的需求是非常常见的。部分检查可以让很多错误在早期被发现，并有助于根据早期使用的反馈逐步改进设计。</li><li>定义检查使得设计难以拥有稳定的接口。特别是，要往类或者函数中增加调试语句、统计收集、追踪或者“遥测”之类的支持，就不能不改变类或函数的接口来包含相应功能。这些功能对于类或函数来说很少是根本的，而且往往会随着时间的推移而改变。</li><li>当我们不使用定义检查时，现有的模板可以逐渐转换为使用概念。但是，如果我们有定义检查，一个受约束的模板就不能使用一个无约束的模板，因为我们一般没法知道无约束的模板使用了哪些功能。另外，不管做不做定义检查，一个无约束的模板使用一个有约束的模板都意味着后期（实例化时）检查。</li></ul><p>从 2014 年起担任 EWG 主席的 Ville Voutilainen 更为坚定地表示：</p><blockquote><p>我不能支持任何包含定义检查的概念提案。</p></blockquote><p>我们最终可能会得到一种定义检查的形式，但前提是我们能够设计一种机制来避开它，以满足过渡和数据收集的需要。这需要仔细考虑，需要进行实验。C++0x 的 <code>late_check</code> 是不够的。</p><p>定义检查的问题是使用的问题，而不是实现的问题。Gabriel Dos Reis 设计并实现了一种名为 Liz 的实验语言，用来测试 Concepts TS 设计中的功能 [Dos Reis 2012]，包括定义检查。如果我们找到一种可接受的定义检查形式，我们就可以实现它。</p><h3 id="6-3-2-概念使用"><a href="#6-3-2-概念使用" class="headerlink" title="6.3.2 概念使用"></a>6.3.2 概念使用</h3><p>简单的示例看起来很像 C++0x 及更早的版本中的样子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Sequence Seq, Number Num&gt;</span><br><span class="hljs-function">Num <span class="hljs-title">sum</span><span class="hljs-params">(Seq s, Num v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; x : s)<br>        v += x;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 <code>Sequence</code> 和 <code>Number</code> 是概念。使用概念而不是 <code>typename</code> 来引入类型的名称，意味着使用的类型必须满足概念的要求。需要注意的是，由于 Concepts TS 不提供定义检查，所以使用 <code>+=</code> 不会被概念所检查，而只会在后期、在实例化时检查。以上是最初的开发阶段中可能的做法，稍后我们很可能会更为明确：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> Value_type = <span class="hljs-keyword">typename</span> T::value_type;  <span class="hljs-comment">// 简化的别名</span><br><br><span class="hljs-keyword">template</span>&lt;Sequence Seq, <span class="hljs-keyword">typename</span> Num&gt;<br>    <span class="hljs-keyword">requires</span> Arithmetic&lt;Value_type&lt;Seq&gt;,Num&gt;<br><span class="hljs-function">Num <span class="hljs-title">sum</span><span class="hljs-params">(Seq s, Num v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; x : s)<br>        v += x;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，我们必须有算数运算符，包括 <code>+=</code>，以供 <code>Sequence</code> 的值类型和我们用作累加器的类型的组合使用。我们不再需要说明 <code>Num</code> 为 <code>Number</code>，<code>Arithmetic</code> 会检查 <code>Num</code> 具有所需的一切属性。在这里，<code>Arithmetic</code> 被显式地用作（C++0x 风格的）<code>requires</code> 子句中的谓词。</p><p>重载是通过挑选具有最严格要求的函数来处理。考虑标准库中的经典函数 <code>advance</code> 的一个简单版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Forward_iterator Iter&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">advance</span><span class="hljs-params">(Iter p, <span class="hljs-type">int</span> n)</span>  <span class="hljs-comment">// 将 p 向前移动 n 个元素</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (n--)<br>        ++p;  <span class="hljs-comment">// 前向迭代器有 ++，但没有 + 或者 +=</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Random_access_iterator Iter&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">advance</span><span class="hljs-params">(Iter p, <span class="hljs-type">int</span> n)</span>  <span class="hljs-comment">// 将 p 向前移动 n 个元素</span></span><br><span class="hljs-function"></span>&#123;<br>    p += n;  <span class="hljs-comment">// 随机迭代器有 +=</span><br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，我们应该对提供随机访问的序列使用第二个版本，对只提供前向迭代的序列使用第一个版本。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">user</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;::iterator vip, list&lt;string&gt;::iterator lsp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">advance</span>(vip, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 使用较快的 advance()</span><br>    <span class="hljs-built_in">advance</span>(lsp, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 使用较慢的 advance()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译器将这两个函数的概念分解为原始（“原子”）要求，由于前向迭代的要求是随机访问迭代要求的严格子集，所以这个例子可以被解决。</p><p>当一个参数类型同时匹配到互相之间不是严格子集的重叠要求时，会产生歧义（编译期错误）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> Copyable&lt;T&gt; &amp;&amp; Integral&lt;T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">fct</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> Copyable&lt;T&gt; &amp;&amp; Swappable&lt;T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">fct</span><span class="hljs-params">(T x )</span></span>;<br><br><span class="hljs-type">int</span> x = <span class="hljs-built_in">fct</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 有歧义：int 满足 Copyable、Integral 和 Swappable</span><br><span class="hljs-keyword">auto</span> y = <span class="hljs-built_in">fct</span>(complex&lt;<span class="hljs-type">double</span>&gt;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;);  <span class="hljs-comment">// OK：complex 不满足 integral</span><br></code></pre></td></tr></table></figure><p>程序员唯一能利用的控制机制是在定义概念时为其增加操作。不过对于现实世界的例子来说，这似乎已经足够了。当然，你可以定义一些只在语义上有差异的概念，这样就没有办法根据我们的纯语法概念来区分它们。然而，要避免这样做并不困难。</p><h3 id="6-3-3-概念的定义"><a href="#6-3-3-概念的定义" class="headerlink" title="6.3.3 概念的定义"></a>6.3.3 概念的定义</h3><p>通过 <code>requires</code> 表达式的使用模式可指定概念的原始要求：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U =T&gt;<br><span class="hljs-keyword">concept</span> Equality_comparable =<br>    <span class="hljs-built_in">requires</span> (T a, U b) &#123;<br>        &#123; a == b &#125; -&gt; <span class="hljs-type">bool</span> ; <span class="hljs-comment">// 使用 == 比较 T 和 U 得到一个 bool 值</span><br>        &#123; a != b &#125; -&gt; <span class="hljs-type">bool</span> ; <span class="hljs-comment">// 使用 != 比较 T 和 U 得到一个 bool 值</span><br>    &#125;;<br></code></pre></td></tr></table></figure><p><code>requires</code> 表达式是 Andrew Sutton 发明的，作为他实现 Concepts TS 的一部分。事实证明它们非常有用，以至于用户坚持认为它们应该成为标准的一部分。</p><p><code>=T</code> 为第二个类型参数提供默认值，因此概念 <code>Equality_comparable</code> 可以用于单个类型。</p><p>使用模式的写法是 Bjarne Stroustrup 基于 2003 年的想法 [Stroustrup and Dos Reis 2003b] 在 Palo Alto 的现场会议上发明的。这种写法及其思想并不涉及函数签名或函数表的实现。</p><p>不存在特定的机制来表达类型与概念相匹配，但如果有人要这么做，可以使用 C++11 中普通的 <code>static_assert</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">static_assert</span>(Equality_comparable&lt;<span class="hljs-type">int</span>&gt;);       <span class="hljs-comment">// 成功</span><br><span class="hljs-built_in">static_assert</span>(Equality_comparable&lt;<span class="hljs-type">int</span>,<span class="hljs-type">long</span>&gt;);  <span class="hljs-comment">// 成功</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123; <span class="hljs-type">int</span> a; &#125;;<br><span class="hljs-built_in">static_assert</span>(Equality_comparable&lt;S&gt;);    <span class="hljs-comment">// 失败了，因为结构体不会</span><br>                                          <span class="hljs-comment">// 自动生成 == 和 != 操作</span><br></code></pre></td></tr></table></figure><p>来自 C++0x（及更早的 [Stroustrup 2003]）中的关联类型（associated type）概念也得到了支持：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> S&gt;<br><span class="hljs-keyword">concept</span> Sequence = <span class="hljs-built_in">requires</span>(S a) &#123;<br>  <span class="hljs-keyword">typename</span> Value_type&lt;S&gt;;             <span class="hljs-comment">// S 必须具有值类型。</span><br>  <span class="hljs-keyword">typename</span> Iterator_type&lt;S&gt;;          <span class="hljs-comment">// S 必须具有迭代器类型。</span><br><br>  &#123; <span class="hljs-built_in">begin</span>(a) &#125; -&gt; Iterator_type&lt;S&gt;;   <span class="hljs-comment">// begin(a) 必须返回一个迭代器。</span><br>  &#123; <span class="hljs-built_in">end</span>(a) &#125; -&gt; Iterator_type&lt;S&gt;;     <span class="hljs-comment">// end(a) 必须返回一个迭代器。</span><br>  &#123; a.<span class="hljs-built_in">begin</span>() &#125; -&gt; Iterator_type&lt;S&gt;;  <span class="hljs-comment">// a.begin() 必须返回一个迭代器。</span><br>  &#123; a.<span class="hljs-built_in">end</span>() &#125; -&gt; Iterator_type&lt;S&gt;;    <span class="hljs-comment">// a.end() 必须返回一个迭代器。</span><br><br>  <span class="hljs-keyword">requires</span> Same_type&lt;Value_type&lt;S&gt;,Value_type&lt;Iterator_type&lt;S&gt;&gt;&gt;;<br>  <span class="hljs-keyword">requires</span> Input_iterator&lt;Iterator_type&lt;S&gt;&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意上面的代码有重复，这是为了可以同时接受 <code>a.begin()</code> 和 <code>begin(a)</code>。缺少统一函数调用让人头疼（<a href="#61-%E6%A6%82%E5%BF%B5%E7%9A%84%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">§6.1</a>）、（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）。</p><h3 id="6-3-4-概念名称引导器"><a href="#6-3-4-概念名称引导器" class="headerlink" title="6.3.4 概念名称引导器"></a>6.3.4 概念名称引导器</h3><p>从使用中我们学到的一件事情是，基础概念的使用有很多重复。我们在 <code>requires</code> 语句中直接使用了太多的 <code>requires</code> 表达式，并且使用了太多“小”概念。我们的概念要求看起来像新手程序员编写的代码：很少的函数，很少的抽象，很少的符号名。</p><p>考虑标准的 <code>merge</code> 家族函数。这些函数都接受三个序列的输入并需要指明这些序列之间的关系。因此就有了对序列类型的三个要求和描述序列元素之间关系的三个要求。第一次尝试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;Input_iterator In1, Input_iterator In2, Output_iterator Out&gt;<br>    <span class="hljs-keyword">requires</span> Comparable&lt;Value_type&lt;In1&gt;,Value_type&lt;In2&gt;&gt;<br>    &amp;&amp; Assignable&lt;Value_type&lt;In1&gt;, Value_type&lt;Out&gt;&gt;<br>    &amp;&amp; Assignable&lt;Value_type&lt;In2&gt;, Value_type&lt;Out&gt;&gt;<br><span class="hljs-function">Out <span class="hljs-title">merge</span><span class="hljs-params">(In1, In1, In2, In2, Out)</span></span>;<br></code></pre></td></tr></table></figure><p>这种形式太乏味了；而且，这种引入类型名称的模式非常常见。例如，STL 中至少有四个 <code>merge</code> 函数。乏味且重复的代码非常容易出错，也难以维护。我们很快学会了更多使用多参数概念来定义类型间要求的共同模式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Input_iterator In1, Input_iterator In2, Output_iterator Out&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> Mergeable&lt;In1,In2,Out&gt;</span><br><span class="hljs-function">Out <span class="hljs-title">merge</span><span class="hljs-params">(In1, In1, In2, In2, Out)</span></span>;<br></code></pre></td></tr></table></figure><p>对于 Andrew Sutton 来说，这还是太混乱了。他在 2012 年使用概念编写的代码量可能超过任何其他人。他提出了一种机制来表达“为满足一个概念的多个类型引入一个类型名集合”。这样将 <code>merge</code> 的示例减少到了逻辑上的最少限度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Mergeable&#123;In1,In2,Out&#125; <span class="hljs-comment">// 概念名称引导器</span><br><span class="hljs-function">Out <span class="hljs-title">merge</span><span class="hljs-params">(In1, In1, In2, In2, Out)</span></span>;<br></code></pre></td></tr></table></figure><p>仅仅通过尝试，你就能学到很多东西，这真是令人惊叹！同样令人惊叹的是，对于那些尚未经历过这些问题的人，新颖的写法和解决方案在他们那里也会遭遇巨大的阻力。</p><h3 id="6-3-5-概念和类型"><a href="#6-3-5-概念和类型" class="headerlink" title="6.3.5 概念和类型"></a>6.3.5 概念和类型</h3><p>许多人仍然将概念视为（无论过去和现在）类型的类型这个想法的变体。是的，只有一个类型参数的概念可以看作是一个类型的类型，但只有最简单的用法才适合该模式。</p><p>大多数泛型函数（算法）都需要不止一个模板参数，要让这样的函数有意义，这些参数类型必须以某种方式关联起来。因此，我们必须使用多参数概念。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;Forward_iterator Iter, <span class="hljs-keyword">typename</span> Val&gt;<br>    <span class="hljs-keyword">requires</span> Equality_comparable&lt;Value_type&lt;Iter&gt;,Val&gt;<br><span class="hljs-function">Forward_iterator <span class="hljs-title">find</span><span class="hljs-params">(Iter first, Iter last, Val v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (first!=last &amp;&amp; *first!=v)<br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>至关重要的是，多参数概念直接解决了处理隐式转换和混合类型操作的需求。早在 2003 年，我就和 Gabriel Dos Reis 一起考虑过将每个参数的所有约束条件与其他参数隔离开来说明的可能性 [Stroustrup 2003; Stroustrup and Dos Reis 2003b]。这将涉及</p><ul><li>参数化（例如，用值类型来参数化的 <code>Iterator</code>）</li><li>某种形式的继承（例如，<code>Random_access_iterator</code> 是一个 <code>Forward_iterator</code>）</li><li>能对一个模板参数应用多个概念的能力（例如，一个 <code>Container</code> 的元素必须满足 <code>Value_type</code> 和 <code>Comparable</code>）</li><li>这三种技术的组合。</li></ul><p>结果是非常复杂的模板参数类型约束。我们认为这种复杂性是不必要的，也无法进行管理。譬如 <code>x+y</code> 和 <code>y+x</code>，其中 <code>x</code> 和 <code>y</code> 具有不同的模板参数类型，<code>X</code> 和 <code>Y</code>。在处理各自的模板参数时，我们必须将 <code>X</code> 和 <code>Y</code> 以及 <code>Y</code> 和 <code>X</code> 进行参数化。在纯面向对象语言中，这看起来很自然。毕竟，有两种方法可以进行 <code>+</code> 运算，一种在 <code>X</code> 的层次结构中，一种在 <code>Y</code> 的层次结构中。然而，我早在 1982 年就拒绝了 C++ 的这个解决方案。要完成这一图景，我们必须添加隐式类型转换（例如，处理 <code>x+2</code> 和 <code>2+x</code>）。而多参数概念与 C++ 解决此类场景的方式完全吻合，并避免了大部分的复杂性。</p><p>这个决定经过多年的反复审查并得到确认。在设计 C++0x 概念的努力中，人们尝试应用了标准的学术系统，正如在 Haskell 类型类（typeclass）和 Java 约束中可见的。但是，这些做法最终不能提供在大规模使用中所需要的实现和使用上的简单性。</p><p>当一个泛型用法符合类型的类型这一模式时，概念能非常优雅地支持它。</p><ul><li><strong>类型</strong>指定了一组可以（隐式和显式）应用于对象的操作，依赖于函数声明和语言规则，并会指定对象在内存中如何布局。</li><li><strong>概念</strong>指定了一组可以（隐式和显式）应用于对象的操作，依赖于可以反映函数声明和语言规则的使用模式，并且不涉及对象的布局。因此，概念是一种接口。</li></ul><p>我的理想是，能用类型的地方就能用概念，并且使用方式相同。除了定义布局外，它们非常相似。概念甚至可以用来约束那些由其初始化器来确定其类型的变量的类型（受约束的 <code>auto</code> 变量（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>））。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Integer = Same&lt;T,<span class="hljs-type">short</span>&gt; || Same&lt;T,<span class="hljs-type">int</span>&gt; || Same&lt;T,<span class="hljs-type">long</span>&gt;;<br><br>Integer x1 = <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> x2 = <span class="hljs-number">9</span>;<br><br>Integer y1 = x1+x2;<br><span class="hljs-type">int</span> y2 = x2+x1;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;)</span></span>;      <span class="hljs-comment">// 一个函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Integer&amp;)</span></span>;  <span class="hljs-comment">// 一个函数模板</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ff</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">f</span>(x1);<br>    <span class="hljs-built_in">f</span>(x2);<br>&#125;<br></code></pre></td></tr></table></figure><p>C++20 离实现这一理想接近了。为了使该例子能在 C++20 中工作，我们必须在每个 <code>Integer</code>（<a href="#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）概念后添加一个逻辑上冗余的 <code>auto</code>。另一方面，在 C++20 中，我们可以使用标准库里的 <code>integral</code> 概念来替换明显不完整的 <code>Integer</code>。</p><h3 id="6-3-6-改进"><a href="#6-3-6-改进" class="headerlink" title="6.3.6 改进"></a>6.3.6 改进</h3><p>在 Concepts TS 工作的初期，一个 <code>concept</code> 是一个返回 <code>bool</code> 值的 <code>constexpr</code> 函数（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）。这很合理，因为我们把概念看作是编译期的谓词。然后 Gabriel Dos Reis 将变量模板引入到 C++14（<a href="05.md#52-%E5%8F%98%E9%87%8F%E6%A8%A1%E6%9D%BF">§5.2</a>）中。现在，我们有了选择：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 函数风格：</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">concept</span> <span class="hljs-type">bool</span> <span class="hljs-title">Sequence</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Has_begin</span>&lt;T&gt;() &amp;&amp; <span class="hljs-built_in">Has_end</span>&lt;T&gt;(); &#125;<br><br><span class="hljs-comment">// 表达式风格：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> <span class="hljs-type">bool</span> Sequence = Has_begin&lt;T&gt; &amp;&amp; Has_end&lt;T&gt;;<br></code></pre></td></tr></table></figure><p>我们可以愉快地使用任何一种风格，但是如果两种风格都允许的话，使用概念的用户就必须知道概念定义中使用了哪种风格，否则无法正确使用括号。很快这就成了一个大麻烦。</p><p>函数式风格允许概念重载，但是我们只有很少的概念重载例子；于是我们决定没有概念重载也可以。因此，我们进行了简化，只使用变量模板来表达概念。Andrew Sutton 率先全面使用了概念的表达式形式。</p><p>我们（Andrew Sutton、Gabriel Dos Reis 和我）始终知道，显式写出 <code>concept</code> 返回 <code>bool</code> 是多余的。毕竟，概念从定义上来看就是一个谓词。然而，我们决定不去搞乱语法而专注于语义上的重要话题。后来，人们总是将冗余的 <code>bool</code> 作为一个反对概念设计的论点，因此我们对其进行了修正，不再提到 <code>bool</code>。</p><p>删除 <code>bool</code> 是 Richard Smith 提出的一系列改进建议的一部分，其中还包括更精确地描述什么是原子谓词，以及对匹配规则的简化 [Smith and Sutton 2017]。现在，我们使用表达式风格：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 表达式风格：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Sequence = Has_begin&lt;T&gt; &amp;&amp; Has_end&lt;T&gt;;<br></code></pre></td></tr></table></figure><h3 id="6-3-7-等效语法"><a href="#6-3-7-等效语法" class="headerlink" title="6.3.7 等效语法"></a>6.3.7 等效语法</h3><p>Concepts TS 支持在函数声明中使用概念的三种写法：</p><ul><li>为通用起见，显式使用 <code>requires</code> 语句</li><li>简略写法，用于表示类型的类型</li><li>自然写法（也称为简短写法、常规写法等）</li></ul><p>基本思想是，让程序员使用与特定声明的需求紧密匹配的写法，而不会因使用更复杂声明所需的写法而淹没该定义。为了使程序员可以自由选择写法，尤其是允许在项目开发初期或维护阶段随着功能的变化而调整，这些风格的写法被定义为是等效的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Sortable &amp;)</span></span>; <span class="hljs-comment">// 自然写法</span><br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Sortable S&gt; <span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(S&amp;)</span></span>; <span class="hljs-comment">// 简略写法</span><br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> S&gt; <span class="hljs-keyword">requires</span> Sortable&lt;S&gt; <span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(S&amp;)</span></span>;<br></code></pre></td></tr></table></figure><p>用户对此感到非常满意，并且倾向于在大多数声明中使用自然和简略写法。但是，有些委员会成员对自然写法感到恐惧（“我看不出它是一个模板！”），而喜欢使用最显式的 <code>requires</code> 写法，因为它甚至可以表达最复杂的示例（“为什么你还要比那更复杂的东西？”）。我的解释是，我们对什么是简单有两种看法：</p><ul><li>我可以用最简单、最快捷的方式编写代码</li><li>我只需要学习一种写法</li></ul><p>我赞成前一种观点，认为这是洋葱原则（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）的一个很好的例子。</p><p>自然写法成为对概念强烈反对的焦点。我——还有其他人——坚持这种优雅的表达</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Sortable&amp;)</span></span>; <span class="hljs-comment">// 自然写法</span><br></code></pre></td></tr></table></figure><p>我们看到（过去和现在）这是有用而优雅的一步，可以使泛型编程逐渐变成一种普通的编程方式，而不是一种具有不同语法、不同源代码组织偏好（“仅头文件”）和不同编码风格（例如模板元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>））的暗黑艺术。模块解决了源代码组织问题（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）。另外，更“自然”的语法解决了人们总是抱怨的关于模板语法过于冗长和笨拙的问题，我同意这些抱怨。在设计模板时，<code>template&lt;…&gt;</code> 前缀语法不是我的首选。由于人们总是担心能力不强的程序员滥用模板而引起混淆和错误，我被迫接受了这种写法。繁重的异常处理语法（<code>try &#123; … &#125; catch ( … ) &#123; … &#125;</code>）也是类似的故事 [Stroustrup 2007]。似乎对于每个新特性，许多人都要求有<strong>醒目</strong>的语法来防止实际和想象中的潜在问题。然后过一段时间后，他们又抱怨太啰嗦了。</p><p>无论如何，有为数不少的委员会成员坚持认为自然语法会导致混乱和误用，因为人们（尤其是经验不足的程序员）不会意识到以这种方式定义的函数是模板，和其他函数并不相同。我在使用和教授概念的多年里并没有观察到这些问题，因此我并不特别担心这样的假设性问题，但反对意见仍然非常强烈。人们就是<strong>知道</strong>这样的代码很危险。主要的例子是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(C&amp;&amp;)</span></span>; <span class="hljs-comment">// 危险：C 是一个概念还是类型？</span><br></code></pre></td></tr></table></figure><p><code>C&amp;&amp;</code> 的含义因 <code>f</code> 是函数模板还是“普通的”函数而有所不同。在我看来，<code>C&amp;&amp;</code> 语义上的这种差异是 C++11 中最不幸的设计错误，我们应该尝试纠正这一错误，而不是让它影响概念的定义。毫无疑问，误解的可能性是真实存在的，并且一旦该机制被很多人使用时，肯定会发生。但是，我在现实中没有看到过这种问题，而且我怀疑经验相对丰富的程序员如果遇到这种差异真正会产生影响时，真的会遇到麻烦。换句话说，我认为这是“尾巴摇狗”的一个示例；也就是说，一个不起眼的例子阻止了一个可以使大量用户受益的特性。</p><p>我也很确定，我的目标是使泛型编程尽可能地像“普通”编程，但这不是普遍共识。仍然有人认为，泛型编程超出了绝大部分程序员的能力。但我没有看到任何证据。</p><h3 id="6-3-8-为什么在-C-17-中没有概念？"><a href="#6-3-8-为什么在-C-17-中没有概念？" class="headerlink" title="6.3.8 为什么在 C++17 中没有概念？"></a>6.3.8 为什么在 C++17 中没有概念？</h3><p>我曾希望并期望在 C++17 看到概念。在我认为在 2017 年时间窗口可行的扩展（<a href="09.md#92-%E6%88%91%E7%9A%84-c17-%E6%B8%85%E5%8D%95">§9.2</a>）中，我把概念看作是对 C++ 程序员的基本词汇的最重大改进。它可以消除很多对丑陋且易出错的模板元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）的需求，可以简化库的精确规范定义，并显著改善库的设计。恐怕这就是问题的一部分：概念会直接影响所有投票成员。有些人对旧的方式比较满意，有些人没有概念方面的经验，而有些人则认为它们是未被尝试过的（“学院派”&#x2F;“理论派”）想法。</p><p>C++0x 概念（<a href="#62-c0x-%E6%A6%82%E5%BF%B5">§6.2</a>）的惨败加剧了这种担忧，这导致我们首先有了技术规范（TS）[Sutton 2017]。我们没有语言特性方面的技术规范经验，但是这似乎值得尝试：Andrew Sutton 在 GCC 中的概念实现仍然比较新，需要谨慎评估。在（2013 年的）Bristol 标准会议上，Herb Sutter 强烈主张采用 TS 路线，而我和 J-Daniel Garcia 警告说可能会有延期。我还指出了将概念与通用 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）分开考虑的危险性，但是“谨慎”和“我们需要更多经验”在标准委员会里是很有力的理由。最终，我投票赞成了 Concepts TS。现在我把这看作是一个错误。</p><p>2013 年，我们有了一个概念的实现和一个相当不错的规范（主要感谢 Andrew Sutton），但是完成 Concepts TS 还是花了三年的时间。我无法识别出完善 TS 和纳入 ISO 标准在严格程度有什么区别。但是，在 2016 年 Jacksonville 会议上，当对 TS 中描述的概念进行投票以将其纳入标准时，先前的所有反对意见又出现了。反对者似乎只是把概念给忽略了三年。我甚至听到了只对 C++0x 中的概念设计有效、而与 TS 概念设计无关的反对意见。人们再次主张“谨慎”和“我们需要更多的经验”。据我所知，由于委员会人数增长的部分原因，在 Jacksonville 会议上还没有尝试过概念的人比在 Bristol 时更多。除了我在过去十年中听到的所有反对意见之外，有人提出了全新的反对意见，有人在全体委员会上提出了未经尝试的设计建议，还被认真考虑了。</p><p>在 2016 年 2 月的 Jacksonville 会议上，Ville Voutilainen（EWG 主席）提议按照 Concepts TS [Voutilainen 2016c] 把概念放到标准中：</p><blockquote><p>……程序员们非常渴望能使用新的语言特性，现在正是将其交付给他们的时候了。概念化标准库需要花费时间，相信在这个过程中不会发现概念设计有什么大的问题。我们不应该让程序员一直等待语言特性，只是因为一些假想中的设计问题，这些问题没有证据，甚至有一些反证，很可能根本不存在。为了使世界各地的 C++ 用户受益，让我们在 C++17 里交付概念这一语言特性吧。</p></blockquote><p>他得到了许多人的大力支持，尤其是 Gabriel Dos Reis、Alisdair Meredith（之前是 LWG 主席）和我，但是（尽管 EWG 在本周早些时候投了赞成票）投票结果依然对我们不利：25 票赞成，31 票反对，8 票弃权。我的解释是，用户投了赞成票，语言技术人员投了反对票，但这可能会被认为是酸葡萄吧。</p><p>在这次会议上，统一调用语法（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）被否决，协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）被转为 TS，基本上确保了 C++17 只是标准的一个小版本（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）。</p><h2 id="6-4-C-20-概念"><a href="#6-4-C-20-概念" class="headerlink" title="6.4 C++20 概念"></a>6.4 C++20 概念</h2><p>在 2017 年，作为 C++20 的最早特性之一，WG21 将 Concepts TS [Sutton 2017] 中基础部分和无争议的部分通过投票进入了工作文件（<a href="#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>）：</p><ul><li>为通用起见，显式使用 <code>requires</code> 语句；例如 <code>requires Sortable&lt;S&gt;</code></li><li>简略写法，用于表示类型的类型；例如 <code>template&lt;Sortable S&gt;</code></li></ul><p>自然写法（例如 <code>void sort(Sortable&amp;);</code>（<a href="#637-%E7%AD%89%E6%95%88%E8%AF%AD%E6%B3%95">§6.3.7</a>））因有争议而被排除在外。被排除在外的原因有以下几点：</p><ul><li><code>void sort(Sortable&amp;);</code> 是一个模板，但这不很明显。</li><li><code>void f(C&amp;&amp;);</code> 的含义取决于 <code>C</code> 是概念还是类型。</li><li>在 <code>Iterator foo(Iterator,Iterator);</code> 中，三个 Iterator 必须是相同类型，还是可以分开约束的类型？</li><li>自然语法令人困惑且难以教授。</li><li>我们如何约束 <code>template&lt;auto N&gt; void f();</code> 中的参数？</li></ul><p>这些异议并不新鲜，但这次它们伴随着许多使用全新语法的提案 [Honermann 2017; Keane et al. 2017; Köppe 2017a; Riedle 2017; Sutter 2018a]。这些提案各不相同，和 Concepts TS 也不兼容。人们带着热情在会议上介绍这些提案，而其中没有一个有实际经验的支持。相比之下，我的立场是基于约四年的教学经验、很多的实验使用、一些业界应用，以及在几个标准库提案组件中的使用（如，迭代器封装 [Dawes et al. 2016]、元组实现 [Voutilainen 2016b]、范围 [Niebler et al. 2014]）。</p><p>在 Jacksonville 会议（2018）上，Tom Honerman 建议删除自然语法，并提出了另一种选择 [Honermann 2017]。我捍卫了自己的立场和 Concepts TS 的设计 [Stroustrup 2017a,b]。我的辩护主要是</p><ul><li>五年多来，自然语法在实际教学和使用中未引起任何问题。</li><li>用户喜欢它。</li><li>没有技术上的歧义。</li><li>它简化了常见用法。</li><li>这是使泛型编程更像普通编程的动力之一。</li></ul><p>但这未能说服任何反对者，因此自然语法没有移到 C++20 的工作文件中。</p><p>最后一个反对意见来自 C++17 的一个新的小特性，<code>auto</code> 值参数 [Touton and Spertus 2015]，并成为反对的焦点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">auto</span> N&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>人们想在语法上区分值模板参数和类型模板参数。通常，这意味着自 2002 年以来一直在提案里被使用的简写语法将不再有效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Concept T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp;)</span></span>; <span class="hljs-comment">// 建议被废止</span><br></code></pre></td></tr></table></figure><p>在 2018 年中，我提出了一个最小折中方案 [Stroustrup 2018b]：</p><ul><li>保留 <code>template&lt;Concept T&gt; void f(T&amp;);</code> 的含义；</li><li>使用前缀 <code>template</code> 来识别使用自然写法的模板（例如 <code>template void f(Concept&amp;)</code>）</li></ul><p>提议成功了，但是 Herb Sutter [Sutter 2018a] 提出的一个截然不同的建议也成功了 [Sutter 2018a]。我们当时处于一种非常特殊的境地，同时有两个截然不同且互不兼容的提案，每个都得到了 EWG 的大多数人的支持。这种僵局为 Ville Voutilainen（EWG 主席）提出一种变通方案打开了大门，这一方案在 2018 年 11 月得到了广泛的支持并被接受 [Voutilainen et al. 2018]：</p><ul><li>保留 <code>template&lt;Concept T&gt; void f(T&amp;);</code> 的含义</li><li>使用 <code>auto</code> 来识别使用自然写法的模板参数，例如 <code>void f(Concept auto&amp;);</code></li></ul><p>举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 几乎自然的写法：</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Sortable <span class="hljs-keyword">auto</span>&amp; x)</span></span>;  <span class="hljs-comment">// x 必须 Sortable</span><br>Integral <span class="hljs-keyword">auto</span> ch = <span class="hljs-built_in">f</span>(val);    <span class="hljs-comment">// f(val) 的结果必须为 Integral</span><br><span class="hljs-function">Integral <span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(Integral <span class="hljs-keyword">auto</span> x, Integral <span class="hljs-keyword">auto</span> x)</span></span>; <span class="hljs-comment">// 可以用一个更宽的</span><br>                                                     <span class="hljs-comment">// 类型来防止溢出</span><br></code></pre></td></tr></table></figure><p>“自然写法”已重命名为“缩写语法”，虽然它不仅仅是一个缩写。</p><p>尽管我认为在这种 <code>auto</code> 的使用有些多余，分散和损害了我想使泛型编程变成“普通编程”的目标，但我还是支持这种折中方案。也许在将来的某个时候，人们会（正如当时 Herb Sutter 所暗示的那样）达成一致，让在概念名后的 <code>auto</code> 不再必要。不过，我并没有抱太大的希望；很多人认为为技术实现而定义的语法标记很重要。或许 IDE 的自动完成功能可以使用户免于手写这多余的 <code>auto</code>。</p><p>遗憾的是，对于重新引入概念名称引导器并没有达成共识（<a href="#634-%E6%A6%82%E5%BF%B5%E5%90%8D%E7%A7%B0%E5%BC%95%E5%AF%BC%E5%99%A8">§6.3.4</a>）。缺乏足够传统的语法是一个主要的绊脚石。同样，仍然有很多人似乎不相信其有用。</p><p>延迟很多年才引入概念造成了长期的伤害。基于特征（traits）和 <code>enable_if</code> 的临时设计数量激增。一代程序员在低级的、无类型的元编程中成长起来。</p><h2 id="6-5-概念的命名"><a href="#6-5-概念的命名" class="headerlink" title="6.5 概念的命名"></a>6.5 概念的命名</h2><p>在发布 C++20 之前有关概念的最后讨论中，有一个是关于概念的命名约定。命名始终是一个棘手的话题。在我早期涉及概念的工作中，我通常以非标准的命名类型的方式来命名概念：像命名专有名词一样，将第一个字母大写，并用下划线来分隔单词，以保证可读性（例如 <code>Sortable</code> 和 <code>Forward_iterator</code>）。其他人（尤其是印第安纳团队）则使用了驼峰式命名（例如 <code>Sortable</code> 和 <code>ForwardIterator</code>）。不幸的是，这种命名约定悄悄进入了标准文本 [Carter 2018]，并由于与标准库中的所有其他名称不同而引起一些混乱。在那里，使用了下划线，不使用大写字母（除了一些宏和三个晦涩难懂的示例）。然后有人认为，不同的命名约定旨在将“新颖且困难”的概念与“常规构件”（例如函数和类型）区分开来。</p><p>当我注意到这种辩解时，我非常不喜欢。在 C++ 中，我们通常不会把类型编码到实体名称中，但我认为更改命名风格为时已晚。在 2019 年，Herb Sutter 对我的抱怨做出了回应，提议重命名所有标准库中的概念，以遵循常见的标准库命名约定 [Sutter et al. 2019]。大部分概念设计者和范围库（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）的设计者作为共同作者都签了字。进行此更改的另一个原因是，我们开始看到标准库里概念的驼峰式名称与其他库中的驼峰式名称之间存在冲突。使用驼峰式命名（或使用我的大写类型约定）的原因之一就是为了避免与标准库冲突。因此，我们现在有了 <code>sortable</code>、<code>forward_iterator</code> 等。</p><p>C++20 标准库包含大约 70 个概念，包括 <code>constructible_from</code>、<code>convertible_to</code>、<code>derived_from</code>、<code>equal_comparable</code>、<code>invocable</code>、<code>mergeable</code>、<code>range</code>、<code>regular</code>、<code>same_as</code>、<code>signed_integral</code>、<code>semiregular</code>、<code>sortable</code>、<code>swappable</code> 和 <code>totally_ordered</code>，涵盖了运算符调用、基本类型的使用、范围和标准算法的需求。它们将指导许多 C++ 库的设计。请注意，这 70 个概念中很多并不是基本概念，而只是为了方便表示或用作基本构建单元。</p>]]></content>
    
    
    <summary type="html">概念</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_07/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_07/</id>
    <published>2024-10-29T13:21:09.463Z</published>
    <updated>2024-10-29T13:25:56.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-错误处理"><a href="#7-错误处理" class="headerlink" title="7. 错误处理"></a>7. 错误处理</h1><p>错误处理作为一种备受争议的话题，我认为将长期存在下去。许多人在这个问题上有强烈的固有认知，其中一些是基于各种应用领域中扎实的经验——过去 50 多年已经有了很多相关的技术积累。在错误处理领域，性能、通用性、可靠性的需求往往发生冲突。</p><p>与 C++ 一样，问题不是我们没有解决方案，而是有太多解决方案。从根本上讲，很难通过单一的机制来满足 C++ 社区的多样化需求，但是人们往往只看到问题的一部分，就以为他们掌握了解决问题的<strong>终极方案</strong> [Stroustrup 2019a]。</p><h2 id="7-1-背景"><a href="#7-1-背景" class="headerlink" title="7.1 背景"></a>7.1 背景</h2><p>C++ 从 C 语言中继承了各种基于错误返回码的机制，错误可以用特殊值、全局状态、局部状态和回调等多种方式表达。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span></span>;  <span class="hljs-comment">// 当 d 为负数时，设置 errno 为 33</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getchar</span><span class="hljs-params">()</span></span>;          <span class="hljs-comment">// 遇到文件结尾返回 -1</span><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">malloc</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;      <span class="hljs-comment">// 如果分配出错，返回 0</span><br></code></pre></td></tr></table></figure><p>C++ 的早期用户（1980 年代）发现这些技术令人困惑，也不足以解决所有问题。返回 (值,错误码) 对变得流行，但这更增加了混乱和变化。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Result r = <span class="hljs-built_in">make_window</span>(arguments); <span class="hljs-comment">// Result 是 (值,错误码) 对</span><br><span class="hljs-keyword">if</span> (r.error) &#123;<br>    <span class="hljs-comment">// ... 错误处理 ...</span><br>&#125;<br>Shape* p = r.value;<br></code></pre></td></tr></table></figure><p>繁琐的重复错误检查使代码变得混乱。使用错误码时，很难将程序的主要逻辑与错误处理区分开。程序的主线（业务逻辑）与大量奇怪和模糊的错误处理代码紧密耦合在一起。对于那些错误处理本身就是主要的复杂逻辑而言，这种基于错误返回码的处理方式可能会带来严重的问题。</p><p>使用包含 (值,错误码) 对的类会带来巨大的成本。除了检测错误码的成本外，许多 ABI（应用程序二进制接口）甚至不使用寄存器来传递小的结构体，所以 (值,错误码) 对不仅传递了更多的信息（是通常数量的两倍），而且也使传递的性能有数量级的降低。可悲的是，在许多 ABI 中，尤其那些针对嵌入式系统的 ABI（专为 C 代码设计），这个问题直到今天（2020 年）依然存在。</p><p>此外，并不存在真正的好方法可以使用错误码来处理发生在构造函数中的错误（构造函数没有返回值），还有那些过去流行的具有复杂类层次结构的系统，子对象创建中各种潜在错误也很难通过错误码的方式处理。</p><p>还有，对于所有传统的错误处理技术，最令人头疼的是人们会忘记检查错误。这一直是错误的主要根源，并且在 2020 年的今天依旧如此。C++ 异常机制的主要目标是使不完整或复杂的错误处理中的错误最小化。</p><p>C++ 异常是在 1988–89 年设计的，旨在解决当时普遍存在的复杂且容易出错的错误处理技术。它们记录在 ARM（<em>The Annotated C++ Reference Manual</em>）[Ellis and Stroustrup 1990] 中，并作为标准基础文档 [Stroustrup 1993] 的一部分被 ANSI C++ 所采用。</p><p>与其他语言的异常设计相比，用于 C++ 的异常设计由于 C++ 代码需要和其他语言（尤其是 C）的代码结合使用而变得复杂。考虑一个 C++ 函数 <code>f()</code> 调用一个 C 函数 <code>g()</code>，该函数又调用一个 C++ 函数 <code>h()</code>。现在 <code>h()</code> 抛出异常由 <code>f()</code> 捕获。通常，C++ 函数不知道被调用函数的实现语言。这样的场景使我们不能通过修改函数签名以添加“异常传播参数”，或隐式地向返回类型添加返回码的方法做错误处理。</p><p>与使用其他技术相比，异常与 RAII（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>）一起解决了许多棘手的错误处理问题（例如，如何处理构造函数中的错误以及那些远离错误处理代码的错误），而且所需的时间成本要小得多（与 1990 年代中期所用的技术相比通常不到 3％，甚至更便宜）。虽然异常从来都不是没有争议的，但我还是低估了它们引起争议的可能性。</p><h2 id="7-2-现实中的问题"><a href="#7-2-现实中的问题" class="headerlink" title="7.2 现实中的问题"></a>7.2 现实中的问题</h2><p>当然总有一些应用不适合使用异常，例如：</p><ul><li>内存严重受限系统，异常处理所需的运行期支持内存会占用应用程序功能所需要的内存。</li><li>工具链不能保证异常抛出后能够迅速做出响应的硬实时系统（例如 [Lockheed Martin Corporation 2005]）。</li><li>系统依赖于多台不可靠的计算机，因此立即崩溃并重新启动是对付那些无法在本地处理的错误的合理（且几乎是必要的）方式。</li></ul><p>因此，大多数 C++ 实现仍然保留了非异常机制的错误处理方式。另一方面，也存在一些通过错误码无法提供良好解决方案的场景：</p><ul><li><strong>构造函数失败</strong>——由于构造函数没有返回值（不算被构造对象本身），单纯依赖 RAII 的方式必须替换为通过对对象状态的显式检查来处理错误。</li><li><strong>运算符</strong>——没有办法从 <code>++</code>、<code>*</code>、<code>-&gt;</code> 中返回错误码。你将不得不使用非本地的错误指示，或使用一种糟糕的写法，如 <code>multiply(add(a,b),c)</code> 而不是 <code>(a+b)*c</code>。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：原文如此。实际上 Bjarne 的这个写法仍然是返回对象而不是错误码，因此仍需使用异常。不用异常的写法还要啰嗦得多。">[1]</span></a></sup></li><li><strong>回调</strong>——使用回调的函数应该能够调用具有多种可能错误的函数（通常，回调是 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>））。</li><li><strong>非 C++ 代码</strong>——我们无法通过那些没有专门做错误码处理的非 C++ 函数传递错误。</li><li><strong>调用链深处新的错误类型</strong>——必须准备调用链上的每个函数来处理或传播一种新的错误（例如，程序中的网络错误，而它并不是专门为通过网络访问数据而预先设计的）。</li><li><strong>忘记处理返回码</strong>——有一些精巧的方案来试图确保统一检查错误码，但是它们要么不完整，要么依赖于在遗漏检查时使用异常或程序终止（例如 [Botet and Bastien 2018]）。</li></ul><p>此外，还有一些与使用异常有关的现实问题：</p><ul><li>有些人不愿意引入异常机制，是因为他们的代码由于无原则使用指针而形成了一团乱麻。通常，这些人将他们的批评指向异常，而不是他们的陈旧代码。</li><li>有些人（很多）根本不理解甚至不知道 RAII（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>），而只是把异常当作返回错误码的一种替代机制来用。通常，把 try-catch 当作 if-then 的一种形式来用的话，代码比正确使用错误码或 RAII 要更丑陋、更繁琐、更缓慢。</li><li>异常的许多实现速度很慢，是因为实现者把 C++ 的异常与其他类型的异常（例如微软的结构异常）统一处理，优先考虑调试（例如 GCC 在 <code>throw</code> 后两次遍历堆栈来保存回溯），使用单一机制为各种语言服务（每一种都很糟糕），或者只是没有在异常处理优化上花费很多开发精力。</li><li>这些年来，异常处理的性能<strong>相对</strong>较慢，是因为我们在优化非异常方面花费了大量精力。我怀疑还有很大的优化机会。例如，Gor Nishanov 报告说，通过一些与 Windows 和 Linux 上的协程实现相关的简单优化，速度提高了多达 1000 倍 [Nishanov 2019a]。不过，大幅改善空间占用可能会更难实现。一些最近的实验看起来还比较不错 [Renwick et al. 2019]。</li><li>为了使异常被接受，我们不得不添加了异常规约 [Stroustrup 2007]。但异常规约从来没有提供支持者们所声称的更好的可维护性，而确实提供了反对者（包括我）所诟病的冗长和开销。一旦异常规约出现在语言中，许多人就觉得使用它们是受到鼓励的，并将由此产生的问题归咎于异常机制本身。具有讽刺意味的是，那些坚定支持异常规约的人转而去帮助设计 Java 了。异常规约在 2010 年被宣布废弃，并最终在 2017 年被移除（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）。作为部分替代方案，C++11 引入了 <code>noexcept</code> 作为一种更简单、更有效的控制异常的机制（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）。</li><li>通过指定要捕获的异常类型来捕获异常往往使 <code>throw</code> 和 <code>catch</code> 的实现与运行期类型识别（RTTI [Stroustrup 2007]）纠缠在一起，这导致了效率低下和复杂性。特别是，它会导致内存被消耗（被 RTTI 所需的数据消耗），即使应用程序从不依赖 RTTI 来区分异常，对于简单的场景也很难做优化。而且，依赖 RTTI 使得使用动态链接的类型匹配很难优化。基本上，异常处理实现是针对罕见的最复杂的情况进行优化的。当一个具有嵌套异常的类被添加到标准库中，人们甚至被鼓励在最简单的情况下使用它时，情况就更糟了。对于可以静态分析的类层次结构（在许多嵌入式系统中），以常量时间进行快速类型匹配是可能的 [Gibbs and Stroustrup 2006]。由于异常是平台 ABI 的一部分，这就使得要改变早期的过度设计非常之困难。</li><li>有人坚持只使用一种错误处理方法，并且通常得出这样的结论：由于异常不适用于每种情况，因此该方法必须是错误码。那些由错误码所带来的问题也就仅仅是“不方便而已”。</li><li>一些人相信那些关于异常机制的基于最坏情况和&#x2F;或不切实际的比较的低效传闻，例如在添加异常后保留错误码处理方式，将不完整的错误处理与基于异常的处理进行比较，或者使用异常来做简单的错误处理，而不是把异常用于无法在本地处理的错误。很少有关于异常及其替代方案成本的认真调查。我怀疑关于异常的虚假传说比任何事实都具有更大的影响力。</li></ul><p>最终结果是 C++ 社区分裂为异常和非异常阵营。事实上，“不要异常”是一种方言，而方言是标准要避免的事情之一（<a href="03.md#31-%E6%A0%87%E5%87%86">§3.1</a>）。对于个人组织或社区而言，方言可能有一些优势，但它使代码和技能的共享变得复杂，因此损害了整个 C++ 社区。</p><p>有人声称，异常机制的问题在于它违反了零开销原则（例如 [Sutter 2018b]）。对比通过终止应用来响应错误的处理方案，任何错误处理机制显然都是开销，也都违反了零开销原则（除非考虑到处理终止的成本，例如在另一个处理器中）。在我们设计异常时，我们考虑了这些，并认为开销是可接受的。理由是：异常情况很少见；除非抛出异常，否则没有运行期开销；并且用于实现异常的表可以保存在虚拟内存中 [Koenig and Stroustrup 1989]。在虚拟内存不可用或内存不足的情况下，使用表来实现异常可能成为一个严重问题。我们当时设计异常时主要关注的是，需要某种形式的错误传播和错误处理的系统。在这种情况下，零开销可以解释为“异常与以在同样严格程度的错误处理下的错误码使用相比没有额外开销”。</p><p>如今，错误处理的混乱比以往任何时候都严重，处理错误的替代技术比以往任何时候都多，从而造成很大的混乱和危害。假设有 N 种错误处理方式，又有人提出了一个新的解决方案，只要旧的解决方案不被抛弃，现在我们就必须应对 N+1 种方式（“N+1 问题”）。如果一个组织有 M 个程序，使用了 N 个库，我们甚至可能有 N*M 个需要处理的问题。异常的引入可以看作是将处理错误的常用方法从 7 种增加到了 8 种。2015 年，Lawrence Crowl 撰写了一份问题分析报告 [Crowl2015a] 对这个问题进行了分析。</p><p>基础库的作者对多种错误处理方案的问题感受最为深刻。他们不知道他们的用户喜欢什么，他们的用户可能有很多不同的偏好。C++17 文件系统库（<a href="08.md#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>）的作者们选择了把接口重复一遍：对于每个操作，他们提供两个函数，一个在错误的情况下抛出异常，另一个函数则通过设置标准库的 <code>error_code</code> 参数将错误码通过参数传递出来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">create_directory</span><span class="hljs-params">(<span class="hljs-type">const</span> filesystem::path&amp; p)</span></span>; <span class="hljs-comment">// 出现错误时抛异常</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">create_directory</span><span class="hljs-params">(<span class="hljs-type">const</span> filesystem::path&amp; p, error_code&amp; ec)</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><p>当然，这有点冗长，只会取悦那些仅喜欢异常或 <code>error_code</code> 的人。也要注意作者提供了 <code>bool</code> 返回值，这样人们就不必一直使用 <code>try</code> 或直接测试 <code>error_code</code> 了。事实上，文件系统（在我看来相当正确）使用异常来处理罕见的错误并不能让那些认为异常有根本缺陷的人满意，特别是，它仍要求存在异常支持。</p><h2 id="7-3-noexcept-规约"><a href="#7-3-noexcept-规约" class="headerlink" title="7.3 noexcept 规约"></a>7.3 <code>noexcept</code> 规约</h2><p>使用 <code>noexcept</code>（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>），人们可以抑制所有从函数抛出的异常，并允许调用者忽略抛出异常的可能性。</p><p>使用 <code>noexcept</code> 可以使担心性能问题（或真或假）的人们放心。它也可以通过减少控制路径的数量来改善优化效果，但前提是程序员不要通过测试返回码将这些路径添加回去。许多低级函数，例如大多数 C 函数，都不存在异常。</p><p>使用 <code>noexcept</code> 可以简化错误处理（如果一个函数不抛出异常，我们就不需要捕获任何异常），也可以使其复杂化（如果一个函数不能抛出异常，但又可能会失败，我们必须使用其他错误处理机制）。特别是，在异常抛出与其处理程序之间的路径上的 <code>noexcept</code>，会把一个异常变成程序终止运行。因此，对于一个处于维护期的程序，在函数中使用使用 <code>noexcept</code>，可能会导致先前正确的程序失败。</p><p>请注意，异常被添加到 C++ 中的一个重要原因是为了支持那些在发生错误时也决不可以无条件中止的应用。异常仅表示发生了故障，并且从 <code>main()</code> 到抛出点的路径上的任何代码都可以对其进行处理。特别是，这样可以支持一个重要场景：在终止之前进行一些本地清理（例如，刷新输出缓冲区，或向日志文件添加错误报告）。</p><h2 id="7-4-类型系统的支持"><a href="#7-4-类型系统的支持" class="headerlink" title="7.4 类型系统的支持"></a>7.4 类型系统的支持</h2><p>解决 C++ 中的逻辑和性能问题的传统方法是将计算从运行期挪到编译期。显然，将异常与静态类型系统集成的可能性在 1980 年代被认真考虑过，后来又反复被重新考虑。如果异常是函数类型的一部分，那么程序就会有更好的类型检查，函数就更能自我描述，异常处理也更容易优化。</p><p>不将异常作为类型系统的一部分的一个主要原因是，如果异常是函数类型的一部分，那么对该函数可能抛出的异常集的更改将要求所有调用该函数的函数重新编译。在一个大多数主要程序都由许多单独开发的库组成的世界里，这将导致灾难性的脆弱，及无法管理的相互依赖 [Stroustrup 1994]。</p><p>函数指针方面也有相关的明显问题。在大多数主要的 C++ 程序中都有很多 C 风格的代码，现在仍然如此。C 风格的泛型代码（例如，<code>qsort</code> 的比较函数参数）和回调（例如，在 GUI 中）的主要参数化机制均会用到函数指针。</p><p>如果我需要一个指向函数的指针，并且异常是类型系统的一部分，那么，我要么决定始终从所指向的函数中获取异常，要么不接受异常，要么以某种方式处理这两种选择。除非将对类型查询的支持或基于异常的重载添加到语言中，否则都很难两者兼顾。确定了要接受哪种类型函数指针参数后，我现在必须调整调用函数中的错误检查方式以匹配所接受的函数指针类型。即使这些可以在 C++ 语言中处理，也将影响与 C 的交互：这时如何将指向 C++ 函数的指针传递给 C？例如，如何处理从 C 中回调依赖异常的 C++ 的函数？显然，C++ 函数中的异常不会消失，因此我们将有四种选择：错误码、编译期检查的异常（例如 [Sutter 2018b]）、当前异常和 <code>noexcept</code>。只有当前的异常和非本地错误码不会影响类型系统或调用约定（ABI 接口）。幸运的是，很少有函数需要两个函数指针，否则我们将面临选择 16 种方案的风险。因此，如果接受异常类型系统（就当前的异常而言），混乱将是全方面的。</p><p>在现代 C++ 中，此类问题将以其他回调机制的不同形式继续存在，例如具有要被调用的成员函数的对象、函数对象和 lambda 表达式。</p><p>我的结论（得到 WG21 的认可）过去和现在都是，在 C++ 的静态类型系统中添加异常会导致系统脆弱、代码复杂性显著增加、严重的不兼容性以及与 C 代码交互的问题。这一点在 1989 年就得到了重视。</p><h2 id="7-5-回归基础"><a href="#7-5-回归基础" class="headerlink" title="7.5 回归基础"></a>7.5 回归基础</h2><p>从根本上讲，我认为 C++ 需要两种错误处理机制：</p><ul><li><strong>异常</strong>——罕见的错误或直接调用者无法处理的错误。</li><li><strong>错误码</strong>——错误码表示可以由直接调用者处理的错误（通常隐藏在易于使用的检测操作中或作为 (值,错误码) 对从函数返回）。</li></ul><p>考虑代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">user</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;string&gt; v&#123;<span class="hljs-string">&quot;hello!&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (string s; cin&gt;&gt;s; )<br>        v.<span class="hljs-built_in">push_back</span>(s);<br>    <span class="hljs-keyword">auto</span> ps = <span class="hljs-built_in">make_unique</span>&lt;Shape&gt;(<span class="hljs-built_in">read_shape</span>(cin));<br>    Smiley_face face&#123;Point&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<span class="hljs-number">20</span>&#125;;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子是人造的，但其编程风格并非不典型。我们可以从中看出，<code>user()</code> 函数里有很多发生不太可能的错误的可能性：内存耗尽、读取错误、构造失败（例如，在 <code>Smile_face</code> 的多层次结构中出现错误等）。另外，使用 <code>unique_ptr&lt;Shape&gt;</code> 可以防止内存泄漏。如果我们使用显式错误码而不是异常，那么这个函数中至少需要进行五次错误检查，源代码数量将翻倍，并需要在各个构造函数中进行更多检查。没有 RAII（及其与异常的集成），代码将进一步膨胀。一般来说，更多的代码意味着更多的错误。当添加的代码使控制流程复杂时，尤其如此。这一点经常被那些通过小例子论证的人所忽视。对于小例子来说，“就一项测试”关系不大，相对也很难漏掉。</p><p>另一方面，有些错误是预料得到的，我们更愿意使用某种形式的错误码来对其进行检查：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ifstream f &#123;<span class="hljs-string">&quot;Myfile&quot;</span>&#125;;<br><span class="hljs-keyword">if</span> (!f) &#123;<br>    <span class="hljs-comment">// ... 处理错误 ...</span><br>&#125;<br><span class="hljs-comment">// ... 使用 f ...</span><br></code></pre></td></tr></table></figure><p>在这里，为方便起见，错误码隐藏在输入流的状态里。</p><p>因此，在理想情况下，应该只有两种错误处理的方法，但是我真的不知道如何达到这样一种理想状态。仅仅 (值,错误码) 对就有十几种变体被广泛使用（例如 <code>std::map::insert()</code>），并且还有一些新的变体也在 2011 年的 WG21 中被讨论（如 [Botet and Bastien 2018; Sutter 2018b]）。即使委员会能就其中一个方案达成一致，也仍然会有至少十几个广泛使用的错误处理方案，每个方案都有一大群忠实的追随者支持，许多方案都有数百万行难以更动的代码。</p><p>很少有关于异常的性能和 C++ 中返回码可靠性的认真研究（[Renwick et al. 2019] 是一个例外）。但是，有许多不科学的小研究和许多大声表达的意见——常常声称异常天生就比各种形式的错误码检查慢。这与我的经验不符。就我所知，还没有任何严谨的研究发现在现实的例子中错误码能胜出“很多”，或者异常能胜出“很多”。在这一讨论场景下，“很多”表示整数倍的差异，而不是几个百分点。</p><p>运行一个简单的性能测试：进行一个 N 层深度的调用序列，然后报告错误。如果错误很少见，例如 1:1000 或 1:10000 的错误率，并且调用嵌套很深，例如 100 或 1000，则异常处理要比明确的错误码判断方式快得多。如果调用深度为 1，并且错误发生的概率为 50％，则显式判断错误码测试将大获全胜。调用深度和错误概率决定了这些测试之间的差异。我要问一个简单而潜在有用的问题：“一个错误要多罕见才被看作是异常情况”？不幸的是，答案是“这要看情况”。这取决于代码、硬件、优化器、异常处理的实现，等等等等。C++ 异常的设计假设答案至少在 1:100 的范围。换句话说，错误指示的传播要远比显式的处理更为常见。</p><p>空间占用问题可能比运行期问题更难解决。对于那些遇到不能在本地处理的错误就可以立即终止的系统，我可以想象这样一个实现，在遇到 <code>throw</code> 时立即终止程序。但是如果要传播和处理错误，那么就不可避免，需要面对选择各种困难的折中。</p><p>对于错误处理这团乱码，任何解决方案都很可能遇到 N+1 问题（<a href="04.md#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）[Stroustrup 2018a]。</p><p>奇怪的是，当初 C++ 引入异常时，人们担心的问题之一就是异常不够通用。许多人认为恢复（resumption）语义必不可少 [Stroustrup 1993]。当时我的猜测是，允许恢复将使异常处理的速度至少再降低两倍。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：原文如此。实际上 Bjarne 的这个写法仍然是返回对象而不是错误码，因此仍需使用异常。不用异常的写法还要啰嗦得多。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">错误处理</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_05/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_05/</id>
    <published>2024-10-29T13:21:09.462Z</published>
    <updated>2024-10-29T13:25:32.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-C-14：完成-C-11"><a href="#5-C-14：完成-C-11" class="headerlink" title="5. C++14：完成 C++11"></a>5. C++14：完成 C++11</h1><p>依据大版本和小版本交替发布的计划，C++14 [du Toit 2014] 的目标是“完成 C++11”（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）；也就是说，接受 2009 年特性冻结后的好的想法，纠正最初大规模使用 C++11 标准时发现的问题。对这个有限目标而言，C++14 是成功的。</p><p>重要的是，它表明 WG21 可以按时交付标准。反过来，这也使得实现者能够按时交付。在 2014 年年底之前，三个主要的 C++ 实现者（Clang、GCC 和微软）提供了大多数人认为完整的特性。尽管并没有完美地符合标准，但人们基本上可以对所有的特性和特性组合进行实验。要能编译“用到所有高级特性”的库，还需要延后一些时间（对微软而言要到 2018 年），但对于大多数用户而言，对标准的符合程度足以满足实际使用。标准工作和实现工作已经紧密联系在一起。这给社区带来了很大的不同。</p><p>C++14 特性集可以概括为：</p><ul><li>二进制字面量，例如 <code>0b1001000011110011</code></li><li><a href="#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>：数字分隔符——为了可读性，例如 <code>0b1001&#39;0000&#39;1111&#39;0011</code></li><li><a href="#52-%E5%8F%98%E9%87%8F%E6%A8%A1%E6%9D%BF">§5.2</a>：变量模板——参数化的常量和变量</li><li><a href="#53-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC">§5.3</a>：函数返回类型推导</li><li><a href="#54-%E6%B3%9B%E5%9E%8B-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§5.4</a>：泛型 lambda 表达式</li><li><a href="#55-constexpr-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">§5.5</a>：<code>constexpr</code> 函数中的局部变量</li><li>移动捕获——例如 <code>[p = move(ptr)] &#123;/* ... */&#125;;</code> 将值移入 lambda 表达式</li><li>按类型访问元组，例如 <code>x = get&lt;int&gt;(t);</code></li><li>标准库中的用户定义字面量，例如：<code>10i</code>，<code>&quot;Hello&quot;s</code>，<code>10s</code>，<code>3ms</code>，<code>55us</code>，<code>17ns</code></li></ul><p>这些特性中的大多数都面临着两个问题：“很好，什么使你花了这么长的时间？”以及“谁需要这个？”我的印象是，每个新特性都有着重要的需求作为动机——即使该需求不是通用的。在 <code>constexpr</code> 函数中添加局部变量和泛型 lambda 表达式大大改善了人们的代码。</p><p>重要的是，从 C++11 升级到 C++14 是相对无痛的，没有 ABI 破坏。经历过从 C++98 到 C++11 这一大而困难的升级的人感到了惊喜：他们升级可以比预想还快，花费的精力也更少。</p><h2 id="5-1-数字分隔符"><a href="#5-1-数字分隔符" class="headerlink" title="5.1 数字分隔符"></a>5.1 数字分隔符</h2><p>奇怪的是，数字分隔符引起了最激烈的争论。Lawrence Crowl 反复提出了各种选项的分析 [Crowl 2013]。包括我在内的许多人都主张使用下划线作为分隔符（和好几种其他语言一样）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">1</span>_234_567;    <span class="hljs-comment">// 1234567</span><br></code></pre></td></tr></table></figure><p>不幸的是，人们正在使用下划线作为用户定义字面量后缀的一部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">1</span>_234_567_s;  <span class="hljs-comment">// 1234567 秒</span><br></code></pre></td></tr></table></figure><p>这可能会引起歧义。例如，最后一个下划线是多余的分隔符还是后缀的开始？令我惊讶的是，这种潜在的歧义使下划线对很多人来说变得难以接受。其中一个原因是，为了免得程序员遇到意想不到的结果，库小组为标准库保留了不以下划线开头的后缀。经过长时间的讨论，包括全体委员会（约 100 人）的辩论，我们一致同意使用单引号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">1&#x27;234&#x27;567</span>;    <span class="hljs-comment">// 1234567（整数）</span><br><span class="hljs-keyword">auto</span> b = <span class="hljs-number">1&#x27;234&#x27;567</span>s;   <span class="hljs-comment">// 1234567 秒</span><br></code></pre></td></tr></table></figure><p>尽管有严厉的警告指出使用单引号会破坏无数的工具，但实际效果似乎不错。单引号由 David Vandevoorde 提出 [Crowl et al. 2013]。他指出，在一些国家，特别是在瑞士的金融写法中，单引号被当作分隔符来使用。</p><p>我的另一个建议，使用空白字符，则一直没有得到认同：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">1</span> <span class="hljs-number">234</span> <span class="hljs-number">567</span>;     <span class="hljs-comment">// 1234567</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">1</span> <span class="hljs-number">234</span> <span class="hljs-number">567</span> s;   <span class="hljs-comment">// 1234567 秒</span><br></code></pre></td></tr></table></figure><p>许多人认为这个建议是一个与在愚人节发表的老文章 [Stroustrup 1998] 有关的笑话。而实际上，它反映了一个旧规则，即相邻字符串会被连接在一起，因而 <code>&quot;abc&quot; &quot;def&quot;</code> 表示 <code>&quot;abcdef&quot;</code>。</p><h2 id="5-2-变量模板"><a href="#5-2-变量模板" class="headerlink" title="5.2 变量模板"></a>5.2 变量模板</h2><p>2012 年，Gabriel Dos Reis 提议扩展模板机制，在模板类、函数和别名 [Dos Reis 2012] 之外加入模板变量。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">constexpr</span> T pi = <span class="hljs-built_in">T</span>(<span class="hljs-number">3.1415926535897932385</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">circular_area</span><span class="hljs-params">(T r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pi&lt;T&gt; * r * r;<br>&#125;<br></code></pre></td></tr></table></figure><p>起初，我觉得这是一种平淡无奇的语言技术上的泛化，没有特别重要的意义。然而，为指定各种精度的常数而采取的变通办法由来已久，而且充斥着令人不安的变通和妥协。经过这种简单的语言泛化，代码可以大幅简化。特别是，变量模板作为定义概念的主要方式应运而生（<a href="06.md#636-%E6%94%B9%E8%BF%9B">§6.3.6</a>）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 表达式：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> SignedIntegral = Signed&lt;T&gt; &amp;&amp; Integral&lt;T&gt;;<br></code></pre></td></tr></table></figure><p>C++20 标准库提供了一组定义为变量模板的数学常数，最常见的情况是定义为 <code>constexpr</code> [Minkovsky and McFarlane 2019]。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">constexpr</span> T pi_v = unspecified;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> pi = pi_v&lt;<span class="hljs-type">double</span>&gt;;<br></code></pre></td></tr></table></figure><h2 id="5-3-函数返回类型推导"><a href="#5-3-函数返回类型推导" class="headerlink" title="5.3 函数返回类型推导"></a>5.3 函数返回类型推导</h2><p>C++11 引入了从 lambda 表达式的 return 语句来推导其返回类型的特性。C++14 将该特性扩展到了函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; a)</span> </span>&#123; <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>(); &#125;<br></code></pre></td></tr></table></figure><p>这种写法上的便利对于泛型代码中的小函数来说非常重要。但用户必须很小心，此类函数不能提供稳定的接口，因为它的类型现在取决于它的实现，而且在编译到使用这个函数的代码时，函数实现必须是可见的。</p><h2 id="5-4-泛型-lambda-表达式"><a href="#5-4-泛型-lambda-表达式" class="headerlink" title="5.4 泛型 lambda 表达式"></a>5.4 泛型 lambda 表达式</h2><p>lambda 表达式是函数对象（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>），因此它们显然可以是模板。有关泛型（多态）lambda 表达式的问题在 C++11 的工作中已经进行了广泛讨论，但当时被认为还没有完全准备好（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）。</p><p>2012 年，Faisal Vali、Herb Sutter 和 Dave Abrahams 提议了泛型 lambda 表达式 [Vali et al. 2012]。提议的写法只是从语法中省略了类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> get_size = [](&amp; m)&#123; <span class="hljs-keyword">return</span> m.<span class="hljs-built_in">size</span>(); &#125;;<br></code></pre></td></tr></table></figure><p>委员会中的许多人（包括我）都强烈反对，指出该语法太过特别，且不能推广到受约束的泛型 lambda 表达式中。因此，写法更改为使用 <code>auto</code> 作为标记，指明有类型需要推导：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> get_size = [](<span class="hljs-keyword">auto</span>&amp; m)&#123; <span class="hljs-keyword">return</span> m.<span class="hljs-built_in">size</span>(); &#125;;<br></code></pre></td></tr></table></figure><p>这使泛型 lambda 表达式与早在 2002 年就提出的概念提案和泛型函数建议 [Stroustrup 2003; Stroustrup and Dos Reis 2003a,b] 保持一致。</p><p>这种将 lambda 表达式语法与语言其他部分所用的语法相结合的方向与一些人的努力背道而驰，这些人希望为泛型 lambda 表达式提供一种独特（超简洁）的语法，类似于其他语言 [Vali et al. 2012]：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span># <span class="hljs-number">3</span>.<span class="hljs-number">0</span> (<span class="hljs-number">2007</span>):      x =&gt; x * x;<br><span class="hljs-attribute">Java</span> <span class="hljs-number">1</span>.<span class="hljs-number">8</span> (~<span class="hljs-number">2013</span>):   x -&gt; x * x;<br><span class="hljs-attribute">D</span> <span class="hljs-number">2</span>.<span class="hljs-number">0</span> (~<span class="hljs-number">2009</span>):      (x) &#123; return x * x; &#125;;<br></code></pre></td></tr></table></figure><p>我认为，使用 <code>auto</code> 而且没有为 lambda 表达式引入特殊的不与函数共享的写法是正确的。此外，我认为在 C++14 中引入泛型 lambda 表达式，而没有引入概念，则是个错误；这样一来，对受约束和不受约束的 lambda 表达式参数和函数参数的规则和写法就没有一起考虑。由此产生的语言技术上的不规则（最终）在 C++20 中得到了补救（<a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）。但是，我们现在有一代程序员习惯于使用不受约束的泛型 lambda 表达式并为此感到自豪，而克服这一点将花费大量时间。</p><p>从这里简短的讨论来看，似乎委员会流程对写法&#x2F;语法给予了特大号的重视。可能是这样，但是语法并非无足轻重。语法是程序员的用户界面，与语法有关的争论通常反映了语义上的分歧，或者反映了对某一特性的预期用途。写法应反映基础的语义，而语法通常偏向于对某种用法（而非其他用法）有利。例如，一个完全通用和啰嗦的写法有利于希望表达细微差别的专家，而一个为表达简单情况而优化的写法，则有利于新手和普通用户。我通常站在后者这边，并且常常赞成两者同时都提供（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）。</p><h2 id="5-5-constexpr-函数中的局部变量"><a href="#5-5-constexpr-函数中的局部变量" class="headerlink" title="5.5 constexpr 函数中的局部变量"></a>5.5 <code>constexpr</code> 函数中的局部变量</h2><p>到 2012 年，人们不再害怕 <code>constexpr</code> 函数，并开始要求放松对其实现的限制。实际上有些人希望能够在 <code>constexpr</code> 函数中执行任何操作。但是，无论是使用者还是编译器实现者都还没有为此做好准备。</p><p>经过讨论，Richard Smith（谷歌）提出了一套相对适度的放松措施 [Smith 2013]。特别是，允许使用局部变量和 <code>for</code> 循环。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">min</span><span class="hljs-params">(std::initializer_list&lt;<span class="hljs-type">int</span>&gt; xs)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> low = std::numeric_limits&lt;<span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">max</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : xs)<br>    <span class="hljs-keyword">if</span> (x &lt; low)<br>      low = x;<br>  <span class="hljs-keyword">return</span> low;<br>&#125;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> m = <span class="hljs-built_in">min</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;);<br></code></pre></td></tr></table></figure><p>给定一个常量表达式作为参数，这个 <code>min()</code> 函数可以在编译时进行求值。本地的变量（此处为 <code>low</code> 和 <code>x</code>）仅在编译器中存在。计算不能对调用者的环境产生副作用。Gabriel Dos Reis 和 Bjarne Stroustrup 在原始的（学术）<code>constexpr</code> 论文中指出了这种可能性 [Dos Reis and Stroustrup 2010]。</p><p>这种放松简化了许多 <code>constexpr</code> 函数并使许多 C++ 程序员感到高兴。以前在编译时只能对算法的纯函数表达式进行求值，他们对此感到不满。特别是，他们希望使用循环来避免递归。就更长期来看，这释放出了要在 C++17 和 C++20（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）中进一步放松限制的需求。为了说明潜在的编译期求值的能力，我已经指出 <code>constexpr thread</code> 也是可能的，尽管我并不急于对此进行提案。</p>]]></content>
    
    
    <summary type="html">C++14：完成 C++11</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_04/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_04/</id>
    <published>2024-10-29T13:21:09.461Z</published>
    <updated>2024-10-29T13:25:21.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-C-11：感觉像是门新语言"><a href="#4-C-11：感觉像是门新语言" class="headerlink" title="4. C++11：感觉像是门新语言"></a>4. C++11：感觉像是门新语言</h1><p>C++11 [Becker 2011] 发布后，其实现相对来说很快就出现了。这导致了极大的热情，增加了使用，有大量新人涌入 C++ 世界，并进行了大量的实验。C++11 的三个完整或几乎完整的实现在 2013 年面世。我当时的评论被广泛认为是准确的——<strong>C++11 感觉像是一门新的语言</strong> [Stroustrup 2014d]。为什么 C++11 在帮助程序员方面做得如此出色？又是如何做到的？</p><p>C++11 引入了大量令人眼花缭乱的语言特性，包括：</p><ul><li>内存模型——一个高效的为现代硬件设计的底层抽象，作为描述并发的基础（<a href="#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>）</li><li><code>auto</code> 和 <code>decltype</code>——避免类型名称的不必要重复（<a href="#421-auto-%E5%92%8C-decltype">§4.2.1</a>）</li><li>范围 <code>for</code>——对范围的简单顺序遍历（<a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）</li><li>移动语义和右值引用——减少数据拷贝（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>统一初始化—— 对所有类型都（几乎）完全一致的初始化语法和语义（<a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）</li><li><code>nullptr</code>——给空指针一个名字（<a href="#426-nullptr">§4.2.6</a>）</li><li><code>constexpr</code> 函数——在编译期进行求值的函数（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）</li><li>用户定义字面量——为用户自定义类型提供字面量支持（<a href="#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>）</li><li>原始字符串字面量——不需要转义字符的字面量，主要用在正则表达式中（<a href="#429-%E5%8E%9F%E5%A7%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.9</a>）</li><li>属性——将任意信息同一个名字关联（<a href="#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）</li><li>lambda 表达式——匿名函数对象（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）</li><li>变参模板——可以处理任意个任意类型的参数的模板（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）</li><li>模板别名——能够重命名模板并为新名称绑定一些模板参数（<a href="#433-%E5%88%AB%E5%90%8D">§4.3.3</a>）</li><li><code>noexcept</code>——确保函数不会抛出异常的方法（<a href="#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）</li><li><code>override</code> 和 <code>final</code>——用于管理大型类层次结构的明确语法</li><li><code>static_assert</code>——编译期断言</li><li><code>long long</code>——更长的整数类型</li><li>默认成员初始化器——给数据成员一个默认值，这个默认值可以被构造函数中的初始化所取代</li><li><code>enum class</code>——枚举值带有作用域的强类型枚举</li></ul><p>以下是主要的标准库组件列表（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）：</p><ul><li><code>unique_ptr</code> 和 <code>shared_ptr</code>——依赖 RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）的资源管理指针（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）</li><li>内存模型和 <code>atomic</code> 变量（<a href="#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>）</li><li><code>thread</code>、<code>mutex</code>、<code>condition_variable</code> 等——为基本的系统层级的并发提供了类型安全、可移植的支持（<a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）</li><li><code>future</code>、<code>promise</code> 和 <code>packaged_task</code>，等——稍稍更高级的并发（<a href="#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）</li><li><code>tuple</code>——匿名的简单复合类型（<a href="#434-tuple">§4.3.4</a>）</li><li>类型特征（type trait）——类型的可测试属性，用于元编程（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）</li><li>正则表达式匹配（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）</li><li>随机数——带有许多生成器（引擎）和多种分布（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）</li><li>时间——<code>time_point</code> 和 <code>duration</code>（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）</li><li><code>unordered_map</code> 等——哈希表</li><li><code>forward_list</code>——单向链表</li><li><code>array</code>——具有固定常量大小的数组，并且会记住自己的大小</li><li>emplace 运算——在容器内直接构建对象，避免拷贝</li><li><code>exception_ptr</code>——允许在线程之间传递异常</li></ul><p>还有很多，但这些是最重要的变化。所有这些都在 [Stroustrup 2013] 中进行了描述，许多信息可以在网上获得（例如 [Cppreference 2011–2020]）。</p><p>这些表面上互不相干的扩展怎么能组成一个连贯的整体？这怎么可能真正地改变我们写代码的方式，使之变得更好呢？C++11 确实做到了这一点。在相对较短的时间里（算 5 年吧），大量的 C++ 代码被升级到 C++11（并进一步升级到 C++14 和 C++17），而且 C++ 在会议和博客上的呈现也完全改变了。</p><p>这种在语言的“感觉”和使用风格上的巨大变化，并不是由某位大师级工匠指导的传统的精心设计过程的结果，而是海量建议经由一大批不断变化的个人层层决策过滤后的结果。</p><p>在我的 HOPL3 论文 [Stroustrup 2007] 中，我正确地描述了 C++11 语言的许多特性。值得注意的例外是“概念”，我会在（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）中进行讨论。我将不再赘述细节，而是根据它们所解决的程序员需求来描述功能的“主题”分类。我认为这种看待提案的方式是 C++11 成功的根源：</p><ul><li><a href="#41-c11%E5%B9%B6%E5%8F%91%E6%94%AF%E6%8C%81">§4.1</a>：支持并发</li><li><a href="#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>：简化使用</li><li><a href="#43-c11%E6%94%B9%E8%BF%9B%E5%AF%B9%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%9A%84%E6%94%AF%E6%8C%81">§4.3</a>：改进对泛型编程的支持</li><li><a href="#44-c11%E6%8F%90%E9%AB%98%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8">§4.4</a>：提高静态类型安全</li><li><a href="#45-c11%E6%94%AF%E6%8C%81%E5%AF%B9%E5%BA%93%E7%9A%84%E5%BC%80%E5%8F%91">§4.5</a>：支持对库的开发</li><li><a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>：标准库组件</li></ul><p>这些“主题”并不是不相干的。事实上，我猜想 C++11 之所以成功，是因为它相互关联的功能彼此加成，形成了一张精细的网络，可以处理真正的需求。每一个主题里都有我喜欢的特性。我怀疑，我在写作（例如 [Stroustrup 1993, 1994, 2007]）和演讲中明确表述了 C++ 的目标，也帮助设计保持了合理的重点。对我来说，衡量每个新特性的一个关键指标是它是否使 C++ 更接近它的理想，例如，是否通过引入该特性能让对内建类型和用户定义类型的支持更加相似（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）。</p><p>纵观 C++11，我们可以看到有些改进建议在 2002 年左右就被提出，有不少库也出现得很早，经常是作为 Boost 的一部分 [Boost 1998–2020]。然而，直到 2013 年才有完整的 C++11 实现。在 2020 年，一些组织仍在为升级到 C++11 而苦恼，因为代码库巨大，程序员不思进取，教学方式陈旧，以及编译器严重过时（尤其是在嵌入式系统领域）。不过 C++17 的采用速度明显快于 C++98 和 C++11；并且，早在 2018 年，C++20 的一些主要特性就已经投入生产使用。</p><p>直到 2018 年，我仍能看到 C++98 前的编译器被用于教学。我认为这是对学生的虐待，剥夺了他们接触学习我们 20 多年的进展的机会。</p><p>对标准委员会、主要编译器厂商以及大多数 C++ 的积极支持者来说已是遥远的过去的东西，对许多人来说仍然是现在，甚至是未来。其结果是，人们对 C++ 到底是什么仍然感到困惑。只要 C++ 继续演化，这种困惑就会持续下去。</p><h2 id="4-1-C-11：并发支持"><a href="#4-1-C-11：并发支持" class="headerlink" title="4.1 C++11：并发支持"></a>4.1 C++11：并发支持</h2><p>C++11 必须支持并发。这既是显而易见的，也是所有主要用户和平台供应商的共同需求。C++ 一直在大多数软件工业的基础中被重度使用，而在二十一世纪的头十年，并发性变得很普遍。利用好硬件并发至关重要。和 C 一样，C++ 当然一直支持各种形式的并发，但这种支持那时没有标准化，并且一般都很底层。机器架构正在使用越来越精巧的内存架构，编译器编写者也在应用越来越激进的优化技术，这让底层软件编写者的工作极为困难。机器架构师和优化器编写者之间亟需一个协定。只有有了明确的内存模型，基础库的编写者才能有一个稳定的基础和一定程度的可移植性。</p><p>并发方面的工作从 EWG 中分离出来，成为由 Hans-J. Boehm（惠普，后加入谷歌）领导的专家成员组成的并发组。它有三项职责：</p><ul><li><a href="#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>：内存模型</li><li><a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>：线程和锁</li><li><a href="#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>：期值</li></ul><p>此外，并行算法（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）、网络（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）和协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）是单独分组处理的，并且（正如预期）还没法用于 C++11。</p><h3 id="4-1-1-内存模型"><a href="#4-1-1-内存模型" class="headerlink" title="4.1.1 内存模型"></a>4.1.1 内存模型</h3><p>最紧迫的问题之一，是在一个有着多核、缓存、推测执行、指令乱序等的世界里精确地规定访问内存的规则。来自 IBM 的 Paul McKenney 在内存保证方面的课题上非常活跃。来自剑桥大学的 Mark Batty 的研究 [Batty et al. 2013, 2012, 2010, 2011] 帮助我们将这一课题形式化，见 P. McKenney、M. Batty、C. Nelson、H. Boehm、A. Williams、S. Owens、S. Sarkar、P. Sewell、T. Weber、M. Wong、L. Crowl 和 B. Kosnik 合作的论文 [McKenney et al. 2010]。它是 C++11 的一个庞大而至关重要的部分。</p><p>在 C11 中，C 采用了 C++ 的内存模型。然而，就在 C 标准付诸表决前的最后一刻，C 委员会引入了不兼容的写法，而此时 C++11 标准修改的最后一次机会已经过去。这成了 C 和 C++ 实现者和用户的痛苦。</p><p>内存模型很大程度上是由 Linux 和 Windows 内核的需求驱动的。目前它不只是用于内核，而且得到了更加广泛的使用。内存模型被广泛低估了，因为大多数程序员都看不到它。从一阶近似来看，它只是让代码按照任何人都会期望的方式正常工作而已。</p><p>最开始，我想大多数委员都小瞧了这个问题。我们知道 Java 有一个很好的内存模型 [Pugh 2004]，并曾希望采用它。令我感到好笑的是，来自英特尔和 IBM 的代表坚定地否决了这一想法，他们指出，如果在 C++ 中采用 Java 的内存模型，那么我们将使所有 Java 虚拟机的速度减慢至少两倍。因此，为了保持 Java 的性能，我们不得不为 C++ 采用一个复杂得多的模型。可以想见而且讽刺的是，C++ 此后因为有一个比 Java 更复杂的内存模型而受到批评。</p><p>基本上，C++11 模型基于<strong>先行发生（happens-before）关系</strong> [Lamport 1978]，并且既支持宽松的内存模型，也支持顺序一致 [Lamport 1979] 的模型。在这些之上，C++11 还提供了对原子类型和无锁编程的支持，并且与之集成。这些细节远远超出了本文的范围（例如，参见 [Williams 2018]）。</p><p>不出所料，并发组的内存模型讨论有时变得有点激烈。这关系到硬件制造商和编译器供应商的重大利益。最困难的决定之一是同时接受英特尔的 x86 原语（某种全存储顺序，Total Store Order（TSO）模型 [TSO Wikipedia 2020] 加上一些原子操作）和 IBM 的 PowerPC 原语（弱一致性加上内存屏障）用于最底层的同步。从逻辑上讲，只需要一套原语，但 Paul McKenney 让我相信，对于 IBM，有太多深藏在复杂算法中的代码使用了屏障，他们不可能采用类似英特尔的模型。有一天，我真的在一个大房间的两个角落之间做了穿梭外交。最后，我提出必须支持这两种方式，这就是 C++11 采用的方式。当后来人们发现内存屏障和原子操作可以一起使用，创造出比单单使用其中之一更好的解决方案时，我和其他人都感到非常高兴。</p><p>稍后，我们增加了对基于数据依赖关系的一致性支持，通过属性（<a href="#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）在源代码中表示，比如 <code>[[carries_dependency]]</code>。</p><p>C++11 引入了 <code>atomic</code> 类型，上面的简单操作都是原子的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">atomic&lt;<span class="hljs-type">int</span>&gt; x;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    x++;  <span class="hljs-comment">// 不是 x = x + 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>显然，这些都是广泛有用的。例如，使用原子类型使出名棘手的双重检查锁定优化变得极为简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mutex mutex_x;<br>atomic&lt;<span class="hljs-type">bool</span>&gt; init_x;  <span class="hljs-comment">// 初始为 false</span><br><span class="hljs-type">int</span> x;<br><br><span class="hljs-keyword">if</span> (!init_x) &#123;<br>    <span class="hljs-function">lock_guard&lt;mutex&gt; <span class="hljs-title">lck</span><span class="hljs-params">(mutex_x)</span></span>;<br>    <span class="hljs-keyword">if</span> (!init_x) x = <span class="hljs-number">42</span>;<br>    init_x = <span class="hljs-literal">true</span> ;<br>&#125;  <span class="hljs-comment">// 在此隐式释放 mutex_x（RAII）</span><br><br><span class="hljs-comment">// ... 使用 x ...</span><br></code></pre></td></tr></table></figure><p>双重检查锁定的要点是使用相对开销低的 <code>atomic</code> 保护开销大得多的 <code>mutex</code> 的使用。</p><p><code>lock_guard</code> 是一种 RAII 类型（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>），它确保会解锁它所控制的 <code>mutex</code>。</p><p>Hans-J. Boehm 将原子类型描述为“令人惊讶地流行”，但我不能说我感到惊讶。我没 Hans 那么专业，对简化更为欣赏。C++11 还引入了用于无锁编程的关键运算，例如比较和交换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">stack</span> &#123;<br>    std::atomic&lt;node&lt;T&gt;*&gt; head;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        node&lt;T&gt;* new_node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>&lt;T&gt;(data);<br>        new_node-&gt;next = head.<span class="hljs-built_in">load</span>(std::memory_order_relaxed);<br>        <span class="hljs-keyword">while</span>(!head.<span class="hljs-built_in">compare_exchange_weak</span>(new_node-&gt;next, new_node,<br>              std::memory_order_release, std::memory_order_relaxed)) ;<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>即使有了 C++11 的支持，我仍然认为无锁编程是专家级的工作。</p><h3 id="4-1-2-线程和锁"><a href="#4-1-2-线程和锁" class="headerlink" title="4.1.2 线程和锁"></a>4.1.2 线程和锁</h3><p>在内存模型之上，我们还提供了“线程和锁”（threads and locks）的并发模型。我认为线程和锁级别的并发是应用程序使用并发最差的模型，但是对于 C++ 这样的语言来说，它仍然必不可少。不管它还是别的什么，C++ 一直是一种能够与操作系统直接交互的系统编程语言，可用于内核代码和设备驱动程序。因此，它必须支持系统最底层支持的东西。在此基础上，我们可以建立各种更适合特定应用的并发模型。就我个人而言，我特别喜欢基于消息的系统，因为它们可以消除数据竞争，而数据竞争可能产生极为隐晦的并发错误。</p><p>C++ 对线程和锁级别编程的支持是 POSIX 和 Windows 所提供的线程和锁的类型安全变体。在 [Stroustrup 2013] 有所描述，在 Anthony Williams 的书 [Williams 2012, 2018] 中有更为深入的探讨：</p><ul><li><code>thread</code>——系统的执行线程，支持 <code>join()</code> 和 <code>detach()</code></li><li><code>mutex</code>——系统的互斥锁，支持 <code>lock()</code>、<code>unlock()</code> 和保证 <code>unlock()</code> 的 RAII 方式</li><li><code>condition_variable</code>——系统中线程间进行事件通信的条件变量</li><li><code>thread_local</code>——线程本地存储</li></ul><p>与 C 版本相比，类型安全使代码更简洁，例如，不再有 <code>void**</code> 和宏。考虑一个简单的例子，让一个函数在不同的线程上执行并返回结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span> &#123;  <span class="hljs-comment">// 传统函数对象</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">F</span>(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; vv, <span class="hljs-type">double</span>* p) : v&#123;vv&#125;, res&#123;p&#125; &#123; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span></span>;        <span class="hljs-comment">// 将结果放入 *res</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; v;  <span class="hljs-comment">// 输入源</span><br>    <span class="hljs-type">double</span>* res;              <span class="hljs-comment">// 输出目标</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; v)</span></span>;  <span class="hljs-comment">// 传统函数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; v, <span class="hljs-type">double</span>* res)</span></span>; <span class="hljs-comment">// 将结果放入 *res</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">comp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">double</span>&gt;&amp; vec1, vector&lt;<span class="hljs-type">double</span>&gt;&amp; vec2, vector&lt;<span class="hljs-type">double</span>&gt;&amp; vec3)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> res1;<br>    <span class="hljs-type">double</span> res2;<br>    <span class="hljs-type">double</span> res3;<br>    <span class="hljs-comment">// ...</span><br>    thread t1 &#123;F&#123;vec1,&amp;res1&#125;&#125;;           <span class="hljs-comment">// 函数对象</span><br>    thread t2 &#123;[&amp;]()&#123;res2=<span class="hljs-built_in">f</span>(vec2);&#125;&#125;;    <span class="hljs-comment">// lambda 表达式</span><br>    thread t3 &#123;g,<span class="hljs-built_in">ref</span>(vec3),&amp;res3&#125;;       <span class="hljs-comment">// 普通函数</span><br><br>    t1.<span class="hljs-built_in">join</span>();<br>    t2.<span class="hljs-built_in">join</span>();<br>    t3.<span class="hljs-built_in">join</span>();<br><br>    cout &lt;&lt; res1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; res2 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; res3 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类型安全库支持的设计非常依赖变参模板（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。例如，<code>std::thread</code> 的构造函数就是变参模板。它可以区分不同的可执行的第一个参数，并检查它们后面是否跟有正确数量正确类型的参数。</p><p>类似地，lambda 表达式（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）使 <code>&lt;thread&gt;</code> 库的许多使用变得更加简单。例如，<code>t2</code> 的参数是访问周围局部作用域的一段代码（lambda 表达式）。</p><p>在发布标准的同时，让新特性在标准库中被接受和使用是很困难的。有人提出这样做过于激进，可能会导致长期问题。引入新的语言特性并同时使用它们无疑是有风险的，但它通过以下方式大大增加了标准的质量：</p><ul><li>给用户一个更好的标准库</li><li>给用户一个很好的使用语言特性的例子</li><li>省去了用户实现底层功能的麻烦</li><li>迫使语言特性的设计者应对现实世界的困难应用</li></ul><p>线程和锁模型需要使用某种形式的同步来避免竞争条件。C++11 为此提供了标准的 <code>mutex</code>（互斥锁）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mutex m;  <span class="hljs-comment">// 控制用的互斥锁</span><br><span class="hljs-type">int</span> sh;   <span class="hljs-comment">// 共享的数据</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">access</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unique_lock&lt;mutex&gt; lck &#123;m&#125;;   <span class="hljs-comment">// 得到互斥锁</span><br>    sh += <span class="hljs-number">7</span>;                      <span class="hljs-comment">// 操作共享数据</span><br>&#125; <span class="hljs-comment">// 隐式释放互斥锁</span><br></code></pre></td></tr></table></figure><p><code>unique_lock</code> 是一个 RAII 对象，确保用户不会忘记在这个 <code>mutex</code> 上调用 <code>unlock()</code>。</p><p>这些锁对象还提供了一种防止最常见形式的死锁的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    unique_lock&lt;mutex&gt; lck1 &#123;m1,defer_lock&#125;;  <span class="hljs-comment">// 还未得到 m1</span><br>    unique_lock&lt;mutex&gt; lck2 &#123;m2,defer_lock&#125;;<br>    unique_lock&lt;mutex&gt; lck3 &#123;m3,defer_lock&#125;;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">lock</span>(lck1,lck2,lck3);  <span class="hljs-comment">// 获取所有三个互斥锁</span><br>    <span class="hljs-comment">// ... 操作共享数据 ...</span><br>&#125;   <span class="hljs-comment">// 隐式释放所有互斥锁</span><br></code></pre></td></tr></table></figure><p>这里，<code>lock()</code> 函数“同时”获取所有 <code>mutex</code> 并隐式释放所有互斥锁（RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>））。C++17 有一个更优雅的解决方案（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>）。</p><p>线程库是由 Pete Becker（Dinkumware）在 2004 年首次为 C++0x 提出的 [Becker 2004]，它基于 Dinkumware 对 Boost.Thread [Boost 1998–2020] 所提供的接口的实现。在同一次会议上（华盛顿州 Redmond 市，2004 年 9 月）提出了第一个关于内存模型的提案 [Alexandrescu et al. 2004]，这可能不是巧合。</p><p>最大的争议是关于取消操作，即阻止线程运行完成的能力。基本上，委员会中的每个 C++ 程序员都希望以某种形式实现这一点。然而，C 委员会在给 WG21 的正式通知 [WG14 2007] 中反对线程取消，这是唯一由 WG14（ISO C 标准委员会）发给 WG21 的正式通知。我指出，“但是 C 语言没有用于系统资源管理和清理的析构函数和 RAII”。管理 POSIX 的 Austin Group 派出了代表，他们 100% 反对任何形式的这种想法，坚称取消既没有必要，也不可能安全进行。事实上 Windows 和其他操作系统提供了这种想法的变体，并且 C++ 不是 C，然而 POSIX 人员对这两点都无动于衷。在我看来，恐怕他们是在捍卫自己的业务和 C 语言的世界观，而不是试图为 C++ 提出最好的解决方案。缺乏标准的线程取消一直是一个问题。例如，在并行搜索（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）中，第一个找到答案的线程最好可以触发其他此类线程的取消（不管是叫取消或别的名字）。C++20 提供了停止令牌机制来支持这个用例（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）。</p><h3 id="4-1-3-期值（future）"><a href="#4-1-3-期值（future）" class="headerlink" title="4.1.3 期值（future）"></a>4.1.3 期值（future）</h3><p>一个类型安全的、标准的、类似 POSIX&#x2F;Windows 的线程库是对正在使用的不兼容的 C 风格库的重大改进，但这仍然是 1980 年代风格的底层编程。一些成员，特别是我，认为 C++ 迫切需要更现代、更高层次的东西。举例来说，Matt Austern（谷歌，之前代表 SGI）和我主张消息队列（“通道”）和线程池。这些意见没有什么进展，因为有反对意见说没有时间来做这些事情。我恳求并指出，如果委员会中的专家不提供这样的功能，他们最终将不得不使用“由我的学生匆匆炮制的”功能。委员会当然可以做得比这好得多。“如果你不愿意这样做，请给我一种方法，就一种方法，在没有显式同步的情况下在线程之间传递信息！”</p><p>委员会成员分为两派，一派基本上想要在类型系统上有改进的 POSIX（尤其是 P.J. Plauger），另一派指出 POSIX 基本上是 1970 年代的设计，“每个人”都已经在使用更高层次的功能。在 2007 年的 Kona 会议上，我们达成了一个妥协：C++0x（当时仍期望会是 C++09）将提供 <code>promise</code> 和 <code>future</code>，以及异步任务的启动器 <code>async()</code>，允许但不需要线程池。和大多数折中方案一样，“Kona 妥协”没有让任何人满意，还导致了一些技术问题。然而，许多用户认为它是成功的——大多数人不知道这当时是一种妥协——并且这些年来，已经出现了一些改进。</p><p>最后，C++11 提供了：</p><ul><li><code>future</code>——一个句柄，通过它你可以从一个共享的单对象缓冲区中 <code>get()</code> 一个值，可能需要等待某个 <code>promise</code> 将该值放入缓冲区。</li><li><code>promise</code>——一个句柄，通过它你可以将一个值 <code>put()</code> 到一个共享的单对象缓冲区，可能会唤醒某个等待 <code>future</code> 的 <code>thread</code>。</li><li><code>packaged_task</code>——一个类，它使得设置一个函数在线程上异步执行变得容易，由 <code>future</code> 来接受 <code>promise</code> 返回的结果。</li><li><code>async()</code>——一个函数，可以启动一个任务并在另一个 <code>thread</code> 上执行。</li></ul><p>使用这一切的最简单方法是使用 <code>async()</code>。给定一个普通函数作为参数，<code>async()</code> 在一个 <code>thread</code> 上运行它，处理线程启动和通信的所有细节：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">comp4</span><span class="hljs-params">(vector&lt;<span class="hljs-type">double</span>&gt;&amp; v)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 如果 v 足够大则会产生多个任务</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (v.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">10000</span>)    <span class="hljs-comment">// 值得用并发机制吗？</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">accum</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0.0</span>);<br>    <span class="hljs-keyword">auto</span> v0 = &amp;v[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">auto</span> sz = v.<span class="hljs-built_in">size</span>();<br><br>    <span class="hljs-keyword">auto</span> f0 = <span class="hljs-built_in">async</span>(accum,v0,v0+sz/<span class="hljs-number">4</span>,<span class="hljs-number">0.0</span>);         <span class="hljs-comment">// 第一部分</span><br>    <span class="hljs-keyword">auto</span> f1 = <span class="hljs-built_in">async</span>(accum,v0+sz/<span class="hljs-number">4</span>,v0+sz/<span class="hljs-number">2</span>,<span class="hljs-number">0.0</span>);    <span class="hljs-comment">// 第二部分</span><br>    <span class="hljs-keyword">auto</span> f2 = <span class="hljs-built_in">async</span>(accum,v0+sz/<span class="hljs-number">2</span>,v0+sz*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>,<span class="hljs-number">0.0</span>);  <span class="hljs-comment">// 第三部分</span><br>    <span class="hljs-keyword">auto</span> f3 = <span class="hljs-built_in">async</span>(accum,v0+sz*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>,v0+sz,<span class="hljs-number">0.0</span>);    <span class="hljs-comment">// 第四部分</span><br><br>    <span class="hljs-keyword">return</span> f0.<span class="hljs-built_in">get</span>()+f1.<span class="hljs-built_in">get</span>()+f2.<span class="hljs-built_in">get</span>()+f3.<span class="hljs-built_in">get</span>();    <span class="hljs-comment">// 收集结果</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>async</code> 将代码包装在 <code>packaged_task</code> 中，并管理 <code>future</code> 及其传输结果的 <code>promise</code> 的设置。</p><p>值或异常都可以通过这样一对 <code>future</code>&#x2F;<code>promise</code> 从一个 <code>thread</code> 传递到另一个 <code>thread</code>。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">X <span class="hljs-title">f</span><span class="hljs-params">(Y)</span></span>; <span class="hljs-comment">// 普通函数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ff</span><span class="hljs-params">(Y y, promise&lt;X&gt;&amp; p)</span>     <span class="hljs-comment">// 异步执行 f(y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        X res = <span class="hljs-built_in">f</span>(y);           <span class="hljs-comment">// ... 给 res 计算结果 ...</span><br>        p.<span class="hljs-built_in">set_value</span>(res);<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (...) &#123;               <span class="hljs-comment">// 哎呀：没能计算出 res</span><br>        p.<span class="hljs-built_in">set_exception</span>(<span class="hljs-built_in">current_exception</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为简单起见，我没有使用参数的完美转发（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）。</p><p>对应 <code>future</code> 的 <code>get()</code> 现在要么得到一个值，要么抛出一个异常——与 <code>f()</code> 的某个等效同步调用完全一样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">user</span><span class="hljs-params">(Y arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> pro = promise&lt;X&gt;&#123;&#125;;<br>    <span class="hljs-keyword">auto</span> fut = pro.<span class="hljs-built_in">get_future</span>();<br>    thread t &#123;ff,arg,<span class="hljs-built_in">ref</span>(pro)&#125;; <span class="hljs-comment">// 在不同线程上运行 ff</span><br>    <span class="hljs-comment">// ... 做一会别的事情 ...</span><br>    X x = fut.<span class="hljs-built_in">get</span>();<br>    cout &lt;&lt; x.x &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    t.<span class="hljs-built_in">join</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">user</span>(Y&#123;<span class="hljs-number">99</span>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>标准库的 <code>packaged_task</code> 自动化了这个过程，可以将普通函数包装成一个函数对象，负责 <code>promise</code>&#x2F;<code>future</code> 的自动配置并处理返回和异常。</p><p>我曾希望这会产生一个由线程池支持的工作窃取（work-stealing）的实现，但我还是失望了。</p><p>另见（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>）。</p><h2 id="4-2-C-11：简化使用"><a href="#4-2-C-11：简化使用" class="headerlink" title="4.2 C++11：简化使用"></a>4.2 C++11：简化使用</h2><p>C++ 是“专家友好”的。我想我是第一个将这句话用作委婉的批评，并且在 C++ 中推行“<strong>简单的事情简单做！</strong>”的口号的人。当然，主要面向工业应用的语言就应该对专家友好，但是一门语言不能只对专家友好。大多数使用编程语言的人并不是专家——他们也不想精通该语言的方方面面，而只是想把工作做到足够好，不会因为语言而分心。编程语言的存在，是为了能够表达应用程序的创意，而不是把程序员变成语言律师。语言的设计应该尽力让简单的事情能够简单地做。语言要给专家使用的话，则必须额外确保，没有什么基本事项是做不了的，并且代价也不会过于高昂。</p><p>当讨论潜在的 C++ 语言扩展和标准库组件时，另外一个准则是“教起来容易吗？”这个问题现在已经很普遍了，它最早是由 Francis Glassborow 和我倡导的。“教起来容易”的思想起源于 C++ 的早期，可以在《C++ 语言的设计和演化》[Stroustrup 1994] 中找到。</p><p>当然，新事物的拥护者不可避免地认为他们的设计简单、易用、足够安全、高效、易于传授，及对大多数程序员有用。反对者则倾向于怀疑他们的部分甚至全部说法。但是，确保对 C++ 提议的每个特性都经历这样的讨论是很重要的：可以通过面对面会议，可以通过论文 [WG21 1989–2020]，也可以通过电子邮件。在这些讨论中，我经常指出，我大部分时间也是个新手。也就是说，当我学习新的特性、技巧或应用领域时，我是一个新手，我会用到从语言和标准库中可以获得的所有帮助。一个结果是，C++11 提供了一些特别的功能，旨在简化初学者和非语言专家对 C++ 的使用。</p><p>每一项新特性都会让一些人做某些事时更加简单。“简化使用”的主题聚焦于这样一些语言特性，它们的主要设计动机是让已知的惯用法使用起来更加简单。下面列举其中的一些：</p><ul><li><a href="#421-auto-%E5%92%8C-decltype">§4.2.1</a>：<code>auto</code>——避免类型名称的不必要重复</li><li><a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>：范围 <code>for</code>——简化范围的顺序遍历</li><li><a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>：移动语义和右值引用——减少数据拷贝</li><li><a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>：资源管理指针——管理所指向对象生命周期的“智能”指针（<code>unique_ptr</code> 和 <code>shared_ptr</code>）</li><li><a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>：统一初始化——对所有类型都（几乎）完全一致的初始化语法和语义</li><li><a href="#426-nullptr">§4.2.6</a>：<code>nullptr</code>——给空指针一个名字</li><li><a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>：<code>constexpr</code> 函数——编译期被估值的函数</li><li><a href="#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>：用户定义字面量——为用户自定义类型提供字面量支持</li><li><a href="#429-%E5%8E%9F%E5%A7%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.9</a>：原始字符串字面量——转义字符（<code>\</code>）不被解释为转义符的字面量，主要用在正则表达式中</li><li><a href="#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>：属性——将任意信息同一个名字关联</li><li><a href="#4211-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86">§4.2.11</a>：与可选的垃圾收集器之间的接口</li><li><a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>：lambda 表达式——匿名函数对象</li></ul><p>在 C++11 开始得到认真使用后，我就开始在旅行时做一些不那么科学的小调查。我会问各地的 C++ 使用者：你最喜欢哪些 C++11 的特性？排在前三位的一直都是：</p><ul><li><a href="#421-auto-%E5%92%8C-decltype">§4.2.1</a>：<code>auto</code></li><li><a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>：范围 <code>for</code></li><li><a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>：lambda 表达式</li></ul><p>这三个特性属于 C++11 中新增的最简单特性，它们并不能提供任何新的基础功能。它们做的事情，在 C++98 中也能做到，只是不那么优雅。</p><p>我认为这意味着不同水平的程序员都非常喜欢让惯常用法变简洁的写法。他们会高兴地放弃一个通用的写法，而选择一个在适用场合中更简单明确的写法。有一个常见的口号是，“一件事只应有一种说法！<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：参考 Python 在 PEP 20—The Zen of Python 中的不同态度：“应该有且仅有一种明显的完成任务的方式（There should be one—and preferably only one—obvious way to do it）。”">[1]</span></a></sup>”这样的“设计原则”根本不能反映现实世界中的用户偏好。我则倾向于依赖<strong>洋葱原则</strong> [Stroustrup 1994]。你的设计应该是这样的：如果要完成的任务是简单的，那就用简单的方法做；当要完成的任务不是那么简单时，就需要更详细、更复杂的技巧或写法。这就好比你剥下了一层洋葱。剥得越深，流泪就越多。</p><p>请注意，这里<strong>简单</strong>并不意味着<strong>底层</strong>。<code>void*</code>、宏、C 风格字符串和类型转换等底层功能表面上学起来简单，但使用它们来产出高质量、易维护的软件就难了。</p><h3 id="4-2-1-auto-和-decltype"><a href="#4-2-1-auto-和-decltype" class="headerlink" title="4.2.1 auto 和 decltype"></a>4.2.1 <code>auto</code> 和 <code>decltype</code></h3><p>C++11 中最古老的新特性，是能够在初始化的时候就给对象指定一个确定的类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> i = <span class="hljs-number">7</span>;          <span class="hljs-comment">// i 是个整数</span><br><span class="hljs-keyword">auto</span> d = <span class="hljs-number">7.2</span>;        <span class="hljs-comment">// d 是个双精度浮点数</span><br><span class="hljs-keyword">auto</span> p = v.<span class="hljs-built_in">begin</span>();  <span class="hljs-comment">// p 是 v 的迭代器类型</span><br>                     <span class="hljs-comment">// （begin() 返回一个迭代器）</span><br></code></pre></td></tr></table></figure><p><code>auto</code> 是一个方便的静态特性，它允许从初始化表达式中推导出对象的静态类型。如果要用动态类型的变量，应该使用 <code>variant</code> 或者 <code>any</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）。</p><p>我早在 1982&#x2F;83 年冬天就实现了 <code>auto</code>，但是后来为了保持 C 兼容性而不得不移除了这一特性。</p><p>在 C++11 中，大家提出用 <code>typeof</code> 运算符代替已经流行的 <code>typeof</code> 宏和编译器扩展。不幸的是，不同 <code>typeof</code> 宏在处理引用时并不兼容，因而采用任何一种都会严重破坏现有代码。引入一个新的关键字总是困难的，因为如果它简短而且意义明确，那它一定已经被使用了成千上万次。如果建议的关键字又丑又长，那大家就会讨厌它。</p><p>Jaakko Järvi，Boost 库最多产的贡献者之一，那时是我在得州农工大学的同事。他当时领导了 <code>typeof</code> 的讨论。我们意识到语义的问题可以概括为：“一个引用的 <code>typeof</code> 到底是引用自身，还是所引用的类型？”同时，我们还感觉到，<code>typeof</code> 有点冗长而且容易出错，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">typeof</span>(x+y) z = y+x;<br></code></pre></td></tr></table></figure><p>在这里，我以为我重复计算了 <code>x+y</code>，但其实并没有（潜在的不良影响），但不管怎么样，我为什么要把任何东西重复写两遍呢？这时候我意识到，我其实在 1982 年就解决过这个问题，我们可以“劫持”关键字 <code>auto</code> 来消除这种重复：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> z = y+x;  <span class="hljs-comment">// z 获得 y+x 的类型</span><br></code></pre></td></tr></table></figure><p>在 C 和早期的 C++ 中，<code>auto</code> 曾表示“在自动存储（比如栈上）上分配”，但是从来没有被用过。我们查看了数百万行的 C 和 C++ 代码，确认了 <code>auto</code> 只在一些测试集和错误中用到过，于是我们就可以回收这个关键字，用作我 1982 年的意思，表示“获取初始化表达式的类型”。</p><p>剩下的问题是，我们要在某些场景中把引用的类型也推导为一个引用。这在基于模板的基础库中并不少见。我们提出了用 <code>decltype</code> 运算符来处理这种保留引用的语义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp; r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> v = r;            <span class="hljs-comment">// v 是 T</span><br>    <span class="hljs-keyword">decltype</span>(r) r2 = r;    <span class="hljs-comment">// r2 是 T&amp;</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为什么是 <code>decltype</code>？可惜，我已经不记得是谁建议了这个名字了，但是我还记得原因：</p><ul><li><code>typeof</code> 已经不能用了，因为那样会破坏很多老代码</li><li>我们找不到其他优雅、简短、且没有被用过的名字了</li><li><code>decltype</code> 足够好记（“declared type”的简写）；但也足够古怪，因而没有在现有代码中用过</li><li><code>decltype</code> 还算比较短</li></ul><p>提议 <code>decltype</code> 的论文写于 2003 年 [Järvi et al. 2003b]，而通过投票接受到标准中的论文写于 2006 年 [Järvi et al. 2007]。Jaakko Järvi 做了让 <code>decltype</code> 通过委员会评审的大部分细节的工作，Doug Gregor、Gabriel Dos Reis、Jeremy Siek 和我也帮过忙，并且在一些论文中作为合著作者出现。事实证明，澄清 <code>decltype</code> 的确切语义比我在这里说的要难得多。花费数年在一个看上去很简单的特性细节上的情况并不少见——部分原因是特性的固有复杂性，部分原因则是，需要最后批准的人可真不少，他们需要同意每个细节的设计和具体说明都已经让人满意了。</p><p>我认为 <code>auto</code> 是个纯粹的简化特性，而 <code>decltype</code> 的主要目的，则是让基础库可以使用复杂的元编程。然而，从语言使用的技术角度来看，它们是密切相关的。</p><p>我探索过推广 <code>auto</code> 到另外两个显而易见的场景 [Stroustrup and Dos Reis 2003b]：作为返回类型和参数类型。这显而易见，因为在 C++ 中，参数传递和值返回被定义为一种初始化。但在 2003 年，当我第一次向委员会提出这些想法时，演化工作组的成员们毫不掩饰地表现出恐惧的神情。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">auto</span> arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br><br><span class="hljs-keyword">auto</span> x = <span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>);                <span class="hljs-comment">// x 是 int</span><br><span class="hljs-keyword">auto</span> s = <span class="hljs-built_in">f</span>(<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;Hello&quot;</span>));  <span class="hljs-comment">// s 是 string</span><br></code></pre></td></tr></table></figure><p>当我向委员会提出这个想法时，我收到了超过我的任何其他提案的负面反馈。我形容当时的情景“就像贵妇见到了老鼠一样”，他们叫嚷着：“咦咿……！”。然而，故事还没结束。C++17 后来对 lambda 表达式（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）的参数和返回值都支持了 <code>auto</code>，而对普通的函数，C++17 只支持返回值的 <code>auto</code>。作为概念的一部分（<a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>），C++20 为函数参数添加了 <code>auto</code> 支持，至此才完全实现了我在 2003 年提出的建议。</p><p>C++11 中添加了一种弱化的 <code>auto</code> 用法，把返回类型的说明放到参数后面。例如，在 C++98 中，我们会这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>vector&lt;T&gt;::iterator vector&lt;T&gt;::<span class="hljs-built_in">begin</span>() &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>重复出现的 <code>vector&lt;T&gt;::</code> 令人厌烦，当时也没法表达返回类型依赖于参数类型（这在一些泛型编程中很有用）。C++11 弥补了这个问题，并提高了代码的可读性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">auto</span> vector&lt;T&gt;::<span class="hljs-built_in">begin</span>() -&gt; iterator &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>这样，在多年努力后，我们终于有了 <code>auto</code>。它立即就变得非常流行，因为它让程序员不用再拼写冗长的类型名称，也不需要在泛型代码中考虑类型的细节。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p = v.<span class="hljs-built_in">begin</span>(); p != v.<span class="hljs-built_in">end</span>(); ++p) ...  <span class="hljs-comment">// 传统的 STL 循环</span><br></code></pre></td></tr></table></figure><p>它允许人们对齐名字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> -&gt; <span class="hljs-type">int</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">gpr</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span> -&gt; <span class="hljs-type">void</span></span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">char</span>* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> x2 = x*<span class="hljs-number">2</span>;   <span class="hljs-comment">// x2 是 int</span><br>    <span class="hljs-keyword">auto</span> ch = p[x];  <span class="hljs-comment">// ch 是 char</span><br>    <span class="hljs-keyword">auto</span> p2 = p+<span class="hljs-number">2</span>;   <span class="hljs-comment">// p2 是 char*</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还曾经有论文主张尽量多地使用 <code>auto</code> [Sutter 2013b]。有句话很经典：每个有用的新特性，一开始都会被滥用和误用。一段时间后，部分开发者找到了平衡点。把这种平衡的用法阐述为最佳实践，是我（和很多其他人）致力于编程指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）的原因之一。对于 <code>auto</code>，我收到了很多评论，说当人们将它和没有明显类型的初始化表达式放一起使用时可读性不好。因此，<strong>C++ 核心指南</strong> [Stroustrup and Sutter 2014–2020]（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）有了这条规则：</p><blockquote><p>ES.11：使用 <code>auto</code> 来避免类型名称的多余重复</p></blockquote><p>我的书 [Stroustrup 2013, 2014d] 中也有类似的建议。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> n = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 很好：n 是 int</span><br><span class="hljs-keyword">auto</span> x = <span class="hljs-built_in">make_unique</span>&lt;Gadget&gt;(arg);  <span class="hljs-comment">// 很好：x 是 std::unique_ptr&lt;Gadget&gt;</span><br><span class="hljs-keyword">auto</span> y = <span class="hljs-built_in">flopscomps</span>(x,<span class="hljs-number">3</span>);           <span class="hljs-comment">// 不好：flopscomps() 返回的是啥东西？</span><br></code></pre></td></tr></table></figure><p>这仍然无法百分百地确定如何在每种情况下应用该规则，但有规则总比没有规则要好得多，并且代码会比使用绝对规则“不许使用 <code>auto</code>！”和“永远使用 <code>auto</code>！”更加可读。真实世界的编程往往需要更多的技巧，不会像展示语言特性的例子这样简单。</p><p>如果 <code>flopscomps()</code> 不是泛型计算的一部分，那么最好显式地声明想要的类型。我们需要等到 C++ 20 才能用概念来约束返回类型（<a href="06.md#635-%E6%A6%82%E5%BF%B5%E5%92%8C%E7%B1%BB%E5%9E%8B">§6.3.5</a>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Channel <span class="hljs-keyword">auto</span> y = <span class="hljs-built_in">flopscomps</span>(x,<span class="hljs-number">3</span>);   <span class="hljs-comment">// y 可以当做 Channel 使用</span><br></code></pre></td></tr></table></figure><p>那么，针对 <code>auto</code> 的工作值得吗？它是一个很小的功能，对于简单的情况，一天就可以实现，但却花了 4 年的时间才在委员会通过。它甚至都不算新颖：很多语言 40 年前就有这样的功能了，甚至带类的 C 在 35 年前就有这样的功能！</p><p>对 C++ 标准委员会通过哪怕是最小的功能所需的时间，以及常伴其间的痛苦讨论，经常让我感到绝望。但是另一方面，把事情做好之后，成千上万的程序员会从中受益。当某件事做得很好时，最常见的评论是：“这很明显啊！怎么你们要花那么久？”</p><h3 id="4-2-2-范围-for"><a href="#4-2-2-范围-for" class="headerlink" title="4.2.2 范围 for"></a>4.2.2 范围 <code>for</code></h3><p>范围 <code>for</code> 是用来顺序遍历一个序列中所有元素的语句。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v, list&lt;string&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : v) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>&#125;) sum+=i; <span class="hljs-comment">// 初始化列表是一个序列</span><br>    <span class="hljs-keyword">for</span> (string&amp; s : lst) s += <span class="hljs-string">&quot;.cpp&quot;</span>; <span class="hljs-comment">// 使用引用允许遍历时修改</span><br>&#125;<br></code></pre></td></tr></table></figure><p>它最初是由 Thorsten Ottosen（丹麦奥尔堡大学）提出的，理由是“基本上任何现代编程语言都内置了某种形式的 for each” [Ottosen 2005]。我通常不认为“别人都有了”是个好的论据，但在这一情况下，真正的要点是，简单的范围循环可以简化一种最常见的操作，并提供了优化的机会。所以，范围 <code>for</code> 完美符合我对 C++ 的总体设计目标。它直接表达应该做什么，而不是详细描述如何做。它的语法简洁，语义明晰。</p><p>由于更简单和更明确，范围 <code>for</code> 的写法消除了一些“微不足道”然而常见的错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v, list&lt;string&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;imax; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; i&lt;imax; ++j) ...  <span class="hljs-comment">// 错误的嵌套循环</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=max; ++i) ...      <span class="hljs-comment">// 多循环了一次的错误</span><br>&#125;<br></code></pre></td></tr></table></figure><p>尽管范围 <code>for</code> 够简单了，它在这些年还是有些变化。Doug Gregor 曾建议使用 C++0x 中的概念来修改范围 <code>for</code>，方案优雅并且得到了批准 [Ottosen et al. 2007]。我还记得他在我在得州的办公室里写这个提案的场景，但很遗憾，后来因为删除了 C++0x 的概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>），我们不得不回退了那些修改。在 2016 年，它还做过一点小修改，以配合 Ranges TS（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）所支持的无限序列。</p><h3 id="4-2-3-移动语义"><a href="#4-2-3-移动语义" class="headerlink" title="4.2.3 移动语义"></a>4.2.3 移动语义</h3><p>在 C 和 C++ 中，要从函数获得大量的数据，传统做法是在自由存储区（堆、动态内存）上分配空间，然后传递指向该空间的指针作为函数参数。比如，对于工厂函数和返回容器（例如 <code>vector</code> 和 <code>map</code>）的函数就需要如此。这对开发者来说看起来很自然，而且相当高效。不幸的是，它是显式使用指针的主要来源之一，导致了写法上的不便、显式的内存管理，以及难以查找的错误。</p><p>多年来，很多专家使用“取巧”的办法来解决这个问题：把句柄类作为简单数值（常称为<strong>值类型</strong>）来传递，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Matrix <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Matrix&amp;, <span class="hljs-type">const</span> Matrix&amp;);<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; m1, <span class="hljs-type">const</span> Matrix&amp; m2)</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix m3 = m1+m2;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里 <code>operator+</code> 让我们可以使用常规的数学写法，同时也是一个工厂函数返回大对象的示例。</p><p>通过 <code>const</code> 引用把 <code>Matrix</code> 传递给函数，一直是传统而高效的做法。而问题在于，如何以传值来返回 <code>Matrix</code> 而不用拷贝所有的元素。早在 1982 年，我曾通过一种优化方案来部分解决这一问题，即干脆将返回值分配在调用函数的栈帧上。它工作得很好，但它只是优化技术，不能处理更复杂的返回语句。而用户在按值返回“大对象”时，需要确保绝不会进行大量的数据复制。</p><p>要做到这一点，需要观察到“大对象”通常是在自由存储区上的数据的一个句柄。为了避免复制大量的数据，我们只需要确保在实现返回时，构造函数复制的只是句柄，而不是所有元素。C++11 对这个问题的解决方案如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span> &#123;<br>    <span class="hljs-type">double</span>* elements;    <span class="hljs-comment">// 指向所有元素的指针</span><br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Matrix</span> (Matrix&amp;&amp; a)  <span class="hljs-comment">// 移动构造</span><br>    &#123;<br>        elements = a.elements;  <span class="hljs-comment">// 复制句柄</span><br>        a.elements = <span class="hljs-literal">nullptr</span>;   <span class="hljs-comment">// 现在 a 的析构函数不用做任何事情了</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>当用于初始化或赋值的源对象马上就会被销毁时，<strong>移动</strong>就比<strong>拷贝</strong>要更好：移动操作只是简单地把对象的内部表示“窃取”过来。<code>&amp;&amp;</code> 表示构造函数是一个<strong>移动构造函数</strong>，<code>Matrix&amp;&amp;</code> 被称为<strong>右值引用</strong>。当用于模板参数时，右值引用的写法 <code>&amp;&amp;</code> 被叫做<strong>转发引用</strong>，这是由 John Spicer 在 2002 年的一次会议上，同 Dave Abrahams 和 Howard Hinnant 一起提出的。</p><p>这个 <code>Matrix</code> 的例子有个有意思的地方：如果 <code>Matrix</code> 的加法返回指针的话，那传统的数学写法（<code>a+b</code>）就不能用了。</p><p>移动语义蕴含着性能上的重大好处：它消除了代价高昂的临时变量。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Matrix mx = m1+m2+m3;  <span class="hljs-comment">// 不需要临时变量</span><br>string sx = s1+s2+s3;  <span class="hljs-comment">// 不需要临时变量</span><br></code></pre></td></tr></table></figure><p>这里我添加了 <code>string</code> 的例子，因为移动语义立刻就被添加到了所有的标准库容器上，这可以让一些 C++98 的程序拿来不做任何代码修改就获得性能提升。</p><p>允许类的设计者定义移动操作后，我们就有了完整的对对象生命周期和资源管理的控制，这套控制始于 1979 年对构造函数和析构函数的引入。移动语义是 C++ 资源管理模型的重要基石 [Stroustrup et al. 2015]，正是这套机制使得对象能够在不同作用域之间简单而高效地进行移动。</p><p>早期对参数传递、完美转发和智能指针强调颇多，可能掩盖了这个重要的一般性观点。Howard Hinnant、Dave Abrahams 和 Peter Dimov 在 2002 年提出了移动语义的一般化版本 [Hinnant et al. 2004, 2002]：</p><blockquote><p>右值引用可以用于给现有类方便地添加移动语义。意思是说，拷贝构造函数和赋值运算符可以根据实参是左值还是右值来进行重载。当实参是右值时，类的作者就知道他拥有对该实参的唯一引用。</p></blockquote><p>一个突出的例子是生成“智能指针”的工厂函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">A1</span>&gt;<br><span class="hljs-function">std::shared_ptr&lt;T&gt; <span class="hljs-title">factory</span><span class="hljs-params">(A1&amp;&amp; a1)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">shared_ptr</span>&lt;T&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">T</span>(std::forward&lt;A1&gt;(a1)));<br>&#125;<br></code></pre></td></tr></table></figure><p>现已进入标准库的函数 <code>forward</code> 告诉编译器将实参视为右值引用，因此 <code>T</code> 的移动构造函数（而不是拷贝构造函数）会被调用，来窃取该参数。它本质上就是个右值引用的类型转换。</p><p>在 C++98 中，没有右值引用，这样的“智能指针”很难实现。在 C++11 中，解决方案就简单了 [Hinnant et al. 2006]：<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：下面的代码引自 2006 年的论文，但 `operator=` 的实现不符合现代惯用法：一般要么把参数设为 `clone_ptr p`，这就成了一个可以同时适配拷贝或移动的通用赋值函数；要么在函数体内进行一次移动构造，先 `clone_ptr temp(std::move(p));` 再 `std::swap(ptr, temp.ptr);`。否则，当传递的实参是 `std::move` 的结果（xvalue）而不是真正的临时对象（prvalue）时，代码的行为会不符合预期。当然，就如下面 Bjarne 讨论到的，在 2006 年应该还没有 xvalue 和 prvalue 的概念。">[2]</span></a></sup></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">clone_ptr</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    T* ptr;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">clone_ptr</span>(clone_ptr&amp;&amp; p)            <span class="hljs-comment">// 移动构造函数</span><br>        : <span class="hljs-built_in">ptr</span>(p.ptr)    <span class="hljs-comment">// 拷贝数据的表示</span><br>    &#123;<br>        p.ptr = <span class="hljs-number">0</span>;      <span class="hljs-comment">// 把源数据的表示置空</span><br>    &#125;<br>    clone_ptr&amp; <span class="hljs-keyword">operator</span>=(clone_ptr&amp;&amp; p) <span class="hljs-comment">// 移动赋值</span><br>    &#123;<br>        std::<span class="hljs-built_in">swap</span>(ptr, p.ptr);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;   <span class="hljs-comment">// 销毁目标的旧值</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>很快，移动语义技术就被应用到了标准库的所有容器类上，像 <code>vector</code>、<code>string</code> 和 <code>map</code>。<code>shared_ptr</code> 和 <code>unique_ptr</code> 的确智能，但它们仍然是指针。我更喜欢强调移动构造和移动赋值，它们使得（以句柄表示的）大型对象在作用域间能够高效移动。</p><p>右值引用的提案在委员会中涉险过关。有人认为右值引用和移动语义多半来不及进入 C++11，因为这些概念很新，而我们那时连合适的术语都没有。部分由于术语上的问题 [Miller 2010]，<strong>右值引用</strong>这一术语在核心语言和标准库中的使用就有了分歧，从而使得标准草案中出现了不一致。在 2010 年 3 月的匹兹堡会议上，我参与了核心工作组（CWG）的讨论，在午饭休息的时间，在我看来“我们陷入了僵局，或者混乱之中，也许兼而有之”。我没有去吃午饭，而是对问题进行了分析，并得出结论，这里只涉及到两个基本概念：<strong>有标识符</strong>（identity），及<strong>可被移动</strong>。从这两个原语出发，我推导出了传统的左值和右值类别 [Barron et al. 1963]，以及解决我们的定义问题所需要的三个新类别。在核心工作组回来之后，我提出了我的解决方案。它很快就得到了接受，这样我们就在 C++11 中保留了移动语义 [Stroustrup 2010a]。</p><h3 id="4-2-4-资源管理指针"><a href="#4-2-4-资源管理指针" class="headerlink" title="4.2.4 资源管理指针"></a>4.2.4 资源管理指针</h3><p>C++11 提供了“智能指针”（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）：</p><ul><li><code>shared_ptr</code>——代表共享所有权</li><li><code>unique_ptr</code>——代表独占所有权（取代 C++98 中的 <code>auto_ptr</code>）</li></ul><p>添加这些表示所有权的资源管理“智能指针”对编程风格有很大的影响。对很多人来说，这意味着不再有资源泄漏，悬空指针的问题也显著减少。在自动化资源管理和减少裸指针使用的努力中，它们是最明显的部分了（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）。</p><p><code>shared_ptr</code> 是传统的计数指针：指向同一对象的所有指针共享一个计数器。当最后一个指向对象的共享指针被销毁时，被指向的对象也会被销毁。这是一种简单、通用且有效的垃圾收集形式。它能正确地处理非内存资源（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）。为了正确处理环形数据结构，还需要有 <code>weak_ptr</code>；不过，这往往不是最好的做法。人们常常简单地使用 <code>shared_ptr</code> 来安全地从工厂函数返回数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">shared_ptr&lt;Blob&gt; <span class="hljs-title">make_Blob</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">shared_ptr</span>&lt;Blob&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a));<br>    <span class="hljs-comment">// ... 把很多好东西填到 *p ...</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>当把对象移出函数时，引用计数会从 1 变到 2 再变回 1。在多线程程序中，这通常是涉及到同步的缓慢操作。另外，粗率地使用和&#x2F;或实现引用计数，会增加分配和回收的开销。</p><p>正如预期的那样，<code>shared_ptr</code> 很快就流行起来，并在有些地方被严重滥用。因此，后来我们提供了不引入额外开销的 <code>unique_ptr</code>。<code>unique_ptr</code> 对它所指的对象拥有独占的所有权，并会在自身被销毁的时候把指向的对象也简单地 <code>delete</code> 掉。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">unique_ptr&lt;Blob&gt; <span class="hljs-title">make_Blob</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">unique_ptr</span>&lt;Blob&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a));<br>    <span class="hljs-comment">// ... 把很多好东西填到 *p ...</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>shared_ptr</code> 和 <code>weak_ptr</code> 是 Peter Dimov 的工作成果 [Dimov et al. 2003]。Howard Hinnant 贡献的 <code>unique_ptr</code> 是对 C++98 的 <code>auto_ptr</code> 的改进 [Hinnant et al. 2002]。考虑到 <code>unique_ptr</code> 是 <code>auto_ptr</code> 的即插即用式的替代品，这提供了从标准中（最终）删除有缺陷的功能的难得机会。资源管理指针跟移动语义、完美转发及右值引用的工作密切相关（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）。</p><p>资源管理指针被广泛地用于持有对象，以便异常（及类似的情况）不会导致资源泄漏（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">old_use</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> q = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (foo) <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Bad</span>();  <span class="hljs-comment">// 会泄漏</span><br>    <span class="hljs-keyword">if</span> (bar) <span class="hljs-keyword">return</span>;       <span class="hljs-comment">// 会泄漏</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">delete</span> q;    <span class="hljs-comment">// 容易忘</span><br>&#125;<br></code></pre></td></tr></table></figure><p>显式使用 <code>new</code> 和 <code>delete</code> 的旧方式容易出错，在现代 C++ 中已经不推荐使用（例如，C++ 核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>））。现在我们可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">newer_use</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">unique_ptr</span>&lt;Blob&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a));<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (foo) <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Bad</span>();  <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-keyword">if</span> (bar) <span class="hljs-keyword">return</span>;       <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这种写法更简短、更安全，迅速就流行开去。不过，“智能指针”仍然被过度使用：“它们的确智能，但它们仍然是指针。”除非我们确实需要指针，否则，简单地使用局部变量会更好：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">simplest_use</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Blob <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (foo) <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Bad</span>(); <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-keyword">if</span> (bar) <span class="hljs-keyword">return</span>;      <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>智能指针用于表示资源所有权的主要用途是面向对象编程，其中指针（或引用）用于访问对象，而对象的确切类型在编译时并不知道。</p><h3 id="4-2-5-统一初始化"><a href="#4-2-5-统一初始化" class="headerlink" title="4.2.5 统一初始化"></a>4.2.5 统一初始化</h3><p>出于历史原因，C++ 有多种初始化的写法，而它们的语义有惊人的不同。</p><p>从 C 语言中，C++ 继承了三种初始化形式，并添加了第四种形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x;              <span class="hljs-comment">// 默认初始化（仅适用于静态变量）</span><br><span class="hljs-type">int</span> x = <span class="hljs-number">7</span>;          <span class="hljs-comment">// 值初始化</span><br><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;    <span class="hljs-comment">// 聚合初始化</span><br>string s;           <span class="hljs-comment">// 由默认构造函数初始化</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;  <span class="hljs-comment">// 由构造函数初始化</span><br></code></pre></td></tr></table></figure><p>用于初始化的概念既取决于要初始化的对象的类型，也取决于初始化的上下文。这是一团乱麻，而且人们也认识到这一点。比如，为什么可以用列表初始化内建数组，但却不能初始化 <code>vector</code>？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;        <span class="hljs-comment">// 可以</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;  <span class="hljs-comment">// 应该可以工作（显然，但是没有）</span><br></code></pre></td></tr></table></figure><p>上一个例子令我非常不舒服，因为它违反了 C++ 的根本设计目标，即为内建类型和用户定义的类型提供同等的支持。特别是，因为对数组初始化有比 <code>vector</code> 更好的支持，这会鼓励人们使用容易出错的内建数组。</p><p>当 C++0x 的工作从 2002 年开始的时候，Daniel Gutson、Francis Glassborow、Alisdair Meredith、Bjarne Stroustrup 和 Gabriel Dos Reis 曾进行了许多讨论和提议，来解决其中一些问题。在 2005 年，Gabriel Dos Reis 和我提出了<strong>统一初始化</strong>的写法，该写法可用于每种类型，并且在程序中的任何地方都具有相同的含义 [Stroustrup and Dos Reis 2005b]。这种写法有望大大简化用户代码并消除许多不易察觉的错误。这一写法基于使用花括号的列表写法。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = &#123;<span class="hljs-number">5</span>&#125;;            <span class="hljs-comment">// 内建类型</span><br><span class="hljs-type">int</span> a[] &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;          <span class="hljs-comment">// 数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;  <span class="hljs-comment">// 具有构造函数的用户定义的类型</span><br></code></pre></td></tr></table></figure><p>花括号（<code>&#123;&#125;</code>）对于单个值是可选的，并且花括号初始化器列表之前的 <code>=</code> 也是可选的。为了统一起见，在许多 C++98 不允许使用花括号或者 <code>=</code> 初始化的地方都接受花括号样式的初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;)</span></span>;<br><span class="hljs-type">int</span> i = <span class="hljs-built_in">f</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;);  <span class="hljs-comment">// 函数参数</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">X</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-type">int</span> a[];<br>    <span class="hljs-built_in">X</span>() : v&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;, a&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125; &#123;&#125;  <span class="hljs-comment">// 成员初始化器</span><br>    <span class="hljs-built_in">X</span>(<span class="hljs-type">int</span>);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;* p = <span class="hljs-keyword">new</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;  <span class="hljs-comment">// new 表达式</span><br>X x &#123;&#125;;  <span class="hljs-comment">// 默认初始化</span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-type">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(T)</span></span>;<br><span class="hljs-type">int</span> z = <span class="hljs-built_in">foo</span>(X&#123;<span class="hljs-number">1</span>&#125;);  <span class="hljs-comment">// 显式构造</span><br></code></pre></td></tr></table></figure><p>其中许多的情形，例如为使用 <code>new</code> 创建的对象提供初始化器列表，使用以前的写法根本就做不到。</p><p>可惜，对于这一理想，我们仅仅达到不完全的近似，我们有的方案只能算大致统一。有些人发现，使用 <code>&#123;…&#125;</code> 很别扭，除非 <code>…</code> 是同质对象的列表，而其他人则坚持 C 语言中对聚合和非聚合的区分，并且许多人担心没有显式类型标记的列表会导致歧义和错误。例如，以下写法被认为是危险的，不过最终还是被接受了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123; string s; <span class="hljs-type">int</span> i; &#125;;<br><br><span class="hljs-function">S <span class="hljs-title">foo</span><span class="hljs-params">(S s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;string&#123;<span class="hljs-string">&quot;foo&quot;</span>&#125;,<span class="hljs-number">13</span>&#125;;<br>&#125;<br><br>S x = <span class="hljs-built_in">foo</span>(&#123;string&#123;<span class="hljs-string">&quot;alpha&quot;</span>&#125;,<span class="hljs-number">12.3</span>&#125;);<br></code></pre></td></tr></table></figure><p>在一种情况下，对统一写法的追求被一种惯用法击败。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;          <span class="hljs-comment">// 10 个元素</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v2 &#123;<span class="hljs-number">10</span>&#125;;         <span class="hljs-comment">// 10 个元素还是 1 个值为 10 的元素？</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v3 &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;  <span class="hljs-comment">// 拥有 5 个元素的 vector</span><br></code></pre></td></tr></table></figure><p>使用像 <code>vector&lt;int&gt; v1(10)</code> 的指定大小的初始化器的代码有数百万行，而从基本原则上来说，<code>vector&lt;int&gt; v2 &#123;10&#125;</code> 确实是模棱两可的。假如是在一门新的语言中，我不会使用普通的整数来表示大小，我会为此指定一种特定的类型（比如 <code>Size</code> 或 <code>Extent</code>）；举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; v1 &#123;Extent&#123;<span class="hljs-number">10</span>&#125;&#125;;  <span class="hljs-comment">// 10 个元素，默认值为 0</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v2 &#123;<span class="hljs-number">10</span>&#125;;          <span class="hljs-comment">// 1 个元素，值为 10</span><br></code></pre></td></tr></table></figure><p>但是，C++ 并不是一门新语言，因此我们决定，在构造函数中进行选择时优先选择初始化器列表解释。这使 <code>vector&lt;int&gt; v2 &#123;10&#125;</code> 成为具有一个元素的 <code>vector</code>，并且使 <code>&#123;…&#125;</code> 初始化器的解释保持一致。但是，当我们想要避免使用初始化器列表构造函数时，这就迫使我们使用 <code>(…)</code> 写法。</p><p>初始化的问题之一正在于，它无处不在，因此基本上所有程序和语言规则的问题都会在初始化上下文中体现出来。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">7.2</span>;  <span class="hljs-comment">// 传统的初始化</span><br><span class="hljs-type">int</span> y &#123;<span class="hljs-number">7.2</span>&#125;;  <span class="hljs-comment">// 花括号初始化</span><br></code></pre></td></tr></table></figure><p>从大约 1974 年将浮点数引入 C 语言以来，<code>x</code> 的值就是 <code>7</code>；也就是说，<code>7.2</code> 被隐式截断，从而导致信息丢失。这是错误的来源。花括号初始化不允许窄化转换（此处为截断）。很好，但是升级旧代码变得更加困难：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> d = <span class="hljs-number">7.2</span>;<br><span class="hljs-type">int</span> x = d;   <span class="hljs-comment">// 可以：截断</span><br><span class="hljs-type">int</span> y &#123;d&#125;;   <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p>这是一个常见问题的例子。人们想要一条简单的升级路径，但是除非需要做出一些努力和更改，否则一次非常简单的升级的结果是，旧的问题和错误得以保留。改善一门广泛使用的语言比我们一般想像的要难。</p><p>经过许多激烈的辩论和许多修改（并非其中每一项我都认为是改进），统一初始化在 2008 年被批准进入 C++0x [Stroustrup 2008b]。</p><p>与以往一样，写法是一个有争议的问题，但是最终我们同意有一个标准库类型的 <code>initializer_list</code> 用作初始化器列表构造函数的参数类型。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">vector</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">vector</span>(initializer_list&lt;T&gt;);  <span class="hljs-comment">// 初始化器列表构造函数</span><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v3 &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;  <span class="hljs-comment">// 具有 5 个元素的 vector</span><br></code></pre></td></tr></table></figure><p>令人遗憾的是，统一初始化（<code>&#123;&#125;</code> 初始化）的使用并不像我期望的那样广泛。人们似乎更喜欢熟悉的写法和熟悉的缺陷。我似乎陷入了 N+1 问题：你有 N 个不兼容和不完整的解决方案，因此添加了一个新的更好的解决方案。不幸的是，原始的 N 个解决方案并没有消失，所以你现在有了 N+1 个解决方案。公平地说，有一些细微的问题超出了本文的范围，这些问题只是在 C++14、C++17 和 C++20 中被逐步补救。我的印象是，泛型编程和对更简洁写法的普遍推动正在慢慢增加统一初始化的吸引力。所有标准库容器（如 <code>vector</code>）都有初始化器列表构造函数。</p><h3 id="4-2-6-nullptr"><a href="#4-2-6-nullptr" class="headerlink" title="4.2.6 nullptr"></a>4.2.6 <code>nullptr</code></h3><p>在 C 和 C++ 中，如果将字面量 <code>0</code> 赋值给指针或与指针比较时它表示空指针。更令人困惑的是，如果将任何求值为零的整数常量表达式赋值给指针或与指针比较时它也表示空指针。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p = <span class="hljs-number">99</span><span class="hljs-number">-55</span><span class="hljs-number">-44</span>; <span class="hljs-comment">// 空指针</span><br><span class="hljs-type">int</span>* q = <span class="hljs-number">2</span>;        <span class="hljs-comment">// 错误：2 是一个 int，而不是一个指针</span><br></code></pre></td></tr></table></figure><p>这使很多人感到烦恼和困惑，因此有一个标准库宏 <code>NULL</code>（从 C 中采用），它在标准 C++ 中定义为 <code>0</code>。某些编译器会对 <code>int* p = 0</code> 提出警告；但是我们仍然没法为函数针对指针和整数重载而避免 <code>0</code> 的歧义。</p><p>这很容易通过给空指针命名来解决，但是不知何故没有人能提出一份人们能达成一致的提议。在 2003 年的某个时候，我正通过电话参加一个会议，讨论如何给空指针命名。如 <code>NULL</code>、<code>null</code>、<code>nil</code>、<code>nullptr</code> 和 <code>0p</code> 等建议名都是备选方案。照旧，那些简短而“漂亮”的名字已经被使用了成千上万次，因此不能在不破坏数百万行代码的情况下使用。我听了数十次这样的讨论，有点厌烦了，只是在似听非听。人们说到 null pointer、null ptr、nullputter 的变体。我醒过来说：“你们都在说 <code>nullptr</code>。我想我没有在代码中看到过它。”</p><p>Herb Sutter 和我写下了该提案 [Sutter and Stroustrup 2003]，该提案在 2007 年相对容易地通过了（仅仅进行了四次小修订后），所以现在我们可以说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p0 = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span>* p1 = <span class="hljs-number">99</span><span class="hljs-number">-55</span><span class="hljs-number">-44</span>;  <span class="hljs-comment">// 可以，为了兼容性</span><br><span class="hljs-type">int</span>* p2 = <span class="hljs-literal">NULL</span>;      <span class="hljs-comment">// 可以，为了兼容性</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">char</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-type">int</span> x1 = <span class="hljs-built_in">f</span>(<span class="hljs-literal">nullptr</span>); <span class="hljs-comment">// f(char*)</span><br><span class="hljs-type">int</span> x2 = <span class="hljs-built_in">f</span>(<span class="hljs-number">0</span>);       <span class="hljs-comment">// f(int)</span><br></code></pre></td></tr></table></figure><p>我对 <code>nullptr</code> 的发音是“null pointer”。</p><p>我仍然认为如能将宏 <code>NULL</code> 定义为 <code>nullptr</code> 可以消除一类重要的问题，但委员会认为这一改变过于激进。</p><h3 id="4-2-7-constexpr-函数"><a href="#4-2-7-constexpr-函数" class="headerlink" title="4.2.7 constexpr 函数"></a>4.2.7 <code>constexpr</code> 函数</h3><p>在 2003 年，Gabriel Dos Reis 和我提出了用于在 C++ 中进行常量表达式求值的一种根本不同且明显更好的机制 [Dos Reis 2003]。人们当时使用（无类型的）宏和贫乏的 C 语言定义的常量表达式。另一些人则开始使用模板元编程来计算值（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。“这既乏味又容易出错” [Dos Reis and Stroustrup 2010]。我们的目标是</p><ul><li>让编译期计算达到类型安全</li><li>一般来说，通过将计算移至编译期来提高效率</li><li>支持嵌入式系统编程（尤其是 ROM）</li><li>直接支持元编程（而非<strong>模板</strong>元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>））</li><li>让编译期编程与“普通编程”非常相似</li></ul><p>这个想法是简单的：允许在常量表达式中使用以 <code>constexpr</code> 为前缀的函数，还允许在常量表达式中使用简单用户定义类型，叫字面量类型。字面量类型基本上就是一种所有运算都是 <code>constexpr</code> 的类型。</p><p>考虑这样一个应用，为了提高效率、支持 ROM 或可靠性，我们想使用一套单位制 [Dos Reis and Stroustrup 2010]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LengthInKM</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> <span class="hljs-title">LengthInKM</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> : val(d) &#123;</span> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> val; &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> val;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LengthInMile</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> <span class="hljs-title">LengthInMile</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> : val(d) &#123;</span> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> val; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">LengthInKM</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">LengthInKM</span>(<span class="hljs-number">1.609344</span> * val); &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> val;<br>&#125;;<br></code></pre></td></tr></table></figure><p>有了这些，我们可以制作一个常量表，而不必担心单位错误或转换错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LengthInKM marks[] = &#123; <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">2.3</span>), <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">0.76</span>) &#125;;<br></code></pre></td></tr></table></figure><p>传统的解决方案要么需要更多的运行时间，要么需要程序员在草稿纸上算好值。我对单位制的兴趣是由 1999 年的火星气候探测者号的失事激发的，事故原因是单位不匹配没有被发现 [Stephenson et al. 1999]。</p><p><code>constexpr</code> 函数可以在编译期进行求值，因此它无法访问非本地对象（它们在编译时还不存在），因此 C++ 获得了一种纯函数。</p><p>为什么我们要求程序员应该使用 <code>constexpr</code> 来标记可以在编译期执行的函数？原则上，编译器可以弄清楚在编译期可以计算出什么，但是如果没有标注，用户将受制于各种编译器的聪明程度，并且编译器需要将所有函数体“永远”保留下来，以备常量表达式在求值时要用到它们。我们选择 <code>constexpr</code> 一词是因为它足够好记，但又“足够奇怪”而不会破坏现有代码。</p><p>在某些地方，C++ 需要常量表达式（例如，数组边界和 case 标签）。另外，我们可以通过将变量声明为 <code>constexpr</code> 来要求它在编译期被初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> LengthInKM marks[] = &#123; <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">2.3</span>), <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">0.76</span>) &#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> y1 = x;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> y2 = x;   <span class="hljs-comment">// 错误：x 不是一个常量</span><br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> y3 = <span class="hljs-number">77</span>;  <span class="hljs-comment">// 正确</span><br>&#125;<br></code></pre></td></tr></table></figure><p>早期的讨论集中在性能和嵌入式系统的简单示例上。直到后来（大约从 2015 年开始），<code>constexpr</code> 函数才成为元编程的主要支柱（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。C++14 允许在 <code>constexpr</code> 函数中使用局部变量，从而支持了循环；在此之前，它们必须是纯函数式的。C++20（最终，在首次提出后约 10 年）允许将字面类型用作值模板参数类型 [Maurer 2012]。因此，C++20 将非常接近最初的目标（1979 年），即在可以使用内建类型的地方也都可以使用用户定义的类型（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）。</p><p><code>constexpr</code> 函数很快变得非常流行。它们遍布于 C++14、C++17 和 C++20 标准库，并且不断有相关建议，以求在 <code>constexpr</code> 函数中允许更多的语言构件、将 <code>constexpr</code> 应用于标准库中的更多函数，以及为编译期求值提供更多支持（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）。</p><p>但是，<code>constexpr</code> 函数进入标准并不容易。它们一再被认为是无用和无法实现的。实现 <code>constexpr</code> 函数显然需要改进较老的编译器，但是很快，所有主要编译器的作者都证明了“无法实现”的说法是错误的。关于 <code>constexpr</code> 的讨论几乎是有史以来最激烈、最不愉快的。让初始版本通过标准化流程 [Dos Reis and Stroustrup 2007] 花费了四年的时间，而完整地完成又花了十二年的时间。</p><h3 id="4-2-8-用户定义字面量"><a href="#4-2-8-用户定义字面量" class="headerlink" title="4.2.8 用户定义字面量"></a>4.2.8 用户定义字面量</h3><p>“用户定义字面量”是一个非常小的功能。但是，它合乎我们的总体目标，即让用户定义类型得到和内建类型同等的支持。内建类型有字面量，例如，<code>10</code> 是整数，<code>10.9</code> 是浮点数。我试图说服人们，对于用户定义类型，显式地使用构造函数是等价的方式；举例来说，<code>complex&lt;double&gt;(1.2,3.4)</code> 就是 <code>complex</code> 的字面量等价形式。然而，许多人认为这还不够好：写法并不传统，而且不能保证构造函数在编译期被求值（尽管这还是早年间的事）。对于 <code>complex</code>，人们想要 <code>1.2+3.4i</code>。</p><p>与其他问题相比，这似乎并不重要，所以几十年来什么都没有发生。2006 年的一天，David Vandevoorde（EDG）、Mike Wong（IBM）和我在柏林的一家中餐馆吃了一顿丰盛的晚餐。我们在餐桌边聊起了天，于是一个设计浮现在一张餐巾纸上。这个讨论的起因是 IBM 的一项十进制浮点提案中对后缀的需求，该提案最终成了一个独立的国际标准 [Klarer 2007]。在大改后，该设计在 2008 年成为<strong>用户定义字面量</strong>（通常称为 UDL）[McIntosh et al. 2008]。当时让 UDL 变得有趣的重要发展是 <code>constexpr</code> 提案的进展（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）。有了它，我们可以保证编译期求值。</p><p>照例，找到一种可接受的写法是一个问题。我们决定使用晦涩的 <code>operator&quot;&quot;</code> 作为字面量运算符（literal operator）的写法是可以接受的，毕竟 <code>&quot;&quot;</code> 是一个字面量。然后，<code>&quot;&quot;x</code> 是用来表示字面量后面跟后缀 <code>x</code> 的写法。这样一来，要定义一个用于 <code>complex</code> 数的 <code>Imaginary</code> 类型，我们可以定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> Imaginary <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">i</span>(<span class="hljs-type">long</span> <span class="hljs-type">double</span> x) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Imaginary</span>(x); &#125;<br></code></pre></td></tr></table></figure><p>现在，<code>3.4i</code> 是一个 <code>Imaginary</code>，而 <code>1.2+3.4i</code> 是 <code>complex&lt;double&gt;(1.2,3.4)</code>。任务完成！</p><p>这一功能的语言技术细节相当古怪，但我认为对于一个相对很少使用的特性来说，这是合理的。即使在大量使用 UDL 时，字面量运算符的定义也很少。最重要的是后缀的优雅和易用性。对于许多类型，重要的是可以在编译时完成从内建类型到用户定义类型的转换。</p><p>很自然，人们使用 UDL 来定义许多有用的类型的字面量，有些来自标准库（例如，<code>s</code> 代表 秒，<code>s</code> 代表 <code>std::string</code>）。关于支持二进制字面量的讨论，Peter Sommerlad（HSR）提出了我认为的“最佳滥用规则”奖的候选方案：适当地定义 <code>operator&quot;&quot;_01(long int)</code>，于是 <code>101010_01</code> 就成了个二进制字面量！当惊讶和笑声平息下来后，委员会决定在语言本身里定义二进制字面量并使用 <code>0b</code> 作为前缀，表示“binary”（例如 <code>0b101010</code>），类似于使用 <code>0x</code> 表示“hexadecimal”（例如 <code>0xDEADBEEF</code>）。</p><h3 id="4-2-9-原始字符串字面量"><a href="#4-2-9-原始字符串字面量" class="headerlink" title="4.2.9 原始字符串字面量"></a>4.2.9 原始字符串字面量</h3><p>这是一个罕见的简单特性，它的唯一目的是为容易出错的写法提供一种替代方法。和 C 一样，C++ 使用反斜杠作为转义字符。这意味着要在字符串字面量中表示反斜杠，你需要使用双反斜杠（<code>\\</code>），当你想在字符串中使用双引号时，你需要使用 <code>\&quot;</code>。然而，通常的正则表达式模式广泛使用反斜杠和双引号，所以模式很快变得混乱和容易出错。考虑一个简单的例子（美国邮政编码）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">regex pattern1 &#123;<span class="hljs-string">&quot;\\w&#123;2&#125;\\s*\\d&#123;5&#125;(-\\d&#123;4&#125;)?&quot;</span>&#125;; <span class="hljs-comment">// 普通字符串字面量</span><br><br>regex pattern2 &#123;<span class="hljs-string">R&quot;(\w&#123;2&#125;\s*\d&#123;5&#125;(-\d&#123;4&#125;)?)&quot;</span>&#125;;  <span class="hljs-comment">// 原始字符串字面量</span><br></code></pre></td></tr></table></figure><p>这两种模式是相同的。<strong>原始字符串字面量</strong> <code>R&quot;(…)&quot;</code> 的括号可以精调以容纳更复杂的模式，但是当你使用正则表达式（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）时，最简单的版本就足够了，而且非常方便。当然，提供原始字符串字面量是一个小细节，但是（类似于数字分隔符（<a href="05.md#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>））深受需要大量使用字面量的人们的喜爱。</p><p>原始字符串字面量是 Beman Dawes 在 2006 年 [Dawes 2006] 基于使用 Boost.Regex [Maddock 2002] 的经验而提出来的。</p><h3 id="4-2-10-属性"><a href="#4-2-10-属性" class="headerlink" title="4.2.10 属性"></a>4.2.10 属性</h3><p>在程序中，属性提供了一种将本质上任意的信息与程序中的实体相关联的方法。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[noreturn]] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">forever</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-built_in">do_work</span>();<br>        <span class="hljs-built_in">wait</span>(<span class="hljs-number">10</span>s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性 <code>[[noreturn]]</code> 通知编译器或其他工具 <code>forever()</code> 永远不会返回，这样它就可以抑制关于缺少返回的警告。属性用 <code>[[…]]</code> 括起来。</p><p>属性最早是在 2007 年由库工作组的负责人 Alisdair Meredith [Meredith 2007] 提出来的，目的是消除专有属性写法（例如 <code>__declspec</code> 和 <code>__attribute__</code>）之间的不兼容性，这种不兼容性会使库实现更加复杂。对此，Jens Maurer 和 Michael Wong 对问题进行了分析，并提出了 <code>[[…]]</code> 语法，方案是基于 Michael 为 IBM 的 XL 编译器所做的实现 [Maurer and Wong 2007]。除了对大量不可移植的实践进行标准化之外，这还将允许用更少的关键字来完成语言扩展，而新的关键字总是有争议的。</p><p>该提案提到了可能的使用：覆盖虚函数的明确语法，动态库，用户控制的垃圾收集，线程本地存储，控制对齐，标识“简旧数据”（POD）类，default 和 delete 的函数，强类型枚举，强类型 typedef，无副作用的纯函数，final 覆盖，密封类，对并发性的细粒度控制，运行期反射支持，及轻量级契约编程主持。在早期的讨论中还提到了更多。</p><p>“属性”当然是一个使某些事情变得更简单的特性，但我不确定它是否鼓励了良好的设计，或者它简化的“事情”总是能产生最大的好处。我可以想象属性打开了闸门，放进来一大堆不相关的、不太为人们了解的、次要的特性。任何人都可以为编译器添加一个属性，并游说各处采用它，而不是向 WG21 提出一个特性。许多程序员就是喜欢这些小特性。它不需要引入关键字和修改语法，这可以降低门槛，但也更容易不可避免地导致对特性交互关注度不够，造成重叠而不兼容的类似特性出现在不同的编译器中。这种情况在私有扩展中已经发生过了，但我认为私有扩展是不可避免的、局部的，而且往往是暂时的。</p><p>为了限制潜在的损害，我们决定属性应该意味着不改变程序的语义。也就是说，忽略属性，编译器不会有任何危害。多年来，这条“规则”几乎奏效。大多数标准属性——尽管不是全部——没有语义效果，即使它们有助于优化和错误检测。</p><p>最后，大多数最初那些建议的对属性的使用都通过普通的语法和语言规则来解决。</p><p>C++11 增加了标准属性 <code>[[noreturn]]</code> 和 <code>[[carries_dependency]]</code>。</p><p>C++17 增加了 <code>[[fallthrough]]</code>、<code>[[nodiscard]]</code> 和 <code>[[maybe_unused]]</code>。</p><p>C++20 增加了 <code>[[likely]]</code>、<code>[[unlikely]]</code>、<code>[[deprecated(message)]]</code>、<code>[[no_unique_address]]</code> 和 <code>[[using: …]]</code>。</p><p>我仍然看到属性扩散是一个潜在的风险，但到目前为止，水闸还没有打开。C++ 标准库大量使用了属性；<code>[[nodiscard]]</code> 属性尤其受欢迎，特别用来防止由于没有使用本身是资源句柄的返回值而造成的潜在资源泄漏。</p><p>属性语法被用于（失败的）C++20 契约设计（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）。</p><h3 id="4-2-11-垃圾收集"><a href="#4-2-11-垃圾收集" class="headerlink" title="4.2.11 垃圾收集"></a>4.2.11 垃圾收集</h3><p>从 C++ 的早期开始，人们就考虑<strong>可选</strong>的垃圾收集（对于“可选”有各种定义）[Stroustrup 1993, 2007]。经过一番争论，C++11 为 Mike Spertus 和 Hans-J. Boehm 设计的保守垃圾收集器提供了一个接口 [Boehm and Spertus 2005; Boehm et al. 2008]。然而，很少有人留意到这一点，更少有人使用了垃圾收集（尽管有好的收集器可用）。设计的方法是 [Boehm et al. 2008]：</p><blockquote><p>同时支持垃圾收集实现和基于可达性的泄漏检测器。这是通过把“隐藏指针”的程序定为未定义行为来实现的；举例来说，将指针与另一个值进行异或运算，然后将它转换回普通指针并对其进行解引用就是一种隐藏行为。</p></blockquote><p>这项工作造福了 C++ 语义的精确规范，并且 C++ 中也存在一些对垃圾收集的使用（例如，在 Macaulay2 中 [Eisenbud et al. 2001; Macaulay2 2005–2020]）。然而，垃圾收集器不处理非内存资源，而 C++ 社区通常选择使用资源管理指针（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）和 RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）二者的组合。</p><h2 id="4-3-C-11：改进对泛型编程的支持"><a href="#4-3-C-11：改进对泛型编程的支持" class="headerlink" title="4.3 C++11：改进对泛型编程的支持"></a>4.3 C++11：改进对泛型编程的支持</h2><p>泛型编程（及其产物模板元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>））在 C++ 98 中迅速轻松地获得了成功。它的使用对语言造成了严重的压力，而不充分的语言支持导致了巴洛克式矫揉造作的编程技巧和可怕的错误消息。这证明了泛型编程和元编程的实用性，许多明智的程序员为了获得其好处而甘愿承受其痛苦。这些好处是</p><ul><li>超越以 C 风格或面向对象风格所可能获得的灵活性</li><li>更清晰的代码</li><li>更细的静态类型检查粒度</li><li>效率（主要来自内联、让编译器同时查看多处的源代码，以及更好的类型检查）</li></ul><p>C++11 中支持泛型编程的主要新特性有：</p><ul><li><a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>：lambda 表达式</li><li><a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>：变参模板</li><li><a href="#433-%E5%88%AB%E5%90%8D">§4.3.3</a>：<code>template</code> 别名</li><li><a href="#434-tuple">§4.3.4</a>：<code>tuple</code></li><li><a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>：统一初始化</li></ul><p>在 C++11 中，概念本应是改进支持泛型编程的核心，但这并没有发生（<a href="06.md#626-%E5%93%AA%E9%87%8C%E5%87%BA%E9%94%99%E4%BA%86">§6.2.6</a>）。我们不得不等到 C++20（<a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）。</p><h3 id="4-3-1-lambda-表达式"><a href="#4-3-1-lambda-表达式" class="headerlink" title="4.3.1 lambda 表达式"></a>4.3.1 lambda 表达式</h3><p>BCPL 允许将代码块作为表达式，但是为了节省编译器中的空间，Dennis Ritchie 没有在 C 中采用这个特性。我在这点上遵循了 C 的做法，但是添加了 <code>inline</code> 函数，从而（重新）得到在没有函数调用的开销下执行代码的能力。不过，这仍然不能提供以下能力</p><ul><li>把代码写在需要它的那个准确位置上（通常作为函数参数）。</li><li>从代码内部访问代码的上下文。</li></ul><p>在 C++98 的开发过程中，曾有人提议使用局部函数来解决第二点，但被投票否决了，因为这可能成为缺陷的来源。</p><p>C++ 不允许在函数内部定义函数，而是依赖于在类内部定义的函数。这使得函数的上下文可以表示为类成员，因而函数对象变得非常流行。<strong>函数对象</strong>只是一个带有调用运算符（<code>operator()()</code>）的类。这曾是一种非常高效和有效的技术，我（和其他人）认为有名字的对象比未命名的操作更清晰。然而，只有当我们可以在某样东西使用的上下文之外给它一个合理的名称，特别是如果它会被使用多次时，这种清晰度上的优势才会表现出来。</p><p>2002 年，Jaakko Järvi 和 Gary Powell 编写了 Boost.Lambda 库 [Järvi and Powell 2002] 这让我们可以写出这样的东西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), _1&lt;i);  <span class="hljs-comment">// 查找值小于 i 的元素</span><br></code></pre></td></tr></table></figure><p>这里，<code>_1</code> 是代码片段 <code>_1&lt;i</code> 的某个第一个实参的名称，而 <code>i</code> 是表达式所在作用域（enclosing scope）中的一个变量。<code>_1&lt;i</code> 展开为一个函数对象，其中 <code>i</code> 被绑定到一个引用，<code>_1</code> 成为 <code>operator()()</code> 的实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Less_than</span> &#123;<br>    <span class="hljs-type">int</span>&amp; i;<br>    <span class="hljs-built_in">Less_than</span>(<span class="hljs-type">int</span>&amp; ii) :<span class="hljs-built_in">i</span>(ii) &#123;&#125;  <span class="hljs-comment">// 绑定到 i</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x&lt;i; &#125;  <span class="hljs-comment">// 跟参数比较</span><br>&#125;<br></code></pre></td></tr></table></figure><p>lambda 表达式库是早期模板元编程的典范（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>），非常方便和流行。不幸的是，它的效率并不特别高。多年来，我追踪了它相对于手工编码的同等实现的性能，发现它的开销是后者的 2.5 倍且这种差距相当一致。我不能推荐一种方便但却很慢的东西。这样做会损害 C++ 作为产生高效代码的语言的声誉。显然，这种慢在一定程度上是由于优化不当造成的，但出于这个和其他原因，我们有一群人在 Jaakko Järvi 领导下决定将 lambda 表达式作为一种语言特性 [Willcock et al. 2006] 来提出。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Oper&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(Oper op)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> xx = <span class="hljs-built_in">op</span>(<span class="hljs-number">7</span>);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">g</span>(&lt;&gt;(<span class="hljs-type">int</span> x) -&gt; <span class="hljs-type">int</span> &#123;<span class="hljs-keyword">return</span> x + y;&#125;);  <span class="hljs-comment">// 以 lambda 表达式作为参数调用 g()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里，<code>xx</code> 会变成 <code>3+7</code>。</p><p><code>&lt;&gt;</code> 是 lambda 表达式引导器。我们不敢提出一个新的关键词。</p><p>这一提议引起了相当多的兴奋和许多热烈的讨论：</p><ul><li>语法应该是富有表现力的还是简洁的？</li><li>lambda 表达式可以从哪个作用域引用什么名字？[Crowl 2009]。</li><li>从 lambda 表达式生成的函数对象应该是可变的吗？默认情况下不是。</li><li>lambda 表达式能是多态的吗？到 C++14 才可以（<a href="05.md#54-%E6%B3%9B%E5%9E%8B-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§5.4</a>）。</li><li>lambda 表达式的类型是什么？独有的类型，除非它基本上是一个局部函数。</li><li>lambda 表达式可以有名字吗？不可以。如果你需要一个名字，就把它赋给一个变量。</li><li>名称是由值绑定还是由引用绑定？你来选择。</li><li>变量可以移动到 lambda 表达式中（相对于复制）吗？到 C++14 才可以（<a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>）。</li><li>语法是否会与各种非标准扩展发生冲突？（不严重）。</li></ul><p>到 2009 年 lambda 表达式被批准时，语法已经发生了变化，变得更加合乎惯例 [Vandevoorde 2009]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">abssort</span><span class="hljs-params">(<span class="hljs-type">float</span>* x, <span class="hljs-type">unsigned</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::<span class="hljs-built_in">sort</span>(x, x+N,<br>        [](<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b) &#123; <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">abs</span>(a) &lt; std::<span class="hljs-built_in">abs</span>(b); &#125;<br>             );<br>&#125;<br></code></pre></td></tr></table></figure><p>从 <code>&lt;&gt;</code> 切换到 <code>[]</code> 是由 Herb Sutter 建议并由 Jonathan Caves 实现的。这种变化在一定程度上是由于需要一种简单的方法来指定 lambda 表达式可以使用周围作用域中的哪些名称。Herb Sutter 回忆道：</p><blockquote><p>我的并行算法项目需要 lambda 表达式，这是我的动机……看到 EWG 所采用的 lambda 表达式那实在丑到爆的用法，以及从语法一致性&#x2F;干净性的角度来看极为糟糕的设计（例如，捕获出现在两个分开的位置，语法元素使用不一致，顺序错误——因为“构造函数”元素应该先出现然后才是调用“运算符”元素，以及其他一些小问题）。</p></blockquote><p>默认情况下，lambda 表达式不能引用在本地环境的名字，所以它们只是普通的函数。然而，我们可以指定 lambda 表达式应该从它的环境中“捕获”一些或所有的变量。回调是 lambda 表达式的一个常见用例，因为操作通常只需要写一次，并且操作会需要安装该回调的代码上下文中的一些信息。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-comment">// ... 为 s 计算一个合适的值 ...</span><br>    w.<span class="hljs-built_in">foo_callback</span>([&amp;s](<span class="hljs-type">int</span> i)&#123; <span class="hljs-built_in">do_foo</span>(i,s); &#125;);<br>    w.<span class="hljs-built_in">bar_callback</span>([=s](<span class="hljs-type">double</span> d)&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">do_bar</span>(d,s); &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>[&amp;s]</code> 表示 <code>do_foo(i,s)</code> 可以使用 <code>s</code>，<code>s</code> 通过引用来传递（“捕获”）。<code>[=s]</code> 表示 <code>do_bar(d,s)</code> 可以使用 <code>s</code>，<code>s</code> 是通过值传递的。如果回调函数在与 <code>test</code> 相同的线程上被调用，<code>[&amp;s]</code> 捕获可能效率更高，因为 <code>s</code> 没有被复制。如果回调函数在不同的线程上被调用，<code>[&amp;s]</code> 捕获可能是一个灾难，因为 <code>s</code> 在被使用之前可能会超出作用域；这种情况下，我们想要一份副本。一个 <code>[=]</code> 捕获列表意味着“将所有局部变量复制到 lambda 表达式中”。而一个 <code>[&amp;]</code> 捕获列表意味着“lambda 表达式可以通过引用指代所有局部变量”，并意味着 lambda 表达式可以简单地实现为一个局部函数。事实证明，捕获机制的灵活性非常有价值。捕获机制允许控制可以从 lambda 表达式引用哪些名称，以及如何引用。这是对 1990 年代人们担心局部函数容易出错的一种回答。</p><p>lambda 表达式的实现基本上是编译器构建一个合适的函数对象并传递它。捕获的局部变量成为由构造函数初始化的成员，lambda 表达式的代码成为函数对象的调用运算符。例如，<code>bar_callback</code> 变成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__XYZ</span> &#123;<br>    string s;<br>    __XYZ(<span class="hljs-type">const</span> string&amp; ss) : s&#123;ss&#125; &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">do_bar</span>(d,s); &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>lambda 表达式的返回类型可以从它的返回语句推导出来。如果没有 return 语句，lambda 表达式就不会返回任何东西。</p><p>我把 lambda 表达式归类为对泛型编程的支持，因为最常见的用途之一——也是主要的动机——是用作 STL 算法的参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 按降序排序：</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),[](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) &#123; <span class="hljs-keyword">return</span> x&gt;y; &#125;);<br></code></pre></td></tr></table></figure><p>因此，lambda 表达式显著地增加了泛型编程的吸引力。</p><p>在 C++11 之后，C++14 添加了泛型 lambda 表达式（<a href="05.md#54-%E6%B3%9B%E5%9E%8B-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§5.4</a>）和移动捕获（<a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>）。</p><h3 id="4-3-2-变参模板"><a href="#4-3-2-变参模板" class="headerlink" title="4.3.2 变参模板"></a>4.3.2 变参模板</h3><p>2004 年，Douglas Gregor、Jaakko Järvi 和 Gary Powell（当时都在印第安纳大学）提出了<strong>变参模板</strong> [Gregor et al. 2004] 的特性，用来：</p><blockquote><p>直接解决两个问题：</p><ul><li>不能实例化包含任意长度参数列表的类模板和函数模板。</li><li>不能以类型安全的方式传递任意个参数给某个函数</li></ul></blockquote><p>这些都是重要目标，但我起初发现其解决方案过于复杂，写法太过晦涩，按我的品味其编程风格又太递归。不过在 Douglas Gregor 于 2004 年做的精彩演示之后，我改变了主意并全力支持这项提案，帮助它在委员会顺利通过。我被说服的部分原因是变参模板和当时的变通方案在编译时间上的对比测量。编译时间过长的问题随模板元编程的大量使用（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）变得越来越严重，对此变参模板是一项重大（有时是 20 倍）改进。可惜，变参模板越变越流行，也成了 C++ 标准库中必需的部分，以至编译时间的问题又出现了。不过，成功的惩罚（在当时）还是在遥远的将来。</p><p>变参模板的基本思路是，递归构造一个<strong>参数包</strong>，然后在另一个递归过程来使用它。递归技巧是必须的，因为参数包中的每个元素都有它自己的类型（和大小）。</p><p>考虑 <code>printf</code> 的一种实现，能够处理可由标准库 iostream 的输出运算符 <code>&lt;&lt;</code> 输出的每种类型 [Gregor 2006]：</p><blockquote><p>为了创建类型安全的 <code>printf()</code>，我们采用以下策略：写出字符串直至碰到第一个格式说明符，按格式打印相应的值，然后递归调用 <code>printf()</code> 来打印字符串剩下部分和其余各值。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s, <span class="hljs-type">const</span> T&amp; value, <span class="hljs-type">const</span> Args&amp;... args)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (*s) &#123;<br>        <span class="hljs-keyword">if</span> (*s == <span class="hljs-string">&#x27;%&#x27;</span> &amp;&amp; *++s != <span class="hljs-string">&#x27;%&#x27;</span>) &#123; <span class="hljs-comment">// 忽略 % 后的字符：</span><br>                                        <span class="hljs-comment">// 我们已经知道要打印的类型了！</span><br>            std::cout &lt;&lt; value;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(++s, args...);<br>        &#125;<br>        std::cout &lt;&lt; *s++;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;extra arguments provided to printf&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 <code>&lt;typename T, typename... Args&gt;</code> 指定了一个传统的列表，有头（<code>T</code>）和尾（<code>Args</code>）。每次调用会处理头，然后以尾为参数来调用自身。普通字符会被简单打印，而格式符 <code>%</code> 则表示某个参数要被打印了。Doug（当时他住在印第安纳州）提供了一个测试例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg = <span class="hljs-string">&quot;The value of %s is about %g (unless you live in %s).\n&quot;</span>;<br><span class="hljs-built_in">printf</span>(msg, std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;pi&quot;</span>), <span class="hljs-number">3.14159</span>, <span class="hljs-string">&quot;Indiana&quot;</span>);<br></code></pre></td></tr></table></figure><p>结果会打印</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">The value <span class="hljs-keyword">of</span> <span class="hljs-literal">pi</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">about</span> <span class="hljs-number">3.14159</span> (unless you live <span class="hljs-keyword">in</span> Indiana).<br></code></pre></td></tr></table></figure><p>这个实现的好处之一是，和标准的 <code>printf</code> 不同，用户定义的类型也和内建类型一样会得到正确处理。通过使用 <code>&lt;&lt;</code> 也避免了类型指示符和参数类型之间的不匹配，比如 <code>printf(&quot;%g %c&quot;,&quot;Hello&quot;,7.2)</code>。</p><p>这个 <code>printf</code> 所展示的技巧是 C++20 <code>format</code>（<a href="09.md#937-%E6%A0%BC%E5%BC%8F%E5%8C%96">§9.3.7</a>）的基础之一。</p><p>变参模板的缺点是容易导致代码膨胀，因为 N 个参数意味着模板的 N 次实例化。</p><h3 id="4-3-3-别名"><a href="#4-3-3-别名" class="headerlink" title="4.3.3 别名"></a>4.3.3 别名</h3><p>C 定义类型别名的机制是靠 <code>typedef</code>。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">double</span> <span class="hljs-params">(*pf)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;   <span class="hljs-comment">// pf 是一个函数指针，该函数接受一个 int</span><br>                             <span class="hljs-comment">// 返回一个 double</span><br></code></pre></td></tr></table></figure><p>这是有点诘屈聱牙，但是类型别名在 C 和 C++ 代码中非常有用，使用非常普遍。从最初有 C++ 模板的时候，人们就一直考虑是否可以有 <strong>typedef 模板</strong>；如果可以，它们应该是什么样子。2002 年时，Herb Sutter 提出一个方案 [Sutter 2002]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> A, <span class="hljs-keyword">typename</span> B&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">typedef</span> X&lt;T,<span class="hljs-type">int</span>&gt; Xi;  <span class="hljs-comment">// 定义别名</span><br>Xi&lt;<span class="hljs-type">double</span>&gt; Ddi;                            <span class="hljs-comment">// 相当于 X&lt;double, int&gt;</span><br></code></pre></td></tr></table></figure><p>在此基础之上，又经历了冗长的邮件列表讨论，Gabriel Dos Reis（当时在法国国立计算机及自动化研究院）和 Matt Marcus（Adobe）解决了特化相关的若干棘手问题，并引入 David Vandevoorde 称之为<strong>别名模板</strong>的简化语法 [Dos Reis and Marcus 2003]。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> A&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyVector</span> &#123; <span class="hljs-comment">/* ... */</span>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">using</span> Vec = MyVector&lt;T, MyAlloc&lt;T&gt; &gt;;<br></code></pre></td></tr></table></figure><p>其中的 <code>using</code> 语法，即要引入的名字总是出现在前面，则是我的建议。</p><p>我和 Gabriel Dos Reis 一道把这个特性推广成一个（几乎）完整的别名机制，并最终得到接受 [Stroustrup and Dos Reis 2003c]。即便不涉及模板，它也给了人们一种写法上的选择：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">double</span> <span class="hljs-params">(*analysis_fp)</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;Student_info&gt;&amp;)</span></span>;<br><br><span class="hljs-keyword">using</span> analysis_fp = <span class="hljs-built_in">double</span> (*)(<span class="hljs-type">const</span> vector&lt;Student_info&gt;&amp;);<br></code></pre></td></tr></table></figure><p>类型和模板别名是某些最有效的零开销抽象及模块化技巧的关键。别名让用户能够使用一套标准的名字而同时让各种实现使用各自（不同）的实现技巧和名字。这样就可以在拥有零开销抽象的同时保持方便的用户接口。考虑某通讯库（利用了 Concepts TS [Sutton 2017] 和 C++20 的写法简化）中的一个实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;InputTransport Transport, MessageDecoder MessageAdapter&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InputChannel</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> InputMessage = MessageAdapter::InputMessage&lt;Transport::InputBuffer&gt;;<br>    <span class="hljs-keyword">using</span> MessageCallback = function&lt;<span class="hljs-built_in">void</span>(InputMessage&amp;&amp;)&gt;;<br>    <span class="hljs-keyword">using</span> ErrorCallback = function&lt;<span class="hljs-built_in">void</span>(<span class="hljs-type">const</span> error_code&amp;)&gt;;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>概念和别名对于规模化地管理这样的组合极有价值。</p><p><code>InputChannel</code> 的用户接口主要由三个别名组成，<code>InputMessage</code>、<code>MessageCallback</code> 和 <code>ErrorCallback</code>，它们由模板的参数初始化而来。</p><p><code>InputChannel</code> 需要初始化它的传输层，该传输层由一个 <code>Transport</code> 对象表示。然而，<code>InputChannel</code> 不应该知道传输层的实现细节，所以它不应直接初始化它的 <code>Transport</code> 成员。变参模板（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）就派上了用场：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;InputTransport Transport, MesssageDecoder MessageAdapter&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InputChannel</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... TransportArgs&gt;</span><br><span class="hljs-function">        <span class="hljs-title">InputChannel</span><span class="hljs-params">(TransportArgs&amp;&amp;... transportArgs)</span></span><br><span class="hljs-function">            : _transport &#123;</span>forward&lt;TransportArgs&gt;(transportArgs)... &#125;<br>        &#123;&#125;<br>    <span class="hljs-comment">// ...</span><br>    Transport _transport;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有变参模板，就得定义出一个通用接口来初始化传输层，或者得把传输层暴露给用户。</p><p>这个漂亮的例子展示了如何把 C++11 的特性（加上概念）组合起来以优雅的零开销方案解决一个困难问题。</p><h3 id="4-3-4-tuple"><a href="#4-3-4-tuple" class="headerlink" title="4.3.4 tuple"></a>4.3.4 <code>tuple</code></h3><p>C++98 有个 <code>pair&lt;T,U&gt;</code> 模板；它主要用来返回成对的值，比如两个迭代器或者一个指针加上一个成功标志。2002 年时，Jaakko Järvi 在参考 Haskell、ML、Python 和 Eiffel 后，提议把这个思路进一步推广，变成 <code>tuple</code>（元组）[Järvi 2002]：</p><blockquote><p>元组是大小固定而成员类型可以不同的容器。作为一种通用的辅助工具，它们增加了语言的表现力。举几个元组类型一般用法的例子：</p><ul><li>作为返回类型，用于需要超过一个返回类型的函数</li><li>编组相关的类型或对象（如参数列表中的各条目）成为单个条目</li><li>同时赋多个值</li></ul></blockquote><p>对于特定的设计意图，定义一个类，并在里面对成员进行合理命名、清晰表述成员间的语义关系，通常会是最好的做法。Alisdair Meredith 在委员会内力陈以上观点，劝阻在接口中过度使用未命名的类型。然而，当撰写泛型代码时，把多个值打包到一个元组中作为一个实体进行处理往往能简化实现。元组对于不值得命名、不值得设计类的一些中间情况特别有用。</p><p>比如，考虑一个只需返回三个值的矩阵分解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SVD</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; A)</span> -&gt; tuple&lt;Matrix, Vector, Matrix&gt;</span><br><span class="hljs-function"></span>&#123;<br>    Matrix U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_tuple</span>(U,S,V);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix A, U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">tie</span>(U,S,V) = <span class="hljs-built_in">SVD</span>(A); <span class="hljs-comment">// 使用元组形式</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，<code>make_tuple()</code> 是标准库函数，可以从参数中推导元素类型来构造 <code>tuple</code>，<code>tie()</code> 是标准库函数，可以把 <code>tuple</code> 的成员赋给有名字的变量。</p><p>使用 C++17 的结构化绑定（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>），上面例子可简化为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SVD</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; A)</span> -&gt; tuple&lt;Matrix, Vector, Matrix&gt;</span><br><span class="hljs-function"></span>&#123;<br>    Matrix U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;U,S,V&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix A;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">auto</span> [U,S,V] = <span class="hljs-built_in">SVD</span>(A); <span class="hljs-comment">// 使用元组形式和结构化绑定</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进一步的写法简化被提议加入 C++20 [Spertus 2018]，但没来得及成功通过：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">tuple <span class="hljs-title">SVD</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; A)</span> <span class="hljs-comment">// 从返回语句中推导出元组模板参数</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;U,S,V&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>为什么 <code>tuple</code> 不是语言特性？我不记得当时有人这么问过，尽管一定有人想到过这一点。长期以来（自 1979 年），我们的策略就是，如果能合理地将新特性以库的形式加入 C++，就不要以语言特性加入；如果不能，就要改进抽象机制使其成为可能。这一策略有显而易见的优势：</p><ul><li>通常对一个库做试验比对一个语言特性做试验更容易，这样我们就更快地得到更好的反馈。</li><li>库可以早在所有编译器升级到支持新特性之前就得到严肃使用。</li><li>抽象机制（类，模板等）上的改进，能在眼前问题之外提供帮助。</li></ul><p><code>tuple</code> 以 Boost.Tuple 为基础构建，其实现之巧妙也足以让众人引以为傲。在这一特性上，并没有出现运行期效率方面的理由，使我们去偏向一个语言实现而不是库实现。这让人颇为敬佩。</p><p>参数包就是一个拥有编译器支持接口的元组的例子（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。</p><p>元组大量用于 C++ 和其他语言（例如 Python）交互的程序库里。</p><h2 id="4-4-C-11：提高静态类型安全"><a href="#4-4-C-11：提高静态类型安全" class="headerlink" title="4.4 C++11：提高静态类型安全"></a>4.4 C++11：提高静态类型安全</h2><p>依赖静态类型安全有两大好处：</p><ul><li>明确意图<ul><li>帮助程序员直接表达想法</li><li>帮助编译器捕获更多错误</li></ul></li><li>帮助编译器生成更好的代码。</li></ul><p>第二点是第一点的结果。受 Simula 的启发，我对 C++ 的目标是要提供一个灵活可扩展的静态类型系统。目的不仅是类型安全，还要能够直接表达细粒度的区别，例如物理单位检查（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）。一段只用了内建类型如整型和浮点型写成的程序，也算是类型安全但却没有由此带来特别的安全优势。那样的代码没有直接表达应用中的概念。特别需要指出，<code>int</code> 或者 <code>string</code> 几乎可以表达任何东西，所以传递这样的值就完全没有给出被传递值的任何语义信息。</p><p>C++11 中与类型安全直接相关的改进有：</p><ul><li>对于线程和锁的类型安全接口——避免 POSIX 和 Windows 在并发代码中对 <code>void**</code> 及宏的依赖（<a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）</li><li>范围 <code>for</code>——避免错误地指定范围（<a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）</li><li>移动语义——解决指针的过度使用问题（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>资源管理指针（<code>unique_ptr</code> 和 <code>shared_ptr</code>（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>））</li><li>统一初始化——让初始化更通用，更一致，更安全（<a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）</li><li><code>constexpr</code>——消除多处（无类型和无作用域的）宏的使用（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）</li><li>用户定义的字面量——让用户定义类型更像内建类型（<a href="#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>）</li><li><code>enum class</code>——消除一些涉及整型常量的弱类型做法</li><li><code>std::array</code>——避免内建数组不安全地“退化”成指针</li></ul><p>委员会一直收到建议，应当通过禁止不安全特性（例如，废弃像内建数组和类型转换这样的 C 风格特性）来改善类型安全。然而，移除特性（“取缔”它们）的尝试一再失败，因为用户无视移除的警告并坚持要求实现的提供者继续支持这些特性。一个更可行的方式似乎是给用户提供使用指南和实施指南的手段，同时保持标准本身继续和先前的版本兼容（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><h2 id="4-5-C-11：支持对库的开发"><a href="#4-5-C-11：支持对库的开发" class="headerlink" title="4.5 C++11：支持对库的开发"></a>4.5 C++11：支持对库的开发</h2><p>设计 C++ 基础库，往往要在性能和易用性方面同 C++ 及其他语言的内置功能进行竞争。这时，查找规则、重载决策、访问控制、模板实例化规则等特性之中的微妙之处会组合起来，产生强大的表达能力，但同时也暴露出可怕的复杂性。</p><h3 id="4-5-1-实现技巧"><a href="#4-5-1-实现技巧" class="headerlink" title="4.5.1 实现技巧"></a>4.5.1 实现技巧</h3><p>有些实现技巧实属“黑魔法”，不应当暴露给非专家。大部分程序员可以愉快地编写多年好的 C++ 代码，而不用了解这些复杂手段和神秘技巧。遗憾的是，初学者们一拥而上去研究这些最可怕的特殊代码，并从给别人（经常是错误地）解释它们的过程中得到巨大的自豪感。博主和演讲者们通过显摆令人提心吊胆的例子抬高他们的名望。这是 C++ 语言复杂性名声的一个主要来源。在其他语言中，要么不提供这样的优化机会，要么手段被藏在了优化器内部。</p><p>我不能在此深入细节，就只提一个技巧，它在 C++11 的发展中作为关键技巧出现，并在基于模板的库（包括 C++ 标准库）中广为使用。它以奇怪的缩写为人所知：<strong>SFINAE</strong>（Substitution Failure Is Not An Error，替换失败不是错误）。</p><p>你如何表达一个当且仅当某个谓词为真时才有的操作？概念为 C++20 提供了这样的支持（GCC 自 2015 年开始支持），但在 21 世纪早期，人们不得不依赖于晦涩的语言规则。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pair</span> &#123;<br>    T first;<br>    U second;<br>    <span class="hljs-comment">// ...</span><br>    enable_if&lt;is_copy_assignable&lt;T&gt;::value<br>              &amp;&amp; is_copy_assignable&lt;U&gt;::value,pair&amp;&gt;::type<br>        <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> pair&amp;);<br>    <span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这样，当且仅当 <code>pair</code> 的两个成员都有拷贝赋值操作时 <code>pair</code> 才有拷贝赋值操作。这超乎寻常的丑陋，但它对于定义和实现基础库也超乎寻常的有用——在概念还没有出现时。</p><p>要点在于，如果成员都有拷贝赋值，<code>enable_if&lt;…,pair&amp;&gt;::type</code> 会成为一个普通的 <code>pair&amp;</code>，否则它的实例化就会失败（因为 <code>enable_if</code> 没有为赋值提供一个返回类型）。这里 SFINAE 就起作用了：替换失败不是错误；失败的结果就如同整条声明不曾出现一样。</p><p>这里的 <code>is_copy_assignable</code> 是一个 <code>type trait</code>（类型特征），C++11 提供了数十个这样的特征以便程序员在编译期询问类型的属性。</p><p><code>enable_if</code> 元函数由 Boost 开创并成为 C++11 的一部分。一个大致合理的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">bool</span> B, <span class="hljs-keyword">typename</span> T = <span class="hljs-type">void</span>&gt;<br><span class="hljs-keyword">struct</span> enable_if &#123;&#125;; <span class="hljs-comment">// false 的情况：里面没有 type</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">enable_if</span>&lt;<span class="hljs-literal">true</span>, T&gt; &#123; <span class="hljs-keyword">typedef</span> T type; &#125;; <span class="hljs-comment">// type 是 T</span><br></code></pre></td></tr></table></figure><p>SFINAE 的精确规则非常微妙而难以驾驭，但是在用户的不断压力下，它们在 C++11 的发展过程中变得越来越简单和通用。SFINAE 的一个附带收获是，它从内部显著改善了编译器，因为编译器必须能够从失败的模板实例化中进行无副作用的回退。这就大大阻止了编译器对非本地状态的使用。</p><h3 id="4-5-2-元编程支持"><a href="#4-5-2-元编程支持" class="headerlink" title="4.5.2 元编程支持"></a>4.5.2 元编程支持</h3><p>二十一世纪的头十年对于 C++ 元编程来说有点像是无法无天的美国西部拓荒时代，新的技巧和应用在仅有基本模板机制支持的情况下被不断尝试。那些基本机制被反复使用到令人痛苦。错误信息可谓糟糕透顶，编译时间经常奇慢无比，编译器资源（如内存、递归深度和标识符长度）会轻易耗尽。同时，人们纷纷重新发现同样的问题，并重新发明一些基本技巧。显然，我们需要更好的支持。改进尝试采用了两条（至少理论上）互补的路径：</p><ul><li><strong>语言</strong>：概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>），编译期函数（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>），lambda 表达式（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>），模板别名（<a href="#433-%E5%88%AB%E5%90%8D">§4.3.3</a>），以及更精确的模板实例化规范（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</li><li><strong>标准库</strong>：<code>tuple</code>（<a href="#434-tuple">§4.3.4</a>），类型特征（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>），以及 <code>enable_if</code>（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</li></ul><p>遗憾的是，概念在 C++11（<a href="06.md#62-c0x-%E6%A6%82%E5%BF%B5">§6.2</a>）中失败了，这给（通常复杂得可怕而且容易出错的）权宜之计留下了生存空间，典型情况会涉及类型特征和 <code>enable_if</code>（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</p><h3 id="4-5-3-noexcept-规约"><a href="#4-5-3-noexcept-规约" class="headerlink" title="4.5.3 noexcept 规约"></a>4.5.3 <code>noexcept</code> 规约</h3><p>起初的异常设计没有办法表明某个异常可能会从某函数中抛出。我仍然认为那才是正确的设计。为了让异常为 C++98 接纳，我们不得不加入异常规约，来列举一个函数会抛出那些异常 [Stroustrup 1993]。使用异常规约可选，并会在运行期进行检查。正如我担心的那样，这带来了维护的问题，在展开路径上对异常反复检查增加的运行期开销，还有源代码膨胀。在 C++11 中，异常规约被废弃 [Gregor 2010]，而到了 C++17，我们终于（一致同意）移除了异常规约这个特性。</p><p>一直有人希望能够在编译时检查函数会抛出什么异常。从类型理论的角度，在小规模程序中，在有高速编译器和对代码完全控制的情况下，那当然行得通。委员会一再拒绝这种想法，原因是它不能扩展到由数十（或更多）组织维护的百万行代码规模的程序上 [Stroustrup 1994]。参见（<a href="07.md#74-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%AF%E6%8C%81">§7.4</a>）。</p><p>没有异常规约，库实现者们就要面对一个性能问题：在许多重要场合，一个库实现者需要知道一个拷贝操作是否会抛异常。如果会，就必须拿到一份拷贝以避免留下一个无效对象（这样会违犯异常保证 [Stroustrup 1993]）。如果不会，我们可以直接写入到目标中。在这种场合，性能的差别可以非常显著，而最简单的异常规约 <code>throw()</code>，什么也不抛出，在此可以帮助判断。于是，在异常规约被弃之不用并最终从标准中移除的时候，我们基于 David Abrahams 和 Doug Gregor 的提案 [Abrahams et al. 2010; Gregor 2010; Gregor and Abrahams 2009] 引入了 <code>noexcept</code> 概念。</p><p>一个 <code>noexcept</code> 函数仍会被动态检查。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <code>do_something()</code> 抛异常，程序会被终止。这样操作恰好非常接近零开销，因为它简单地短路了通常的异常传播机制。参见（<a href="07.md#73-noexcept-%E8%A7%84%E7%BA%A6">§7.3</a>）。</p><p>还有一个条件版本的 <code>noexcept</code>，用它可以写出这样的模板，其实现依赖于某参数是否会抛异常。这是最初促成 <code>noexcept</code> 的用例。例如，下面代码中，当且仅当 <code>pair</code> 的两个元素都有不抛异常的移动构造函数时，<code>pair</code> 的移动构造函数才会声明不抛异常：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> First, <span class="hljs-keyword">typename</span> Second&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">pair</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> First2, <span class="hljs-keyword">typename</span> Second2&gt;<br>    <span class="hljs-built_in">pair</span>(pair&lt;First2, Second2&gt;&amp;&amp; rhs)<br>        <span class="hljs-built_in">noexcept</span>(is_nothrow_constructible&lt;First, First2&amp;&amp;&gt;::value<br>              &amp;&amp; is_nothrow_constructible&lt;Second, Second2&amp;&amp;&gt;::value)<br>    : <span class="hljs-built_in">first</span>(<span class="hljs-built_in">move</span>(rhs.first)),<br>      <span class="hljs-built_in">second</span>(<span class="hljs-built_in">move</span>(rhs.second))<br>    &#123;&#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中的 <code>is_nothrow_constructible&lt;&gt;</code> 是 C++11 标准库的类型特征（type traits）之一（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</p><p>在这相对底层和非常通用的层级写出最优代码可不简单。在基础层面上，懂得到底该按位拷贝，该移动，还是该按成员拷贝，会带来非常大的区别。</p><h2 id="4-6-C-11：标准库组件"><a href="#4-6-C-11：标准库组件" class="headerlink" title="4.6 C++11：标准库组件"></a>4.6 C++11：标准库组件</h2><p>C++ 跟其他现代语言比一直有个小巧的标准库。此外，大多标准库组件都很基础，而不是试图处理应用层面的任务。不过，C++11 增加了几个关键的库组件来支持特定任务：</p><ul><li><code>thread</code>——基于线程和锁的并发</li><li><code>regex</code>——正则表达式</li><li><code>chrono</code>——时间</li><li><code>random</code>——随机数产生器和分布</li></ul><p>和大量的商业支持程序库相比，这显然小得可怜，但这些组件质量很高，并且跟之前的标准 C++ 相比数量也多多了。</p><p>设计这些组件，是要服务于一些特定任务。在这些任务中，它们为程序员提供了重大帮助。遗憾的是，这些库来自不同背景，体现在接口风格上，就出现了差异；除了要灵活和高性能之外它们没有一致的整体设计哲学。C++11 在合入一个组件方面没有明晰的标准（C++98 有一些 [Stroustrup 1994]）。更准确地说，我们只是从现有的、已被社区证明成功的组件中接收组件进来。很多组件来自 Boost（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。</p><p>如果你需要使用正则表达式，标准库中新加入的 <code>regex</code> 就是个巨大改进了。类似，加入无序容器（哈希表），如 <code>unordered_map</code>，为很多程序员省去了大量繁琐的工作，使之可以产出更好的程序。然而，这些库组件并没有对人们组织代码的方式产生重大影响，所以我在此不对这些库组件的细节展开讨论。</p><p><code>regex</code> 库主要是 John Maddock 的工作 [Maddock 2002]。</p><p>哈希表不巧错过了 C++98 的截止时间，因而出现在了 C++0x 的第一批提案之中 [Austern 2002]。它们被称做无序的（例如 <code>unordered_map</code>），是为了区别于老的、有序的标准容器（例如 <code>map</code>），也是因为较明显的名字（例如 <code>hash_map</code>）已经在 C++11 之前被其他库大量使用了。另外，<code>unordered_map</code> 也可以说是个更好的名字，因为它指出了类型提供什么，而不是它是如何实现的。</p><p><code>random</code> 库提供了分布函数和随机数产生器，其复杂性被誉为“每个随机数库都想长成的样子”。但它对初学者或者一般用户（常需要随机数）并不易用。它在 2002 年由 Jens Maurer [Maurer 2002] 提出，并在 2006 年经由费米国家实验室的一群人修订 [Brown et al. 2006]，随即被接受。</p><p>相比之下，Howard Hinnant 的 <code>chrono</code> 库 [Hinnant et al. 2008] 处理时间点和时间间隔，在提供复杂功能的同时仍保持了易用性。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::chrono;  <span class="hljs-comment">// 在子命名空间 std::chrono</span><br><span class="hljs-keyword">auto</span> t0 = system_clock::<span class="hljs-built_in">now</span>();<br><span class="hljs-built_in">do_work</span>();<br><span class="hljs-keyword">auto</span> t1 = system_clock::<span class="hljs-built_in">now</span>();<br>cout &lt;&lt; <span class="hljs-built_in">duration_cast</span>&lt;milliseconds&gt;(t1-t0).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;msec\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>其中的 <code>duration_cast</code> 把依赖于时钟的“嘀嗒”节拍数转换为程序员选用的时间单位。</p><p>使用如此简单的代码，你可以让大一学生都能感受到不同算法和数据结构的代价差异。<code>chrono</code> 为 <code>thread</code> 库提供了时间支持（<a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）。</p><p>到了 C++20，<code>chrono</code> 得到进一步增强，加入了处理日期和时区的功能（<a href="09.md#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>）。C++20 也允许把上面的例子简化为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; t1-t0 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这就会把 <code>t0</code> 和 <code>t1</code> 之间的时间差自动以合适的单位进行输出。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：参考 Python 在 PEP 20—The Zen of Python 中的不同态度：“应该有且仅有一种明显的完成任务的方式（There should be one—and preferably only one—obvious way to do it）。”<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>译注：下面的代码引自 2006 年的论文，但 <code>operator=</code> 的实现不符合现代惯用法：一般要么把参数设为 <code>clone_ptr p</code>，这就成了一个可以同时适配拷贝或移动的通用赋值函数；要么在函数体内进行一次移动构造，先 <code>clone_ptr temp(std::move(p));</code> 再 <code>std::swap(ptr, temp.ptr);</code>。否则，当传递的实参是 <code>std::move</code> 的结果（xvalue）而不是真正的临时对象（prvalue）时，代码的行为会不符合预期。当然，就如下面 Bjarne 讨论到的，在 2006 年应该还没有 xvalue 和 prvalue 的概念。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">C++11：感觉像是门新语言</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_02/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_02/</id>
    <published>2024-10-29T13:21:09.460Z</published>
    <updated>2024-10-29T13:24:49.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-背景：C-的-1979–2006"><a href="#2-背景：C-的-1979–2006" class="headerlink" title="2. 背景：C++ 的 1979–2006"></a>2. 背景：C++ 的 1979–2006</h1><p>C++ 从 1979 年到 2006 年的历史记录在我的 HOPL 论文中 [Stroustrup 1993, 2007]。在那段时间里，C++ 从一个单人的研究项目成长为大约有 300 万程序员的社区。</p><h2 id="2-1-第一个十年"><a href="#2-1-第一个十年" class="headerlink" title="2.1 第一个十年"></a>2.1 第一个十年</h2><p>后来成为了 C++ 的东西始于 1979 年 4 月，名为<strong>带类的 C</strong>（C with Classes）。我的目标是设计一个工具，它既拥有直接而高效的处理硬件的能力（例如编写内存管理器、进程调度器和设备驱动程序），又同时可以有类似 Simula 的功能来组织代码（例如“强”静态可扩展类型检查、类、多级类和协程）。我想用这个工具编写一版 Unix 内核，可以在通过局域网或共享内存互联的多个处理器上运行。</p><p>我选择 C 作为我工作的基础，因为它足够好，并且在办公室里就能得到很好的支持：我的办公室就在 Dennis Ritchie 和 Brian Kernighan 走廊对面。然而，C 语言并不是我考虑的唯一语言。Algol68 当时深深吸引了我，我还是 BCPL 和其他一些机器层面的语言的专家。C 后来的巨大成功在当时还完全不确定，但是 Brian Kernighan 和 Dennis Ritchie 杰出的介绍和手册 [Kernighan and Ritchie1978] 已经出现，Unix 也正开始它的胜利路程。</p><p>最初我实现的是一个预处理器，它将“带类的 C” 差不多逐行翻译成 C。1982 年，在“带类的 C”的用户数量增长到了几十人的时候，这种方法已经显得无法把控了。所以我写了一个传统的编译器，叫作 <strong>Cfront</strong>，1983 年 10 月第一次给别人使用。Cfront 是一个传统的编译器，它有一个词法分析器、一个构建抽象语法树的语法分析器、一个用类型装饰语法树的类型检查器，以及一个重新排列 AST 以提高生成代码的运行期效率的高层次优化器。关于 Cfront 的本质有很多困惑，因为当时它最终输出的是 C（优化的，不是特别可读的 C）。我生成了 C，这样我就不必直接处理当年正在使用的众多的（非标准化）链接器和优化器。不过，Cfront 一点也不像传统的预处理器。你可以在计算机历史博物馆的源代码收藏 [McJones 2007–2020] 中找到一份带有文档的 Cfront 源代码。Cfront 从“带类的 C”自举为 C++，所以第一个 C++ 编译器是用（简单的）C++ 写的，适合非常小的计算机（内存小于 1MB，处理器速度小于 1MHz）。</p><p>“带类的 C” 添加到 C 上的第一个特性是类。我从早期在 Simula 中的使用中了解到它们的力量，在 Simula 中，类是严格静态、但又可扩展的类型系统的关键。我立即添加了构造函数和析构函数。它们当时非常新颖，但从我的计算机架构和操作系统背景来看，我认为它们也不算很新奇，因为我需要一个机制来建立一个工作环境（构造函数）和一个逆操作来释放运行期获得的资源（析构函数）。以下摘自我 1979 年的实验记录本：</p><blockquote><ul><li>“new 函数”为成员函数创建运行的环境</li><li>“delete 函数”则执行相反的操作</li></ul></blockquote><p>“new 函数”和“delete 函数”这两个术语是“构造函数”和“析构函数”的原始术语。直到今天，我仍然认为构造函数和析构函数是 C++ 的真正核心。另见（<a href="#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）和（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><p>当时，除了 C 语言，基本上所有语言都有适当的函数参数类型检查。我认为没有它我无法完成任何重要的事情。因此，在我的部门主管 Alexander Fraser 的鼓励下，我立即添加了（可选的）函数参数声明和参数检查。这就是 C 语言中现在所说的函数原型。1982 年，在看到让函数参数检查保持可选的效果后，我将其设为强制的。这导致了十几二十年里关于与 C 不兼容的大声抱怨。人们想要保留他们的类型错误，或者至少许多人大声说他们不想检查，并以此作为不使用 C++ 的借口。这个小事实也许能让人们认识到演化一门被大量使用的语言会涉及到的各种问题。</p><p>鉴于过于狭隘的 C 和 C++ 爱好者之间偶尔会恶语相向，或许值得指出，我一直是 Dennis Ritchie 和 Brian Kernighan 的朋友，在 16 年里几乎天天同他们一起吃午饭。我从他们那里学到了很多，现在还经常同 Brian 见面。我将一些对 C++ 语言的贡献 [Stroustrup 1993] 归功于他们两位，而我自己也是 C 的主要贡献者（例如函数定义语法、函数原型、<code>const</code>  和 <code>//</code> 注释）。</p><p>为了能够理性思考 C++ 的成长，我想出了一套设计规则。这些在 [Stroustrup 1993, 1994] 中有介绍，所以这里我只提一小部分：</p><blockquote><ul><li>不要陷入对完美的徒劳追求。</li><li>始终提供过渡路径。</li><li>说出你的意图（即，能够直接表达高层次的思路）。</li><li>不要隐式地在静态类型系统方面违规。</li><li>为用户定义类型提供和内置类型同样好的支持。</li><li>应取消预处理器的使用。</li><li>不要给 C++ 以下的低级语言留有余地（汇编语言除外）。</li></ul></blockquote><p>这些目标的野心并不小。其中某些目标，现在 2020 年了我依然在为之努力工作。在 1980 年代早期到中期，我给 C++ 添加了更多的语言功能：</p><ul><li><strong>1981 年</strong>：<code>const</code>——支持接口和符号常量的不变性。</li><li><strong>1982 年</strong>：虚函数——提供运行期多态。</li><li><strong>1984 年</strong>：引用——支持运算符重载和简化参数传递。</li><li><strong>1984 年</strong>：运算符和函数重载——除了算术和逻辑运算符外，还包括：允许用户定义 <code>=</code>（赋值）、<code>()</code>（调用；支持函数对象（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>））、<code>[]</code>（下标访问）和 <code>-&gt;</code>（智能指针）。</li><li><strong>1987 年</strong>：类型安全链接——消除许多来自不同翻译单元中不一致声明的错误。</li><li><strong>1987 年</strong>：抽象类——提供纯接口。</li></ul><p>在 1980 年代后期，随着计算机能力的急剧增强，我对大型软件更感兴趣，并做了如下补充：</p><ul><li>模板——在经历了多年使用宏进行泛型编程的痛苦之后，更好地支持泛型编程。</li><li>异常——试图给混乱的错误处理带来某种秩序；RAII（<a href="#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）便是为此目标而设计的。</li></ul><p>后面这些功能并没有受到普遍欢迎（例如，见（<a href="07.md#7-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">§7</a>））。部分原因是社区已经变得庞大和难以管理。ANSI 标准化已经开始，所以我不再能够私下实现和实验。人们坚持大规模的精心设计，坚持在认真实施之前进行广泛的辩论。我不能再在明知道不可能让每个人都满意的情况下，从一个最小的提议开始，把它发展成一个更完整的功能。例如，人们坚持到处使用笨重的带有 <code>template&lt;class T&gt;</code> 前缀的模板语法。</p><p>在 1980 年代末，“面向对象”的宣传变得震耳欲聋，淹没了我对 C++ 传达的讯息。我对 C++ 是什么和应当成为什么的看法被广泛忽视了——很多人甚至从未听说过。对于“面向对象”的某些定义来说，所有新语言都应是“纯面向对象的”。“不真正面向对象”被视为是糟糕的，不容争辩。</p><p>我从未使用过“C++ 是一种面向对象的编程语言”这种说法，这件事很多人并不知道，或者因为感到有些尴尬而有意忽略了。那时候，我的标准描述是</p><blockquote><p>C++ 是一门偏向系统编程的通用编程语言，它是</p><ul><li>更好的 C</li><li>支持数据抽象</li><li>支持面向对象编程</li><li>支持泛型编程</li></ul></blockquote><p>这个说法过去和现在都是准确的，但不如“万物皆对象！”这样的口号那么令人兴奋。</p><h2 id="2-2-第二个十年"><a href="#2-2-第二个十年" class="headerlink" title="2.2 第二个十年"></a>2.2 第二个十年</h2><p>ANSI C++ 委员会是 1989 年 12 月在华盛顿特区的一次会议上成立的，距离第一次使用“带类的 C”这个名称仅仅 10 年多的时间。大约有 25 名 C++ 程序员出席了会议。我出席了会议，还有另外一些近些年来依然活跃的 ISO C++ 标准委员会成员当时也在。</p><p>经过了惯例性的、大约十年的工作，该委员会终于发布了第一个标准：C++98。我和许多其他人自然更愿意更快地输出一个标准，但是委员会规则、过度的雄心和各种各样的延迟使我们在时间表方面与 Fortran、C 和其他正式标准化的语言站在了同一起跑线上。</p><p>形成 C++98 的工作是 HOPL3 论文的核心 [Stroustrup 2007]，所以这里我只简单总结一下。</p><h3 id="2-2-1-语言特性"><a href="#2-2-1-语言特性" class="headerlink" title="2.2.1 语言特性"></a>2.2.1 语言特性</h3><p>C++98 的主要语言特性是</p><ul><li>模板——无约束的、图灵完备的、对泛型编程的编译期支持，在我早期工作（<a href="#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）的基础上进行了许多细化和改进；这项工作仍在继续（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。</li><li>异常——一套在单独（不可见的）路径上返回错误值的机制，由调用方栈顶上的“在别处”的代码处理；见（<a href="07.md#7-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">§7</a>）。</li><li><code>dynamic_cast</code> 和 <code>typeid</code>——一种非常简单的运行期反射形式（“运行期类型识别”，又名 RTTI）。</li><li><code>namespace</code>——允许程序员在编写由几个独立部分组成的较大程序时避免名称冲突。</li><li>条件语句内的声明——让写法更紧凑和限制变量作用域。</li><li>具名类型转换——（<code>static_cast</code>、<code>reinterpret_cast</code> 和 <code>const_cast</code>）：消除了 C 风格的类型转换中的二义性，并使显式类型转换更加显眼。</li><li><code>bool</code>：一种被证明非常有用和流行的布尔类型；C 和 C++ 曾经使用整数作为布尔变量和常量。</li></ul><p>让我们看一个简单的 C++98 例子。<code>dynamic_cast</code> 是面向对象语言中常被称为类似“是某种”的概念的 C++ 版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something</span><span class="hljs-params">(Shape* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Circle* pc = <span class="hljs-built_in">dynamic_cast</span>&lt;Circle*&gt;(p)) &#123; <span class="hljs-comment">// p 是某种 Circle？</span><br>        <span class="hljs-comment">// ... 使用 pc 指向的 Circle ...</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// ... 不是 Circle，做其他事情 ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>dynamic_cast</code> 是一个运行期操作，依赖于存储在 Shape 的虚拟函数表中的数据。它通用、易用，并且与其他语言类似的功能一样高效。然而，<code>dynamic_cast</code> 变得非常不受欢迎，因为它的实现往往是复杂的，特殊情况下手动编码可能更高效（可以说这导致 <code>dynamic_cast</code> 违反了零开销原则）。在条件语句里使用声明很新颖，不过当时我认为我只是沿用了 Algol68 里的这个主意而已。</p><p>一种更简单的变种是使用引用而不是指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something2</span><span class="hljs-params">(Shape&amp; r)</span></span><br><span class="hljs-function"></span>&#123;<br>    Circle&amp; rc = <span class="hljs-built_in">dynamic_cast</span>&lt;Circle&amp;&gt;(r);  <span class="hljs-comment">// r 是某种 Circle！</span><br>    <span class="hljs-comment">// ... 使用 rc 引用的 Circle ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这简单地断言 <code>r</code> 指代一个 <code>Circle</code>，如果不是则抛出一个异常。思路就是，错误能够在本地被合理地处理时，使用指针和测试，如果不能则依赖引用和异常。</p><p>C++98 中最重要的技术之一是 RAII（Resource Acquisition Is Initialization, 资源获取即初始化）。那是我给它取的一个笨拙的名字，想法就是每个资源都应该有一个所有者，它由作用域对象表示：构造函数获取资源、析构函数隐式地释放它。这个想法出现在早期的“带类的 C”中，但直到十多年后才被命名。这里有一个我经常使用的例子，用来说明并非所有资源都是内存：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_fct</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span>  <span class="hljs-comment">// C 风格的资源管理</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE* p = <span class="hljs-built_in">fopen</span>(name, <span class="hljs-string">&quot;r&quot;</span>);  <span class="hljs-comment">// 打开文件 name 来读取</span><br>    <span class="hljs-comment">// ... 使用 p ...</span><br>    <span class="hljs-built_in">fclose</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>问题是，如果（在 <code>fopen()</code> 和 <code>fclose()</code> 的调用之间）我们从函数 <code>return</code> 了，或者 <code>throw</code> 了一个异常，或者使用了 C 的 <code>longjmp</code>，那么 <code>p</code> 指向的文件句柄就泄漏了。文件句柄泄漏会比内存泄漏更快地耗尽操作系统的资源。这个文件句柄是<strong>非内存资源</strong>的一个例子。</p><p>解决方案是将文件句柄表示为带有构造函数和析构函数的类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File_handle</span> &#123;<br>    FILE* p;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">File_handle</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* permissions);  <span class="hljs-comment">// 打开文件</span><br>    ~<span class="hljs-built_in">File_handle</span>();  <span class="hljs-comment">// 关闭文件</span><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>我们现在可以简化我们的用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_fct2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span>  <span class="hljs-comment">// RAII 风格的资源管理</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">File_handle <span class="hljs-title">p</span><span class="hljs-params">(name,<span class="hljs-string">&quot;r&quot;</span>)</span></span>;    <span class="hljs-comment">// 打开文件 name 来读取</span><br>    <span class="hljs-comment">// ... 使用 p ...</span><br>&#125; <span class="hljs-comment">// p 被隐式地关闭</span><br></code></pre></td></tr></table></figure><p>随着异常的引入，这样的资源句柄变得无处不在。特别的，标准库文件流就是这样一个资源句柄，所以使用 C++98 标准库，这个例子变成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_fct3</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">p</span><span class="hljs-params">(name)</span></span>;    <span class="hljs-comment">// 打开文件 name 来读取</span><br>    <span class="hljs-comment">// ... 使用 p ...</span><br>&#125; <span class="hljs-comment">// p 被隐式的关闭</span><br></code></pre></td></tr></table></figure><p>请注意，RAII 代码不同于传统的函数使用，它允许在库中一劳永逸地定义“清理内存”，而不是程序员每次使用资源时都必须记住并显式编写。至关重要的是，正确和健壮的代码更简单、更短，并且至少与传统风格一样高效。在接下来的 20 年里，RAII 已遍布 C++ 库。</p><p>拥有非内存资源意味着垃圾收集本身不足以进行资源管理。此外，RAII 加上智能指针（<a href="04.md#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）消除了对垃圾收集的需求。另见（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><h3 id="2-2-2-标准库组件"><a href="#2-2-2-标准库组件" class="headerlink" title="2.2.2 标准库组件"></a>2.2.2 标准库组件</h3><p>C++98 标准库提供了：</p><ul><li>STL——创造性的、通用的、优雅的、高效的容器、迭代器和算法框架，由 Alexander Stepanov 设计。</li><li>特征（trait）——对使用模板编程有用的编译期属性集（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</li><li><code>string</code>——一种用于保存和操作字符序列的类型。字符类型是一个模板参数，其默认值是 <code>char</code>。</li><li><code>iostream</code>——由 Jerry Schwartz 和标准委员会精心制作，基于我 1984 年的简单的数据流，处理各种各样的字符类型、区域设置和缓冲策略。</li><li><code>bitset</code>——一种用于保存和操作比特位集合的类型。</li><li><code>locale</code>——用来处理不同文化传统的精致框架，主要与输入输出有关。</li><li><code>valarray</code>——一个数值数组，带有可优化的向量运算，但遗憾的是，未见大量使用。</li><li><code>auto_ptr</code>——早期的代表独占所有权的指针；在 C++11 中，它被 <code>shared_ptr</code>（共享所有权）和 <code>unique_ptr</code>（独占所有权）（<a href="04.md#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）替代。</li></ul><p>毫无疑问，STL 框架是最为重要的标准库组件。我认为可以说，STL 和它开创的泛型编程技术挽救了 C++，使它成长为一种有活力的现代语言。像所有的 C++98 功能一样，STL 在其他地方已经有了广泛的描述（例如 [Stroustrup 1997, 2007]），所以在这里我只会给出一个简单的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(vector&lt;string&gt;&amp; v, list&lt;<span class="hljs-type">int</span>&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;string&gt;::iterator p<br>        = <span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">Less_than</span>&lt;string&gt;(<span class="hljs-string">&quot;falcon&quot;</span>));<br>    <span class="hljs-keyword">if</span> (p != v.<span class="hljs-built_in">end</span>())  &#123;  <span class="hljs-comment">// p 指向 &#x27;falcon&#x27;</span><br>        <span class="hljs-comment">// ... 使用 *p ...</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">// 没找到 &#x27;falcon&#x27;</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>    list&lt;<span class="hljs-type">int</span>&gt;::iterator q<br>        = <span class="hljs-built_in">find_if</span>(lst.<span class="hljs-built_in">begin</span>(), lst.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">Greater_than</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">42</span>));<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>标准库算法 <code>find_if</code> 遍历序列（由 <code>begin</code>&#x2F;<code>end</code> 定界）寻找谓词为真的元素。该算法在三个维度上都是通用的：</p><ul><li>序列元素的存储方式（这里是 <code>vector</code> 和 <code>list</code>）</li><li>元素的类型（这里是 <code>string</code> 和 <code>int</code>）</li><li>用于确定何时找到元素的谓词（此处为 <code>Less_than</code> 和 <code>Greater_than</code>）</li></ul><p>注意这里没有用到任何面向对象的方法。这是依赖模板的泛型编程，有时也被称为编译期多态。</p><p>模板的写法仍然很原始，但是从 2017 年左右开始，我可以使用 <code>auto</code>（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）、范围（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）和 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）来简化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">(vector&lt;string&gt;&amp; v, list&lt;<span class="hljs-type">int</span>&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">find_if</span>(v,[](<span class="hljs-type">const</span> string&amp; s) &#123; <span class="hljs-keyword">return</span> s&lt;<span class="hljs-string">&quot;falcon&quot;</span>; &#125;)<br>    <span class="hljs-keyword">if</span> (p!=v.<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">auto</span> q = <span class="hljs-built_in">find_if</span>(lst,[](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> x&gt;<span class="hljs-number">42</span>; &#125;)<br>    <span class="hljs-keyword">if</span> (q!=lst.<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-C-的-2006"><a href="#2-3-C-的-2006" class="headerlink" title="2.3 C++ 的 2006"></a>2.3 C++ 的 2006</h2><p>2006 年，我和 ISO C++ 委员会的大多数其他成员都对功能丰富的 C++0x 标准寄予厚望。计划在 2007 进行特性冻结，所以我们有一个合理的预期，C++0x 将是 C++08 或 C++09。事实上 C++0x 变成了 C++11，引出了关于十六进制 C++0xB 的笑话。</p><p>在我 2006 年的 HOPL 论文 [Stroustrup 2007] 中，我列出了 39 个提案，并预测前 21 个会进入 C++0x。有趣的是，我列表上的前 25 个建议中，有 24 个进入了 C++11。我把提案 22–25 列为“正在制定中，目标是在 2007 年 7 月进行投票”。令我惊喜的是，它们全都成功了。而提案 26–39 则连 C++17 都没有进入。这中间就留下了第 10 号提案“概念”，它有一个自己的长长的悲伤故事，不过最终还是以进入 C++20 而快乐收尾。</p><p>我和其他许多人对 C++0x 的延迟感到沮丧，并担心在面对来自更现代、资金更充足的替代品的竞争时，一个未经改进的 C++ 可能无法作为一种活的语言生存下去。在 2006 年，Java 的使用仍在增加，微软的 C# 也有大量的支持和营销。我在 2006 年的估计是 C++ 的使用在过去 4 年中首次略有下降。获取真实的数字很难，我的最佳估计（下降 7%）完全在误差范围内，但确实有理由去担心。类似 Java 和 C# 这样的语言会作出这样一种假设——并常常大声宣扬——C++ 没有生态位：</p><ul><li>“低级编程”可以由少量的 C 或汇编代码处理。</li><li>“高级编程”则可以使用一种带有巨大的运行时支持系统的更安全、更小并使用垃圾收集的语言来做，这样可以更好、更便宜、更高效地完成。</li><li>像 Java 和 C# 这样的托管语言使用垃圾收集和一致的运行期范围检查，使得不太专业的程序员能更有生产力，这样可以减少对高技能的开发人员的需求。</li><li>编程语言与平台的深度集成，并使用集成工具来进行支持，这对生产力和大型系统的构建至关重要。</li></ul><p>显然，我和许多其他人并不同意。但这些在过去和现在都是严肃的争辩，它们如果正确的话应该导致 C++ 被放弃使用。C++ 基于传统的编程语言模型，与底层操作系统分离，并由众多独立的工具供应者提供支持。托管语言往往是专有的；只有一个庞大而富有的组织才能开发所需的庞大基础设施和库。我和 C++ 社区中的其他许多人更喜欢不受公司控制的语言；这是我参加 ISO 标准工作的一个原因。</p><p>回想起来，2006 年可能是 C++ 的最低谷，但重要的技术事件也恰好在此时发生了：大约在 2005 年，历史上第一次单个处理器（单核）的性能停止提高，能效（“每瓦特的性能”）成为一个关键指标（尤其是对于服务器集群和手持设备）。计算经济学转而青睐更好的软件。硬件的进步再也不能完全掩盖语言或编程技术的低效。这样，执掌“利器”的高手跟差点的程序员或受工具链开销束缚的程序员相比，能赢得高一个数量级的经济优势，而这种优势十多年之后还依然存在。即使在今天，这些事实还没有被所有的教育和管理体制充分领会，但是现在有许多重要的任务，为它们花时间精心打造高性能的代码会获得巨大的回报。</p><p>另一个转折点来自供应商，他们试图通过定义标准接口（比如图形用户界面）将自己喜欢的语言强加给所有用户，而这只能通过使用他们喜欢的、通常是专有的语言来实现。比如谷歌对安卓系统使用 Java，苹果对 iOS 使用 Objective-C，微软对 Windows 使用 C#。应用程序供应商可以尝试通过使用一些编程方言来避开锁定，例如 Objective C++ [Objective C++ Wikipedia 2020] 或 C++&#x2F;CLI [ECMA International 2005]，但是这样写出的代码仍然不可移植。许多组织，比如 Adobe、谷歌和微软，他们的响应方式是使用 C++ 编写他们要求苛刻的应用程序的主要部分，然后为各种平台（如 Android、iOS 和 Windows）使用薄接口层。2006 年时这一趋势几乎不引人注目。</p><p>在便携式设备（尤其是智能手机）上，对能效和平台独立性的需求是彼此融合的。一个影响是，据我在 2018 年的最佳估计，自 2006 年以来 C++ 程序员的数量增长了约 50%，达到约 450 万名开发人员 [Kazakova 2015]。也就是说开发者每年增长 15 万人，十年来每年大约增长 4%。</p><p>2006 年，很少有人注意到硬件趋势对 C++ 固有优势的滋养。而社区和标准委员会正在关注新的语言特性和库，以增加 C++ 的实用性并提高对它的热情。包括我在内的一些委员感到迫切需要重大改进。其他人更关注于稳定语言和改进它的实现。一个标准委员会需要这两个群体，但创新和整顿之间不断的拉锯战是紧张的来源。就像在任何大型组织中一样，维护现状和服务当前用户的人有组织上优势。在《C++ 程序设计语言（第三版）》[Stroustrup 1997] 中，我引用了尼科洛·马基雅维利（Niccolò Machiavelli）的话：</p><blockquote><p>没有什么比开创一种新秩序更难于推行、更让人怀疑能否成功、处理起来更加危险。因为改革者会与所有从旧秩序中获利的人为敌，而所有从新秩序中获利的人却只是冷淡的捍卫者。</p></blockquote><p>我的观点是 C++ 需要显著的改进来更好地服务于它的用户群体。C++ 应用程序被大规模部署，但是新项目通常选择更流行的语言，一些成功的 C++ 项目被改写成这样的语言。举例来说，谷歌的许多大规模应用，如搜索，一直是基于他们的 map-reduce 框架 [Dean and Ghemawat 2004, 2008]。它就是 C++ 程序。然而，由于它因为商业原因是专有的，人们复制了它，而开源的 map-reduce 框架（Hadoop）出于各种原因是用 Java 实现的。这对于 C++ 社区来说是一件憾事。</p><p>开发转向其他语言的另一个重要原因是，模板提供的接口的灵活性使得使用所有 C++ 特性并提供稳定的 ABI 变得极其困难：可以灵活，也可以提供稳定的二进制接口，但大多数组织都做不到两者兼顾。我认为人们之所以需要 C++ 编写的程序提供 C、Java、C# 之类的接口，这是个促成因素。C++ 的 ABI 稳定性是一个真正的技术难题，尤其是因为 C++ 标准必须独立于平台。</p><p>更让 C++ 社区的问题雪上加霜的是，到了 2006 年，随着纸质出版的衰退，以及记者们关注更流行的技术和广告收入，大多数报道 C++ 的专业软件杂志已经消亡。Dr. Dobbs 期刊还支撑了几年（2009 年 2 月停刊）。C++ 会议被吸收到“面向对象”或一般软件开发会议中，剥夺了 C++ 社区展示新发展的场所。书籍仍在编写中，但程序员阅读的书籍越来越少（或至少购买的书越来越少，因为盗版变得越来越容易，因此统计数据变得越来越不可靠），在线资源变得越来越受欢迎。</p><p>一个更严重的问题是 C++ 在教育中的作用正在急剧下降。C++ 不再是“新的、有趣的”，而 Java 正作为一种更简单、更强大的语言被直接推向大学。美国高中计算机科学考试突然从 C++ 变成了 Java。在大学里，Java 作为入门语言的使用急剧增加。C++ 的教学质量也在下降，大多数课程优先选择 C 语言，或者认为严重依赖类层次结构的面向对象编程是唯一正确的方法。这两种方法都弱化了 C++ 的优势，并且需要大量使用宏。标准库（依靠泛型编程；（<a href="#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>））和 RAII（依赖构造函数&#x2F;析构函数对（<a href="#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>））经常被完全排除在基础课程之外，或者被放在一个所谓的“高级特性”部分，大多数学生要么从未接触过，要么认为它很可怕。教科书经常陷入晦涩难懂的细节。当然也有例外，但平均来说，呈现给学生的 C++ 远不是最佳的工程实践。在 2005 年，我接受了挑战，给大学一年级的学生教编程。我调查了大约二十本最流行的 C++ 编程教材，最后大声抱怨：</p><blockquote><p>如果那就是 C++，我也会不喜欢它！</p></blockquote><p>在用一本著名的教科书教了一年书后，我开始只用自己的教案，并且在 2008 年出版了《C++ 程序设计：原理与实践》（*Programming: Principles and Practice Using C++*）[Stroustrup 2008a]，但直到今天，许多 C++ 教学仍带有 1980 年代的特色。</p><p>尽管如此，C++ 的使用又开始增加了。我认为这是因为根本的技术趋势再次青睐 C++，并且在二十一世纪的第一个十年结束的时候，C++11 的出现也有所帮助。</p><p>Boost 库和 Boost 组织非常重要 [Boost 1998–2020]。1998 年，经验丰富的开发者及 WG21 的有影响力的成员 Beman Dawes 建立了一个“C++ 代码库网站”[Dawes 1998]，其明确目标是开发 C++ 库以确立现有实践，使得未来的标准化可以据此进行。在此之前，C++ 甚至从来没有一个公共的代码库。Boost 慢慢成长为一个活跃的组织，有新库的同行评审和一年一度的会议。Boost 库被广泛使用，最流行的被吸收到标准中（例如，<code>regex</code>（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）、<code>thread</code>（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）、<code>shared_ptr</code>（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）、<code>variant</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）和文件系统（<a href="08.md#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>））。对于 C++ 社区来说重要的是，Boost 库比它们的 ISO 标准版本早十多年，但仍被当作某种“预备标准”来信任。有许多委员会成员都参与了 Boost，特别是 Dave Abrahams、Doug Gregor、Jaakko Järvi、Andrew Sutton，当然还有 Beman Dawes。</p><p>到 2006 年，C++ 在业界已经不再是新鲜刺激的东西，但它遍布很多行业。在 C++ 诞生的电信行业，它一直被大量使用。从电信领域出发，它已经扩展到游戏（如 Unreal、PlayStation、Xbox 和 Douglas Adams 的《宇宙飞船泰坦》）、金融（如摩根士丹利和 Renaissance Technologies）、微电子（如英特尔和 Mentor Graphics）、电影（如皮克斯和 Maya）、航空航天（如洛克希德·马丁和美国国家航空航天局）和许多其他行业。</p><p>就我个人而言，我特别喜欢 C++ 在科学和工程中的广泛使用，比如高能物理（例如 CERN 欧洲核子研究中心、SLAC 国家加速器实验室、费米实验室）、生物学（例如人类基因组项目）、空间探索（例如火星漫游车和深空通信网络）、医学和生物学（例如断层扫描、常规成像、人类基因组项目和监控设备）等等。</p><h2 id="2-4-其他语言"><a href="#2-4-其他语言" class="headerlink" title="2.4 其他语言"></a>2.4 其他语言</h2><p>人们常常会寻找其他编程语言对 C++ 的直接技术影响。其实非常之少。典型情况是，影响涌现自共同的前代语言和共同思想（而非特定的现有语言）。扩展 C++ 的决定性理由往往与 C++ 社区中已经发现的问题有关。直接从流行语言中借鉴的情况并不常见，而且比人们想象的要困难得多。大多数标准委员会成员都掌握多种语言，并密切留意（其他语言中）有用的功能、库和技巧。</p><p>下面是其他语言在二十一世纪对 C++ 的某些真实或假想的影响：</p><ul><li><code>auto</code>——从初始化器推断类型的能力。它在现代语言中很流行，但也已由来已久。我不知它的最早起源，但我在 1983 年实现这个功能的时候，也并不认为它很新颖（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）。</li><li><code>tuple</code>——许多语言，特别是源自函数式编程传统的语言，都有元组，它通常是一个内置类型。C++ 标准库 <code>tuple</code> 及其许多用法都从中受到启发。<code>std::tuple</code> 派生自 <code>boost::tuple</code> [Boost 1998–2020]（<a href="04.md#434-tuple">§4.3.4</a>）。</li><li><code>regex</code>——加入 C++11 的标准库 <code>regex</code> 是（经由 Boost；已致谢）从 Unix 和 JavaScript 的功能中拷贝来的（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）。</li><li>函数式编程——函数式编程特性和 C++ 构件之间有许多明显的相似之处。大多数不是简单的语言特性，而是编程技巧。STL 受到函数式编程的启发，并首先在 Scheme [Stepanov 1986] 和 Ada [Musser and Stepanov 1987] 中进行了尝试（未成功）。</li><li><code>future</code> 和 <code>promise</code>——源自 Multilisp，经由其他 Lisp 方言（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）。</li><li>范围 <code>for</code>——许多语言中都有对应物，但直接启发来自 STL 序列（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）。</li><li><code>variant</code>、<code>any</code> 和 <code>optional</code>——显然受到多种语言的启发（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）。</li><li>lambda 表达式——显然，部分灵感来自于函数式语言中 lambda 表达式的应用。但是，在 C++ 中，lambda 表达式的根源还可以上溯到 BCPL 语言中用作表达式的代码块、局部函数（多次被 C 和 C++ 拒绝，因其容易出错且增加了复杂性）和（最重要的）函数对象（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）。</li><li><code>final</code> 和 <code>override</code>——用于更明确地管理类层次结构，并且在许多面向对象的语言中都可以使用。在早期的 C++ 中已经考虑过它们了，但当时被认为是不必要的。</li><li>三路比较运算符 <code>&lt;=&gt;</code>，受 C 的 <code>strcmp</code> 及 PERL、PHP、Python 和 Ruby 语言的运算符的启发（<a href="09.md#934-">§9.3.4</a>）。</li><li><code>await</code>——C++ 里最早的协程（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>）受 Simula 启发，但是作为库提供，而不是作为语言特性，这是为了给其他替代的并发技术留出空间。C++20 中的无栈协程的思想主要来自 F#（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）。</li></ul><p>即使以非常直接的方式从另一种语言借用了某个特性，该特性也会发生变化。通常，为了适合 C++ 语法会发生很大变化。当从支持垃圾收集的语言借鉴时，生命周期问题必须得到解决。而 C++ 区分对象和对象的引用，这通常使得 C++ 需要以和原语言不同的方式来解决。在“翻译”成 C++ 的过程中，经常会发现全新的用法。在把 lambda 引入 C++ 的过程中，出现了大量此类现象的例子（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）。</p><p>在很多人的想象中，我（和其他参与 C++ 的人）整日无所事事，满脑子想的是在流行语言中如何占据主导地位，为这个复杂的语言战争制定战略。实际上，我并没有在那上面花时间。大多数日子里，我不会去思考其他的语言，除非我碰巧出于一般的技术兴趣去学习一门其他语言或要使用它来完成一些工作。我要做的是与软件开发人员交谈，考虑人们在使用 C++ 时遇到的问题，还要考虑潮水般涌入标准委员会的改进建议。当然，我也编写代码来体验问题并测试改进思路。问题在于要能抽出时间冷静地考虑，什么是根本的，什么只是一时流行，以及什么会造成危害。</p><p>同样，C++ 对其他语言的贡献也难以估量。通常，类似的特性是平行演化的，或有着共同的根源。例如：</p><ul><li>Java 和 C# 中的泛型——他们采用了其他语言的泛型模式，但采用了 C++ 语法，并且是在 C++ 大规模展示了泛型编程的用途之后，才添加泛型。</li><li>Java、Python 等的资源弃置惯用法（dispose idiom）——这大致是在垃圾收集语言中最能接近析构函数的做法了。</li><li>D 编程语言进行编译期求值——我向 Walter Bright 解释了早期的 constexpr 设计。</li><li>C++ 基于构造函数和析构函数的对象生存期模型是 Rust 灵感的一部分。好笑的是，最近 C++ 经常被指责从 Rust 那里借用了这种想法。</li><li>C 采用了 C++11 的内存模型、函数声明和定义语法、以声明为语句、<code>const</code>、<code>//</code> 注释、<code>inline</code> 以及 <code>for</code> 循环中的初始化表达式。</li></ul><p>C++ 与其他语言之间的许多差异源于 C++ 对析构函数的使用。这使得垃圾收集的语言很难直接从 C++ 借用。</p>]]></content>
    
    
    <summary type="html">背景：C++ 的 1979–2006</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_03/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_03/</id>
    <published>2024-10-29T13:21:09.460Z</published>
    <updated>2024-10-29T13:25:08.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-C-标准委员会"><a href="#3-C-标准委员会" class="headerlink" title="3. C++ 标准委员会"></a>3. C++ 标准委员会</h1><p>国际 C++ 标准委员会正式名称为 <strong>ISO&#x2F;IEC JTC1&#x2F;SC22&#x2F;WG21</strong>，它是 C++ 发展的核心。自 1991 年成立以来，就一直如此。而从 1989 年开始到它成立之前，C++ 开发的中心则是美国国家标准学会（ANSI）的 C++ 标准委员会 [Stroustrup 1993]。C++ 没有腰缠万贯的所有者，也没有其他重要的资金提供来源，因此社区依赖于企业开发和开源项目。对于很多处于相互竞争的组织中的人来说，WG21 和各个国家的标准委员会是他们能够会面并联合解决问题的唯一场合。</p><p>委员会成员都是志愿者，也没有带薪的秘书处，虽然许多委员确实以其工作组织的代表身份出现。在每次会议上，都会有人自豪地声称就代表“自己”。也就是说，他们没有得到赞助，只代表自己。有些人换工作后，就会代表新组织，这种情况并不少见。许多人以“参加 C++ 标准委员会”作为接受新工作的条件。有人加入了委员会来学习 C++，有人则把“C++ 委员会成员”当作资格来引用（并非一定是真的）。</p><p>有些人仅参加过几次会议，不那么经常。另一方面，也有人一直参加了大多数会议，数十年没有间断。一开始时，还有现在，我们一年开三次会。在 1998 年标准之后的几年里，我们一年只开两次会。目前，除了面对面的会议，还有很多的电话会议进行补充，以及天天都有的大量电子邮件。</p><p>在这里，我会描述</p><ul><li>标准的作用（<a href="#31-%E6%A0%87%E5%87%86">§3.1</a>）</li><li>委员会的组织（<a href="#32-%E7%BB%84%E7%BB%87">§3.2</a>）</li><li>委员会的结构对 C++ 设计的影响（<a href="#33-%E5%AF%B9%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BD%B1%E5%93%8D">§3.3</a>）</li></ul><h2 id="3-1-标准"><a href="#3-1-标准" class="headerlink" title="3.1 标准"></a>3.1 标准</h2><p>标准委员会的目的是编写标准。制定标准的一个官方理由是“<strong>促进贸易，特别是减少国际贸易的技术壁垒和人为障碍</strong>”，及“<strong>提供实现经济、效率和互操作性的框架</strong>”。标准是规范，不是实现。它的目的是保持多个实现一致，并确定“一致性”在一个必须能够有效利用各种不同底层硬件的世界里到底意味着什么。许多程序员在理解这一点上存在问题。他们要么认为当前的编译器就是语言的定义，要么难以理解为什么很难在许多不同的、通常是竞争性的组织之间达成 100％ 的协议。在 1990 年代，委员会考虑过制定形式规约（formal specification），但咨询过世界一流的专家后得出结论，规约技术的进展和成员的水平都还达不到制定 C++ 形式规约的程度。当然，也考虑过参考实现，但语言的复杂度，特别是与硬件使用和优化相关的问题，已经挫败了这种想法。如果有参考实现，它会太复杂，也会代价过大。要么就得把它简化到一种对最困难的问题没有帮助的程度，但这样的困难问题正是最需要参考实现的场合。再有，当 N 个彼此竞争的实现团队记录他们的决策、运行广泛的合规性测试并讨论它们的不同之处时，会有些意外收获；如果已经有了个复杂的参考实现，就可能掩盖掉这样的意外收获。对于 C++，从前端实现来说（Clang、EDG、GCC 和微软）N 至少为 4，至于后端，N 少说有十几个。</p><p>因此，标准委员会正在努力解决拥有多种实现带来的问题。另一条路是冒险搞单一文化。如果 C++ 技术只来源于一个组织，那么无论好坏，每个人都会得到相同的东西。一个控制“唯一真正实现”的组织将在社区中拥有主导话语权，他们出现的问题，就会影响到所有人。特别是，一旦有资金问题、商业顾虑、政治见解或者技术上的一意孤行，就会严重破坏语言及其用户群体。</p><p>无论好坏，C++ 社区选择了“半组织”的混乱，里面有一个很大的委员会加上多个编译器、工具及库的供应者。我们没有用统一所有权或独裁者模式。</p><h2 id="3-2-组织"><a href="#3-2-组织" class="headerlink" title="3.2 组织"></a>3.2 组织</h2><p>对于 C++17 和 C++ 20 的工作，每次面对面的 WG21 会议有多达 250 人出席，而总成员人数约为出席人数的两倍。此外，加拿大、芬兰、法国、德国、俄罗斯、西班牙、英国、美国等十几个国家都有国家标准委员会以及 C++ 标准技术联盟的付费支持成员。成员代表了一百多个组织。为了让大家有所了解，在此列举部分成员所属组织：苹果、Bloomberg、欧洲核子研究中心、Codeplay、EDG（Edison Design Group）、Facebook、谷歌、IBM、英特尔、微软、摩根士丹利、英伟达、Qt、高通、红帽、Ripple、美国 Sandia 国家实验室、拉珀斯维尔应用科技大学（HSR）和马德里卡洛斯三世大学。编译器供应者、硬件供应者、金融、游戏、库供应者、平台供应者、国家实验室（物理）等都有坚实的代表。早期 C++ 中突出的电信业者的身影已经减少，而过去极少的大学的身影似乎在增加。</p><p>显然，如此庞大的组织和个人组成的群体代表着千差万别的兴趣和技术背景，需要一个组织结构来运作。会议是围绕工作组（WG）和研究组（SG）进行组织的。2019 年的夏天，我们已经有了这样一些分组：</p><ul><li><strong>核心工作组</strong>（Core WG 或 CWG）——编写语言的最终标准文本——主席 Michael Miller（EDG）。</li><li><strong>库工作组</strong>（Library WG 或 LWG）——为标准库编写最终标准文本——主席 Marshall Clow（C++ 联盟，之前代表高通）。</li><li><strong>演化工作组</strong>（Evolution WG 或 EWG）——处理语言建议——主席 Ville Voutilainen（Qt，之前代表 Symbio）。</li><li><strong>库演化工作组</strong>（Library Evolution WG 或 LEWG）——处理标准库提案——主席 Titus Winters（谷歌）。</li></ul><p>研究组探索新领域并设计可能的标准化：</p><ul><li><strong>SG1 并发</strong>——并发和并行性主题——主席 Olivier Giroux（英伟达）。</li><li><strong>SG5 事务内存</strong>——探索事务内存的构件——主席 Michael Wong（Codeplay，之前代表 IBM）。</li><li><strong>SG6 数值</strong>——包括但不限于定点数、浮点数和分数——主席 Lawrence Crowl（“自己”，之前代表谷歌和 Sun）。</li><li><strong>SG7 编译期编程</strong>——最初专注于编译期反射，然后扩展到一般的编译期编程——主席 Chandler Carruth（谷歌）。</li><li><strong>SG12 未定义的行为和漏洞</strong>——系统地审查漏洞和未定义&#x2F;未指定的行为——主席 Gabriel Dos Reis（微软，之前代表得州农工大学）。</li><li><strong>SG13 人机界面和 I&#x2F;O</strong>——精选的底层输出（例如图形、音频）和输入（例如键盘、指点设备）的 I&#x2F;O 原语——主席 Roger Orr（英国标准（BSI））。</li><li><strong>SG14 游戏开发和低延迟</strong>——游戏开发者和其他有低延迟要求的人感兴趣的主题——主席 Michael Wong（Codeplay，之前代表 IBM）。</li><li><strong>SG15 工具</strong>——与针对标准 C++ 的开发者工具创建有关的主题，其中包括但不仅限于模块和包管理——主席 Titus Winters（谷歌）。</li><li><strong>SG16 Unicode</strong>——与 C++ 中的 Unicode 文本处理相关的主题——主席 Tom Honermann（Synopsys）。</li><li><strong>SG19 机器学习</strong>——主席 Michael Wong（CodePlay，之前代表 IBM）</li><li><strong>SG20 教育</strong>——探索可以支持学习者和教师掌握今天的 C++ 的方法——主席 Jan Christiaan van Winkel（谷歌）</li><li><strong>SG21 契约</strong>——在 C++20 失败后尝试设计出契约系统（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）——主席 John Spicer（EDG）</li></ul><p>2017 年成立了一个小组来解决与语言和标准库设计缺乏方向有关的问题 [Dawes et al. 2018]。该<strong>方向组</strong>（DG）的成员由召集人与工作组主席协商后任命，其成员是委员会、语言和标准库的长期贡献者。最初的成员是 Beman Dawes、Howard Hinnant、Bjarne Stroustrup、David Vandevoorde 和 Michael Wong。之后，Beman 退休，Roger Orr 加入。DG 的主席是轮流担任的，从我开始。DG 是咨询机构，其政策是只有在其成员一致同意的情况下才能提出意见。它维护有一份描述其建议的文档 [Dawes et al. 2018; Hinnant et al. 2019]。</p><p>工作组可持续十年以上，成员变化也很少。研究组则聚散自由，可能因兴趣使然，或者因为工作已经完成并提交给工作组进行最后的处理。例如，四个最重要的研究组已宣告胜利完成并解散：</p><ul><li><strong>SG2 模块</strong>——主席 Gabriel Dos Reis（微软，之前代表得州农工大学）。</li><li><strong>SG3 文件系统</strong>——主席 Beman Dawes（“自己”）。</li><li><strong>SG8 概念</strong>——主席 Andrew Sutton（俄亥俄州阿克伦大学，之前代表得州农工大学）。</li><li><strong>SG9 范围</strong>——更新 STL，以使用概念，简化写法，及提供无限序列和管道——主席，Eric Niebler（Facebook）。</li></ul><p><strong>SG4 网络</strong>，目前处于休眠状态，因为其结果正在等待被合并到标准（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）中。另一个研究组 <strong>SG11 数据库</strong>，因缺乏共识和缺乏足够数量的志愿者完成工作而解散。</p><p>某些研究组会产出技术规范（TS），这些技术规范可能是具有重要意义的文件，也以标准本身的风格写就。它们具有一定的官方（ISO）地位，但不能提供国际标准（IS）所具有的长期稳定性。并发研究组（SG1）自 2006 年以来一直活跃，大部分时间由 Hans-J. Boehm（谷歌，之前代表过惠普实验室和 SGI）领导，它的地位已经接近 WG 了。</p><p>除了这些分组外，还有一个半官方的 C&#x2F;C++ 联络组，由同时加入 C++ 委员会和 C 委员会（ISO&#x2F;SC22&#x2F;WG14）的成员组成。这个小组力图减少 C 和 C++ 之间的不兼容性，而 C++ 标准也会把每种不兼容之处记录下来。如果没有联络小组的不断努力，C 和 C++ 的兼容性远没有现在好。不过，即便如此，大多数从 C++ 导入 C 的特性都被修改过，而这就引入了一些不兼容性。</p><p>ISO 只需要也只认可三名正式官员：</p><ul><li><strong>召集人</strong>——担任工作组主席，制定工作组会议时间表（召开会议），任命研究组，并向更高级别的 ISO（SC22、JTC1 和 ITTF）负责——Herb Sutter（微软），自 2002 年以来一直担任该职位的工作，除 2008–2009 年期间是由 P.J. Plauger（Dinkumware）担任。</li><li><strong>项目编辑</strong>——最终负责将委员会批准的更改应用于标准的工作草案——Richard Smith（谷歌）；Pete Becker（Dinkumware）负责 C++11；Stefanus Du Toit（Intel）负责 C++14。</li><li><strong>书记</strong>——负责记录和分发 WG21 会议的会议纪要——Nina Ranns（Edison Design Group，之前代表 Symantec）。</li></ul><p>各个国家的标准委员会有各自自己的官员和章程。</p><p>显然，这些年来这些职位由不同的人担任过，但尽管工作量通常很大，很少有人在职少于 5 年。我曾担任 EWG 的主席 24 年，到 2014 年才把这一职位移交给 Ville Voutilainen。</p><p>通常，较小的提案直接提交给 EWG 和&#x2F;或 LEWG，较大的提案则从研究组开始。提案需要以书面形式提出，并有人进行演示。一般来说，处理一项重要的提案需要数次会议（通常为数年），并且需要数篇论文、修订论文和反复演示。最后，已经获得大力支持的提案将提交给整个委员会进行最终表决。召集人查看表决结果并裁定是否达成共识。共识不只是要多数。委员会更倾向于能在经过工作组处理和投票后获得一致同意，如果达不到，通常至少也需要 9 比 1 或 8 比 2 的优势。召集人很可能会认为 8 比 2 的多数票“未达成共识”。如果国家标准机构的负责人或几个主要委员表示强烈反对，就会发生这种情况。这样议题就会处于悬而未决的状态或者导致提案只被部分采纳。</p><p>标准会议令人筋疲力尽。通常，委员们从早餐到午夜一直在讨论工作问题。大多数时候，正式会议在 8:30–12:30 和 14:00–17:30 举行，加上大多数时候都会进行的晚间会议（19:00–22:00）。正在准备提案的委员的工作时间比这些还要长。WG 和 SG 主席一般在大多数用餐时间都在开会。周一至周五是全天，而如果没有任何意外发生，大多数委员会成员到了星期六的 15:00 左右会收工。不过，当会议在诸如夏威夷科纳（Kona）之类的好地方举行时，委员会以外的人似乎都不愿意相信开会并不是什么度假。</p><p>在 WG 和 SG 里，每个出席者都可以投一票。委员会全体会议的正式投票则是每个到会的组织一票（这样，大型组织就不会有多票），再加上国家标准机构的票数。“技术性投票”和国家机构投票必须一致才算达成共识。</p><p>委员会 2006 年以前的历史记录在 [Stroustrup 1993, 1994, 2007] 中。C++ 基金会（<a href="10.md#102-c-%E7%A4%BE%E5%8C%BA">§10.2</a>）在其网站（<a href="https://isocpp.org/std">isocpp.org&#x2F;std</a>）上维护了一份会及时更新的描述，涵盖组织、关键人物和委员会流程。</p><p>从 1989 年起，委员会的所有论文几乎都可以从一份文集中获取到 [WG21 1989–2020]。目前，该文集每年增加 500 多篇论文。另外，很多委员会的讨论是在已归档的邮件列表中进行的。每天可能有超过一百条邮件消息。要跟上委员会中发生的所有事情非常难，特别是由于很多事情需要专门的技术知识才能跟进。我将自己的 WG21 论文集保存在主页 [Stroustrup 1990–2020] 上。</p><p>传统上，ISO 标准每十年左右修订一次。例如，我们有 C89、C99 和 C11。如此长的修订周期是有问题的，如果新特性错过了特性冻结，我们就会要再等上 12 年左右才能将它加入标准。人们自然就会主张将即将通过的标准拖延一两年：“这个特性太重要了，不能等，因此得延迟一下标准的发布！”这就是为什么原本的 C++0x 结果成了 C++11，在 C++98 后过了 13 年。</p><p>在 C++11 之后，一些委员会成员希望缩短周期，召集人 Herb Sutter 建议我们采用列车模型。也就是说，列车在预定时间出发，任何没上车的人将不得不等待下一班。大家喜欢这个建议，也花了挺长时间讨论标准修订之间的合适间隔。我主张短点，3 年，因为再长（例如 5 年）就容易被“这个特性非常重要，等不了”这样的说法拖累，导致发布延迟。我们商定了三年的发布周期，Herb Sutter 补充建议采用交替发行大版本和小版本的英特尔“滴答”模型。这也得到了同意，因此在 C++11（<a href="04.md#4-c11%E6%84%9F%E8%A7%89%E5%83%8F%E6%98%AF%E9%97%A8%E6%96%B0%E8%AF%AD%E8%A8%80">§4</a>）三年后，我们发布了 C++14（<a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>），它纳入了之前被延迟的特性并纠正了早期使用中发现的小问题。C++17 也按时交付，但可惜并不是一次大升级（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）。C++20 在 2019 年 2 月通过投票，确定了完整的发布特性。最终技术性投票于 2020 年 2 月在布拉格完成。</p><h2 id="3-3-对设计的影响"><a href="#3-3-对设计的影响" class="headerlink" title="3.3 对设计的影响"></a>3.3 对设计的影响</h2><p>这样的工作组织方式、复杂的决策流程以及大量的参与者会如何影响 C++ 的发展？看看委员会的规模、组成及其流程，我认为，任何建设性成果居然能从中产生，都足以令人惊喜。这已经不只是“委员会的设计”了，而是“多委员会的联合设计”。</p><p>此外，委员会的管理结构非常薄弱，甚至缺乏最基本的管理工具：</p><ul><li>成员资格、发言或投票没有任何资质要求（例如，学历或实际经验）。支付 ISO 会员费（2018 年美国会员为 1280 美元）并参加两次会议，就能拥有正式投票权。在研究组和工作组中，任何人都可以发言与投票，即使这是他们的第一次参加会议。</li><li>除了让提案得到采纳，以及看到改进后的标准而感到满足，并没有任何其他回报。不过，满足感确实是一个主要动力。</li><li>没有真正的办法来阻止破坏性行为。非官方委员会管理人员所能做的只是有礼貌地提醒人们不要做别人认为具有破坏性的事情。然而委员们对于什么是有破坏性的，意见也不一致。</li></ul><p>当考虑在一个大型委员会里演化一门语言的各种问题之前，请记住委员会里大部分时间和工作都是为了解决“小问题”；就是那些不会上升到语言设计哲学、学术出版物、或会议演示层面的问题。它们对于防止语言及其标准库被分割成方言，并保证在编译器和平台之间的可移植性至关重要。这些问题包括：命名、名称查找、重载决策、语法细节、构件的确切含义、临时变量的生存周期、链接，还有其他很多很多。许多问题需要技巧才能解决，而拙劣的解决方案可能带来让人吃惊而具有破坏性的后果。解决方案往往经过精心设计，以最大程度减少对现有代码的破坏。委员会每年解决数百个问题。我估计委员至少要为此花费他们时间和精力的三分之一，乃至于三分之二。这项工作往往被忽视和低估。如果你用过计算机或计算机化的设备（例如电话或汽车），你得感谢 CWG 和 LWG 的工作。</p><p>当关注由一个庞大的委员会引起的问题时，也请记住，这些问题本质是一种有钱人的烦恼：C++ 的标准化流程由数百位各种不同背景的热心人士所驱动，他们的经验各不相同，但都满怀理想主义。</p><p>委员会应起到过滤作用，也就是说，把坏提案挡在标准之外，同时，还要提升最后通过的提案的品质。委员会的存在，是要鼓励大家提出建议，并主动提供帮助。然而，并没有正式的提案征求流程。</p><p>不存在全职的 C++ 设计者，尽管有许多全职人员从事 C++ 编译器、库和工具方面的工作。直到最近，委员会中还很少有人从事应用程序开发，这是一个问题，因为它使委员会偏向于语言“律师”、高阶特性和实现问题，而不是直接解决大量 C++ 开发者的需求——很多成员只是间接地了解这些需求。最近新成员急剧增加，也许会部分缓解这个问题。</p><p>委员会中的教育工作者相对较少。这可能是个问题，因为委员会（理所当然地）高度重视“易于学习”，但是委员们对其含义有着非常不同的理念（经常会意见强烈）。这往往使关于“简单性”和“易用性”的讨论变得混乱。</p><p>当思考组织问题对 C++ 发展的影响时，请记住，ISO 流程本不是为 200 人的会议而设计的——典型的 ISO 编程语言委员会只有一二十人。平均而言，我们在某种程度上是通过识别和解决问题来进行管理。考虑下面这些观察到的问题：</p><ul><li><p><strong>延迟</strong>：多阶段的流程为延迟、阻止提案和提案变化提供了很多机会。常常出现几十名委员坚持要满足他们的要求的情况，往往是通过阐释、扩展和寻找特例的方式。一个人眼中的过度延迟在另一个人看来却是尽职尽力。</p><p>  例如：概念（当前方案为 6 年（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>））、契约（从开始到失败花了 6 年（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>））、网络（15 年，仍在进行中（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>））和 constexpr（5 年（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>））。甚至 <code>nullptr</code> 被接受也花费了三年时间（<a href="04.md#426-nullptr">§4.2.6</a>）。</p></li><li><p><strong>孤立特性</strong>：大多数委员会成员喜欢特性的添加。另一方面，他们（非常合理地）深刻地担心破坏现有代码的可能性。这给了<strong>孤立特性</strong>系统性的优势，孤立特性是不影响语言和标准库其余部分的小提案。这样的小提案很少会对语言的使用产生重大影响，但却会增加学习和实现的复杂性。而且，到头来，它们往往还是会和其他特性发生令人惊讶的交互。</p><p>  例如：大多数在本语言演化总结中不值得提及的特性。结构化绑定（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）和运算符 <code>&lt;=&gt;</code>（<a href="08.md#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>）都需要多次会议去完善。</p></li><li><p><strong>后来者居上</strong>：有时经过多年的工作之后，提案已接近投票表决，一些一向未曾关注提案的委员此时进入讨论并提供了替代提案。这样的提案可能与原始提案有戏剧性的差异，或者只是一系列小的请求。这往往导致延迟、混乱、甚至有时是争执。这种时候，已经议定的问题又重被激活，而未经尝试（通常也未实现）的新想法和多年工作的成果获得了接近相等的权重。对老提案而言，瑕疵已经被发现过了，相应的技术折中也已经完成。人们很容易想象新事物的好处而忘记意外后果定律：<strong>意外后果总是会出现的</strong>。新的和相对未经审查的总是看起来比老的更好。这使得较早提案的拥护者变得具有防御性，从而分散了进一步完善“老提案”的精力。在这里“老”可能只是几年，或者就像概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）那样十几年。有时，接受未经尝试的后期变更（所谓改进）是为了安抚反对派；这经常导致意外的后果。后期加入讨论的人们，通常不会认为有“冲刺的必要”，而是自然地希望他们自己的想法得到认真考虑（而通常并没有认真考虑老提案的细节和理由）。这就可能会与已经在老提案上投入多年工作的人们产生摩擦。</p><p>  例子：结构化绑定（语法更改，对位域的新增支持，笨拙的 <code>get()</code>（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>））、概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。数字分隔符（<a href="05.md#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>）、点运算符（<a href="08.md#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>）、模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）、协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）、契约（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）。</p></li><li><p><strong>热情总青睐新事物</strong>：唤起对新事物的热情比反对它们容易。每个提案都是为某人解决某事，支持者愿意花大量时间展现其价值。而要反对它们，有人就不得不说像这样的话：</p><ul><li>“不，这个问题不是那么重要。”</li><li>“不，这种解决方案有缺陷。”</li><li>“不，你还没有充分记录解决方案。”</li><li>“不，你还没有仔细检查替代方案。”</li></ul><p>  不管措辞怎么客气，这都让反对者看起来更像“坏人”，是他们阻碍了进步并否认支持者需求的合理性。更糟糕的是，拥护者总是比反对者花费更多的时间来准备论文和演讲。大多数人喜欢对自己相信的事物进行建设性的工作，而不是小心地拆除他人的工作。因此，支持者通常都很热情并且准备充分，而反对者总是显得意见含糊而不懂细节。然而，每项新特性都有其成本：如设计、规范、实现、修订、部署和教学（<a href="09.md#95-%E6%AC%A1%E8%A6%81%E7%89%B9%E6%80%A7">§9.5</a>）。我害怕在演化工作组度过周四下午。那时，EWG 成员经过几天的大提案工作而感到疲倦，许多老成员（例如我）已经被拖入其他小组，参会者又急于看到有成果。这种时候，小提案就会只经受相对较少的审查而滑入标准。</p><p>  例如：条件中的显式测试（<a href="08.md#87-%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%98%BE%E5%BC%8F%E6%B5%8B%E8%AF%95">§8.7</a>）、<code>inline</code> 变量（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）、结构化绑定的后期更改（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）。</p></li><li><p><strong>过度自信</strong>：相对于整个语言及标准库的复杂度，尤其是不同应用领域的 C++ 用户所面临的问题的复杂度，个人在日常工作中能获得的经验总是不足的。并非所有委员会成员都能意识到这一局限，或是能通过质疑自身经验的推广价值加以弥补。这就导致某些一般性有限的提案被过度推广。更糟糕的是，一些委员强烈反对某些提案，是因为他们不认为有必要解决该提案所针对的问题。语言设计需要一定的智力上的谦逊 [Stroustrup 2019b]。先想出来的解决方案很少是最好的，而未经进一步认真思考就提出轻率的反对意见和建议很少会带来改进。</p><p>  例子：出于对犯错者的保护，就不举例了。</p></li><li><p><strong>实现时机不当</strong>：在标准流程中，实现提案晚了有风险：特性出现严重缺陷、有潜在无法实现的部分、以及缺乏使用反馈；实现早了也有风险：特性以不完整的、次优的且难以使用的形式冻结。委员会中的许多人不会投票赞成尚未实现或以他们不信任的方式实现的提案。另一方面，许多实现者不愿意为委员会未批准的提案投入实现资源。这是一个困难而现实的两难困境。委员会经常听到“它已经实现了吗？”的问题。通常，“它是经过设计的吗？” 和“要如何使用？” 是更重要的问题。人们很容易在细节中迷失。我提出的走出这一困境的方法是，就建议的方向、提案的总体范围达成一致，然后从一个相对较小子集的详细设计和实现出发，以关键用例为指导前进。这样，我们可以相对较早地获得用户体验，并了解该特性如何与其他特性交互。这需要对这种语言应该是什么有一个长远的看法 [Stroustrup 1993, 1994, 2007]（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>），（<a href="11.md#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>），否则语言就会沦为机会主义的零敲碎打。如果这个方法起作用，语言将从反馈和有机增长中受益。</p><p>  例子：模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）、C++ 0x 概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和 <code>&lt;=&gt;</code>（<a href="08.md#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>）。</p></li><li><p><strong>特性交互</strong>：最难处理的问题之一是特性的组合使用。一定程度上这是规范和实现的技术问题。因此，这会占用大量委员会时间。从设计的角度来看，更难的问题是要预计新特性在整个语言的语境中如何使用，这些语境包括其他正在考虑中的语言和库的新特性。每个特性都应设计成便于同其他特性结合使用。我担心这一点没有得到重视。很少有提案书提供详细的讨论，而委员会里关于特性交互的讨论往往简短或混乱。其结果之一是，个别特性趋于膨胀而只好把它孤立于语言的其余部分才能用起来。</p><p>  例子：<code>tuple</code>（<a href="04.md#434-tuple">§4.3.4</a>）和 <code>&lt;=&gt;</code>（<a href="09.md#934-">§9.3.4</a>）。为 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）中的动作指定专用语法的（失败）提案。</p></li><li><p><strong>篇幅和分心</strong>：千头万绪往往同时发生，没有人能全跟得上。那些尝试全部关注的人，就容易失去对真正重要课题的关注，而把注意力分散在一些事实证明并不那么重要的课题上。如今每年有超过 500 篇委员会论文，有些长达数十甚至数百页。与 2010 年代初相比，文献总篇幅翻了一番。我注意到，2018 年秋天的会前邮件（新论文汇总）的字数是莎士比亚全集的三倍。</p><p>  电子邮件的泛滥最让人分心，因为许多委员喜欢通过一波一波地爆发短邮件来进行技术讨论。在这样的讨论中掉队意味着失去对问题的跟踪，其结果可能是，共识只是从几个一直能跟得上讨论的人中间浮现。</p><p>  这种讨论不利于冷静而系统地权衡各种选择。有时候，它会导致不幸的特性滑入标准。有时候，它会导致不一致的设计理念体现于语言和标准库的不同部分，进而损害了互操作性。</p><p>  例子：<code>any</code>、<code>optional</code> 和 <code>variant</code> 的不同接口（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）。概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。</p></li><li><p><strong>精确规范</strong>：标准是规范，而不是实现。但是，标准是用英语编写的，因此我们做不到数学般的精度。委员会的许多成员擅长数学，但不擅长数学的人更多，因此在规范中没办法使用数学式的写法。试图使英文文本精确而详尽，则会让文本变得生硬又难以理解。我常常很难理解标准中对我自己提案的描述。</p><p>  大多数委员是程序员，而不是设计师，因此规范有时看起来会像程序——用没有类型系统或编译器的低级语言写成的程序。有详尽的如果、那么、否则的说明，却很少写出不变量。更糟糕的是，很多词汇继承自 C，而且是基于程序源代码文本中的标记，因此，更高级别的概念仅被间接提出。</p><p>  奇怪的是，标准库规范在结构上明显比语言规范更为正式。</p></li><li><p><strong>经院主义</strong>：当然有必要大力强调标准文本的正确性和准确性。但是，人们有时会忘记标准本身可能就是错误的，而仅根据标准文本的论证来讨论正确性。这样一来，根据标准文本所应反映的模型和使用上的论证，反倒可能被忽略。</p></li><li><p><strong>方向</strong>：哪些问题是真实的？重要吗？对于谁？哪些紧急？十年后，哪些解决方案仍然有意义？有些事情也许算个问题，但这并不意味着它必须在语言里有直接的解决方案。尤其是，委员会很难记住这一点：一种语言不可能对所有人来说都是万能的。更难以接受的是，它居然不能解决每个委员最紧急的问题 [Stroustrup 2018d]。</p><p>  例子：C++17（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）和 C++ 20（<a href="09.md#9-c20%E6%96%B9%E5%90%91%E4%B9%8B%E4%BA%89">§9</a>）。</p></li><li><p><strong>专一关注</strong>：一些委员仅关注一个或两个课题，例如语言技术、易用性、“可教学性”、效率、使用单一编程风格、在单个行业中使用、在单个公司中使用、单个语言特性等。对于专一关注的委员而言，这可能是一种非常有效的技巧，但这样做会让广泛的、平衡的进展变得困难。过分相信理论或个人经验则是这个问题的另一类例子。一个好的建议在许多领域都会推动进步，但通常不能在所有这些方面都达到完美。</p></li><li><p><strong>原则的不适当应用</strong>：将一般原则应用于具体事例通常很困难。有时，我们会不与其他原则进行必要折中，就去严格应用某项原则。折中的必要性是《设计和演化》一书 [Stroustrup 1994] 将设计原则称为“经验法则”的原因之一。有时，似乎没有经验基础就凭空冒出来一个原则。有时，一个提案严格遵循了某一个原则，而另一个提案则忽略它。有原则的设计很困难；它需要品味、经验以及原则。实用的语言设计不只是从第一原理出发进行演绎的练习。通常，多种原则之间必须进行权衡。</p></li><li><p><strong>倾向专家的偏见</strong>：想象别人的问题总是困难的。委员会成员几乎都是某方面的专家。在日常工作中，他们通常是处理最细微、最复杂问题的人。这样的问题在“外面”的数十亿行常规 C++ 代码中一般不常见，而且也不是大多数 C++ 程序员所苦恼的问题。但是，对委员会来说，专家级的问题通常就是紧急问题，也是最容易通过流程的问题。</p><p>  例子：支持 <code>enable_if</code> 和类型特征（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）在标准库中的使用简直水到渠成，但接受概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）却大费周章。</p></li><li><p><strong>聪明的问题</strong>：委员会成员一般是聪明人，他们中许多人无法抵御机灵的解决方案。此外，他们也很难断定，并非每个问题都值得解决，而拥有解决方案也并不意味着我们必须将其纳入标准。这会带来过于精巧的特性，带来大多数程序员用不着的特性。公平起见，也需要指出，许多程序员也很聪明，有时也会以使用过分机灵的语言和标准库特性为乐。</p><p>  例子：在有些提案中，即使简单用法也需要用上严肃的模板元编程。</p></li><li><p><strong>不愿妥协</strong>：大多数委员会成员都有强烈的意见，但要在一个大型团体中达成共识需要妥协。分辨哪些妥协无关紧要，而哪些妥协事关基本原则，有时会很困难。后一类妥协可能对语言造成破坏，应该避免。不幸的是，当委员们坚信自己所担忧的才至关重要时，他们比起心态开放的委员就有了有关键的战术优势。有些人能做到从整体上关注语言而不纠结于个别话题，但他们往往得向不能如此的人们屈服。而反过来，那些从不认真质疑自己的原则或需求的人，倒往往可以向别人视为必要的技术妥协发动猛攻。取得进展需要关注整个社区，有自知之明，并懂得适当的谦逊 [Stroustrup 2019b]。</p></li><li><p><strong>缺乏优先级</strong>：从技术的角度来看，所有问题都是平等的：不精确的规范就是不精确的规范，这一点与它未能正确规定的内容是什么不相干。任何可能从类型系统的漏洞中混进代码的错误原则上都可能造成死亡和毁灭。但是，现实世界中不同错误的影响可能大不相同。实际上，大多数晦涩的细节基本上没有破环性。有些人在研究设计细节时很难记住这一点。</p><p>  例子：在数字分隔符（<a href="05.md#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>）上花费的时间比在范围 <code>for</code>（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）上花费的时间更多。</p></li><li><p><strong>完美主义</strong>：一个标准预期会被几百万人用到，并且可以稳定数十年。人们自然希望它是完美的。这会导致特性膨胀（特性过多），尤其是导致单个特性的膨胀。程序员善于想象出问题，特性在委员会走流程的时候，委员们会坚持要它解决掉所有想象中的问题。这会导致严重的使命偏离，并导致只有专家才会喜爱的特性。这也可能导致特性一直无法加入标准。</p><p>  例子：<code>.</code> 运算符（<a href="08.md#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>）、网络库（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）和异常规约（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）。</p></li><li><p><strong>少数人的阻挠</strong>：共识流程可以防止某些类型的错误，尤其是防止多数人的暴政。但是，它很容易受到个人和小团体的阻挠。这可以是好事（避免错误），但是当它在提案流程的各个阶段一再发生，或正好在最后一刻发生时，就会具有破坏性了。</p><p>  例子：<code>constexpr</code>（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）、<code>.</code> 运算符（<a href="08.md#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>）、模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）和协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）。</p></li><li><p><strong>内聚的团体</strong>：许多工作组和研究组都拥有稳定的核心人员群体，这些年来他们形成了内聚的技术观、共享的词汇表和特定的运作方式。这会使“外部人员”难以交流和贡献。这也可能使设计跨越 WG 边界的特性（例如同时具有库和语言部分的特性）变得困难。每个小组都往往会设计出适合其自身组织结构领域的内容，再次印证了老格言，即系统的结构总是长得像创造它的组织的结构。</p><p>  例子：范围 <code>for</code>（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）和可能需要更改语言的并发机制（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）。<code>any</code>、<code>optional</code> 和 <code>variant</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）的接口差异。</p></li></ul><p>从积极的一面来看，基于个人敌意或针锋相对的行为非常罕见。从这个意义上讲，委员会是非常专业的。</p><p>幸运的是，并非每个提案都受所有这些现象的影响，并且大多数其他大型项目也会遇到这类问题。但是，以其 ISO 标准所代表的 C++ 语言，整体上反映出了这些现象。它们不是新问题，但是自 C++11 起出现得越来越多。我怀疑它们是由以下因素共同造成的</p><ul><li>委员会人数增加</li><li>新人的涌入</li><li>成员的专业化（分散化）</li><li>成员对 C++ 历史的了解有所减少</li></ul><p>尽管存在这些严重的问题，但标准制定流程仍屡屡成功，原因之一是很多人不断努力将负面影响降到最低。方向组（Direction Group）的建立就是这方面的努力的一部分（<a href="#32-%E7%BB%84%E7%BB%87">§3.2</a>）[Dawes et al. 2018; Stroustrup 2018d]。另见（<a href="11.md#114-%E6%95%99%E8%AE%AD">§11.4</a>）。工作组主席、笔记记录员、会议组织者和编辑组的不懈努力是无形的，但却至关重要。例如，Jens Maurer 数十年来一直在 CWG 中做笔记，帮助提案者编写标准文本，安排网络访问，为无法出席的成员安排电话接入，安排会议室，告知成员当地旅行的可能性，等等。</p><p>有其他方案吗？在理想的世界里，我会建议限定由一小部分（大约 5 人）的全职受信任专家委员做决定，而由大团队完成（例如超过 350 人的委员会）完成讨论、提案、以及大部分流程。但我不认为 C++ 会发展成这样，因为：</p><ul><li>没有人喜欢放弃权力（在这种情况下是投票权）。</li><li>要为固定的全职专家团队保持稳定的资金投入需要非同小可的技能（而这种技能在 C++ 社区还没有出现）。</li><li>激进的变化不会发生在成功的时候；只有 C++ 使用量的显著下降才能促使委员会进行剧烈的组织创新（到那时多半为时已晚）。</li></ul><p>我不认为公司控制是可行的替代方案，因为：</p><ul><li>公司期望投资回报。</li><li>公司的支持往往几年后就会消失。</li><li>公司往往选择差异化的优势，而不是惠及所有人的进步。</li></ul><p>我也不认为完全开放的审议流程（由成千上万人投票）是可行的：</p><ul><li>超过千人的投票就会失去品味。</li><li>大群体的成员和意见没法在几十年里保持稳定。</li></ul><p>对许多大型开源项目起作用的分级审批程序可能至少提供了部分方案，但是在 C 和 C++ 的标准化开始时，这方面的经验很少。当这样一个系统运行良好时，你在审批层级中的地位越高，审批者的知识基础就越广阔，他们关注的领域也就越广泛。在组织结构顶部，我们会找到一人或多人，他们对所有知识都有所了解、对所有用户都有所关心。而与此相对的是，提案越接近最终批准，ISO 流程就越会稀释专业知识和关注领域：全体会议上，许多委员投票的提案是他们不感兴趣、领域经验有限且没有密切关注的。人们努力想负起责任，但是这真的很难。还要从大局角度来看待每个提案，把它们当作其中的一部分，那就几乎不可能了。</p><p>这样看来，WG21 的工作还不算糟糕。我确实担心这样的工作模式能否使 C++ 长久保持连贯并与时俱进。从另一个角度来看，出席 C++ 标准会议的有 200 多人，比其他标准的团体要大一个数量级，而 ISO 的流程本来就是为那种较小的团体设计的。另外，委员的多样性远远超过了过去的老三样：头发斑白的专家、公司代表、以及国家机构代表。混乱有可能爆发。</p><p>我从温斯顿·丘吉尔的格言中得到些许安慰，“民主是最糟糕的政府形式，除了所有那些人类一再尝试过的其他形式”。</p><p>特别要指出，我不认为经常被建议的“仁慈的终身独裁者”模式可以规模化，而且，不管怎么说，该模型从来就没对 C++ 适用过。</p><p>在我心目中，启动语言设计项目的理想模式是单个人或一小群密切配合的朋友。但我看不到这种方式可以规模化。一门成熟的语言需要数十甚至数百个人来解决他们必须面对的各种问题。即使只是与相关的标准、行业组织进行协调，也会让一个小规模、紧密配合的团体彻底应接不暇。</p><h2 id="3-4-提案检查清单"><a href="#3-4-提案检查清单" class="headerlink" title="3.4 提案检查清单"></a>3.4 提案检查清单</h2><p>C++98 有个“如何编写提案”的指南 [Stroustrup et al. 1992]，但奇怪的是，演化组并没有为提给 C++14、C++17 或 C++20 的提案准备一份检查清单。有一份针对标准库提案的检查清单 [Meredith 2012]。对于 C++20，国家标准机构负责人的一份说明 [van Winkel et al. 2017] 和 Direction Group 的一份文件 [Hinnant et al. 2019] 给出了一些指导。以下是一个简短而不完整的问题清单，这些问题几乎总会被提给一项提案：</p><ul><li>要解决的问题是什么？将为什么样的用户提供服务？新手？专家？</li><li>解决方案是什么？阐明它所基于的原则。给出简单的使用案例和专家级的使用案例。</li><li>有哪些替代解决方案？库解决方案是否足够？为什么现有功能不够好？</li><li>为什么解决方案需要在标准中？</li><li>采用该技术存在哪些障碍？从现有的技术过渡可能需要多久？</li><li>已经实现了吗？在实现过程中遇到了或预期会遇到哪些问题？有用户体验吗？</li><li>会不会有很大的编译期开销？</li><li>该特性是否能融入到现有工具和编译器的框架中？</li><li>与变通方案相比，会有运行期开销吗？在时间上？在空间上？</li><li>会有兼容性问题吗？会破坏现有的代码吗？ABI 会被破坏吗？</li><li>新功能将如何与现有功能和其他新功能交互？</li><li>解决方案是否容易教授？教给谁？谁来教？</li><li>标准库会受到怎样的影响？</li><li>该提案是否会导致对未来标准进一步扩展的要求？</li><li>该特性在标准里如何措辞表达？</li><li>用户在使用新功能时可能会犯哪些错误？</li><li>就整个 C++ 社区的利益而言，该提案是否属于前 20 名？前 10？</li><li>该提案是否属于特定子社区的前三名？哪个子社区？</li><li>该提案是解决某一类问题的通用机制还是某个特定问题的特定解决方法？如果是针对一类问题，是哪一类问题？</li><li>该提案在语义、语法和命名方面是否与语言的其余部分一致？</li></ul><p>理想的情况是，一项提案能够回答所有这些问题，甚至更多，但这种情况很少发生。特别是，在最初的提案中，理由往往非常薄弱，因为提案者认为所处理的问题的重要性和他们建议的解决方案非常明显。然而，后续的论文、修改、电子邮件讨论和演化组的面对面讨论通常都会涉及这些问题，但很少对各个提案进行系统的或一致的检查。成员们倾向于关注技术细节（例如，语法、歧义、优化机会和命名），而不是重新探讨根本问题。有时，我所认为的糟糕的提案会混进去。原因通常是提案者的极大热情加上反对者的分心、礼貌和疲惫 [Stroustrup 2019b]。</p>]]></content>
    
    
    <summary type="html">C++ 标准委员会</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="http://example.com/2024/10/29/Cxx_HOPL4_zh_01/"/>
    <id>http://example.com/2024/10/29/Cxx_HOPL4_zh_01/</id>
    <published>2024-10-29T13:21:09.459Z</published>
    <updated>2025-02-21T05:06:47.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>最初，我设计 C++ 是为了回答这样的一个问题：如何直接操作硬件，同时又支持高效、高级的抽象？C++ 在 1980 年代仅仅是一个基于 C 和 Simula 语言功能的组合，在当时的计算机上作为系统编程的相对简单的解决方案，经过多年的发展，已经成长为一个远比当年更复杂和有效的工具，应用极其广泛。它保持了如下两方面的关注：</p><ul><li><strong>语言构件到硬件功能的直接映射</strong></li><li><strong>零开销抽象</strong></li></ul><p>这种组合是 C++ 区别于大多数语言的决定性特征。“零开销”是这样解释的 [Stroustrup 1994]：</p><ul><li>你不用的东西，你就不需要付出代价（“没有分散开销”）。</li><li>你使用的东西，你手工写代码也不会更好。</li></ul><p>抽象在代码中体现为函数、类、模板、概念和别名。</p><p>C++ 是一种活的语言，因此它会不断变化以应对新出现的挑战和演变中的使用风格。2006 年至 2020 年期间的这些挑战和变化是本文的重点。当然，一门语言本身不会改变；是人们改变了它。所以这也是参与 C++ 演化的人们的故事，他们识别出面临的挑战，诠释解决方案的局限，组织他们的工作成果，并解决他们之间必然出现的分歧。当我呈现一种语言或标准库特性时，其背景是 C++ 的一般发展和当时参与者的关切。对于在早期被接受的许多特性，我们现在从大量的工业使用中获得了后见之明。</p><p>C++ 主要是一种工业语言，一种构建系统的工具。对于用户来说，C++ 不仅仅是一种由规范定义的语言；它是由许多部分组成的工具集的一部分：</p><ul><li>语言</li><li>标准库</li><li>许多的其他库</li><li>庞大的——常常是旧的——代码库</li><li>工具（包括其他语言）</li><li>教学和培训</li><li>社区支持</li></ul><p>只要有可能，只要合适，我就会考虑这些组成部分之间的相互作用。</p><p>有一种流传广泛的谬见，就是程序员希望他们的语言是简单的。当你不得不学习一门新的语言、不得不设计一门编程课程、或是在学术论文中描述一门语言时，追求简单显然是实情。对于这样的用途，让语言干净地体现一些明确的原则是一个明显的优势，也是理想情况。当开发人员的焦点从学习转移到交付和维护重要的应用程序时，他们的需求从简单转移到全面的支持、稳定性（兼容性）和熟悉度。人们总是混淆熟悉度和简单，如果可以选择的话，他们更倾向于熟悉度而不是简单。</p><p>看待 C++ 的一种方式是，把它看成几十年来三种相互矛盾的要求的结果：</p><ul><li><strong>让语言更简单！</strong></li><li><strong>立即添加这两个必要特性！！</strong></li><li><strong>不要搞砸我的（任何）代码！！！</strong></li></ul><p>我添加了感叹号，因为这些观点的表达常常带着不小的情绪。</p><p>我想让简单的事情简单做，并确保复杂的事情并非不可能，也不会没有必要地难。前者对于不是语言律师的开发者来说是必不可少的；后者对于基础性代码的实现者是必要的。稳定是所有意图持续运行几十年的系统的基本属性，然而一种活的语言必须适应不断变化的世界。</p><p>C++ 有一些总体构想。我阐述了一些（如《C++ 语言的设计和演化》（*The Design and Evolution of C++*）[Stroustrup 1994]（<a href="02.md#2-%E8%83%8C%E6%99%AFc-%E7%9A%84-19792006">§2</a>）、设计原则（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>），以及 C++ 模型（<a href="11.md#111-c-%E6%A8%A1%E5%9E%8B">§11.1</a>））并试图让语言在演化时遵循它们。然而，C++ 的开发由 ISO 标准委员会控制，它主要关注的是长长的新特性列表，以及对实际细节的关心。这是社区里最能表达和最有影响力的人所坚持的东西，仅仅基于哲学或理论观点就否认他们的关切和意见的话，恐怕就失之鲁莽了。</p><h2 id="1-1-年表"><a href="#1-1-年表" class="headerlink" title="1.1 年表"></a>1.1 年表</h2><p>为了给出一个快速的概述，这里有一个粗略的年表。如果你不熟悉 C++，很多术语、构件、库都会晦涩难懂；大多数在以前的 HOPL 论文 [Stroustrup 1993, 2007] 或本文中有详细解释。</p><ul><li>1979 年：工作始于“带类的 C”，它变成了 C++；拥有了第一个非研究性的用户；<ul><li>语言：<code>class</code>、构造函数&#x2F;析构函数、<code>public</code>&#x2F;<code>private</code>、简单继承、函数参数类型检查</li><li>库：<code>task</code>（协程和仿真支持）、用宏参数化的 <code>vector</code></li></ul></li><li>1985 年：C++ 的首次商业发行；TC++PL1 [Stroustrup 1985b]<ul><li>语言：<code>virtual</code> 函数、运算符重载、引用、常量</li><li>库：<code>complex</code> 算法，流输入输出</li></ul></li><li>1989–91 年：ANSI 和 ISO 标准化开始；TC++PL2 [Stroustrup 1991]<ul><li>语言：抽象类、多重继承、异常、模板</li><li>库：输入输出流（但没有 <code>task</code>）</li></ul></li><li>1998 年：C++98、第一个 ISO C++ 标准 [Koenig1998]、TC++PL3 [Stroustrup 1997]<ul><li>语言：<code>namespace</code>、具名类型转换<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：即新的、非 C 风格的类型转换">[1]</span></a></sup>、<code>bool</code>、<code>dynamic_cast</code></li><li>库：STL（容器和算法）、<code>string</code>、<code>bitset</code></li></ul></li><li>2011 年：C++11 [Becker 2011]，TC++PL4 [Stroustrup 2013]<ul><li>语言：内存模型、<code>auto</code>、范围 <code>for</code>、<code>constexpr</code>、lambda 表达式、用户定义字面量……</li><li>库：<code>thread</code> 和锁、<code>future</code>、<code>unique_ptr</code>、<code>shared_ptr</code>、<code>array</code>、时间和时钟、随机数、无序容器（哈希表）……</li></ul></li><li>2014 年：C++14 [du Toit 2014]<ul><li>语言：泛型 lambda 表达式、<code>constexpr</code> 函数中的局部变量、数字分隔符……</li><li>库：用户定义字面量……</li></ul></li><li>2017 年：C++17 [Smith 2017]<ul><li>语言：结构化绑定、变量模板、模板参数的构造函数推导……</li><li>库：文件系统、<code>scoped_lock</code>、<code>shared_mutex</code>（读写锁）、<code>any</code>、<code>variant</code>、<code>optional</code>、<code>string_view</code>、并行算法……</li></ul></li><li>2020 年：C++20 [Smith 2020]<ul><li>语言：<code>concept</code>、<code>module</code>、协程、三路比较、改进对编译期计算的支持……</li><li>库：概念、范围、日期和时区、<code>span</code>、格式、改进的并发和并行支持……</li></ul></li></ul><p>请注意，早年 C++ 的库是很匮乏的。事实上，当时还是存在大量各种各样的库（包括图形用户界面库），但很少被广泛使用，并且很多库是专有软件。这是在开源开发普及之前的事。这造成了 C++ 社区没有一个重要的共享基础库。在我的 HOPL2 论文 [Stroustrup 1993] 的回顾中，我认为那是早期 C++ 最糟糕的错误。</p><p>任务库 [Stroustrup 1985a,c] 是一个基于协程的库，支持事件驱动的仿真（例如随机数生成），与替代方案相比是非常高效的，甚至可以运行在很小的计算机上。例如，我在 256KB 的内存中运行了 700 个任务的仿真。任务库在 C++ 早期非常重要，是贝尔实验室和其他地方许多重要应用的基础。然而，它有点丑陋，并且不容易移植到 Sun 的 SPARC 体系结构，因此大多数 1989 年以后的实现都不支持它。2020 年，协程才刚刚回归（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）。</p><p>总的来说，C++ 的特性不断增多。ISO 委员会也废除了一些特性，对语言进行了稍许清理，但是考虑到 C++ 的大量使用（数十亿行代码），重要的特性是永远不会被移除的。稳定性也是 C++ 的关键特性。要解决跟语言不断增长的规模和复杂性相关的问题，办法之一是通过编码指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><h2 id="1-2-概述"><a href="#1-2-概述" class="headerlink" title="1.2 概述"></a>1.2 概述</h2><p>这篇论文是按照 ISO 标准发布的大致时间顺序组织的。</p><ul><li><a href="#1-%E5%89%8D%E8%A8%80">§1</a>：前言</li><li><a href="02.md#2-%E8%83%8C%E6%99%AFc-%E7%9A%84-19792006">§2</a>：背景：C++ 的 1979–2006</li><li><a href="03.md#3-c-%E6%A0%87%E5%87%86%E5%A7%94%E5%91%98%E4%BC%9A">§3</a>：C++ 标准委员会</li><li><a href="04.md#4-c11%E6%84%9F%E8%A7%89%E5%83%8F%E6%98%AF%E9%97%A8%E6%96%B0%E8%AF%AD%E8%A8%80">§4</a>：C++11：感觉像是门新语言</li><li><a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>：C++14：完成 C++11</li><li><a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>：概念</li><li><a href="07.md#7-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">§7</a>：错误处理</li><li><a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>：C++17：大海迷航</li><li><a href="09.md#9-c20%E6%96%B9%E5%90%91%E4%B9%8B%E4%BA%89">§9</a>：C++20：方向之争</li><li><a href="10.md#10-2020-%E5%B9%B4%E7%9A%84-c">§10</a>：2020 年的 C++</li><li><a href="11.md#11-%E5%9B%9E%E9%A1%BE">§11</a>：回顾</li></ul><p>如果一个主题跨越了一段较长的时间，比如“概念”和标准化流程，我会把它放在一个地方，让内容优先于时间顺序。</p><p>这篇论文特别长，真是一篇专题论文了。但是从 2006 年到 2020 年，C++ 经历了两次主要修订：C++11 和 C++20；而论文的早期读者们也都要求获得更多的信息。结果就是论文的页数几乎翻倍。即使以目前的篇幅，读者也会发现某些重要的主题没有得到充分的展现，如并发和标准库。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：即新的、非 C 风格的类型转换<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">1.前言</summary>
    
    
    
    <category term="History of C++" scheme="http://example.com/categories/History-of-C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>cpp stl</title>
    <link href="http://example.com/2024/09/11/algorithm/algorithm_learning/"/>
    <id>http://example.com/2024/09/11/algorithm/algorithm_learning/</id>
    <published>2024-09-11T02:16:34.144Z</published>
    <updated>2024-09-11T02:33:17.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><iostream></h2><p>包含 </p><ol><li>&lt;ios&gt;</li><li>&lt;streambuf&gt;</li><li>&lt;istream&gt;</li><li>&lt;ostream&gt;</li></ol><p>对象</p><ol><li>cin wcin（wcin用来处理宽字符wide character，可配合<cwchar>使用）</li><li>cout wcout</li><li>cerr wcerr:不会被缓冲，会立即写出，通常用于输出错误信息或其他紧急消息。</li><li>clog wclog:和cou一样会被缓冲，而非立即写出，通常用于输出调试信息或日志信息。</li></ol><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><fstream></h2><p>fstream是iostream库的一部分，支持文本和二进制文件的读写。</p><p>是iostream库中的一个类，它继承自istream和ostream类</p>]]></content>
    
    
    <summary type="html">cpp stl学习</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>The Republic</title>
    <link href="http://example.com/2024/09/08/the-republic/"/>
    <id>http://example.com/2024/09/08/the-republic/</id>
    <published>2024-09-08T10:33:22.000Z</published>
    <updated>2024-09-08T11:32:43.014Z</updated>
    
    <content type="html"><![CDATA[<p>‘If we’re thinking about the effect of education – or the lack of it – on our nature, there’s another comparison we can make. Picture human beings living in some sort of underground cave dwelling, with an entrance which is long, as wide as the cave, and open to the light. Here they live, from earliest childhood, with their legs and necks in chains, so that they have to stay where they are, looking only ahead of them, prevented by the chains from turning their heads. They have light from a distant fire, which is burning behind them and above them. Between the fire and the prisoners, at a higher level than them, is a path along which you must picture a low wall that has been built, like the screen which hides people when they are giving a puppet show, and above which they make the puppets appear.’</p><p>‘Yes, I can picture all that,’ he said.</p><p>‘Picture also, along the length of the wall, people carrying all sorts of implements which project above it, and statues of people, and animals made of stone and wood and all kinds of materials. As you’d expect, some of the people carrying the objects are speaking, while others are silent.’</p><p>‘A strange picture. And strange prisoners.’</p><p>‘No more strange than us,’ I said. ‘Do you think, for a start, that prisoners of that sort have ever seen anything more of themselves and of one another than the shadows cast by the fire on the wall of the cave in front of them?’</p><p>‘How could they, if they had been prevented from moving their heads all their lives?’</p><p>‘What about the objects which are being carried? Wouldn’t they see only shadows of these also?’</p><p>‘Yes, of course.’</p><p>‘So if they were able to talk to one another, don’t you think they’d believe that the things they were giving names to were the things they could see passing?’</p><p>‘Yes, they’d be bound to.’</p><p>‘What if the prison had an echo from the wall in front of them? Every time one of the people passing by spoke, do you suppose they’d believe the source of the sound to be anything other than the passing shadow?’</p><p>‘No, that’s exactly what they would think.’</p><p>‘All in all, then, what people in this situation would take for truth would be nothing more than the shadows of the manufactured objects.’</p><p>‘Necessarily.’</p><p>‘Suppose nature brought this state of affairs to an end,’ I said. ‘Think what their release from their chains and the cure for their ignorance would be like. When one of them was untied, and compelled suddenly to stand up, turn his head, start walking, and look towards the light, he’d find all these things painful. Because of the glare he’d be unable to see the things whose shadows he used to see before. What do you suppose he’d say if he was told that what he used to see before was of no importance, whereas now his eyesight was better, since he was closer to what is, and looking at things which more truly are? Suppose further that each of the passing objects was pointed out to him, and that he was asked what it was, and compelled to answer. Don’t you think he’d be confused? Wouldn’t he believe the things he saw before to be more true than what was being pointed out to him now?’</p><p>‘Yes, he would. Much more true.’</p><p>‘If he was forced to look at the light itself, wouldn’t it hurt his eyes? Wouldn’t he turn away, and run back to the things he could see? Wouldn’t he think those things really were clearer than what was being pointed out?’</p><p>‘Yes,’ he said.</p><p>‘And if he was dragged out of there by force, up the steep and difficult path, with no pause until he had been dragged right out into the sunlight, wouldn’t he find this dragging painful? Wouldn’t he resent it? And when he came into the light, with his eyes filled with the glare, would he be able to see a single one of the things he is now told are true?’</p><p>‘No, he wouldn’t. Not at first.’</p><p>‘He’d need to acclimatise himself, I imagine, if he were going to see things up there. To start with, he’d find shadows the easiest things to look at. After that, reflections – of people and other things – in water. The things themselves would come later, and from those he would move on to the heavenly bodies and the heavens themselves. He’d find it easier to look at the light of the stars and the moon by night than look at the sun, and the light of the sun, by day.’</p><p>‘Of course.’</p><p>‘The last thing he’d be able to look at, presumably, would be the sun. Not its image, in water or some location that is not its own, but the sun itself. He’d be able to look at it by itself, in its own place, and see it as it really was.’</p><p>‘Yes,’ he said, ‘unquestionably.’</p><p>‘At that point he would work out that it was the sun which caused the seasons and the years, which governed everything in the visible realm, and which was in one way or another responsible for everything they used to see.’</p><p>‘That would obviously be the next stage.’</p><p>‘Now, suppose he were reminded of the place where he lived originally, of what passed for wisdom there, and of his former fellow-prisoners. Don’t you think he would congratulate himself on the change? Wouldn’t he feel sorry for them?’</p><p>‘Indeed he would.’</p><p>‘Back in the cave they might have had rewards and praise and prizes for the person who was quickest at identifying the passing shapes, who had the best memory for the ones which came earlier or later or simultaneously, and who as a result was best at predicting what was going to come next. Do you think he would feel any desire for these prizes? Would he envy those who were respected and powerful there? Or would he feel as Achilles does in Homer? Would he much prefer “to labour as a common serf, serving a man with nothing to his name,” putting up with anything to avoid holding those opinions and living that life?’1</p><p>‘Yes,’ he said. ‘If you ask me, he’d be prepared to put up with anything to avoid that way of life.’</p><p>‘There’s another question I’d like to ask you,’ I said. ‘Suppose someone like that came back down into the cave and took up his old seat. Wouldn’t he find, coming straight in from the sunlight, that his eyes were swamped by the darkness?’</p><p>‘I’m sure he would.’</p><p>‘And suppose he had to go back to distinguishing the shadows, in competition with those who had never stopped being prisoners. Before his eyes had grown accustomed to the dark, while he still couldn’t see properly – and this period of acclimatisation would be anything but short – wouldn’t he be a laughing-stock? Wouldn’t it be said of him that he had come back from his journey to the upper world with his eyesight destroyed, and that it wasn’t worth even trying to go up there? As for anyone who tried to set them free, and take them up there, if they could somehow get their hands on him and kill him, wouldn’t they do just that?’</p><p>‘They certainly would,’ he said.</p><p>‘That is the picture, then, my dear Glaucon. And it fits what we were talking about earlier in its entirety. The region revealed to us by sight is the prison dwelling, and the light of the fire inside the dwelling is the power of the sun. If you identify the upward path and the view of things above with the ascent of the soul to the realm of understanding, then you will have caught my drift – my surmise – which is what you wanted to hear. Whether it is really true, perhaps only god knows. My own view, for what it’s worth, is that in the realm of what can be known the thing seen last, and seen with great difficulty, is the form or character of the good. But when it is seen, the conclusion must be that it turns out to be the cause of all that is right and good for everything. In the realm of sight it gives birth to light and light’s sovereign, the sun, while in the realm of thought it is itself sovereign, producing truth and reason unassisted. I further believe that anyone who is going to act wisely either in private life or in public life must have had a sight of this.’</p><p>‘Well, I for one agree with you,’ he said. ‘As far as I can follow, at any rate.’</p><p>‘Can you agree with me, then, on one further point? It’s no wonder if those who have been to the upper world refuse to take an interest in everyday affairs, if their souls are constantly eager to spend their time in that upper region. It’s what you’d expect, presumably, if things really are like the picture we have just drawn.’</p><p>‘Yes, it is what you’d expect.’</p><p>‘And here’s another question. Do you think it’s at all surprising if a person who turns to everyday life after the contemplation of the divine cuts a sorry figure, and makes a complete fool of himself – if before he can see properly, or can get acclimatised to the darkness around him, he is compelled to compete, in the lawcourts or anywhere else, over the shadows of justice or the statues which cast those shadows, or to argue about the way they are understood by those who have never seen justice itself?’</p><p>‘No, it’s not in the least surprising,’ he said.</p><p>‘Anyone with any sense,’ I said, ‘would remember that people’s eyesight can be impaired in two quite different ways, and for two quite different reasons. There’s the change from light to darkness, and the change from darkness to light. He might then take it that the same is true of the soul, so that when he saw a soul in difficulties, unable to see, he would not laugh mindlessly, but would ask whether it had come from some brighter life and could not cope with the unfamiliar darkness, or whether it had come from greater ignorance into what was brighter, and was now dazzled by the glare. One he would congratulate on what it had seen, and on its way of life. The other he would pity. Or if he chose to laugh at it, his laughter would be less absurd than laughter directed at the soul which had come from the light above.’</p><p>‘Yes. What you say is entirely reasonable.’</p><p>‘Well,’ I said, ‘if it’s true, there’s one conclusion we can’t avoid. Education is not what some people proclaim it to be. What they say, roughly speaking, is that they are able to put knowledge into souls where none was before. Like putting sight into eyes which were blind.’</p><p>‘Yes, that is what they say.’</p><p>‘Whereas our present account indicates that this capacity in every soul, this instrument by means of which each person learns, is like an eye which can only be turned away from the darkness and towards the light by turning the whole body. The entire soul has to turn with it, away from what is coming to be, until it is able to bear the sight of what is, and in particular the brightest part of it. This is the part we call the good, isn’t it?’</p><p>‘Yes.’</p>]]></content>
    
    
    <summary type="html">The Republic by Plato,Book 7</summary>
    
    
    
    <category term="art" scheme="http://example.com/categories/art/"/>
    
    
    <category term="散文" scheme="http://example.com/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>CPP大数运算</title>
    <link href="http://example.com/2024/08/30/algorithm/2024_8_30/"/>
    <id>http://example.com/2024/08/30/algorithm/2024_8_30/</id>
    <published>2024-08-30T13:23:28.001Z</published>
    <updated>2024-08-30T13:29:42.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蜜蜂路线"><a href="#蜜蜂路线" class="headerlink" title="蜜蜂路线"></a>蜜蜂路线</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>无</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只蜜蜂在下图所示的数字蜂房上爬动,已知它只能从标号小的蜂房爬到标号大的相邻蜂房,现在问你：蜜蜂从蜂房 $m$ 开始爬到蜂房 $n$，$m&lt;n$，有多少种爬行路线？（备注：题面有误，右上角应为 $n-1$）</p><p><img src="https://cdn.luogu.com.cn/upload/pic/1575.png"></p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入 $m,n$ 的值</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>爬行有多少种路线</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">377<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于100%的数据，$1 \le M,N\le 1000$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// Function to add two big numbers represented as vectors of digits.</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">addBigNumbers</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; num1, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; num2)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; result;<br>    <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> it1 = num1.<span class="hljs-built_in">rbegin</span>(), it2 = num2.<span class="hljs-built_in">rbegin</span>();<br><br>    <span class="hljs-keyword">while</span> (it1 != num1.<span class="hljs-built_in">rend</span>() || it2 != num2.<span class="hljs-built_in">rend</span>() || carry != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> sum = carry;<br>        <span class="hljs-keyword">if</span> (it1 != num1.<span class="hljs-built_in">rend</span>()) sum += *it1++;<br>        <span class="hljs-keyword">if</span> (it2 != num2.<span class="hljs-built_in">rend</span>()) sum += *it2++;<br>        carry = sum / <span class="hljs-number">10</span>;<br>        result.<span class="hljs-built_in">push_back</span>(sum % <span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">reverse</span>(result.<span class="hljs-built_in">begin</span>(), result.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-type">int</span> num = n - m + <span class="hljs-number">1</span>;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(<span class="hljs-number">1001</span>);<br>    <br>    <span class="hljs-comment">// Initialize the first three numbers in the sequence.</span><br>    a[<span class="hljs-number">0</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br>    a[<span class="hljs-number">1</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br>    a[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">1001</span>; ++i) &#123;<br>        a[i] = <span class="hljs-built_in">addBigNumbers</span>(a[i<span class="hljs-number">-2</span>], a[i<span class="hljs-number">-1</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// Print the number at position &#x27;num&#x27;.</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> digit : a[num]) &#123;<br>        cout &lt;&lt; digit;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>思路与问题</strong>：</p><ol><li>这是斐波那契数列问题，需要关注n-m</li><li>实际编程问题：斐波那契数列膨胀过快，需要用大数存储运算</li></ol><p><strong>cpp实现大数</strong>：</p><ol><li>用vector动态数组来存放长度无法确定的大数</li><li>利用rend rbegin而非begin end迭代，即从低位向高位加，最后结果再reverse得到</li><li>输出时，使用vector本身的迭代输出</li></ol>]]></content>
    
    
    <summary type="html">算法学习</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>01背包问题</title>
    <link href="http://example.com/2024/08/28/algorithm/2024_8_28/"/>
    <id>http://example.com/2024/08/28/algorithm/2024_8_28/</id>
    <published>2024-08-28T02:51:05.973Z</published>
    <updated>2024-08-28T03:18:13.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h1 id="NOIP2005-普及组-采药"><a href="#NOIP2005-普及组-采药" class="headerlink" title="[NOIP2005 普及组] 采药"></a>[NOIP2005 普及组] 采药</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有 $2$ 个整数 $T$（$1 \le T \le 1000$）和 $M$（$1 \le  M \le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。</p><p>接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出在规定的时间内可以采到的草药的最大总价值。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 $30%$ 的数据，$M \le 10$；</li><li>对于全部的数据，$M \le 100$。</li></ul><p><strong>【题目来源】</strong></p><p>NOIP 2005 普及组第三题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> t, num,i;<br>    cin &gt;&gt; t&gt;&gt; num;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> time[num+<span class="hljs-number">1</span>],value[num+<span class="hljs-number">1</span>],best[t+<span class="hljs-number">1</span>][num+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> ii;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>;i&lt;num+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        cin &gt;&gt; time[i] &gt;&gt; value[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; t+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; num+<span class="hljs-number">1</span>;ii++)&#123;<br>            best[i][ii] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; t+<span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">1</span>; ii &lt; num+<span class="hljs-number">1</span>; ii++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; time[ii])<br>            &#123;<br>                <span class="hljs-comment">// 总时间少于草药ii</span><br>                best[i][ii] = best[i][ii<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//best[i][ii]表示在总时间i内，草药0 - ii内的最大价值</span><br>                <span class="hljs-comment">//总时间大于草药ii</span><br>                <span class="hljs-comment">//左边为不含草药ii，右边的为包含草药ii</span><br>                best[i][ii] = <span class="hljs-built_in">max</span>(best[i][ii<span class="hljs-number">-1</span>], best[i - time[ii]][ii<span class="hljs-number">-1</span>] + value[ii]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; best[t][num];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>思路与问题</strong>：</p><ol><li>这是一个01背包问题</li><li>总体思路：使用一个二维数组，不断遍历重量和物品数，实现总时间复杂度$O(nm)$。</li><li>实际编程问题：注意边界，因为递推公式的存在，因此需要将边界0作为0的基准，而1-n&#x2F;1-m存放实际的物品和重量</li></ol>]]></content>
    
    
    <summary type="html">算法学习</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>HUST考研科目</title>
    <link href="http://example.com/2024/08/21/master/"/>
    <id>http://example.com/2024/08/21/master/</id>
    <published>2024-08-21T15:40:33.000Z</published>
    <updated>2024-08-21T15:47:26.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="101-思想政治理论"><a href="#101-思想政治理论" class="headerlink" title="101|思想政治理论"></a>101|思想政治理论</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li>马克思主义基本原理概论</li><li>毛泽东思想和中国特色社会主义理论体系概论</li><li>中国近现代史纲要</li><li>思想道德修养与法律基础</li><li>形势与政策以及当代世界经济与政治</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>单项选择题：16小题，每题1分，共16分</li><li>多项选择题：17小题，每题2分，共34分</li><li>分析题：5小题，每题10分，共50分</li><li>总分100分</li></ul></li></ul><h3 id="201-英语一"><a href="#201-英语一" class="headerlink" title="201|英语一"></a>201|英语一</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li>英语综合运用能力，包括阅读理解、词汇、语法、写作等。</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>完形填空：20小题，每题0.5分，共10分</li><li>阅读理解A部分：4篇文章，20小题，每题2分，共40分</li><li>阅读理解B部分（新题型）：5小题，每题2分，共10分</li><li>阅读理解C部分（翻译）：1篇短文，共10分</li><li>写作：应用文1篇（10分），短文1篇（20分）</li><li>总分100分</li></ul></li></ul><h3 id="301-数学一"><a href="#301-数学一" class="headerlink" title="301|数学一"></a>301|数学一</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li><strong>高等数学</strong>：占总分的56%，主要考察函数、极限、连续、导数与微分、不定积分、定积分、微分方程等。</li><li><strong>线性代数</strong>：占总分的22%，主要考察行列式、矩阵、向量组的线性相关性、线性方程组、特征值与特征向量、二次型等。</li><li><strong>概率论与数理统计</strong>：占总分的22%，主要考察随机事件的概率、随机变量及其分布、多维随机变量及其分布、随机变量的数字特征、大数定律与中心极限定理、参数估计、假设检验等。</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>单选题：8小题，每题4分，共32分</li><li>填空题：6小题，每题4分，共24分</li><li>解答题（包括证明题）：9小题，共94分</li><li>总分150分</li></ul></li></ul><h3 id="408计算机统考"><a href="#408计算机统考" class="headerlink" title="408计算机统考"></a>408计算机统考</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li><strong>数据结构</strong>：占总分的45%，主要考察线性结构（数组、链表等）、树形结构、图、查找与排序等。</li><li><strong>计算机组成原理</strong>：占总分的15%，主要考察计算机系统的层次结构、整数的表示和运算、浮点表示和运算、指令系统、中央处理器、存储系统、输入输出系统等。</li><li><strong>操作系统</strong>：占总分的15%，主要考察进程管理、内存管理、文件管理和输入输出系统等。</li><li><strong>计算机网络</strong>：占总分的25%，主要考察物理层、数据链路层、网络层、传输层、应用层等。</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>单选题：40小题，每题2分，共80分</li><li>综合应用题：7小题，共70分</li><li>总分150分</li></ul></li></ul><h3 id="复试科目"><a href="#复试科目" class="headerlink" title="复试科目"></a>复试科目</h3><p>笔试（40分）+机试（20分）+面试（20分专业+20分口语）</p><p>考研总成绩按初试成绩占60%，复试成绩占40%计算，其中初试四门考试成绩按百分制进行折算。 不破格录取，复试不及格一律不予录取（总成绩60分）</p><p>① 笔试、闭卷、2.5小时。</p><p>以下四门课程由考生本人任选二门。参考书如下：</p><p>《计算机系统结构教程》，张晨曦等，清华大学出版社，2009。</p><p>《80X86汇编语言程序设计》王元珍、曹忠升、韩宗芬，华中科技大学出版社</p><p>《数据库系统概论》第三版，萨师煊、王珊，高等教育出版社。</p><p>《计算机算法基础》第三版，余祥宣、崔国华、邹海明，华中科技大学出版社</p><p>② 计算机操作能力考核是在Turbo C或VC环境下用C语言编程，90分钟3题。</p><p>③ 面试主要对考生的知识结构和综合能力进行测试。</p>]]></content>
    
    
    <summary type="html">HUST考研科目</summary>
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>重返未来1999 1.7</title>
    <link href="http://example.com/2024/08/17/reverse-1999-1-7-1/"/>
    <id>http://example.com/2024/08/17/reverse-1999-1-7-1/</id>
    <published>2024-08-17T02:32:18.000Z</published>
    <updated>2024-08-17T02:52:14.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="E-lucevan-le-stelle"><a href="#E-lucevan-le-stelle" class="headerlink" title="E lucevan le stelle"></a>E lucevan le stelle</h2><p>伴着歌声与舞步，在歌剧的高潮之中</p><p>暴雨倾然而至</p><p>亲情、友情、爱情</p><p>痛苦与释放、阳光与阴郁</p><p>都在雨点中混在一起</p><p>失去了原本的颜色</p><h2 id="为艺术，为爱情"><a href="#为艺术，为爱情" class="headerlink" title="为艺术，为爱情"></a>为艺术，为爱情</h2><img src="/img/1999/1_7_at_chuangzhongwangshi1.png">]]></content>
    
    
    <summary type="html">1.7版本现已结束。优秀的音乐，绝妙的起伏。</summary>
    
    
    
    <category term="game" scheme="http://example.com/categories/game/"/>
    
    
    <category term="散文" scheme="http://example.com/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Half is not Enough</title>
    <link href="http://example.com/2024/05/26/half-is-not-enough/"/>
    <id>http://example.com/2024/05/26/half-is-not-enough/</id>
    <published>2024-05-26T11:27:42.000Z</published>
    <updated>2024-05-26T11:54:36.684Z</updated>
    
    <content type="html"><![CDATA[<p>Do not love half lovers<br>Do not entertain half friends<br>Do not indulge in works of the half talented<br>Do not live half a life and do not die a half death</p><p>If you choose silence, then be silent</p><p>When you speak, do so until you are finished</p><p>Do not silence yourself to say something<br>And do not speak to be silent</p><p>If you accept, then express it bluntly<br>Do not mask it</p><p>If you refuse then be clear about it<br>for an ambiguous refusal<br>is but a weak acceptance</p><p>Do not accept half a solution<br>Do not believe half truths<br>Do not dream half a dream<br>Do not fantasize about half hopes</p><p>Half a drink will not quench your thirst<br>Half a meal will not satiate your hunger<br>Half the way will get you no where<br>Half an idea will bear you no results</p><p>Your other half is not the one you love<br>It is you in another time yet in the same space<br>It is you when you are not</p><p>Half a life is a life you didn’t live<br>A word you have not said<br>A smile you postponed<br>A love you have not had<br>A friendship you did not know</p><p>To reach and not arrive<br>Work and not work<br>Attend only to be absent<br>What makes you a stranger to them closest to you<br>and they strangers to you</p><p>The half is a mere moment of inability<br>but you are able for you are not half a being</p><p>You are a whole<br>that exists<br>to live a life</p><p>not half a life</p>]]></content>
    
    
    <summary type="html">Half is not Enough by Kahlil Gibran</summary>
    
    
    
    <category term="art" scheme="http://example.com/categories/art/"/>
    
    
    <category term="poem" scheme="http://example.com/tags/poem/"/>
    
  </entry>
  
</feed>
