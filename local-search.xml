<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从edge看程序的多进程设计</title>
    <link href="/2025/02/21/Edge_multi_process/"/>
    <url>/2025/02/21/Edge_multi_process/</url>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>参考链接：<a href="https://blogs.windows.com/msedgedev/2020/09/30/microsoft-edge-multi-process-architecture/">Microsoft Edge’s multi-process architecture</a></p><p>进程是程序运作的基本单位，而线程隶属于进程，一个进程可以有包含主线程在内的多个线程，用来提升性能。</p><p>平时在编程中，很少会遇到需要额外创建进程的情况，自己编写的代码几乎都是一个进程就够了。但是在实际的开发中，多进程也是很常用的策略，但是我了解不多，因此借着Edge的设计来看看多进程设计。</p><h2 id="1-Edge的多进程设计"><a href="#1-Edge的多进程设计" class="headerlink" title="1.Edge的多进程设计"></a>1.Edge的多进程设计</h2><p>浏览器含有多个进程模块：</p><ul><li>1.Browser process：是主进程，组织打开的窗口、页面，控制浏览器本身的一些基本元素（上方的地址栏、前进后退按钮），并且对网络、文件等进程拥有特殊权限。</li><li>2.Renderer processes：执行代码渲染网页，处理HTML、CSS、JavaScript、images等，占用的资源受内容影响很大。</li><li>3.GPU process：与GPU关联，借助GPU加速上面提到的网页渲染。</li><li>4.Utility process：音频播放、网络服务、摄像头视频捕捉、解码、信息收集等，便于Edge掌握总体资源。</li><li>5.Plug-in processes and extension processes：包含Flash等插件以及其他扩展。</li><li>6.Crashpad handler process：用于将crash信息传递给微软。</li></ul><p>示意图片：</p><img src="/img/Edge_multi_process.png"><img src="/img/Edge_multi_process_2.png"><img src="/img/Edge_multi_process_3.png"><h2 id="2-多进程架构的优点"><a href="#2-多进程架构的优点" class="headerlink" title="2. 多进程架构的优点"></a>2. 多进程架构的优点</h2><h3 id="2-1-安全设计"><a href="#2-1-安全设计" class="headerlink" title="2.1 安全设计"></a>2.1 安全设计</h3><ul><li><p><strong>进程隔离</strong><br>每个进程独立运行，防止恶意网页或攻击利用漏洞跨进程传播。例如，如果恶意软件利用其中一个renderer进程的漏洞，会因权限受到严格限制而难以影响其他部分，从而保护用户的敏感信息。</p></li><li><p><strong>权限受限</strong><br>由于renderer进程权限较低，即使受到攻击，也仅限于网页渲染这一环节，攻击者难以获得更高权限或控制整个系统。</p></li><li><p><strong>资源访问控制</strong><br>用单独的工具进程管理音频、网络、视频捕捉和数据解码等资源，可以更好地保护这些操作，减少潜在的安全风险。</p></li></ul><h3 id="2-2-提高可靠性"><a href="#2-2-提高可靠性" class="headerlink" title="2.2 提高可靠性"></a>2.2 提高可靠性</h3><ul><li><p><strong>进程崩溃隔离</strong><br>当某个网页、扩展或插件崩溃时，仅该进程受到影响，其他进程仍能继续稳定运行，大大提升了浏览器的整体稳定性和用户体验。</p></li><li><p><strong>容错和恢复能力</strong><br>多进程架构使得浏览器能够更容易地检测和隔离出问题的部分，从而快速恢复正常状态，避免全局崩溃的情况发生。</p></li></ul><h3 id="2-3-资源可控性与效率"><a href="#2-3-资源可控性与效率" class="headerlink" title="2.3 资源可控性与效率"></a>2.3 资源可控性与效率</h3><ul><li><p><strong>资源监控</strong><br>每个进程独立运行，让用户可以在任务管理器中清晰地看到各个进程的资源占用情况（如CPU、内存、GPU等），从而判断是浏览器自身、网站内容还是扩展或插件在消耗资源。</p></li><li><p><strong>优化资源调度</strong><br>将任务分散到不同的进程中，系统可以更高效地进行资源分配，保证各模块在不同硬件环境下都能得到最佳性能。</p></li></ul><h3 id="2-4-性能优化"><a href="#2-4-性能优化" class="headerlink" title="2.4 性能优化"></a>2.4 性能优化</h3><ul><li><p><strong>并行处理</strong><br>多进程设计使得浏览器可以同时处理多个任务（如页面渲染、视频处理和数据解码），减少任务间的互相干扰，从而实现更流畅的用户体验。</p></li><li><p><strong>提高系统响应速度</strong><br>在重负载情况下，各个进程独立运行可以减缓整体系统的压力，提升浏览器和操作系统的响应速度。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Operater System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_10/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_10/</url>
    
    <content type="html"><![CDATA[<h1 id="10-2020-年的-C"><a href="#10-2020-年的-C" class="headerlink" title="10. 2020 年的 C++"></a>10. 2020 年的 C++</h1><p>本节我们来查看一下在二十一世纪的第二个十年里，C++ 如何被使用，以及用来做什么：</p><ul><li><a href="#101-c-%E7%94%A8%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88">§10.1</a>：C++ 用来做什么？</li><li><a href="#102-c-%E7%A4%BE%E5%8C%BA">§10.2</a>：C++ 社区</li><li><a href="#103-%E6%95%99%E8%82%B2%E5%92%8C%E7%A0%94%E7%A9%B6">§10.3</a>：教育和科研</li><li><a href="#104-%E5%B7%A5%E5%85%B7">§10.4</a>：工具</li><li><a href="#105-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC">§10.5</a>：编程风格</li><li><a href="#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>：核心指南</li></ul><p>C++ 的使用领域绝大部分与 2006 年相同（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。虽然有一些新的领域，但在大多数情况下，我们看到的 C++ 还是在相同或类似的领域中被更加广泛和深入地使用。C++ 没有突然成为一种面向 Web 应用开发的语言，虽然即使在那种场景下仍有人用 C++ [Obiltschnig et al. 2005]。对于大多数程序员来说，C++ 依然是某种隐没在后台的东西，稳定、可靠、可移植、高性能。最终用户是看不见 C++ 的。</p><p>编程风格则有更加巨大的变化。比起 C++98，C++11 是门好得多的语言。它更易于使用，表达能力更强，性能还更高。2020 年发布的 C++20 则在 C++11 的基础上做出了类似程度的改进。</p><h2 id="10-1-C-用来做什么？"><a href="#10-1-C-用来做什么？" class="headerlink" title="10.1 C++ 用来做什么？"></a>10.1 C++ 用来做什么？</h2><p>大致而言，C++ 可谓无处不在、无所不用。但是，大象无形，大多数 C++ 的使用并不可见，被深深隐藏在重要系统的基础设施内部。</p><p>C++ 被用在哪里，是如何被使用的，没人能够完整了解。2015 年，捷克公司 JetBrains 委托进行了一项研究 [Kazakova 2015]，结果显示在北美、欧洲、中东以及亚太地区 C++ 被大量使用，在南美也有一些使用。“在南美的一些使用”就有 40 万开发者，而 C++ 开发者的总人数则达到了 440 万。使用 C++ 的行业有（按顺序）金融、银行、游戏、前台、电信、电子、投资银行、营销、制造和零售。所有迹象表明，自 2015 年以来，C++ 的用户数量和使用领域一直在稳步增长。</p><p>在这里，我将对 2006 到 2020 年期间内 C++ 的应用领域给出一个可能有些个人化的、印象派的、非常不完整的概览：</p><ul><li><strong>工业界</strong>：电信（例如 AT&amp;T、爱立信、华为和西门子）、移动设备（基本上是所有，信号处理、屏幕渲染、对性能或可移植性有重大要求的应用）、微电子（例如 AMD、英特尔、Mentor Graphics 和英伟达）、金融（例如摩根士丹利和文艺复兴）、游戏（几乎所有）、图形和动画（例如 Maya、迪士尼和 SideFx）、区块链实现（例如 Ripple）、数据库（例如 SAP、Mongo、MySQL 和 Oracle）、云（例如谷歌、微软、IBM 和 Amazon）、人工智能和机器学习（例如 TensorFlow 库）、运营支持（例如 Maersk 和 AT&amp;T）。</li><li><strong>科学</strong>：航空航天（例如 Space X、火星漫游者、猎户座载人飞行器、詹姆斯·韦伯太空望远镜）、高能物理（例如 CERN 欧洲核子研究中心、SLAC 国家加速器实验室、费米实验室）、生物学（遗传学、基因组测序）、超大规模计算。</li><li><strong>教学</strong>：全球大多数工程院校。</li><li><strong>软件开发</strong>：TensorFlow、工具、库、编译器、Emscripten（从 C++ 生成 asm.js 和 WebAssembly）、运行期代码生成、LLVM（许多新语言的后台支柱，也大量用于工具构建中）、XML 和 JSON 解析器、异构计算（例如 SYCL [Khronos Group 2014–2020] 和 HPX [Stellar Group 2014–2020]）。</li><li><strong>Web 基础设施</strong>：浏览器（Chrome、Edge、FireFox 和 Safari）、JavaScript 引擎（V8 和 SpiderMonkey）、Java 虚拟机（HotSpot 和 J9）、谷歌和类似组织（搜索、map-reduce 和文件系统）。</li><li><strong>主要 Web 应用</strong>：阿里巴巴、Amadeus（机票）、Amazon、苹果、Facebook、PayPal、腾讯（微信）、Yandex。</li><li><strong>工程应用</strong>：达索（CAD&#x2F;CAM）、洛克希德·马丁（飞机）。</li><li><strong>汽车</strong>：辅助驾驶 [ADAS Wikipedia 2020; Mobileye 2020; NVIDIA 2020]、软件架构 [Autosar 2020; Autosar Wikipedia 2020]、机器视觉 [OpenCV 2020; OpenCV Wikipedia 2020]、宝马、通用、梅赛德斯、特斯拉、丰田、沃尔沃、大众、Waymo（谷歌自动驾驶汽车）。</li><li><strong>嵌入式系统</strong>：智能手表和健康监控器（例如佳明）、相机和视频设备（例如奥林巴斯和佳能）、导航辅助设备（例如 TomTom）、咖啡机（例如 Nespresso）、农场动物监控器（例如 Big Dutchman）、生产线温度控制（例如嘉士伯）。</li><li><strong>安全</strong>：卡巴斯基、美国国家安全局、赛门铁克。</li><li><strong>医疗和生物学</strong>：医学监测和成像（例如西门子、通用电气、东芝和飞利浦）、断层扫描（例如 CT）、基因组分析、生物信息学、放射肿瘤学（例如 Elekta 和 Varian）。</li></ul><p>虽然这只是冰山一角，但它展示了 C++ 使用的广度和深度。大多数 C++ 的使用对其（间接）用户不可见。某些对 C++ 的使用早于 2006 年，但也有很多是之后才开始的。没有一个主要现代系统只用单一语言写就，但是 C++ 在所有这里提到的应用场合中发挥了重要作用。</p><p>我们常常忘记那些平凡的却在我们的生活中起着重要作用的应用。没错，C++ 可以帮助运行美国国家航空航天局的深空网络，但也可以在人们日常熟悉的小设备中运行，例如咖啡机、立体声扬声器和洗碗机。让我惊讶的是，C++ 竟然也被应用于运转现代养猪场的先进系统中。</p><h2 id="10-2-C-社区"><a href="#10-2-C-社区" class="headerlink" title="10.2 C++ 社区"></a>10.2 C++ 社区</h2><p>与 2006 年相比，2020 年的 C++ 社区更加壮大，不断蓬勃发展、积极向上、富有成效，并且急切地想看到未来的进一步改进。</p><p>与大多数编程语言社区相比，C++ 社区一向是出奇地无组织和分散。这个问题早已有之，因为我就没有建立组织的才能。当时我的雇主 AT&amp;T 贝尔实验室并不想建立一个 C++ 社区，但是似乎其他所有人都非常感兴趣，并且愿意花钱来建立他们的用户群。最终的结果是，许多公司，例如苹果、Borland、GNU、IBM、微软和 Zortech 都建立了以其客户为中心的 C++ 社区，但是却没有总体的 C++ 社区，社区没有中心。有杂志，读的人不多（相对于 C++ 社区的规模）。虽然有会议，但它们倾向于被一般的“面向对象”的会议或“软件开发”的会议所吸收或者就演变成了那些一般性会议。没有总体的 C++ 用户组。</p><p>如今，世界上有数十个本地、国家和国际 C++ 用户组，这些用户组之间也经常进行一些合作。除此之外，还有数十个 C++ 会议，每个会议都有数百人参加：</p><ul><li><strong>C++ 基金会</strong>——成立于 2014 年，是一家非盈利性组织，旨在推广 ISO C++（而不是任何特定供应商的 C++），它主办 CppCon 年度会议。</li><li><strong>Boost</strong>——成立于 1999 年，它是一组经过同行评审的库、以及建造使用它们的社区。Boost 举行年度会议。</li><li>**Meeting C++**——成立于 2012 年，是一个非常活跃的用户团体网络，定期举行会议（最初在德国活跃）。在不同地方有数十个 Meeting C++ 的会议和聚会。</li><li><strong>ACCU</strong>——成立于 1984 年，最初作为 C 用户组而建立，是所有现存 C++ 组织中的爷爷辈了；它出版两本杂志，并举行年度会议（主要在英国活跃）。</li><li><strong>isocpp.org</strong>——C++ 基金会的网站，其中包含与 C++ 有关的新闻，标准化进程相关的信息，以及有用的链接。</li><li><strong>cppreference.com</strong>——出色的在线参考资料；它甚至有一个历史部分！</li><li><strong>会议</strong>——CppCon、ACCU、Meeting++、C++ Now（以前称为 BoostCon）、Qt、NDC、std::cpp 的会议，以及在波兰、俄罗斯、中国、以色列和其他地方的一些会议。此外，很多通用软件会议上也在越来越多的安排 C++ 专题。</li><li><strong>博客</strong>——有许多，播客也是。</li><li><strong>视频</strong>——视频已成为有关 C++ 的最新进展的主要信息来源。主要的 C++ 会议通常会录制演讲视频并将其发布以供免费访问（例如 CppCon、C++Now 和 Meeting++）。视频采访已变得很流行。最多最受欢迎的托管网站是 YouTube，但不幸的是，YouTube 在有些拥有大型 C++ 开发者群体的国家（例如中国）被封了。</li><li><strong>GitHub</strong>——使共享代码和组织联合项目开发变得更加容易。</li></ul><p>跟某些语言和供应商的集中组织相比，这还差得很远。但是，这些 C++ 社区和组织富有活力，彼此保持联系，并且比在 2006 年的时候活跃得多。此外，一些企业的用户组和会议也仍然活跃。</p><h2 id="10-3-教育和研究"><a href="#10-3-教育和研究" class="headerlink" title="10.3 教育和研究"></a>10.3 教育和研究</h2><p>从 2006 年不太理想的状态（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）到现在，C++ 的教育是否得到了改善？也许吧，但是对于 C++ 来说，教育仍然不是强项，大多数教育还都集中在为业内人士提供信息和培训上。在大多数国家&#x2F;地区，很多大学毕业生对 C++ 语言及使用它的关键技术只能算一知半解。对于 C++ 社区来说，这是一个严重的问题。因为，对于一门语言来说，如果没有热情洋溢的程序员们源源不断、前赴后继地精通其关键设计和实现技术，那它是无法在工业规模上取得成功的。假如更多使用 C++ 的开发者知道如何更好地使用它，那他们就能做太多太多的事来改进软件！如果毕业生带着更准确的 C++ 视角进入工作岗位，那么太多太多的事情会变得容易得多！</p><p>C++ 教学所面临的一个问题是教育机构经常将编程视为低级技能，而不是基础课目。好的软件对我们的文明至关重要。为了把控软件，我们需要像对待数学和物理学一样，严肃认真地对待关键系统的软件开发。那种削足适履的方式对于教育和软件开发是行不通的。一个学期的教学也远远不够。我们永远都不会期望在教了短短几个月英语之后，学生就会懂得欣赏莎士比亚。同样，了解语言的基本机制与精通内行所使用的惯用法和技巧之间是有差距的。就像任何主要的现代编程语言一样，教授 C++ 也需要根据学生的背景和需求相应地调整教学方法。即使教育机构意识到了这些问题并愿意做出一些弥补，奈何学生已经课满为患，教师也很难保持不跟工业实践脱节。SG20（教育）正试图总结教授和使用现代 C++ 的方法来提供一些帮助。SG15（工具）则可能提供更多支持教学的工具，从而越来越多地发挥重要作用。</p><p>从 C++11 开始，我们对此有了越来越多的认识。例如，Kate Gregory 制作了一些很棒的视频，介绍了如何教授 C++ [Gregory 2015, 2017, 2018]。最近的一些书籍认识到在支持教育方面，不同的受众存在不同的需求，并试图迎头解决这些问题：</p><ul><li>《C++ 程序设计原理与实践》（*Programming: Principles and Practice Using C++*）[Stroustrup 2008a]——这是一本针对刚入门的大学生和自学人士的教科书。</li><li>《C++ 语言导学》（*A Tour of C++*）[Stroustrup 2014d，2018f]——针对经验丰富的程序员的简短概述（200 页）。</li><li>《发现现代 C++》（*Discovering Modern C++*）[Gottschling 2015]——这是一本专门为数学背景较强的学生准备的书。</li></ul><p>我也写了一些半学术性质的论文（<em>Software Development for Infrastructure</em> [Stroustrup 2012] 和 <em>What should we teach software developers? Why?</em> [Stroustrup 2010b]），并在 CppCon 2017 开幕式上作了关于 C++ 教育的主题演讲（<em>Learning and Teaching Modern C++</em> [Stroustrup 2017c]）。</p><p>自 2014 年左右以来，视频和在线课程的使用急剧增加。这对 C++ 的教学来说很有帮助，因为这样就不需要一个中心组织或大量资金的支持。</p><p>以下列出了从 2006 到 2020 年间，与 C++ 语言相关的学术研究成果：</p><ul><li><strong>概念</strong>：泛型编程 [Dehnert and Stepanov 2000]、C++0x 概念 [Gregor et al. 2006]、使用模式 [Dos Reis and Stroustrup 2006]、库设计 [Sutton and Stroustrup 2011]。</li><li><strong>理论与形式化体系</strong>：继承模型 [Wasserrab et al. 2006]、模板和重载 [Dos Reis and Stroustrup 2005a]、模板语义 [Siek and Taha 2006]、对象布局 [Ramananandro et al. 2011]、构造和析构 [Ramananandro et al. 2012]、用于代码处理的表示形式 [Dos Reis and Stroustrup 2009，2011]、资源模型 [Stroustrup et al. 2015]。</li><li><strong>动态查找</strong>：快速动态类型转换 [Gibbs and Stroustrup 2006]、模式匹配 [Solodkyyet et al. 2012]、多重方法 [Pirkelbauer et al. 2010]。</li><li><strong>静态分析</strong>：可靠的表示法 [Yang et al. 2012]、实践经验 [Bessey 2010]。</li><li><strong>性能</strong>：代码膨胀 [Bourdev and Järvi 2006，2011]、异常实现 [Renwicket et al. 2019]。</li><li><strong>语言比较</strong>：泛型编程 [Garcia et al. 2007]。</li><li><strong>并发和并行编程</strong>：内存模型 [Batty et al. 2013，2012，2011]、HPX（一个适用于任何规模的并行和分布式应用程序的通用 C++ 运行时系统 [Kaiser et al. 2009Sept]）、STAPL（自适应泛型并行 C++ 库 [Zandifar et al. 2014]）、TBB（英特尔的任务并行库 [Reinders 2007]）。</li><li><strong>协程</strong>：数据库优化 [Jonathan et al. 2018; Psaropoulos et al. 2017]。</li><li><strong>软件工程</strong>：代码的组织和优化 [Garcia and Stroustrup 2015]、常量表达式求值 [Dos Reis and Stroustrup 2010]</li></ul><p>看起来还有更多的关于 C++ 的学术研究机会，关于语言的特性和技巧（例如，异常处理、编译期编程和资源管理），以及其使用的有效性（例如，静态分析或基于真实世界代码和经验的研究）。</p><p>C++ 社区中最活跃的成员中很少有人会考虑撰写学术论文，写书似乎更受欢迎（例如，[Čukić 2018; Gottschling 2015; Meyers 2014; Stepanov and McJones 2009; Vandevoorde et al. 2018; Williams 2018]）。</p><h2 id="10-4-工具"><a href="#10-4-工具" class="headerlink" title="10.4 工具"></a>10.4 工具</h2><p>与其他语言相比，在 1990 年代初期到中期，C++ 在用于工业用途的工具和编程环境方面做得相当不错。例如，图形用户界面和集成软件开发环境都率先应用于 C++。后来，开发和投资的重点转移到专属语言，例如 Java（Sun）、C#（微软）和 Objective-C（苹果）以及更简单的语言，例如 C（GNU）。</p><p>在我看来，有两个主要原因：</p><ul><li>资金：组织倾向于使用他们可以控制的语言和工具，从而提供比竞争对手更大的差异化优势。从这个角度来看，C++ 由正式的标准委员会控制、强调所有人的利益，这反倒成了一个缺点——某种公地悲剧的变体。</li><li>宏和文本定义：C++ 没有一个简单，可广泛使用的内部表示形式来简化基于源代码的工具构建，并且大量使用宏必然导致程序员看到的跟编译器所分析的有所不同。和 C 一样，C++ 是根据字符序列来定义的，而非根据直接表示抽象且更易于操作的构件来定义。我与 Gabriel Dos Reis 一起定义了这样一个表示形式 [Dos Reis and Stroustrup 2009, 2011]，但事实证明 C++ 社区中面向字符的传统难以克服。当初建造时没有意识到的规范化结构，想通过翻新加上去就难了。</li></ul><p>因此，在 2006–2020 年期间，与其他语言相比，C++ 被支持工具方面的问题严重困扰。但是，随着以下这些工具的涌现，这种情况得到了稍许改善：</p><ul><li>工业级的集成软件开发环境：例如微软的 Visual Studio [Microsoft 2020; VStudio Wikipedia 2020] 和 JetBrains 的 CLion [CLion Wikipedia 2020; JetBrains 2020]。这些环境不仅支持编辑和调试，还支持各种形式的分析和简单的代码转换。</li><li>在线编译器：例如 Compiler Explorer [Godbolt 2016] 和 Wandbox [Wandbox 2016–2020]。这些系统允许从任何浏览器中编译 C++ 程序，有时甚至可以执行。它们可用于实验，检查代码质量，还有比较不同的编译器及编译器和库的不同版本。</li><li>GUI 库和工具：例如 Qt [Qt 1991–2020]、GTKmm [GTKmm 2005–2020] 和 wxWidgets [wxWidgets 1992–2020]。不幸的是，Qt 依赖于元对象协议（meta-object protocol，缩写为 MOP），因此 Qt 程序还不是标准的 ISO C++ 应用。静态反射（<a href="09.md#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）使我们最终能够解决这个问题。C++ 社区的问题不是没有好的 GUI 库，而是太多了，因此会有选择困难。</li><li>分析器：例如 Coverity [Coverity 2002–2020]，Visual Studio 的 C++ Core Guidelines 分析器（<a href="#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）和 Clang Tidy [Clang Tidy 2007–2020]。</li><li>编译器工具支持：例如 LLVM 编译器后端基础设施，可简化代码生成和代码分析 [LLVM 2003–2020]。除了 C++ 本身，这为许多新语言提供了福利。</li><li>构建系统：例如 build2 [Build2 2014–2020] 和 CMake [CMake 2000–2020]，以及 GNUmake[GNUmake 2006–2020]。同样，在没有标准的情况下，选择会有困难。</li><li>包管理器：例如 Conan [Conan 2016–2020] 和 vcpkg [vcpkg 2016–2020]。</li><li>运行时环境：例如 WebAssembly：将 ISO C++ 编译为字节码以在浏览器中部署的系统 [WebAssembly 2017–2020]。</li><li>运行时编译、JIT 和链接：例如 Cling [Cling 2014–2020; Naumann 2012; Naumann et al. 2010] 和 RC++ [RC++ 2010–2020]。</li></ul><p>上面列出的只是一些示例。像往常一样，C++ 用户面临的问题是可选方案的数量众多，例如：[RC++ 2010–2020] 列出了 26 个用于在编译时生成代码的系统，并且有数十个程序包管理器。因此，我们需要的是某种形式的标准化。</p><p>截至 2020 年，工具仍不是 C++ 的强项，但我们正在大范围内取得进展。</p><h2 id="10-5-编程风格"><a href="#10-5-编程风格" class="headerlink" title="10.5 编程风格"></a>10.5 编程风格</h2><p>针对大多数现实问题的最佳解决方案需要组合使用多种技术，这也是 C++ 演进的主要动力。自然地，这让那些声称拥有单个简单最佳解决方案（“编程范式”）的人感到不爽，但是支持多种风格一直是 C++ 的根本优势。考虑一下“绘制所有形状”的例子，这个例子自 Simula 发展早期（绘图设备为湿墨绘图仪）以来就一直用于说明面向对象编程。用 C++20，我们可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw_all</span><span class="hljs-params">(range <span class="hljs-keyword">auto</span>&amp; seq)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (Shape&amp; s : seq)<br>        s.<span class="hljs-built_in">draw</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>该段代码是什么编程范式？</p><ul><li>显然，它是面向对象编程：使用了虚函数和类层次结构。</li><li>显然是泛型编程：使用了模板（通过使用 <code>range</code> 概念进行参数化，我们得到一个模板）。</li><li>显然，这是普通的命令式编程：使用了 <code>for</code> 循环，并按照常规 <code>f(x)</code> 语法定义了一个将要被调用的函数。</li></ul><p>对这个例子我可以进一步展开：<code>Shape</code> 通常具有可变状态；我可以使用 lambda 表达式，也可以调用 C 函数；我可以用 <code>Drawable</code> 的概念对参数进行更多约束。对于各种“更好”的定义，适当的技术组合比我能想到的任何一种单一范式所能提供的解决方案更好。</p><p>C++ 支持多种编程风格（如您坚持，也可以称为“范式”），其背后的想法并不是要让我们选择一种最喜欢的样式进行编程，而是可以将多种风格组合使用，以表达比单一风格更好的解决方案。</p><h3 id="10-5-1-泛型编程"><a href="#10-5-1-泛型编程" class="headerlink" title="10.5.1 泛型编程"></a>10.5.1 泛型编程</h3><p>在 2006 年，许多 C++ 代码仍然是面向对象的风格和 C 风格编程的混合体。自然而然的，到 2020 年仍然有很多类似这样的代码。但是，随着 C++98 的到来，STL 风格的泛型编程（通常称为 GP）变得广为人知，并且用户代码也逐渐开始使用 GP，而不只是简单地使用标准库。C++11 中对 GP 的更好支持为在生产代码中更广泛的使用 GP 提供了极大的便利。但是，C++17 中缺少概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>），这仍然阻碍了 C++ 中泛型编程的使用。</p><p>基本上，所有专家都阅读过 Alex Stepanov 的《编程原本》（<em>Elements of Programming</em>，通常称为 <em>EoP</em>）[Stepanov and McJones 2009]，并受到其影响。</p><p>基于模板的泛型编程是 C++ 标准库的支柱：容器、范围（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）、算法、iostream、文件系统（<a href="08.md#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>）、随机数（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）、线程（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）、锁（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>）、时间（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）（<a href="09.md#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>）、字符串、正则表达式（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）和格式化（<a href="09.md#937-%E6%A0%BC%E5%BC%8F%E5%8C%96">§9.3.7</a>）。</p><h3 id="10-5-2-元编程"><a href="#10-5-2-元编程" class="headerlink" title="10.5.2 元编程"></a>10.5.2 元编程</h3><p>C++ 中的元编程出自泛型编程，因为两者都依赖于模板。它的起源可以追溯到 C++ 模板的早期，当时人们发现模板是图灵完备的 [Vandevoorde and Josuttis 2002; Veldhuizen 2003]，并以某种有用的形式提供编译期纯函数式编程。</p><p>模板元编程（通常称为 TMP）往往非常丑。有时，这种丑陋通过使用宏来掩盖，从而造成了其他问题。TMP 几乎无处不在，这也证明了它确实有用。例如，如果没有元编程，就无法实现 C++14 标准库。许多技巧和实验在 2006 年前就有了，但是 C++11 具有更好的编译器、变参模板（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）和 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>），这些推动了 TMP 成为主流用法。C++ 标准库还增加了更多元编程的支持，比如：编译期选择模板 <code>conditional</code>，允许代码依赖于类型属性的类型特征（type trait）如“能否安全地按位复制类型 X？”（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>），还有 <code>enable_if</code>（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">conditional&lt;(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)&lt;<span class="hljs-number">4</span>),<span class="hljs-type">double</span>,<span class="hljs-type">int</span>&gt;::type x; <span class="hljs-comment">// 如果 int 小，就用 double</span><br></code></pre></td></tr></table></figure><p>计算类型以精确地反映需求，这可以说是 TMP 的本质。我们还可以计算值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">unsigned</span> n&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fac</span> &#123;<br>    <span class="hljs-keyword">enum</span> &#123; val = n * fac&lt;n<span class="hljs-number">-1</span>&gt;::val &#125;;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fac</span>&lt;<span class="hljs-number">0</span>&gt; &#123;   <span class="hljs-comment">// 0 的特化：fac&lt;0&gt; 为 1</span><br>    <span class="hljs-keyword">enum</span> &#123; val = <span class="hljs-number">1</span> &#125;;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> fac7 = fac&lt;<span class="hljs-number">7</span>&gt;::val;  <span class="hljs-comment">// 5040</span><br></code></pre></td></tr></table></figure><p>注意，模板特化在其中起着关键作用，这一点在大多数 TMP 中是必不可少的。它已用于计算复杂得多的数值，也可以表示控制流（例如，在编译期计算决策表，进行循环展开，等等）。在 C++98 [Stroustrup 2007] 中，模板特化是一个很大程度上没有得到足够重视的特性。</p><p>在设计精巧的库中以及在现实世界的代码中，诸如 <code>enable_if</code> 之类的原语已成为数百甚至数千行的程序的基础。TMP 的早期示例包含一个完整的编译期 Lisp 解释器 [Czarnecki and Eisenecker 2000]。此类代码极难调试，而维护它们更是可怕的差事。我见识过这样的情形，几百行基于 TMP 的代码（不得不承认非常聪明），在一台 30G 内存的计算机上编译需要好几分钟的时间，由于内存不足而导致最终编译失败。即使是简单的错误，编译器的错误信息也可以达到几千行。然而，TMP 仍被广泛使用。理智的程序员发现，尽管 TMP 有着各种问题，仍比起其他方案要好。我见过 TMP 生成的代码比我认为一个合格的人类程序员会手写的汇编代码要更好。</p><p>因此，问题变成了如何更好地满足这种需求。当人们开始把像 <code>fac&lt;&gt;</code> 这样的代码视为正常时，我为此而感到担心。这不是表达普通数值算法的好方法。概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和编译期求值函数（<code>constexpr</code>（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>））可以大大简化元编程。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (n&gt;<span class="hljs-number">1</span>) r*=n--;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> fac7 = <span class="hljs-built_in">fac</span>(<span class="hljs-number">7</span>);  <span class="hljs-comment">// 5040</span><br></code></pre></td></tr></table></figure><p>这个例子说明，当我们需要一个值时，函数是最佳的计算方式，即使——尤其——在编译期。传统<strong>模板</strong>元编程最好只保留用于计算新的类型和控制结构。</p><p>Jaakko Järvi 的 Boost.Lambda [Järvi and Powell 2002; Järvi et al. 2003a] 是 TMP 的早期使用案例，它帮助说服了人们 lambda 表达式是有用的，并且他们需要直接的语言支持。</p><p>Boost 元编程库 Boost.MPL [Gurtovoy and Abrahams 2002–2020] 展示了传统 TMP 的最好和最坏的方面。更现代的库 Boost.Hana [Boost Hana 2015–2020] 使用 <code>constexpr</code> 函数。WG21 的 SG7（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）试图开发一种更好的标准元编程系统，其中还包括编译期反射（<a href="09.md#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）。</p><h2 id="10-6-编码指南"><a href="#10-6-编码指南" class="headerlink" title="10.6 编码指南"></a>10.6 编码指南</h2><p>我对 C++ 语言的最终目标是：</p><ul><li>使用和学习上都要比 C 或当前的 C++ 容易得多</li><li>完全类型安全——没有隐式类型违规，没有悬空指针</li><li>完全资源安全——没有泄漏，不需要垃圾收集器</li><li>为其构建工具要相对简单——不要有宏</li><li>跟当前 C++ 一样快或更快——零开销原则</li><li>性能可预测——适用于嵌入式系统</li><li>表达力不亚于当前的 C++——很好地处理硬件</li></ul><p>这和《C++ 语言的设计和演化》[Stroustrup 1994] 及更早版本中阐述的设计目标并没有太多不同。显然，这是一项艰巨的任务，并且与较旧的 C 和 C++ 的多数用法不兼容。</p><p>最早，在 C++ 还是“带类的 C”的时候，人们就建议创建语言的安全子集，并使用编译器开关来强制执行这种安全性。但是，由于许多原因中的某一个原因，这些建议失败了：</p><ul><li>没有足够的人在“安全”的定义上达成一致。</li><li>不安全特性（对每种“不安全”的定义来说）是构建基本安全抽象的基础。</li><li>安全子集的表达能力不足。</li><li>安全子集效率低下。</li></ul><p>第二个原因意味着，你不能仅仅通过禁止不安全的功能来定义一个安全的 C++。“通过限制以达到完美”这个方法，对于编程语言的设计来说，在极其有限的场合下才能发挥作用。你需要考虑那些一般来说不安全但有安全用途的特性的使用场景和特征。此外，该标准不能放弃向后兼容（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>），所以我们需要一种不同的方法。</p><p>从一开始，C++ 就采用了不同的哲学 [Stroustrup 1994]：</p><blockquote><p>让良好的编程成为可能比防止错误更重要。</p></blockquote><p>这意味着我们需要“良好使用”的指南，而不是语言规则。但是，为了在工业规模上有用，指南必须可以通过工具强制执行。例如，从 C 和 C++ 的早期开始，我们就知道悬空指针存在的问题。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>&#125;;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">delete</span>[] p;    <span class="hljs-comment">// 删除 p 指向的数组</span><br>               <span class="hljs-comment">// 现在 p 没有指向有效对象，处于“悬空”状态</span><br><span class="hljs-comment">// ...</span><br>*p = <span class="hljs-number">7</span>;        <span class="hljs-comment">// 多半会发生灾难</span><br></code></pre></td></tr></table></figure><p>虽然许多程序员已经开发出防止指针悬空的技术。但是，在大多数大型代码库中，悬空指针仍然是一个主要问题，安全性问题比过去更加关键。一些悬空的指针可以作为安全漏洞被利用。</p><h3 id="10-6-1-一般方法"><a href="#10-6-1-一般方法" class="headerlink" title="10.6.1 一般方法"></a>10.6.1 一般方法</h3><p>在 2004 年，我帮助制定了一套用于飞行控制软件 [Lockheed Martin Corporation 2005] 的编码指南，这套指南接近于我对安全性、灵活性和性能的构想。2014 年，我开始编写一套编码指南，以解决这一问题，并在更广泛的范围内应用。这一方面是为了回应对用好 C++11 的实用指南的强烈需求，另外一方面是有人认为的好的 C++11 让我看着害怕。与人们交谈后，我很快发现了一个明显的事实：我并不是唯一沿着这样的路线思考和工作的人。因此，一些经验丰富的 C++ 程序员、工具制作者和库构建者齐心协力，与来自 C++ 社区的众多参与者一起启动了 <strong>C++ 核心指南</strong>项目 [Stroustrup and Sutter 2014–2020]。该项目是开源的（MIT 许可证），贡献者列表可以在 GitHub 上找到。早期，来自摩根士丹利（主要是我）、微软（主要是 Herb Sutter、Gabriel Dos Reis 和 Neil Macintosh）、Red Hat（主要是 Jonathan Wakely）、CERN、Facebook 和谷歌的贡献者都做出了突出贡献。</p><p>核心指南绝不是唯一的 C++ 编码指南项目，但却是最突出、最雄心勃勃的。它们的目标明确而清晰，那就是显著提升 C++ 代码的质量。例如，早在 Bjarne Stroustrup、Herb Sutter 和 Gabriel Dos Reis 的论文中 [Stroustrup et al. 2015] 就阐明了关于完全类型和资源安全的理想和基础模型。</p><p>为了实现这些雄心勃勃的目标，我们采用了一种“鸡尾酒式”的混合方法：</p><ul><li><strong>规则</strong>：一套庞大的规则集，意图在 C++ 里实现使用上的类型安全和资源安全，推荐那些已知的有效实践，并禁止已知的错误和低效的来源。</li><li><strong>基础库</strong>：一组库组件，使程序员可以有效的编写低层次程序，而无需使用已知的容易出错的功能，并且从总体上为编程提供更高层次的基础。大多数组件来自标准库，其中一些来自以 ISO 标准 C++ 编写的小型指南支持库（Guidelines Support Library，GSL）。</li><li><strong>静态分析</strong>：检测违规行为、并强制执行指南关键部分的工具。</li></ul><p>这些方法中的每一种都有很长的历史，但是每一项都无法单独在工业规模上解决这些问题。例如，我是静态分析的忠实拥护者，但是如果程序员使用动态链接的方式在一个单独编译的程序中编写任意复杂的代码，那么我最感兴趣的分析算法（例如，消除悬空指针）是不能求解成功的。这里的“不能”是指“一般说来，理论上是不可能的”，以及“对于工业规模的程序而言在计算上过于昂贵”。</p><p>基本方式不是简单的限制，而是我称之为“超集的子集”或 SELL 的方法 [Stroustrup 2005]：</p><ul><li>首先，通过库功能对语言进行扩展，从而为正确的使用语言奠定坚实的基础。</li><li>然后，通过删除不安全、易出错及开销过高的功能来设置子集。</li></ul><p>对于库，我们主要依赖标准库的各个部分，例如 <code>variant</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）和 <code>vector</code>。小型<strong>指南支持库</strong>（GSL）提供了类型安全的访问支持，例如 <code>span</code> 可以提供在给定类型的连续元素序列上的带范围检查的访问（<a href="09.md#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>）。我们的想法是通过将 GSL 吸收到 ISO 标准库中，从而最终也就不需要它了。例如，<code>span</code> 已被添加到 C++20 标准库中。当时机成熟时，GSL 中对于契约的微弱支持也应当被合适的契约实现所替代（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）。</p><h3 id="10-6-2-静态分析"><a href="#10-6-2-静态分析" class="headerlink" title="10.6.2 静态分析"></a>10.6.2 静态分析</h3><p>为了能规模化，静态分析完全是局部的（一次仅一个函数或一个类）。最难的问题与对象的生命周期有关。RAII 是必不可少的：我们已经不止一次的看到，手动资源管理的方法在很多语言中都很容易出错。此外，也有很多现存的程序，以一种有原则的方式使用指针和迭代器。我们必须接受此类使用方式。要使一个程序安全很容易，我们只需禁止一切不安全的功能。然而，保持 C++ 的表现力和性能是核心指南的目标之一，所以我们不能仅仅通过限制来获得安全。我们的目的是一个更好的 C++，而不是一个缓慢或被阉割的子集。</p><p>通过阐明原则、让那些优秀的做法更加显而易见、以及对已知问题进行机械化检查，这些指南可以帮助我们把教学的重点放在那些让 C++ 更有效的方面。这些指南还有助于减轻对语言本身的压力，以适应最新的发展趋势。</p><p>对于对象的生命周期，主要有两个要求：</p><ul><li>切勿指向超出范围的对象。</li><li>切勿访问无效的对象。</li></ul><p>考虑以下“基础模型”论文中的一个例子 [Stroustrup et al. 2015]）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> glob = <span class="hljs-number">666</span>;<br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">4</span>;          <span class="hljs-comment">// 局部变量</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &amp;x;          <span class="hljs-comment">// 不行，会指向一个被销毁的栈帧</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &amp;glob ;      <span class="hljs-comment">// 可以，指向某个“永远存在”的对象</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">7</span>&#125;;  <span class="hljs-comment">// 可以（算是可以吧：不悬空，</span><br>                        <span class="hljs-comment">//       但是把所有者作为 int* 返回了）</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> p;           <span class="hljs-comment">// 可以，来自调用者</span><br>&#125;<br></code></pre></td></tr></table></figure><p>指针指向已知会超过函数生命周期的对象（例如，作为参数被传递到函数中），我们可以返回它，但对于指向局部资源的指针就不行。在遵循该指南的程序中，我们可以确保作为参数的指针指向某资源或为 <code>nullptr</code>。</p><p>为避免泄漏，上面示例中的“裸 <code>new</code>”操作应当通过使用资源句柄（RAII）或所有权标注来消除。</p><p>如果指针所指向的对象已重新分配，则该指针会变为无效。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; v = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;<br><span class="hljs-type">int</span>* p = &amp;v[<span class="hljs-number">2</span>];<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// v 的元素可能会被重新分配</span><br>*p = <span class="hljs-number">5</span>;         <span class="hljs-comment">// 错误：p 可能已失效</span><br><span class="hljs-type">int</span>* q = &amp;v[<span class="hljs-number">2</span>];<br>v.<span class="hljs-built_in">clear</span>();      <span class="hljs-comment">// v 所有的元素都被删除</span><br>*q = <span class="hljs-number">7</span>;         <span class="hljs-comment">// 错误：q 无效</span><br></code></pre></td></tr></table></figure><p>无效检查甚至比检查简单的悬空指针还要困难，因为很难确定哪个函数会移动对象以及是否将其视为失效（指针 <code>p</code> 仍然指向某个东西，但从概念上讲已经指向了完全不同的元素）。尚不清楚在没有标注或非本地状态的情况下，静态分析器是否可以完全处理无效检查。在最初的实现中，每个将对象作为非 <code>const</code> 操作的函数都被假定为会使指针无效，但这太保守了，导致了太多的误报。最初，关于对象生命周期检查的详细规范是由 Herb Sutter [Sutter 2019] 编写的，并由他在微软的同事实现。</p><p>范围检查和 <code>nullptr</code> 检查是通过库支持（GSL）完成的。然后使用静态分析来确保库的使用是一致的。</p><p>静态分析设想最早是由 Neil Macintosh 实现的，目前已作为微软 Visual Studio 的一部分进行发布。有一些检查规则已经成为了 Clang 和 HSR 的 Cevelop（Eclipse 插件）[Cevelop 2014–2020] 的一部分。一些课程和书籍中都加入了关于这些规则的介绍（例如 [Stroustrup 2018f]）。</p><p>核心指南是为逐步和有选择地采用而设计的。因此，我们看到其中一部分在工业和教育领域被广泛采用，但很少被完全采用。要想完全采用，良好的工具支持必不可少。</p>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_11/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_11/</url>
    
    <content type="html"><![CDATA[<h1 id="11-回顾"><a href="#11-回顾" class="headerlink" title="11. 回顾"></a>11. 回顾</h1><p>编程语言设计的最终目的，是在程序员交付有用的程序的同时，改进他们的思考方式和工作方式。尽管有些程序语言被视为“只是实验性的”，但是一旦程序语言被用于和语言本身无关的实际工作，这门语言的设计者们就应对他们的用户承担相应的责任。正确、合适、稳定性和足够的性能就成为重要的课题。对 C++ 来说，这些事情在 1979 年仅用了 6 个月就发生了。C++ 已经茁壮成长了 40 年之久。为什么能成功？又是如何成功的？</p><p>我之前的 HOPL 论文 [Stroustrup 1993, 2007] 以 1991 到 2006 年的观点回答了这些问题。从那时起发生的变化，除了语言的特性和组件库之外，主要是标准委员会的作用和影响（<a href="03.md#3-c-%E6%A0%87%E5%87%86%E5%A7%94%E5%91%98%E4%BC%9A">§3</a>）。</p><p>这里，我主要考虑：</p><ul><li><a href="#111-c-%E6%A8%A1%E5%9E%8B">§11.1</a>：C++ 模型</li><li><a href="#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>：技术上的成功</li><li><a href="#113-%E9%9C%80%E8%A6%81%E5%B7%A5%E4%BD%9C%E7%9A%84%E9%A2%86%E5%9F%9F">§11.3</a>：需要努力的领域</li><li><a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>：教训</li><li><a href="#115-%E6%9C%AA%E6%9D%A5">§11.5</a>：未来</li></ul><h2 id="11-1-C-模型"><a href="#11-1-C-模型" class="headerlink" title="11.1 C++ 模型"></a>11.1 C++ 模型</h2><p>C++ 为高要求的应用而生，并成长为一种重要的编程语言——在某些领域，它甚至是主导语言。这是在没有认真的商业支持和没有营销的情况下达到的。许多现代语言拷贝了它的特性和理念。关键的语言技术贡献有：</p><ul><li>静态类型系统，对内置类型和用户定义类型具有同等支持（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）</li><li>既有值语义，又有引用语义（<a href="04.md#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>系统和通用资源管理（RAII）（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>）</li><li>支持高效的面向对象编程（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）</li><li>支持灵活的和高效的泛型编程（<a href="10.md#1051-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B">§10.5.1</a>）</li><li>支持编译期编程（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）</li><li>直接使用机器和操作系统资源（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>）</li><li>通过库提供并发支持（往往使用内建函数实现）（<a href="04.md#41-c11%E5%B9%B6%E5%8F%91%E6%94%AF%E6%8C%81">§4.1</a>）（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）</li></ul><p>相较于目前占主导地位的依靠垃圾收集器和广泛运行期支持的“托管”模式——典型的如 Java、C#、Python 和 JavaScript（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）等语言——C++ 提供了一种不同的、对许多应用领域来说更好的软件模式。我所说的 “更好”是指更容易编写、更有可能正确、更可维护、使用更少的内存、耗能更低和更快。</p><p>这些贡献的领域是互帮互助的，举例来说：</p><ul><li>引用语义（例如，指针和智能指针）支持使用值语义（例如，<code>jthread</code> 和 <code>vector</code>）高效地实现高级类型。</li><li>对内置类型和用户定义类型的统一规则，简化了泛型编程（内置类型不是特殊情况）。</li><li>编译期编程使得一系列的抽象技术因为能够有效使用硬件而变得负担得起。</li><li>RAII 允许使用用户定义的类型，而无需采取特定的操作来支持其实现对资源（包括非内存资源）的使用。</li></ul><h2 id="11-2-技术上的成功"><a href="#11-2-技术上的成功" class="headerlink" title="11.2 技术上的成功"></a>11.2 技术上的成功</h2><p>C++ 成功的根本原因很简单——它填补了编程领域的一个重要的“生态位”：</p><blockquote><p>需要有效使用硬件和管理高复杂性的应用程序</p></blockquote><p>如果你能负担得起“浪费”25% 甚至 99% 的硬件机能，那可供选择的编程语言和环境就多了。如果你的底层模块需要仅仅千行的底层代码，C 语言或者汇编语言可以效劳。40 年以来，C++ 的独特“生态位”足以使其社区不断成长。</p><p>这里有一个现代（2014 年）的 C++ 总结：</p><blockquote><ul><li>直接映射到硬件<ul><li>指令和基本数据类型</li><li>最初来自于 C 语言</li></ul></li><li>零开销抽象<ul><li>带构造和析构函数的类、继承、泛型编程、函数对象</li><li>最初来自于 Simula 语言（当时还不是零开销的）</li></ul></li></ul></blockquote><p>Simula 开创了许多抽象机制和一个灵活的类型系统，但在运行时间和空间成本上，它们带来了沉重的代价。与 1995 年的 C++（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）描述相比，关注点从编程技术转向了问题领域。这更多的是解释风格和人们兴趣的不同，而不是语言设计的不同。这两个总结现在和当时都是准确的。</p><p>在过去几十年的基础上，21 世纪的关键技术进步包括：</p><ul><li>内存模型（<a href="04.md#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>）</li><li>类型安全的并发支持：线程和锁（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）、并行算法（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）、汇合线程（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）</li><li>类型推导：<code>auto</code>（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）、概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）、模板参数推导（<a href="08.md#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）、变参模板（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）</li><li>简化使用：<code>auto</code>（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）、范围 <code>for</code>（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）、并行算法（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）、范围（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）、lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）</li><li>移动语义（<a href="04.md#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>编译期编程：<code>constexpr</code>（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）、编译期循环（<a href="05.md#55-constexpr-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">§5.5</a>）、可确保的编译期求值和容器（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）、元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）</li><li>泛型编程：STL（<a href="10.md#1051-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B">§10.5.1</a>）、概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）、用户定义类型作为模板参数（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）、lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）</li><li>元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）</li></ul><p>它们都与零开销原则相关，但最后两个有点令人惊讶，因为在 2006 至 2020 年期间内，C++ 对它们的支持并不完全。</p><p>假如 C++ 分裂成互不兼容的方言，或者成为你无法长期依赖的东西，以上这些就都失去意义了：</p><ul><li>稳定性和兼容性至关重要（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>）（<a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>）</li></ul><p>新特性（C++11 以来）带来了标准库的改进（例如：<code>unique_ptr</code>、<code>chrono</code>、<code>format</code> 和 <code>scoped_lock</code>），也带来了很多其他库的改进。</p><p>C++ 的目的是成为构建应用程序的工具，许多用 C++ 开发的伟大应用程序，例如在（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）和（<a href="10.md#101-c-%E7%94%A8%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88">§10.1</a>）章节提到的那些，是 C++ 真正的成功。</p><h2 id="11-3-需要工作的领域"><a href="#11-3-需要工作的领域" class="headerlink" title="11.3 需要工作的领域"></a>11.3 需要工作的领域</h2><p>没有一种语言对所有人和所有事都是完美的。对于这点，没有人比既懂多种语言、又严肃使用其中一种并努力支持它的人了解更多了。阻碍进步的很少是单纯的无知。相反，重大改进的主要障碍是缺乏方向、缺乏开发资源以及害怕破坏现有代码。</p><p>C++ 苦于诞生过早，在现代化的集成开发环境（IDE）、构建系统、图形界面（GUI）系统和 Unicode 问世之前就已经诞生了。我期待 C++ 能慢慢赶上来。举例来说：</p><ul><li><strong>工具使用</strong>：从 C 语言开始，用字符和词法标记来说明语义，以及用 <code>#include</code> 和宏来组织源代码，这一直是有效工具建设的主要障碍。模块应该会有所帮助（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>），而且是有可能为 C++ 设计出一个合理的内部表示的 [Dos Reis and Stroustrup 2009, 2011]。</li><li><strong>教育</strong>：今天的 C++ 教学大多仍然过时和落后（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）是对实践进行现代化的一种方法。WG21 的教育研究小组（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）和许多面向教育的会议报告表明，这些问题得到了重视和并正在解决中。</li><li><strong>打包和发布</strong>：C++ 诞生时，由独立开发、维护的模块组成的软件并不常见。今天，已经有了用于 C++ 的构建系统和打包管理程序。然而，还没有一个是标准的，有些难以用于简单的任务，有些则不够通用，不能应对使用 C++ 构建的大规模系统。我在 2017 年的 CppCon 主题演讲中提出了这个问题，并向社区发起挑战 [Stroustrup 2017c] 来解决它。我认为我们正在看到进展。此外，C++ 社区还缺少一个标准的地方来寻找有用的库。Boost [Boost 1998–2020] 是解决这个问题的一个努力，GitHub 正逐渐成为一个通用的资源库。但要达到让相对的新手能找到、下载、安装和运行几个主流的库这样的方便程度，我们的路还很长。</li><li><strong>字符集和图形</strong>：C++ 语言和标准库依赖于 ASCII，但大多数应用程序使用某种形式的 Unicode。WG21 工作组现在有一个研究小组试图找到一个方式去标准化 Unicode 支持（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。缺乏标准的图形和图形界面则是更难的问题。</li><li><strong>清理陈年烂账</strong>：这非常困难，而且令人不快。例如，我们知道内置类型之间的隐式窄化转换会导致无穷无尽的问题（<a href="09.md#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>），但是有数以万亿计的 C++ 代码行，这些代码以难以预测的方式依赖于那些转换。试图通过添加“更现代”的特性来替换旧特性来进行改进很容易成为 N+1 问题（<a href="04.md#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）的牺牲品。改进的工具（例如静态程序分析和程序转换）提供了希望。</li></ul><p>大型语言社区所面临的挑战是多种多样的，不可能有单一而简单的解决方案。这不仅仅是一个语法、类型理论或基本语言设计的问题。有些问题是商业性的。在工业规模上取得成功所需的各种技能范围令人望而生畏。时间会证明，C++ 社区是否能处理好所有这些问题，以及更多的其他问题。这点上我适度乐观，因为现在所有领域都已经有一些积极的举措（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。</p><h2 id="11-4-教训"><a href="#11-4-教训" class="headerlink" title="11.4 教训"></a>11.4 教训</h2><p>C++ 是由一个大型委员会控制的，成员多种多样，并且会不断变化（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。因此，除了技术问题外，我们必须考虑在语言的演化过程中什么是有效的：</p><ul><li><strong>问题驱动</strong>：C++ 开发应该被那些真实世界中的具体问题的需求所驱动。</li><li><strong>简单</strong>：C++ 应该从简单、高效、易用的解决方案中进行推广而成长。</li><li><strong>高效</strong>：C++ 语言和标准库应该遵循零开销原则。</li><li><strong>稳定性</strong>：不要搞砸我的代码！</li></ul><p>大部分（全部？）C++ 最成功部分的开发都遵从了那些“经验法则”。它们自然会限制语言的发展范围，但这是好事。C++ 并不意味着对所有的人都是无所不能的。此外，这些原则迫使 C++ 在现实世界的挑战中相对缓慢地成长，并从反馈中受益。也请参见《C++ 语言的设计和演化》中的其他“经验法则” [Stroustrup 1994] 和我的 HOPL2 论文 [Stroustrup 1993]。这里面一直有连续性。</p><p>相比之下，一个功能如果设计时没有明确专注在解决大部分开发者实际面临的问题上，那它通常会失败：</p><ul><li><strong>只为专家</strong>：某个功能从开始的时候就要满足所有专家的需要。</li><li><strong>模仿</strong>：我们需要这个功能，因为它在另外某个语言里很流行。</li><li><strong>理论性</strong>：语言理论里说语言里一定要有这个特性。</li><li><strong>革命性</strong>：此功能非常重要，以至于我们必须打破兼容性，或者摒弃那些不好的老方法。</li></ul><p>我的结论是，尽早确定方向和期望至关重要。稍晚一些，就会有太多的人有太多的不同意见，因而无法达成一套连贯而一致的想法。</p><p>给定一个方向和一组原则，一种语言可以基于不同的工具来发展，如反馈、用户体验、实验和理论。这是好的工程方法；反之，则是无原则的实用主义或教条的理想主义。</p><p>C++ 标准委员会的章程几乎只关注语言和库的设计。这是有局限性的。一直以来，像动态链接、构建系统和静态分析之类的重要主题大多被忽略了。这是个错误。工具是软件开发人员世界的一个重要组成部分，要是能不把它们置于语言设计的外围就好了。</p><p>热衷于各种不同的想法具有危险性。在 2018 年的一篇论文 [Stroustrup 2018d] 中，我列出了 51 条最近的提案：</p><blockquote><p>我列出了我认为有可能显著改变我们编写代码方式的论文，每一篇对教学、维护和编码指导都有重要的影响，其中许多对实现也有影响。</p><p>单独来说，许多（大多数）提案都是有道理的，但是放在一起却是疯狂的，甚至足以危及 C++ 的未来。</p></blockquote><p>那篇论文的题目是《记住瓦萨号！》（*Remember the Vasa!*）。瓦萨号是 17 世纪瑞典的一艘宏伟战舰，由于设计上不断后期添加以及测试不充分，在首航时就沉没在斯德哥尔摩港。在 1990 年代，委员会经常提醒自己记得瓦萨号，但在 2010 年代，这一教训似乎已经被遗忘。</p><p>为了对委员会的流程进行组织约束，方向组提出 C++ 程序员的“权利法案” [Dawes et al. 2018]：</p><ol><li><strong>编译期稳定性</strong>：新版本标准中的每一个重要行为变化都可以被支持以前版本的编译器检测到。</li><li><strong>链接期稳定性</strong>：除极少数情况外，应避免 ABI 兼容性破坏，而且这些情况应被很好地记录下来并有书面理由支持。</li><li><strong>编译期性能稳定性</strong>：更改不会导致现有代码的编译时间开销有明显增加。</li><li><strong>运行期性能稳定性</strong>：更改不会导致现有代码的运行时间开销有明显增加。</li><li><strong>进步</strong>：标准的每一次修订都会为某些重要的编程活动提供更好的支持，或为某些重要编程群体提供更好的支持。</li><li><strong>简单性</strong>：每一次对标准的修订都会简化某些重要的编程活动。</li><li><strong>准时性</strong>：每一次标准的修订都会按照公布的时间表按时交付。</li></ol><p>接下来的几十年，我们将会看到结果到底怎么样。</p><h2 id="11-5-未来"><a href="#11-5-未来" class="headerlink" title="11.5 未来"></a>11.5 未来</h2><p>从近期来说，C++20 会像 C++11 那样，让 C++ 社区受益良多。在 2020 年 2 月的布拉格会议上，委员会对 C++20 进行了定稿，也投票同意了 Ville Voutilainen 的“C++23 大胆计划” [Voutilainen 2019b]：</p><p>“在 C++23 努力做到以下几点：”</p><ul><li>对协程的库支持（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）</li><li>模块化的标准库（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）</li><li>通用异步计算模型（执行器）（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）</li><li>网络（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）</li></ul><p>注意关注点是在库上。“同时也在以下方面取得进展：”</p><ul><li>静态反射功能（<a href="09.md#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）</li><li>函数式编程风格的模式匹配（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）</li><li>契约（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）</li></ul><p>鉴于这些议题的工作已经相当深入，委员会有可能会完成大部分工作。这一大群充满热情的人还能拿出什么东西并达成共识，就不那么容易预测了。对于未来几年，方向小组（我是其中的一员）提到了一些有希望进一步开展工作的领域 [Hinnant et al. 2020]：</p><ul><li>改进 Unicode 的支持</li><li>支持简单图形和简单用户交互</li><li>支持新类型的硬件</li><li>探索错误处理的更好表达方式和实现方法</li></ul><p>在委员会之外，我期望在构建系统、包管理和静态分析方面取得重大进展（<a href="10.md#104-%E5%B7%A5%E5%85%B7">§10.4</a>）。</p><p>再往后的五年、十年或更远的未来，我在预测水晶球里就有点看不清了。在这个时间范围内，我们需要着眼于根本，而不是具体的语言特性。我希望标准委员会能注意到学到的教训（<a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>），并把重点放在根本上（<a href="#111-c-%E6%A8%A1%E5%9E%8B">§11.1</a>）：</p><ul><li>把完全资源安全和类型安全的 C++ 作为追求目标</li><li>很好地支持各种各样的硬件</li><li>保持 C++ 的稳定性记录（兼容性）</li></ul><p>保持稳定性需要在关注兼容性的同时，抵制试图通过添加大量“完美”特性来取代不完美或不时髦的旧方式来大幅改善 C++ 的冲动。新的特性总是会带来意外（有些令人愉快，有些则不那么令人愉快），旧的特性不会简单地消失。记住瓦萨号！[Stroustrup 2018d]（<a href="#114-%E6%95%99%E8%AE%AD">§11.4</a>）。很多情况下，库、指南和工具是比修改语言更好的方法。</p><p>对于单线程计算来说，硬件已无法变得更快，所以对效率的重视将持续存在，而有效支持各种形式的并发和并行的压力将不断增加（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。专用硬件将大量涌现（例如，各种内存架构和特殊用途的处理器）；这将使 C++ 这样的、可以利用这些硬件的语言受益。唯一比硬件性能增长更快的是人们的期望。</p><p>随着系统越来越复杂，开销可负担的抽象机制的重要性也在增加。对于依赖实时交互的系统，可预测的性能是至关重要的（例如，许多实时系统禁止使用自由存储（动态内存））。</p><p>随着我们对计算机化系统的依赖程度的增加、高手黑客数量的增多，安全问题只会越来越重要。为了防御，我看好硬件保护，看好更结构化、能支持更好的静态分析的系统，而非无休止的临时运行期检查和低级代码。</p><p>语言和系统之间的互操作性仍会至关重要；很少有大系统会只用一种语言来编写。</p><p>随着系统变得越来越复杂，对可靠性的要求也越来越高，对设计和编码质量的需求也急剧增加。我认为 C++ 已经为此做好了充分的准备，C++23 的计划是要进一步加强它。然而，仅靠语言特性是不足以满足未来需求的。我们需要有工具支持的使用指南，以确保语言的有效使用（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。特别是，我们需要确保完全的类型安全和资源安全，这必须反映在教育中。为了蓬勃发展，C++ 需要为新手提供更好的教育材料，也需要帮助有经验的程序员掌握现代 C++。仅仅介绍奇技淫巧和高级用法是不够的，而且反而会因为增强了 C++ 的复杂性名声而对语言造成伤害。</p><p>由于种种原因，我们需要简化大多数的 C++ 使用的场景。C++ 的演进已经使之成为可能，而我预计这一趋势将继续下去（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）。改进的优化器——有能力利用代码中使用的类型系统和抽象——让优化这件事变得不同了。在过去的几年里，这极大地改变了我优化代码的方式。我从放弃精巧而复杂的东西开始，那是错误的藏身之处；并且，如果我难以理解发生了什么，编译器和优化器也会如此。我发现，这种方法通常会给我带来从适度到惊人的性能提高，同时也简化了未来的维护。只有当这种方法不能给我带来我想要的性能时，我才会求助于高级（又称复杂）的数据结构和算法。这是 C++ 抽象机制设计上的一大胜利。</p><p>我期待着看到用 C++ 构建更多令人兴奋的应用程序，并看到新的编程惯用法和设计技巧的发展。</p><p>我也希望其他语言能从 C++ 的成功中学习。假如从 C++ 的演化中吸取的经验教训仅局限于 C++ 社区，那将是可悲的。我希望并期待在其他语言和系统中看到 C++ 模型的关键方面，这将是一个真正的成功衡量标准。在一定程度上，这已经发生了（<a href="02.md#24-%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80">§2.4</a>）。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>我痛苦地意识到</p><ul><li>这篇论文太长了。</li><li>对大多数技术主题的描述都省略了很多可以看作是根本的内容。很多情况下，许多人经年累月的工作会被简化为一页甚至一句话。特别是，我忽略了并发性这个极其重要的话题；它应该有一篇专门的长篇论文来进行详述。</li></ul><p>感谢让 C++ 成功的数以百万计的程序员，他们创建的应用是我们这个世界的关键部件。</p><p>感谢本文草稿的审稿人，包括 Al Aho、A. Bratterud、Shigeru Chiba、J. Daniel Garcia、Brent Hailpern、Howard Hinnant、Roger Orr、Aaron Satlow、Yannis Smaragdakis、David Vandevoorde、J.C. Van Winkel 和 Michael Wong。本文的完整性和准确性在很大程度上依靠这些审稿人。当然，错误归我自己。</p><p>感谢 Guy Steele 帮我顺利解决了 LaTex 和 BibTex 中的谜团，把文章引用做到满足 ACM 要求的形式。</p><p>感谢所有在标准上努力工作的人。还有很多我没有提到的名字，可以在 WG21 论文的作者和这些论文的致谢部分中找到。我参考和引用的许多“P”和“N”编号的论文保存在 <a href="http://open-std.org/jtc1/sc22/wg21/docs/papers/">open-std.org&#x2F;jtc1&#x2F;sc22&#x2F;wg21&#x2F;docs&#x2F;papers&#x2F;</a>。没有这些论文，本文的一些内容就会过度依赖我的记忆了。</p>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_08/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_08/</url>
    
    <content type="html"><![CDATA[<h1 id="8-C-17：大海迷航"><a href="#8-C-17：大海迷航" class="headerlink" title="8. C++17：大海迷航"></a>8. C++17：大海迷航</h1><p>在经过 C++14 这个小版本标准之后，C++17 [Smith 2017] 原本被看作是一个大版本。C++17 有很多新的特性，但没有一个我认为称得上重大。尽管我们已经有给 C++11 和 C++14 带来成功的工作流程，标准社区也更丰富、更强大、更热情，但对于 C++17 的关键问题是：为什么所有的辛劳却没有带来更显著的改进？</p><p>C++17 有大约 21 个新的语言特性（取决于你的计数方式），包括：</p><ul><li>构造函数模板参数推导——简化对象定义（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）</li><li>推导指引——解决构造函数模板参数推导歧义的明确写法（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）</li><li>结构化绑定——简化写法并消除一种未初始化变量的来源（<a href="#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）</li><li><code>inline</code> 变量——简化了那些仅有头文件的库实现中的静态分配变量的使用 [Finkel and Smith 2016]</li><li>折叠表达式——简化变参模板的一些用法 [Sutton and Smith 2014]</li><li>条件中的显式测试——有点像 for 语句中的条件（<a href="#87-%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%98%BE%E5%BC%8F%E6%B5%8B%E8%AF%95">§8.7</a>）</li><li>保证的复制消除——去除了很多不必要的拷贝操作 [Smith 2015]</li><li>更严格的表达式求值顺序——防止了一些细微的求值顺序错误 [Dos Reis et al. 2016b]</li><li><code>auto</code> 当作模板参数类型——值模板参数的类型推导 [Touton and Spertus 2016]</li><li>捕捉常见错误的标准属性——<code>[[maybe_unused]]</code>、<code>[[nodiscard]]</code> 和 <code>[[fallthrough]]</code> [Tomazos 2015]</li><li>十六进制浮点字面量 [Köppe 2016a]</li><li>常量表达式 <code>if</code>——简化编译期求值的代码 [Voutilainen and Vandevoorde 2016]</li></ul><p>不幸的是，这并不是完整的功能扩展列表。相当一部分是如此之小，我们很难简单地描述它们。</p><p>C++17 标准库中增加了大约 13 个新特性，并加上了许多小的修改：</p><ul><li><code>optional</code>、<code>any</code> 和 <code>variant</code>——用于表达“可选”的标准库类型（<a href="#83-variantoptional-%E5%92%8C-any">§8.3</a>）</li><li><code>shared_mutex</code> 和 <code>shared_lock</code>（读写锁）和 <code>scoped_lock</code>（<a href="#84-%E5%B9%B6%E5%8F%91">§8.4</a>）</li><li>并行 STL——标准库算法的多线程及矢量化版本（<a href="#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）</li><li>文件系统——可移植地操作文件系统路径和目录的能力（<a href="#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>）</li><li><code>string_view</code>——对不可变字符序列的非所有权引用 [Yasskin 2014]</li><li>数学特殊函数——包括拉盖尔和勒让德多项式、贝塔函数、黎曼泽塔函数 [Reverdy 2012]</li></ul><p>尽管我也喜欢 C++17 中的某些功能，但令人困扰的是这些功能没有统一的主题，没有整体的规划，似乎只是由于可以达到投票多数而被扔进语言和标准库中的一组“聪明的想法”。这种状况可能给未来语言的发展带来更大的弊端，因此必须采取一些措施做出改变 [Stroustrup 2018d]。方向小组的成立是 WG21 针对这个问题的回应（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>）的一部分。</p><p>不可否认，C++17 提供了一些可以在小方面帮助大多数程序员的东西，但没有什么可以让我认为是重大的。在这里，我将“重大”定义为“对我们思考编程和组织代码的方式产生影响”。在此，我描述了我猜想会产生最大积极影响的功能。</p><p>我也检查了一些尽管经过严肃考虑、仍没有进入 C++17 标准的例子：</p><ul><li><a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>：概念（C++20）</li><li><a href="#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：网络库</li><li><a href="#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>：点运算符（<code>operator.()</code>）</li><li><a href="#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>：统一函数调用</li><li><a href="#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>：简单类型的默认比较运算符 <code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code> 和 <code>&gt;=</code></li><li><a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>：协程（C++20）</li></ul><p>我怀疑如果它们被采纳的话，其中的任何一项都会成为 C++17 最重要的特性之一。它们符合 C++ 应该成为什么的一致观点（<a href="09.md#92-%E6%88%91%E7%9A%84-c17-%E6%B8%85%E5%8D%95">§9.2</a>）；即使只有少数几项，也会极大地改变 C++17 的使用方式。</p><p>在 C++11 中我看到了相互支持的特性网，它们带来了更好的代码编写方式。对于 C++17，我没有看到。但是，C++20 完善了这样一张网，使 C++ 又向前迈进了一大步（<a href="09.md#9-c20%E6%96%B9%E5%90%91%E4%B9%8B%E4%BA%89">§9</a>）。可以说 C++17 只是通向 C++20 路上的垫脚石，但是委员会的讨论对此毫无暗示，重点始终放在单独的特性上。我甚至听到有人说“列车模型”（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）不适合长期规划；事实并非如此。</p><h2 id="8-1-构造函数模板参数推导"><a href="#8-1-构造函数模板参数推导" class="headerlink" title="8.1 构造函数模板参数推导"></a>8.1 构造函数模板参数推导</h2><p>几十年来，人们好奇为什么模板参数可以从其他函数参数中推导出来，却不能从构造函数参数中推导。例如，在 C++98、C++11 和 C++14 中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">pair&lt;string,<span class="hljs-type">int</span>&gt; <span class="hljs-title">p0</span> <span class="hljs-params">(string(<span class="hljs-string">&quot;Hi!&quot;</span>),<span class="hljs-number">129</span>)</span></span>;  <span class="hljs-comment">// 不需要推导</span><br><span class="hljs-keyword">auto</span> p1 = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Hi!&quot;</span>s,<span class="hljs-number">129</span>);          <span class="hljs-comment">// p1 是 pair&lt;string,int&gt;</span><br><span class="hljs-function">pair <span class="hljs-title">p2</span> <span class="hljs-params">(<span class="hljs-string">&quot;Hi!&quot;</span>s,<span class="hljs-number">129</span>)</span></span>;    <span class="hljs-comment">// 错误：pair 缺少模板参数</span><br></code></pre></td></tr></table></figure><p>很自然，在我第一次设计模板的时候，我也考虑过从构造函数参数中推导出模板参数的可能性，但因为担心出现歧义而止步。解决方案也有技术障碍，但 Michael Spertus 和 Richard Smith 克服了这些障碍。所以在 C++17 中，我们可以写上面最后一个例子中那样的代码（<code>p2</code>）而不会报错，这样一来就不需要 <code>make_pair()</code> 了。</p><p>这简化了类型的使用，例如 <code>pair</code> 和 <code>tuple</code>，还有当编写并行的代码时用到的锁和互斥锁（<a href="#84-%E5%B9%B6%E5%8F%91">§8.4</a>）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">shared_lock lck &#123;m&#125;;    <span class="hljs-comment">// 不需要显式写出锁类型</span><br></code></pre></td></tr></table></figure><p>这是一个在 C++17 中少见的例子，相互支持的特性促成了明显的代码简化。不幸的是，这些简化被接受与否都是个案，而非总体的简化努力的结果。所以，在类型推导规则中“填坑”的努力仍在继续 [Spertus et al. 2018]。</p><p>除了这里的描述之外，这套机制提供了解决歧义的一种写法（<a href="#83-variantoptional-%E5%92%8C-any">§8.3</a>）。</p><h2 id="8-2-结构化绑定"><a href="#8-2-结构化绑定" class="headerlink" title="8.2 结构化绑定"></a>8.2 结构化绑定</h2><p>结构化绑定始于 Herb Sutter、Bjarne Stroustrup 和 Gabriel Dos Reis 的一个简单的提案 [Sutter et al. 2015]，旨在简化写法和消除剩余的几个变量未初始化的来源。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(vector&lt;pair&lt;T,U&gt;&gt;&amp; v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x,y] : v)<br>        cout &lt;&lt; <span class="hljs-string">&#x27;&#123;&#x27;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>名称 <code>x</code> 和 <code>y</code> 被分别绑定于 <code>pair</code> 的第一个和第二个元素。这可算作是写法上的重大便利。</p><p>C++14 给我们提供了返回多个值的方便方式。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">tuple&lt;T1,T2,T3&gt; <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-comment">/*...*/</span>)</span>  <span class="hljs-comment">// 优美的声明语法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;a,b,c&#125;;  <span class="hljs-comment">// 优美的返回语法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我认为在当前的 C++ 中，<code>tuple</code> 有点被过度使用了，当多个值并不互相独立的时候，我倾向于使用明确定义的类型，但从写法上讲，这没有什么区别。然而，C++14 并没有提供像创建多返回值那样方便的方式去解包它们。这导致了繁琐的变通解决方案、变量未初始化或运行期开销。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tuple&lt;T1,T2,T3&gt; res = <span class="hljs-built_in">f</span>();<br>T1&amp; alpha = <span class="hljs-built_in">get</span>&lt;<span class="hljs-number">0</span>&gt;(res);    <span class="hljs-comment">// 通过 alpha 来间接访问</span><br>T2&amp; val = <span class="hljs-built_in">get</span>&lt;<span class="hljs-number">1</span>&gt;(res);<br>T3 err_code = <span class="hljs-built_in">get</span>&lt;<span class="hljs-number">2</span>&gt;(res);  <span class="hljs-comment">// 拷贝</span><br></code></pre></td></tr></table></figure><p>很多专家更喜欢用标准库函数 <code>tie()</code> 去解包 <code>tuple</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">T1 x;<br>T2 y;<br>T3 z;<br><span class="hljs-comment">// ...</span><br><span class="hljs-built_in">tie</span>(x,y,z) = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 使用现有变量的优美调用方式</span><br></code></pre></td></tr></table></figure><p>向 <code>tie()</code> 函数赋值的时候，会向 <code>tie()</code> 函数的参数赋值。然而，使用 <code>tie</code>，你必须分别定义变量，并且写出它们的类型以匹配 <code>f()</code> 返回的对象的成员（在这个例子中就是 <code>T1</code>、<code>T2</code>、和 <code>T3</code>）。不幸的是，这会导致局部变量“设置前使用”的错误，及“初始化后赋值”的开销。并且，大多数程序员并不知道 <code>tie()</code> 的存在，或者认为在真实代码中使用它太奇怪了。</p><p>Herb Sutter 建议了一种跟正常返回语法类似的方案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> &#123;x,y,z&#125; = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 优美的调用语法，会引入别名</span><br></code></pre></td></tr></table></figure><p>这对任何有三个成员的 <code>struct</code> 都有效，而不仅仅只对 <code>tuple</code>。消除核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）中未初始化变量的倒数第二个来源是我的主要动机。是的，我喜欢这种写法，但更重要的是它使得 C++ 更接近于其理想。</p><p>不是每个人都喜欢这个想法，而且我们几乎没能在 C++17 中及时讨论它。提出结构化绑定的论文 [Sutter et al. 2015] 比较晚，而正当 2015 年 11 月底在科纳 Ville Voutilainen 刚要结束 EWG 会议时，我注意到我们离午饭还有 45 分钟，我觉得小组应该会想要看到这个提案。2015 年科纳的会议是我们冻结 C++17 的功能集的时间点，所以这 45 分钟很关键。我们甚至没时间去另一个小组找到 Herb，我就直接讲了这个提案。EWG 喜欢这个提案，会议纪要说<strong>鼓掌以资鼓励；EWG 想要这样的东西</strong>。</p><p>现在，真正的工作开始了。</p><p>在这个及以后的会议中，几个人——尤其是 Chandler Carruth——指出要达到 C++ 的理想，我们需要扩展将一个对象分解为多个值的能力，以应对不是 <code>tuple</code> 或普通 <code>struct</code> 的类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">complex&lt;<span class="hljs-type">double</span>&gt; z = <span class="hljs-number">2</span>+<span class="hljs-number">3</span>i;<br><span class="hljs-keyword">auto</span> &#123;re,im&#125; = <span class="hljs-built_in">sqrt</span>(z);      <span class="hljs-comment">// sqrt() 返回复数值</span><br></code></pre></td></tr></table></figure><p>标准库类型 <code>complex</code> 并没有暴露其内部表示。</p><p>在 C++17 中我们通过允许用户定义一系列 <code>get</code> 函数解决了这个问题，如 <code>get&lt;0&gt;</code> 和 <code>get&lt;1&gt;</code>，实际上是把计算结果当成 <code>tuple</code>。这能工作，但需要用户提供一些不优雅的重复样板代码。关于潜在改进的讨论仍在继续，但没有明显的简化被纳入 C++20。</p><p>有人要求让这种方式也能适用于返回数组的函数和返回带位域的 <code>struct</code> 的函数。我们加入了对那些情况的支持，所以最终设计至少比原始提案复杂了一倍。</p><p>有一个冗长的争论（跨多次会议），是关于是否可能（或必须）显式地指定被引入的局部变量类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> &#123;<span class="hljs-type">int</span> x, <span class="hljs-type">const</span> <span class="hljs-type">double</span>* y, string&amp; z&#125; = <span class="hljs-built_in">f</span>();    <span class="hljs-comment">// 非 C++</span><br></code></pre></td></tr></table></figure><p>关于这种做法的理由——其中最雄辩的当属 Ville Voutilainen——如果没有显式类型，写法的可读性将会降低，从而损害可维护性，还可能导致错误。这跟常见的反对 <code>auto</code> 的理由很相似，而显式类型也会有它们自己的问题。如果类型跟返回值不匹配怎么办？有人说这应该属于错误。有些人说，转换到指定的类型将是非常有用的（例如，<code>char[20]</code> 返回到 <code>string</code> 中）。我指出结构化绑定应该引入零开销别名，而任何意味着表示变化的类型转换将导致显著的开销。并且，结构化绑定的一个目的是优化写法，而要求显式类型会导致代码比现有的方式更加冗长。</p><p>最初的提案使用花括号（<code>&#123;&#125;</code>）来组合引入的名字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> &#123;x,y,z&#125; = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 优美的调用语法，引入别名</span><br></code></pre></td></tr></table></figure><p>然而一些成员，如 Chandler Carruth 和 David Vandevoorde，怕语法上会有歧义，而坚持认为这样会令人困惑，“因为 <code>&#123;&#125;</code> 意味着作用域”。所以我们有了 <code>[]</code> 语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> [x,y,z] = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 调用语法，引入别名</span><br></code></pre></td></tr></table></figure><p>这是个小改动，但我认为是个错误。这个最后一刻的改动，导致了属性写法的小小复杂化（比如 <code>[[fallthrough]]</code>）（<a href="04.md#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）。我对关于美学或作用域的论据并不买账，并且在 2014 年我就展示了关于为 C++ 添加函数式编程风格的模式匹配的想法，以 <code>&#123; … &#125;</code> 表示用模式将值分解出来（<a href="#83-variantoptional-%E5%92%8C-any">§8.3</a>）。结构化绑定的设计就是为了适应这一总体方案。</p><p>这些并不是唯一的后期修改提案。每个提案都增加了或将增加复杂性。</p><p>对语言每次升级仅孤立地增加一项功能是危险的。除非符合更大的规划，最后一刻的改变也是危险的，容易导致在要求“完整性”的过程中“膨胀”。在这个结构化绑定的例子中，我不相信允许结构化绑定指定位域能提供充分的效用，值得为之提高复杂性。</p><h2 id="8-3-variant、optional-和-any"><a href="#8-3-variant、optional-和-any" class="headerlink" title="8.3 variant、optional 和 any"></a>8.3 <code>variant</code>、<code>optional</code> 和 <code>any</code></h2><p>可以使用 <code>union</code> 来无运行期开销地表示多个可选的类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">union</span> <span class="hljs-title class_">U</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span>* p;<br>&#125;;<br><br>U u;<br><span class="hljs-comment">// ...</span><br><span class="hljs-type">int</span> x = u.i;    <span class="hljs-comment">// 正确：当且仅当 u 持有整数</span><br><span class="hljs-type">char</span>* p = u.p;  <span class="hljs-comment">// 正确：当且仅当 u 持有指针</span><br></code></pre></td></tr></table></figure><p>从 C 语言最早期开始，这就被当作一个不同的类型之间“分时共享”内存的基本方法来使用和误用。没有编译期和运行期的检查来确保这个地址仅被用作其真实指代的类型。确保 <code>union</code> 成员在使用上一致，是程序员的职责，然而令人头痛的是程序员常在这个地方出错。</p><p>有经验的程序员通过将联合体封装在类中来避免问题，用类来确保正确使用。Boost 特别提供了三种这样的类型：</p><ul><li><code>optional&lt;T&gt;</code>——持有 <code>T</code> 或什么都不持有</li><li><code>variant&lt;T,U&gt;</code>——持有 <code>T</code> 或 <code>U</code></li><li><code>any</code>——持有任意类型</li></ul><p>这些类型的巨大效用已经在 C++ 和许多其他语言中得到了证明。</p><p>委员会决定对这三种类型进行标准化。不幸的是，这三种类型的设计被分开讨论，好像它们的使用情况毫不相干一样。相对于标准库而言，直接语言支持的可能性似乎从未被认真考虑。结果是三种标准库类型（就像它们的 Boost 祖先一样）彼此之间有很大的不同。因此，尽管这些类型的效用毋庸置疑，但它们是委员会设计的一个典型案例。试考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">optional&lt;<span class="hljs-type">int</span>&gt; var1 = <span class="hljs-number">7</span>;<br>variant&lt;<span class="hljs-type">int</span>,string&gt; var2 = <span class="hljs-number">7</span>;<br>any var3 = <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">auto</span> x1 = *var1 ;               <span class="hljs-comment">// 对 optional 解引用</span><br><span class="hljs-keyword">auto</span> x2 = <span class="hljs-built_in">get</span>&lt;<span class="hljs-type">int</span>&gt;(var2);       <span class="hljs-comment">// 像访问 tuple 一样访问 variant</span><br><span class="hljs-keyword">auto</span> x3 = <span class="hljs-built_in">any_cast</span>&lt;<span class="hljs-type">int</span>&gt;(var3);  <span class="hljs-comment">// 转换 any</span><br></code></pre></td></tr></table></figure><p>为了提取存储的值，需要使用三种不兼容的写法之一。这对程序员来讲是一种负担。没错，有经验的程序员会习惯的，但这种非要人们去习惯的不规则性本就不该存在。</p><p>为了简化 <code>variant</code> 的使用，有一种访问者机制。首先我们需要一个辅助模板去定义一个重载集合：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 简单访问的样板代码：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">overloaded</span> : Ts... &#123; <span class="hljs-function"><span class="hljs-keyword">using</span> <span class="hljs-title">Ts::operator</span><span class="hljs-params">()</span>...</span>; &#125;;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-title">overloaded</span><span class="hljs-params">(Ts...)</span> -&gt; overloaded&lt;Ts...&gt;</span>;<br></code></pre></td></tr></table></figure><p>模板 <code>overloaded</code> 真应该成为标准。只有那些熟悉变参模板（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）和模板参数推导（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）的人才会觉得它比较简单。不过，有了 <code>overloaded</code>，我就能根据变体的类型来构造出分支：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-type">var_t</span> = std::variant&lt;<span class="hljs-type">int</span>, <span class="hljs-type">long</span>, <span class="hljs-type">double</span>, std::string&gt;; <span class="hljs-comment">// variant 类型</span><br><br><span class="hljs-comment">// 简单访问的样板代码：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">overloaded</span> : Ts... &#123; <span class="hljs-function"><span class="hljs-keyword">using</span> <span class="hljs-title">Ts::operator</span><span class="hljs-params">()</span>...</span>; &#125;;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span>... Ts&gt; <span class="hljs-title">overloaded</span><span class="hljs-params">(Ts...)</span> -&gt; overloaded&lt;Ts...&gt;</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::vector&lt;<span class="hljs-type">var_t</span>&gt; vec = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20L</span>, <span class="hljs-number">30.40</span>, <span class="hljs-string">&quot;hello&quot;</span>&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; var : vec) &#123;<br>        std::<span class="hljs-built_in">visit</span> (overloaded &#123;<br>            [](<span class="hljs-keyword">auto</span> arg) &#123; cout &lt;&lt; arg &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; &#125;,    <span class="hljs-comment">// 处理整数类型</span><br>            [](<span class="hljs-type">double</span> arg) &#123; cout &lt;&lt; <span class="hljs-string">&quot;double : &quot;</span> &lt;&lt; arg &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; &#125;,<br>            [](<span class="hljs-type">const</span> std::string&amp; arg) &#123; cout &lt;&lt; <span class="hljs-string">&quot;\&quot;&quot;</span> &lt;&lt; arg &lt;&lt; <span class="hljs-string">&quot;\&quot;\n&quot;</span>; &#125;,<br>        &#125;, var);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>毋庸置疑，<code>variant</code> 和它的伙伴们解决了一个重要问题，但其方式并不优雅。或许将来的工作能减轻接口不一致上的困惑，从而让人能专注于真正需要区分的地方。同时，应该让更多的 C++ 同仁去使用这些新的类型，从而消除 <code>union</code> 经年累月带来的老问题。</p><p>我认为这三种可辨识 <code>union</code> 的变体只是权宜之计。要解决 <code>union</code> 的问题，函数式编程风格的模式匹配要优雅、通用得多，也潜在地更为高效。在 2014 年 11 月在伊利诺伊大学厄巴纳——香槟分校举行的会议上，我发表了关于模式匹配相关设计问题的演讲 [Solodkyy et al. 2014]，部分内容基于我同得州农工大学的 Yuriy Solodkyy 和 Gabriel Dos Reis 合作的研究 [Solodkyy et al. 2013]。我们有一个库的实现，它的性能和函数式编程语言相若，尽管它没有和编译器进行集成。这个库既能应对包含多个可选类型的封闭集合（代数类型），也能应对开放集合（类层次结构）。我们的目的之一是消除对访问者模式的使用 [Gamma et al. 1994]。然而，我们没有一种能让人普遍接受的语法。我演讲的目的是提高人们的兴趣，并设定长期的目标。人们对此很感兴趣。在 C++17 完成后，工作就开始了 [Murzin et al. 2019, 2020]。或许模式匹配能加入到 C++23 中（<a href="11.md#115-%E6%9C%AA%E6%9D%A5">§11.5</a>）。</p><h2 id="8-4-并发"><a href="#8-4-并发" class="headerlink" title="8.4 并发"></a>8.4 并发</h2><p>在 C++17 中，以下类型的加入极大地简化了锁的使用：</p><ul><li><code>scoped_lock</code>——获取任意数量的锁，而不会造成死锁</li><li><code>shared_mutex</code> 和 <code>shared_lock</code>——实现读写锁</li></ul><p>例如，我们能获取多个锁，而不用担心会产生死锁：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    scoped_lock lck &#123;mutex1, mutex2, mutex3&#125;; <span class="hljs-comment">// 获得所有三把锁</span><br>    <span class="hljs-comment">// ... 操作共享数据 ...</span><br>&#125; <span class="hljs-comment">// 隐式地释放所有锁</span><br></code></pre></td></tr></table></figure><p>C++11 和 C++14 没能带给我们读写锁。这显然是个严重的疏忽，原因是各种提议的压力，以及处理提议所需的时间。C++17 通过加入 <code>shared_mutex</code> 解决了这一问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">shared_mutex mx;    <span class="hljs-comment">// 一个可以被共享的锁</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reader</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    shared_lock lck &#123;mx&#125;;  <span class="hljs-comment">// 跟其他 reader 共享访问</span><br>    <span class="hljs-comment">// ... 读 ...</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unique_lock lck &#123;mx&#125;;  <span class="hljs-comment">// writer 需要独占访问</span><br>    <span class="hljs-comment">// ... 写 ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>多个读线程可以“共享”该锁（即同时进入临界区），而写线程则需要独占访问。</p><p>我认为这些例子很好体现了“简单的事情简单做”的哲学。有时，我同很多 C++ 程序员一样在想，“是什么让他们花了这么长时间？”</p><p>请注意使用从构造函数参数推导出来的模板参数是如何简化了写法的（<a href="#81-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%8F%82%E6%95%B0%E6%8E%A8%E5%AF%BC">§8.1</a>）。</p><h2 id="8-5-并行-STL"><a href="#8-5-并行-STL" class="headerlink" title="8.5 并行 STL"></a>8.5 并行 STL</h2><p>从长远来看，并行算法的使用将是非常重要的，因为从用户角度看，没有什么比只说“请执行这个算法”更简单的了。从实现者的角度来看，算法中有一套特定接口而没有对算法的串行约束将是一个机会。C++17 只迈出了一小步，但这远比没有开始好得多，因为它指明了方向。不出意外，委员会中有一些反对的声音，大多数来自于希望为专家级用户提供复杂接口的人。有些人对这样简单的一个方案是否可行表示严重怀疑，并主张推迟这一方案。</p><p>基本的想法是，为每个标准库算法提供一个额外参数，允许用户请求向量化和&#x2F;或多线程。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(par_unseq, <span class="hljs-built_in">begin</span>(v), <span class="hljs-built_in">end</span>(v));  <span class="hljs-comment">// 考虑并行和向量化</span><br></code></pre></td></tr></table></figure><p>但这还只适用于 STL 算法，所以重要的 <code>find_any</code> 和 <code>find_all</code> 算法被忽略了。将来我们会看到专门为并行使用而设计的算法。这正在 C++20 中变为现实。</p><p>另一个弱点是，仍然没有取消一个线程的标准方法。例如，在搜索中找到一个对象后，一个线程不能停止其他正在并行执行的搜索。这是 POSIX 干预的结果，它反对所有形式的取消操作（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）。C++ 20 提供了协作式取消（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）。</p><p>C++17 的并行算法也支持向量化。这很重要，因为对 SIMD 的优化支持是硬件在单线程性能方面仍然（2017 年后）有巨大增长的少数领域之一。</p><p>在 C++20 中，我们（总算）能用范围库（<a href="06.md#63-concepts-ts">§6.3</a>）来避免显式使用容器的元素序列，只要这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(v);<br></code></pre></td></tr></table></figure><p>不幸的是，并行版本的范围在 C++20 中没有及时完成，因此我们只能等到 C++23 才能这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(par_unseq, v);  <span class="hljs-comment">// 使用并行和向量化来对 v 进行排序</span><br></code></pre></td></tr></table></figure><p>不想等 23 的话，我们可以自己实现适配器：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> execution_policy = std::is_execution_policy&lt;T&gt;::value;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(execution_policy <span class="hljs-keyword">auto</span>&amp;&amp; ex, std::random_access_range <span class="hljs-keyword">auto</span>&amp; r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(ex, <span class="hljs-built_in">begin</span>(r), <span class="hljs-built_in">end</span>(r));  <span class="hljs-comment">// 使用执行策略 ex 来排序</span><br>&#125;<br></code></pre></td></tr></table></figure><p>毕竟标准库是可扩展的。</p><h2 id="8-6-文件系统"><a href="#8-6-文件系统" class="headerlink" title="8.6 文件系统"></a>8.6 文件系统</h2><p>2002 年，Beman Dawes 编写了 Boost 文件系统库，成为最受欢迎的 Boost 库之一 [Boost 1998–2020]。2014 年，Boost 文件系统库 [Dawes 2002–2014]（经修改后）被加入了 TS [Dawes 2014, 2015]，又经过进一步修改被加入了 C++17 标准。跟文件名和文件系统打交道是很棘手的，因为它涉及到并行、多种自然语言和操作系统间的差异。最终能通过标准方式操作目录（文件夹）是件好事（正如 Boost 从 15 年前开始做的那样）。提供的关键类型是 <code>path</code>，对字符集和文件系统的不同写法进行了抽象。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; name)</span></span><br><span class="hljs-function"></span>&#123;<br>    path p &#123;name&#125;;  <span class="hljs-comment">// name 可能是俄语或阿拉伯语</span><br>                    <span class="hljs-comment">// name 可能使用 Windows 或 Linux 文件写法</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">exists</span>(p)) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_regular_file</span>(p))<br>                cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; regular file, size: &quot;</span> &lt;&lt; <span class="hljs-built_in">file_size</span>(p) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_directory</span>(p)) &#123;<br>                cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; directory, containing:\n&quot;</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; x : <span class="hljs-built_in">directory_iterator</span>(p))<br>                    cout &lt;&lt; <span class="hljs-string">&quot;    &quot;</span> &lt;&lt; x.<span class="hljs-built_in">path</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; exists\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; does not exist\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> filesystem_error&amp; ex) &#123;<br>        cerr &lt;&lt; ex.<span class="hljs-built_in">what</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">throw</span>;<br>    &#125;<br>    <span class="hljs-comment">// ... 使用 p ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>捕捉异常可以防止罕见的错误，比如有人在 <code>exists(p)</code> 检查后、执行详细检索前删除了文件。文件系统接口同时为罕见（异常）和常见（预期）错误提供了支持（<a href="07.md#72-%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98">§7.2</a>）。</p><h2 id="8-7-条件的显式测试"><a href="#8-7-条件的显式测试" class="headerlink" title="8.7 条件的显式测试"></a>8.7 条件的显式测试</h2><p>我认为“很多小的提案”是危险的，即使每个都能帮助一些人。考虑为条件增加显式测试的能力 [Köppe 2016b]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y); p-&gt;m&gt;<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>p-&gt;m&gt;0</code> 是一个显式测试，它的意思是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y);<br>    <span class="hljs-keyword">if</span> (p-&gt;m&gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是对 C++98 里在条件里同时声明和测试的推广（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> pd = <span class="hljs-built_in">dynamic_cast</span>&lt;Derived*&gt;(pb)) &#123; <span class="hljs-comment">// 如果 pd 指向 Derived 类型则为真</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>问题是这种推广是否足够明显和有用，值得作为提案引入。我的回答是否定的。然而，这是我被否决的一个例子（不是很罕见）。</p><p>我的观点是，显式测试最好体现在 <code>if</code> 语句中。那里更不容易被忽视，而且遵循常规有其好处，特别是对那些不仅仅使用 C++ 语言编程的人。另一方面，显式测试似乎在有的人那里很受欢迎，他们的代码设计成需要对每个函数的结果都做错误检查。我个人非常反感那种设计风格（<a href="07.md#75-%E5%9B%9E%E5%BD%92%E5%9F%BA%E7%A1%80">§7.5</a>）。</p><p>有些人为了用上新特性而积极地重写代码。我听说过好几个例子，有人一看到下面这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y)) &#123;<br>    <span class="hljs-keyword">if</span> (p-&gt;m&gt;<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>就立刻重写为这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">f</span>(y); p-&gt;m&gt;<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>并声称这样更优雅和简洁。自然，当 <code>p==nullptr</code> 时它会崩溃，而最初的代码不会。无论我们从中能得到什么好处，这样的重写可能带来新的错误和混乱。</p><p>为了通用，显式测试也可以用在 <code>switch</code> 和 <code>while</code> 条件中。在 C++20 中，这一机制被进一步扩展到可以在范围 <code>for</code> 语句中包含初始化 [Köppe 2017c]。</p><h2 id="8-8-C-17-中未包含的提议"><a href="#8-8-C-17-中未包含的提议" class="headerlink" title="8.8 C++17 中未包含的提议"></a>8.8 C++17 中未包含的提议</h2><p>除了概念（<a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>）以外，一些我认为很重要的提案没有加入 C++17。如果不提及它们，C++ 的历史就不完整：</p><ul><li><a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>：概念（C++20）</li><li><a href="#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：网络</li><li><a href="#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>：点运算符</li><li><a href="#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>：统一调用语法</li><li><a href="#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>：默认比较</li><li><a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>：协程（C++20）</li></ul><p>静态反射是在一个研究小组（<a href="03.md#3-c-%E6%A0%87%E5%87%86%E5%A7%94%E5%91%98%E4%BC%9A">§3</a>）中处理的，并不在 C++17 的既定规划之中。但作为一项重要工作，它是在这一时期启动的。</p><h3 id="8-8-1-网络库"><a href="#8-8-1-网络库" class="headerlink" title="8.8.1 网络库"></a>8.8.1 网络库</h3><p>在 2003 年，Christopher M. Kohlhoff 开始开发一个名叫 <em>asio</em> 的库，以提供网络支持 [Kohlhoff 2018]：</p><blockquote><p>“Asio 是用于网络和底层 I&#x2F;O 编程的一个跨平台 C++ 库，它采用现代化 C++ 的方式，为开发者提供了一致的异步模型”</p></blockquote><p>在 2005 年，它成为了 Boost [Kohlhoff 2005] 的一部分，并在 2006 年被提案进入标准 [Kohlhoff 2006]。在 2018 年，它成为了 TS [Wakely 2018]。尽管经过了 13 年的重度生产环境使用，它还是未能进入 C++17 标准。更糟糕的是，让网络库进入 C++20 标准的工作也停滞不前。这意味着，在 asio 得以在生产环境中使用 15 年之后，我们还是不得不至少等到 2023 年，才能看到它成为标准的一部分。延误原因在于，我们仍在进行严肃的讨论，如何最好地将 asio 中和其他场合中处理并发的方式一般化。为此提出的“执行器（executors）”提案得到了广泛的支持，并且有人还期望它能成功进入 C++20 [Hoberock et al. 2019, 2018]。我认为 C++20 中执行器和网络库的缺失，正是“最好是好的敌人”的一个例子。</p><h3 id="8-8-2-点运算符"><a href="#8-8-2-点运算符" class="headerlink" title="8.8.2 点运算符"></a>8.8.2 点运算符</h3><p>在标准化进程启动之初，首个对 C++ 扩展的提案，就是由 Jim Adcock 在 1990 年提出的允许重载点（<code>.</code>）运算符的提案 [Adcock 1990]。从 1984 年开始，我们就可以重载箭头运算符（<code>-&gt;</code>），并且该机制被重度使用，以实现“智能指针”（比如 <code>shared_ptr</code>）。人们当时希望（并且现在仍然希望）能重载点运算符以实现智能引用（代理）。基本上，人们想要有一种方式，使得 <code>x.f()</code> 意味着 <code>x.operator.().f()</code>，从而 <code>operator.()</code> 可以控制对成员的访问。然而，关于该议题的讨论总是陷入僵局，因为大家对于重载版的点运算符是否应该应用到其隐式使用上无法达成一致。举个例子：<code>++x</code> 对于用户定义类型，被解释为 <code>x.operator++()</code>。现在，如果用户定义类型定义了 <code>operator.()</code>，<code>++x</code> 是否应该表示 <code>x.operator.().operator++()</code>？Andrew Koenig 和 Bjarne Stroustrup 在 1991 年 [Koenig and Stroustrup 1991a] 尝试过解决这个问题，但被最初的提案者 Jim Adcock 所强烈反对。Gary Powell、Doug Gregor 和 Jaakko Järvi 在 2004 年再度进行了尝试，试图提案到 C++0x [Powell et al. 2004]，但在委员会那里又一次陷入僵局。最后，在 2014 年，Bjarne Stroustrup 和 Gabriel Dos Reis 又进行了一次尝试，试图提案到 C++17，我认为该提案 [Stroustrup and Dos Reis 2014] 是更为全面的，也是更为合理的。举例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ref</span> &#123;  <span class="hljs-comment">// 智能引用（带有所有权）</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Ref</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> : p&#123;</span><span class="hljs-keyword">new</span> X&#123;a&#125;&#125; &#123;&#125;<br>    X&amp; <span class="hljs-keyword">operator</span>.() &#123; <span class="hljs-comment">/* 这里可以有代码 */</span> <span class="hljs-keyword">return</span> *p; &#125;<br>    ~<span class="hljs-built_in">Ref</span>() &#123; <span class="hljs-keyword">delete</span> p; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rebind</span><span class="hljs-params">(X* pp)</span> </span>&#123; <span class="hljs-keyword">delete</span> p; p=pp; &#125;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">private</span>:<br>    X* p;<br>&#125;;<br><br>Ref&lt;X&gt; x &#123;<span class="hljs-number">99</span>&#125;;<br>x.<span class="hljs-built_in">f</span>();                <span class="hljs-comment">// 意思是 (x.operator.()).f() 即  (*x.p).f()</span><br>x = X&#123;<span class="hljs-number">9</span>&#125;;             <span class="hljs-comment">// 意思是 x.operator.() = X&#123;9&#125; 即 (*x.p)=X&#123;9&#125;</span><br>x.<span class="hljs-built_in">rebind</span>(<span class="hljs-keyword">new</span> X&#123;<span class="hljs-number">77</span>&#125;);  <span class="hljs-comment">// 意思是 x 持有并拥有那个新的 X</span><br></code></pre></td></tr></table></figure><p>其基本想法是，在“句柄”（这里是 <code>Ref</code> 类）中定义的运算（比如构造、析构、<code>operator.()</code> 和 <code>rebind()</code>）会作用于句柄之上，而没有在“句柄”中定义的运算则作用于该句柄所对应的 “值”，也就是 <code>operator.()</code> 的结果之上。</p><p>在付出很多努力之后 [Stroustrup and Dos Reis 2016]，这个提案也失败了。2014 年的这份提案失败的原因颇为有趣。当然，设计中还存在一些常见的措辞问题和模糊的“阴暗角落”，但我认为，这份提案本来是可以获得成功的，如果不是因为委员会对智能引用的想法太过激动以至于逐渐偏离了目标，再加上 Mathias Gaunard 和 Dietmar Kühl [Gaunard and Kühl 2015] 以及 Hubert Tong 和 Faisal Vali [Tong and Vali 2016] 也分别提交了替代方案的话。这两份提案中，前者需要所有试图定义 <code>operator.()</code> 的使用者去重度使用模板元编程，而后者基本上是面向对象的，引入了一种新的继承形态和隐式转换。</p><p><code>operator.()</code> 的动作应该取决于将被访问的成员呢？还是说 <code>operator.()</code> 应该是个一元运算符，仅仅依赖于它应用的对象呢（就像 <code>operator-&gt;()</code> 一样）？前者是 Gaunard 和 Kühl 的提案的核心。Bjarne Stroustrup 和 Gabriel Dos Reis 也考虑过让 <code>operator.()</code> 成为二元运算符，但结论是这种方案过于复杂，而且在这件事上跟箭头运算符（<code>-&gt;</code>）保持匹配是重要的。</p><p>最后，虽然初始的提案并没有被真正拒绝（它被 EWG 所批准，但从未进入全体委员会投票的阶段），但由于缺乏新的输入从而无法在相互竞争的提案中间赢得共识，进一步的进展也就停滞不前了。另外，最初的提议者（Bjarne Stroustrup 和 Gabriel Dos Reis）也被更为重要的提案以及他们的“日常工作”分散了精力，比如概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）。我认为点运算符的历程是一个典型案例，体现了委员会成员对于 C++ 是什么和它应该发展成什么样（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>）缺乏共同的看法。三十年的时间，六个提案，很多次的讨论，大量的设计和实现工作，然后我们仍然一无所获。</p><h3 id="8-8-3-统一调用语法"><a href="#8-8-3-统一调用语法" class="headerlink" title="8.8.3 统一调用语法"></a>8.8.3 统一调用语法</h3><p>对概念的首次讨论是在 2003 年，在这个过程中提及了函数调用需要一个统一的语法 [Stroustrup and Dos Reis 2003b]。也就是说，理想情况下 <code>x.f(y)</code> 和 <code>f(x,y)</code> 应该含义相同。重点是，当编写泛型库时，你必须决定调用参数做运算时是采用面向对象的写法还是函数式的写法（<code>x.f(y)</code> 或 <code>f(x,y)</code>）。而作为用户，你不得不适应库的设计者所做出的选择。不同的库和不同的组织会有不同的选择。对于运算符，如 <code>+</code> 和 <code>*</code>，统一的重载决策是一直以来的规则；也就是说，一个使用（比如 <code>x+y</code>）既会找到成员函数，也会找到独立函数。在标准库中，我们使用泛滥成灾的成对的函数来应对这种困境（例如，让 <code>begin(x)</code> 和 <code>x.begin()</code> 都能使用）。</p><p>我应该在 1985 年左右，在委员会纠结于细节和潜在问题之前，就把这个问题解决掉。但我当时没能把运算符的情形推广。</p><p>在 2014 年，Herb Sutter 和我各自提案了“统一函数调用语法” [Stroustrup 2014a; Sutter 2014]。当然，这两份提案并不兼容，但我们立刻解决了兼容问题，并将它们合并成了一份联合提案 [Stroustrup and Sutter 2015]。</p><p>Herb 的部分动力来自于希望在 IDE 里面支持自动完成，并且倾向于“面向对象”的写法（例如 <code>x.f(y)</code>），而我则主要出于泛型编程的考虑，并且倾向于传统的数学式写法（例如 <code>f(x,y)</code>）。</p><p>一如既往地，第一个严重的反对意见是兼容性问题；也就是，我们可能会破坏现有的代码。最初的提案确实可能会破坏一些代码，因为它倾向于更好的匹配或使得调用变得含糊，而我们的辩论主张是它是值得的，并且往往是有益的。但我们在这场辩论中失败了，之后我们重新准备了一份修改过的版本，其工作方式基于一个原则，<code>x.f(y)</code> 会首先查找 <code>x</code> 的类，仅当无法找到 <code>f</code> 成员函数时，才考虑 <code>f(x,y)</code>。类似的，<code>f(x,y)</code> 只会在没有相应的独立函数的情况下才会查找 <code>x</code>  对应的类。这个方案并不会让 <code>f(x,y)</code> 和 <code>x.f(y)</code> 完全等价，但显然它不会破坏现有代码。</p><p>这看起来很有希望，但却遭到了一片愤怒的嚎叫：它将意味着稳定接口的终结！这个观点主要由来自谷歌的人提出，他们认为依赖于重载决策的接口无法再保持稳定了，因为添加一个函数就有可能改变现有代码的含义。这当然是真的。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">double</span>)</span></span>;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span>);       <span class="hljs-comment">// 打印 &#x27;a&#x27; 的整数值</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">char</span>)</span></span>; <span class="hljs-comment">// 添加一个 print () 以改变重载集合</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span>);       <span class="hljs-comment">// 打印字符 &#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><p>我对于这个观点的回应就是，几乎任何程序都可被相当多的各种新增声明改变其含义。而且，重载的一个常见用法，就是通过添加函数，来提供语义上更佳的方案（往往是为了修复缺陷）。我们总是强烈建议，不要在程序的半途添加会导致重载集合的调用语义发生变化的重载（比如上例中的 <code>print(char)</code>）。换句话说，这个“稳定”的定义是不切实际的。我（和其他人）指出，这个问题对于类成员也早就存在了。反方的基本回应是说，类成员的集合是封闭的，所以这个问题在类成员上是可控的。我观察到，通过使用命名空间，和某个类相关的独立函数集合几乎可以像成员一样来识别 [Stroustrup 2015b]。</p><p>在这个时候，大量的争议和混乱爆发了，新的提案也开始出现，并和正处于讨论中的提案竞争。英国的代表建议采用 C# 风格的拓展方法 [Coe and Orr 2015]，而其他一些人，尤其是 John Spicer 坚持认为，如果我们需要一种统一的函数调用写法，那它应该是一种全新的写法，以和现有的两种相区分。我还是不能看出添加第三种写法（例如所建议的 <code>.f(x,y)</code>）能统一什么。这只会变成 N+1 问题（<a href="04.md#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）的又一个案例。</p><p>在提案被否决后，我被要求在有了模块后（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）重新审视该问题。到那时，对独立函数名字的查找范围就可以被限定在它第一个参数的类所在的模块。这可能可以使统一函数调用的提案起死回生，但我仍然无法看出这可以怎样解决（在我看来过于夸大的）关于接口稳定性的顾虑。</p><p>又一次，对 C++ 的角色和未来缺乏共同的看法阻碍了事情的进展（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>）。</p><p>回过头来看，我认为面向对象的写法（如 <code>x.f(y)</code>）压根就不该被引入。传统的数学式写法 <code>f(x,y)</code> 就足够了。而且作为一个附带的好处，数学式写法可以很自然的给我们带来多方法（multi-methods），从而将我们从访问者模式这个变通方案 [Solodkyy et al. 2012] 中拯救出来。</p><h3 id="8-8-4-缺省比较"><a href="#8-8-4-缺省比较" class="headerlink" title="8.8.4 缺省比较"></a>8.8.4 缺省比较</h3><p>和 C 一样，C++ 并没有给数据结构提供缺省的比较。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">int</span> b;<br>&#125;;<br><br>S s1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br>S s2 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">text</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    S s3 = s1 ;       <span class="hljs-comment">// 可以，初始化</span><br>    s2 = s1 ;         <span class="hljs-comment">// 可以，赋值</span><br>    <span class="hljs-keyword">if</span> (s1 == s2) &#123; <span class="hljs-comment">/* ... */</span> &#125;  <span class="hljs-comment">// 错误：== 对 S 未定义</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其原因在于，考虑到 <code>S</code> 的通常内存布局，在持有 <code>S</code> 的内存中的部分会有“未使用的比特位”，因此 <code>s1==s2</code> 的朴素实现，也就是比较持有 <code>s1</code> 和 <code>s2</code> 的字的比特位的方式，可能会给出 <code>false</code> 值。如果不是由于这些“未使用的比特位”，C 语言至少会有缺省的等值比较。我在 1980 年代早期曾经和 Dennis Ritchie 进行过讨论，但我们当时都太忙了，因而没时间为解决这个问题做些什么。这个问题对于复制（如 <code>s1=s2</code>）不是个问题，朴素而传统的方案就是简单的复制所有比特位。</p><p>由于简单实现的效率，允许赋值而不允许比较在 1970 年代是合适的，而到了 2010 年代就不合适了。现在我们的优化器可以很容易地处理这个问题，而且我——跟其他很多人一样——已经厌倦了解释为什么没有提供这样的缺省比较。尤其是很多 STL 算法需要 <code>==</code> 或 <code>&lt;</code>，如果用户没有显式地为这些数据结构定义 <code>operator==()</code> 和&#x2F;或 <code>operator&lt;()</code>，它们就无法支持简单的数据结构。</p><p>在 2014 年，Oleg Smolsky [Smolsky 2014] 提议了一种定义比较运算符的简单方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Thing</span> &#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    std::string d;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> Thing &amp;) <span class="hljs-type">const</span> = <span class="hljs-keyword">default</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这处理了正确的问题，但它是繁琐的（长长的六行代码就为了说明“我想要缺省的运算符”），并且，和缺省就有比较运算符相比，这绝对是退而求其次了。它还有些其他的技术问题（例如“但这个方案是侵入式的：如果我不能修改一个类，我就没法给它添加比较能力”），但现在竞赛已经是在如何更好地在 C++17 支持运算符上了。</p><p>我写了一篇论文讨论这个问题 [Stroustrup 2014c]，并且提议为简单类提供缺省比较 [Stroustrup 2014b]。事实证明，在这个上下文中，很难定义“一个类是简单的”意味着什么，而且 Jens Maurer 发现了一些令人不愉快的作用域问题，关于在有了缺省运算符的同时又自定义比较运算符的组合情况（例如，“在使用了缺省的 <code>==</code> 之后，如果我们在不同的作用域又定义了 <code>operator==()</code>，这意味着什么？”）。</p><p>Oleg、我还有其他人写了更多的其他论文，但提案都停滞了。人们开始在提案上堆积更多的要求。比如，要求缺省比较的性能在简单使用情况下要和三路比较相等。Lawrence Crowl 写了对通用的比较的分析 [Crowl 2015b]，论及如全序、弱序和偏序这样的问题。EWG 的普遍观点是 Lawrence 的分析非常棒，但他需要时间机器才能把这些机制加入到 C++ 中。</p><p>最后，在 2017 年，Herb Sutter 给出了一份提案（部分基于 Lawrence Crowl 的工作），该提案基于三路比较运算符 <code>&lt;=&gt;</code>（如在各种语言中可见到的），基于该运算符可以生成其他常用的运算符 [Sutter 2017a]。它没有为我们提供缺省的运算符，但至少它让我们可以用一行公式去定义它们：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">friend</span> std::strong_order <span class="hljs-built_in">operator</span>&lt;=&gt;(S,S) = <span class="hljs-keyword">default</span>;<br>&#125;;<br><br>S s1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br>S s2 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-type">bool</span> b0 = s1==s2;    <span class="hljs-comment">// true</span><br><span class="hljs-type">int</span> b1 = s1&lt;=&gt;s2;    <span class="hljs-comment">// 0</span><br><span class="hljs-type">bool</span> b2 = s1&lt;s2;     <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上述方案是 Herb Sutter 所推荐的，因为它带来的问题最少（例如跟重载和作用域相关的），但它是侵入式的。我无法在不能修改的类中使用这个方案。在这种情况下，可以定义一个非成员函数的 <code>&lt;=&gt;</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">int</span> b;<br>&#125;;<br><br>std::strong_order <span class="hljs-built_in">operator</span>&lt;=&gt;(S,S) = <span class="hljs-keyword">default</span>;<br></code></pre></td></tr></table></figure><p>关于 <code>&lt;=&gt;</code> 的提案包含了一个可选项，为简单类隐式定义 <code>&lt;=&gt;</code>，但不出所料，认为一切都是显式的才更安全的人们投票否决了这个选项。</p><p>于是，我们得到的并不是一个让简单的例子在新手手中按预期工作的功能，而是一个允许专家仔细打造精妙比较运算的复杂功能。</p><p>尽管这个 <code>&lt;=&gt;</code> 的提案并没有可用的实现，并且对标准库有强烈潜在影响。它还是比其他任何我能想到的近期的提案都更容易地通过了委员会。不出所料，这个提案带来了很多惊讶（<a href="09.md#934-">§9.3.4</a>），包括导致之前 <code>==</code> 提案未能成功的查找问题。我猜测，关于比较运算符的讨论让很多人相信了我们总得做些什么，而 <code>&lt;=&gt;</code> 提案解决了很多各种问题，并与其他语言中熟悉的内容相吻合。</p><p>将来的某个时间，我很可能会再次提议为简单类缺省定义 <code>==</code> 和 <code>&lt;=&gt;</code>。C++ 的新人和普通用户理当享有这种简单性。</p><p><code>&lt;=&gt;</code> 被提议于 2017 年，错过了 C++17，但经过后来很多进一步的工作，它进入了 C++20（<a href="09.md#934-">§9.3.4</a>）。</p>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_09/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_09/</url>
    
    <content type="html"><![CDATA[<h1 id="9-C-20：方向之争"><a href="#9-C-20：方向之争" class="headerlink" title="9. C++20：方向之争"></a>9. C++20：方向之争</h1><p>由超过 350 名成员所组成的委员会来进行设计，不太可能产生一个连贯一致的结果。大家都有截然不同的背景（包括不同的教育背景），也都在各自的“日常工作”中承受不同的压力，自然会在方向上、优先级上和委员会程序上有不同的见解。粗略估算一下，对于每个提案，大概都有十多位成员会强烈反对其中部分内容。考虑到 WG21 希望同意人数达到 80% 或 90% 才宣告达成共识，C++ 到目前为止的成功令人惊讶。</p><h2 id="9-1-设计原则"><a href="#9-1-设计原则" class="headerlink" title="9.1 设计原则"></a>9.1 设计原则</h2><p>C++ 想发展成什么样？或者说，WG21 对于它在努力做什么有一个清晰的观点么？我认为答案是否定的。每位成员对于这个问题都有想法，但没有一个想法既被广泛接受，同时又足够具体到可以指导实际的讨论和决策。</p><p>ISO C++ 标准委员会既没有一组得到广泛认可的设计标准，也没有一组得到广泛认可的采纳某个特性的标准。这并不是因为缺少这方面的尝试。我曾经反复不断地明确强调以下设计标准：</p><ul><li>在《C++ 语言的设计和演化》[Stroustrup 1994]（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）中提出的“经验法则”包括 RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）、面向对象编程、泛型编程和静态类型安全。</li><li>“简单的事情简单做！”（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）则引出洋葱原则（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）。</li><li>从代码到硬件的直接映射和零开销抽象（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>）（<a href="11.md#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>）。</li><li>基于意见反馈来发展 C++，以解决现实世界的实际问题（<a href="11.md#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>）。</li><li>保持稳定性和兼容性 [Koenig and Stroustrup 1991b; Stroustrup 1994]。</li><li>直接和硬件打交道的能力，强有力的可组合的抽象机制，以及最小化的运行时系统（参见我在 HOPL3 的论文 [Stroustrup 2007] 中的回顾）。</li></ul><p>问题在于，人们发现要在解释上达成一致太难，而要忽视他们所不喜欢的又太容易。这种倾向，使得在“什么才是重要的”这个问题上的根本分歧得以发酵。大家基于他们所受的教育和他们的日常工作中所获得的理解，来做出设计决策。这种背景上的多样性，再加上标准委员会内部对于 C++ 广泛应用领域的不均衡覆盖（<a href="03.md#33-%E5%AF%B9%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BD%B1%E5%93%8D">§3.3</a>），就构成了一个问题。许多人只是对于自己的观点过于确定无疑 [Stroustrup 2019b]。而要分辨清楚到底什么只是一时的流行，什么从长远来看才对 C++ 社区有帮助，确实很困难。通常来说，第一个提出的解决方案往往不是最好的那个。</p><p>人们很容易在细节中迷失而忽略了大局。人们很容易关注当前的问题而忘记长期目标（以十年计）。相反，委员会成员是如此专注于通用的原则和遥远的未来，以至于对迫在眉睫的实际问题视而不见。</p><p>在 2017 年，一群国家标准机构代表团的领导人 [van Winkel et al. 2017] 要求对 C++ 的方向性问题予以正式严肃的考量，在他们的敦促之下，WG21 建立了<strong>方向组</strong>（Direction Group，通常称之为 DG）以试图解决设计目标和方向的问题（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。DG 在 2018 年 发布了它的第一个广泛而详尽的声明 [Dawes et al. 2018]，强调了要遵守明确清晰的原则、一致性，并鼓励用流程来确保这些。比如说：</p><blockquote><p>我们从根本上需要：</p><ul><li>稳定性：有用的代码“存活”达数十年。</li><li>不断演进：世界在不断变化，而 C++ 也需要不断改变以面对新的挑战。</li></ul><p>这里有一种内在的张力。</p></blockquote><p>DG 强调一致性有必要贯穿整个标准：</p><blockquote><p>现如今，某些最为强大的设计技术融合了传统的面向对象编程方面、泛型编程方面、函数式编程方面以及一些传统的命令式编程技术。这种组合，而不是理论上的纯粹，才是理想的。</p><ul><li>提供在风格（语法和语义）和使用风格上一致的特性。</li></ul><p>该要求适用于库、语言特性，以及这两者的组合</p></blockquote><p>当然了，还有静态类型：</p><blockquote><p>C++ 极其依赖于静态类型安全，以达成其表达能力、性能和安全性。理想的情况下应有</p><ul><li>完全的类型安全和资源安全（没有内存损坏和内存泄漏）</li></ul><p>该要求可以在不增加额外开销的情况下达成，尤其是，不需要添加垃圾收集器，也不需要限制表达能力。</p></blockquote><p>国家机构领导的要求 [van Winkel et al. 2017] 和 DG 的文档 [Dawes et al. 2018] 都强调了委员会成员需要了解 C++ 的历史，以确保一定程度的连续性。一个缺乏历史的组织无法对他们的设计内容保持一致性的观点。因此，HOPL 论文 [Stroustrup 1993, 2007] 和《C++ 语言的设计和演化》[Stroustrup 1994] 扮演了基石角色。</p><p>传统上，为符合 WG21 在 ISO 的章程，C++ 演化方面的工作主要都聚焦于语言和库的课题。然而，开发者不仅仅需要考虑语言：程序是工具链（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>）的产物。令人震惊的是，C++ 并没有关于动态链接库的标准，也没有标准化的构建系统。工具研究小组 SG15 在 2018 年成立，以尝试应对工具方面的形形色色的问题（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。</p><h2 id="9-2-我的-C-17-清单"><a href="#9-2-我的-C-17-清单" class="headerlink" title="9.2 我的 C++17 清单"></a>9.2 我的 C++17 清单</h2><p>我一直努力鼓励委员会关注重要的改进——而不只去做那些容易完成和容易达成一致的事情——作为这个努力的一部分，我制定了一个清单，包含了我认为重要且适合引入 C++17 的内容及其理由：</p><ul><li>概念——它让我们可以精确描述泛型程序，并解决对于错误信息质量的广泛抱怨。</li><li>模块——只要它可以显著地提高与宏的隔离并大大优化编译时间。</li><li>范围库和其他关键 STL 组件对概念的使用——为主流用户改进错误信息质量和提高库规范的精确性（“STL2”）。</li><li>统一调用语法——简化模板库的规范和使用。</li><li>协程——应该非常快速而简单。</li><li>网络库支持——基于 asio 库，如相应 TS 所描述。</li><li>契约——不一定需要在 C++17 的库规范中使用。</li><li>SIMD 向量和并行算法。</li><li>标准库词汇类型，比如 <code>optional</code>、<code>variant</code>、<code>string_view</code> 和 <code>array_view</code>。</li><li>一种在栈上提供数组（<code>stack_array</code>）的“魔法类型”，合理支持安全、便捷的使用。</li></ul><p>在 2015 年 4 月份，在 Kansas 州 Lenexa 的 WG21 会议中，我在晚间会议上向一些有共鸣的观众展示了这个清单。然而，几乎没有人感受到足够的动力去根据这个清单调整工作焦点。这个清单后来“泄露”了出去，并且在网上引起了混乱的讨论，因此我不得不把它正式写出来 [Stroustrup 2015a]。</p><p>如果是在一个团结的委员会中，该清单上的每一项都应该已经准备好进入 C++17 了。实际上我认为，如果我们专注于这个列表，完成其中的大约一半提案还是可行的。然而我还是过于乐观了。我们唯一达成共识的也就只有关于标准库词汇类型的那一项。其中 <code>array_view</code> 被重命名为 <code>span</code>，成了 C++20（<a href="#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>）的一部分。</p><p>幸运的是，列表上的大部分条目进入了 C++20。除了</p><ul><li>网络库（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）——现在是个 TS [Wakely 2018]</li><li>契约（<a href="#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）——差一点进入 C++20</li><li>统一函数调用（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）</li><li>SIMD 向量——目前在一个 TS 中 [Hoberock 2019]</li><li><code>stack_array</code></li></ul><p>这份列表带来了日程安排上的争论。鉴于概念的提案（<a href="06.md#638-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-c17-%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%A6%82%E5%BF%B5">§6.3.8</a>）在 2016 年的失败看起来是不可避免了，我被询问——由整个委员会——是否我打算提议推迟标准的发布一到两年，来把概念加入到标准中，让标准变成 C++18 或者 C++19。我拒绝了，因为我认为可预见的发布周期对于整个社区而言更为重要，其重要性要超过某个单项的改进。而且，当时也无法确保一定会就该提案形成共识，再说一次日程延误很可能会造成更多的延误。如果一份提案被认为值得推迟标准发布，那么就会有人主张也有其他的提案同样值得标准发布的推迟。这样的逻辑使得 C++0x 变成了 C++11，哪怕当时曾有人希望是 C++06。</p><h2 id="9-3-C-20-特性"><a href="#9-3-C-20-特性" class="headerlink" title="9.3 C++20 特性"></a>9.3 C++20 特性</h2><p>WG21 将针对 C++20 的新提案的截止日期定为 2018 年 11 月，并在 2019 年 2 月会议之后宣布“特性冻结”。2020 年 2 月，在捷克共和国布拉格举行的一次会议上，技术投票结果为 79 比 0，一票弃权 [Smith 2020]。所有 15 个国家成员体的代表团团长均投了赞成票。官方标准将由 ISO 在 2020 年末发布。C++20 特性包括：</p><ul><li><a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>：<strong>概念</strong>——对泛型代码的要求进行明确规定</li><li><a href="#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>：<strong>模块</strong>——支持代码的模块化，使代码更卫生并改善编译时间</li><li><a href="#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>：<strong>协程</strong>——无栈协程</li><li><a href="#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>：<strong>编译期</strong>计算支持</li><li><a href="#934-">§9.3.4</a>：**&lt;&#x3D;&gt;**——三路比较运算符</li><li><a href="#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>：<strong>范围</strong>——提供灵活的范围抽象的库</li><li><a href="#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>：<strong>日期</strong>——提供日期类型、日历和时区的库</li><li><a href="#938-%E8%B7%A8%E5%BA%A6">§9.3.8</a>：<strong>跨度</strong>——提供对数组进行高效和安全访问的库</li><li><a href="#937-%E6%A0%BC%E5%BC%8F%E5%8C%96">§9.3.7</a>：<strong>格式化</strong>——提供类型安全的类似于 printf 的输出的库</li><li><a href="#94-%E5%B9%B6%E5%8F%91">§9.4</a>：<strong>并发改进</strong>——例如作用域线程和停止令牌</li><li><a href="#95-%E6%AC%A1%E8%A6%81%E7%89%B9%E6%80%A7">§9.5</a>：<strong>很多次要特性</strong>——例如 C99 风格的指派初始化器和使用字符串字面量作为模板参数</li></ul><p>以下内容在 C++20 时尚未准备就绪，但可能会成为 C++23 的主要特性：</p><ul><li><a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：<strong>网络</strong>——网络库（sockets 等）</li><li><a href="#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>：<strong>静态反射</strong>——根据周围程序生成代码的功能</li><li><strong>模式匹配</strong>——根据类型和对象值选择要执行的代码 [Murzin et al. 2019]</li></ul><p>C++20 提供了一组反映 C++ 长期目标的特性，并解决了一些根本问题。例如，在 1994 年的《C++ 语言的设计和演化》[Stroustrup 1994] 一书中就提到了模块和概念，而协程在整个 1980 年代都是“带类的 C”和 C++ 的一部分。C++20 对 C++ 的影响将与 C++11 一样大。</p><p>不幸的是，C++20 没有对模块和协程提供标准库支持。这可能会成为一个严重的问题，但当时实在没有时间来准备并赶上 C++20 的时间要求。C++23 应该会提供所需的支持（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）。</p><h3 id="9-3-1-模块"><a href="#9-3-1-模块" class="headerlink" title="9.3.1 模块"></a>9.3.1 模块</h3><p>在 C++ 程序中改进模块化是一个显然的需求。C++ 从 C 语言中继承了 <code>#include</code> 机制，它依赖于从头文件使用文本形式包含 C++ 源代码，这些头文件中包含了接口的文本定义。一个流行的头文件可以在大型程序的各个单独编译的部分中被 <code>#include</code> 数百次。基本问题是：</p><ul><li><strong>不够卫生</strong>：一个头文件中的代码可能会影响同一翻译单元中包含的另一个 <code>#include</code> 中的代码的含义，因此 <code>#include</code> 并非顺序无关。宏是这里的一个主要问题，尽管不是唯一的问题。</li><li><strong>分离编译的不一致性</strong>：两个翻译单元中同一实体的声明可能不一致，但并非所有此类错误都被编译器或链接器捕获。</li><li><strong>编译次数过多</strong>：从源代码文本编译接口比较慢。从源代码文本反复地编译同一份接口非常慢。</li></ul><p>自“开辟鸿蒙”而始，这已经众所周知（例如，参见《C++ 语言的设计和演化》[Stroustrup 1994] 第 18 章），但随着越来越多的信息被放入头文件（<code>inline</code> 函数、<code>constexpr</code> 函数，还有尤其是模板），这些问题在这些年里变得越来越严重。在 C++ 的早期，通常 10% 的文本来自头文件，但现在它更可能是 90% 甚至 99%。考虑下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段典型的代码有 70 个字符，但是在 <code>#include</code> 之后，它会产生 419909 个字符需要编译器来消化。尽管现代 C++ 编译器已有骄人的处理速度，但模块化问题已经迫在眉睫。</p><p>在委员会的鼓励下（并得到了我的支持），David Vandevoorde 在二十一世纪产出了一系列模块设计 [Vandevoorde 2007，2012]，但进展非常缓慢。委员会的首要任务是完成 C++0x，而不是在模块上取得进展。David 主要靠自己奋斗，此外基本就只得到一些精神支持了。在 2012 年，Doug Gregor 从苹果提交了一个完全不同的模块系统设计 [Gregor 2012]。在 Clang 编译器基础设施中，这一设计已经针对 C 和 Objective C 实现 [Clang 2014]。它依赖于语言之外的文件映射指令，而不是 C++ 语言里的构件。该设计还强调了不需要对头文件进行修改。</p><p>在 2014 年，由 Gabriel Dos Reis 领导的微软团队成员根据他们的工作提出了一项提案 [Dos Reis et al. 2014]。从精神层面上讲，它更接近于 David Vandevoorde 的设计，而不是 Clang&#x2F;苹果的提议，并且很大程度上是基于 Gabriel Dos Reis 和 Bjarne Stroustrup 在得州农工大学所做的关于 C++ 源代码的最优图表示的研究（于 2007 年发布并开源 [Dos Reis 2009; Dos Reis and Stroustrup 2009, 2011]）。</p><p>这为在模块方面取得重大进展奠定了基础，但同时也为苹果&#x2F;谷歌&#x2F;Clang 方式（和实现）及微软方式（和实现）之间的一系列冲突埋下了伏笔。</p><p>为此一个模块研究小组被创建。3 年后，该小组主要基于 Gabriel Dos Reis 的设计 [Dos Reis 2018] 制订了 TS。</p><p>在 2017 年，然后在 2018 年又发生了一次，将 Modules TS 纳入 C++20 标准的建议受阻，就因为谷歌提出了不同的设计 [Smith 2018a,b]。争论的主要焦点是在 Gabriel Dos Reis 的设计中宏无法导出。谷歌的人认为这是一个致命缺陷，而 Gabriel Dos Reis（和我）认为这对于模块化至关重要 [Stroustrup 2018c]：</p><blockquote><p>模块化是什么意思？顺序独立性：<code>import X; import Y;</code> 应该与 <code>import Y; import X;</code> 相同。换句话说，任何东西都不能隐式地从一个模块“泄漏”到另一个模块。这是 <code>#include</code> 文件的一个关键问题。<code>#include</code> 中的任何内容都会影响所有后续的 <code>#include</code>。</p></blockquote><p>我认为顺序独立性是“代码卫生”和性能的关键。通过坚持这种做法，Gabriel Dos Reis 的模块实现也比使用头文件在编译时间上得到了 10 倍量级的性能提升——即使在旧式编译中使用了预编译头文件也是如此。迎合传统头文件和宏的常规使用的方式很难做到这一点，因为需要将模块单元保持为允许宏替换（“标记汤”）的形式，而不是 C++ 逻辑实体的图。</p><p>经过精心设计的一系列折中，我们最终达成了一个被广泛接受的解决方案。这一多年努力的关键人物有 Richard Smith（谷歌）和 Gabriel Dos Reis（微软），以及 GCC 的模块实现者 Nathan Sidwell（Facebook），还有其他贡献者 [Dos Reis and Smith 2018a,b; Smith and Dos Reis 2018]。从 2018 年年中开始，大多数讨论都集中在需要精确规范的技术细节上，以确保实现之间的可移植性 [Sidwell 2018; Sidwell and Herring 2019]。</p><p>考虑如下代码所示的 C++20 模块的简单示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">export</span> <span class="hljs-keyword">module</span> map_printer;  <span class="hljs-comment">// 定义一个模块</span><br><br><span class="hljs-keyword">import</span> iostream;       <span class="hljs-comment">// 使用 iostream</span><br><span class="hljs-keyword">import</span> containers;     <span class="hljs-comment">// 使用我自己的 containers</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">export</span>                 <span class="hljs-comment">// 让 print_map() 对 map_printer 的用户可用</span><br><span class="hljs-keyword">template</span>&lt;Sequence S&gt;<br>    <span class="hljs-keyword">requires</span> Printable&lt;Key_type&lt;S&gt;&gt; &amp;&amp; Printable&lt;Value_type&lt;S&gt;&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_map</span><span class="hljs-params">(<span class="hljs-type">const</span> S&amp; m)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [key,val] : m)  <span class="hljs-comment">// 分离键和值</span><br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码定义了一个模块 <code>map_printer</code>，该模块提供函数 <code>print_map</code> 作为其用户接口，并使用了从模块 <code>iostream</code> 和 <code>containers</code> 导入的功能来实现该函数。为了强调与旧的 C++ 风格的区别，我使用了概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和结构化绑定（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）。</p><p>关键思想：</p><ul><li><code>export</code> 指令使实体可以被 <code>import</code> 到另一个模块中。</li><li><code>import</code> 指令使从另一个模块 <code>export</code> 出来的实体能够被使用。</li><li><code>import</code> 的实体不会被隐式地再 <code>export</code> 出去。</li><li><code>import</code> 不会将实体添加到上下文中；它只会使实体能被使用（因此，未使用的 <code>import</code> 基本上是无开销的）。</li></ul><p>最后两点不同于 <code>#include</code>，并且它们对于模块化和编译期性能至关重要。</p><p>这个简单的例子纯粹是基于模块的；这是理想情况。但是，已经部署的 C++ 代码也许有五千亿行，而头文件和 <code>#include</code> 并不会在一夜之间被淘汰，可能再过几十年都不会。好几个人和组织指出，我们需要一些过渡机制，使得头文件和模块可以在程序中共存，并让库为不同代码成熟度的用户同时提供头文件和模块的接口。请记住，在任何给定的时刻，都有用户依赖 10 年前的编译器。</p><p>考虑在无法修改 <code>iostream</code> 和 <code>container</code> 头文件的约束下实现 <code>map_printer</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">export</span> <span class="hljs-keyword">module</span> map_printer;  <span class="hljs-comment">// 定义一个模块</span><br><br><span class="hljs-keyword">import</span> &lt;iostream&gt;      <span class="hljs-comment">// 使用 iostream 头文件</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;containers&quot;</span>    <span class="hljs-comment">// 使用我自己的 containers 头文件</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">export</span>                 <span class="hljs-comment">// 让 print_map() 对 map_printer 的用户可用</span><br><span class="hljs-keyword">template</span>&lt;Sequence S&gt;<br>    <span class="hljs-keyword">requires</span> Printable&lt;Key_type&lt;S&gt;&gt; &amp;&amp; Printable&lt;Value_type&lt;S&gt;&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_map</span><span class="hljs-params">(<span class="hljs-type">const</span> S&amp; m)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [key,val] : m)  <span class="hljs-comment">// 分离键和值</span><br>        cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; val &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指名某个头文件的 <code>import</code> 指令工作起来几乎与 <code>#include</code> 完全一样——宏、实现细节以及递归地 <code>#include</code> 到的头文件。但是，编译器确保 <code>import</code> 导入的“旧头文件”不会相互依赖。也就是说，头文件的 <code>import</code> 是顺序无关的，因此提供了部分、但并非全部的模块化的好处。例如，像 <code>import &lt;iostream&gt;</code> 这样导入单个头文件，程序员就需要去决定该导入哪些头文件，也因为与文件系统进行不必要的多次交互而降低编译速度，还限制了来自不同头文件的标准库组件的预编译。我个人希望看到颗粒度更粗的模块，例如，标准的 <code>import std</code> 表示让整个标准库都可用。然而，更有雄心的标准库重构 [Clow et al. 2018] 必须要推迟到 C++23（<a href="11.md#115-%E6%9C%AA%E6%9D%A5">§11.5</a>）了。</p><p>像 <code>import</code> 头文件这样的功能是谷歌&#x2F;Clang 提案的重要组成部分。这样做的一个原因是有些库的主要接口就是一堆宏。</p><p>在设计&#x2F;实现&#x2F;标准化工作的后期，反对意见集中在模块对构建系统的可能影响上。当前 C 和 C++ 的构建系统对处理头文件已经做了大量优化。数十年的工作已经花费在优化这一点上，一些与传统构建系统相关的人表示怀疑，是否可以不经（负担不起的）重大重新设计就顺利引入模块，而使用模块的构建会不允许并行编译（因为当前要导入的模块依赖于某个先前已导入模块的编译结果）[Bindels et al. 2018; Lopes et al. 2019; Rivera 2019a]。幸运的是，早期印象过于悲观了 [Rivera 2019b]，build2 系统已经为处理模块进行了修改，微软和谷歌报告说他们的构建系统在处理模块方面显示出良好的效果，最后 Nathan Sidwell 报告说他在仅两周的业余时间里修改了 GNU 的构建系统来处理模块 [Sidwell 2019]。这些经验的最终演示及关键模块实现者（Gabriel Dos Reis、Nathan Sidwell、Richard Smith 和 David Vandevoorde）的联署论文打动了几乎所有反对者 [Dos Reis et al. 2019]。</p><p>在 2019 年 2 月，模块得到了 46 比 6 的多数票，进入了 C++20；投票者中包含了所有的实现者 [Smith 2019]。在那时，主要的 C++ 实现已经接近 C++20 标准。模块有望成为 C++20 提供的最重要的单项改进。</p><h3 id="9-3-2-协程"><a href="#9-3-2-协程" class="headerlink" title="9.3.2 协程"></a>9.3.2 协程</h3><p>协程提供了一种协作式多任务模型，比使用线程或进程要高效得多。协程曾是早期 C++ 的重要组成部分。如果没有提供协程的任务库，C++ 将胎死腹中，但是由于多种原因，协程并没有进入 C++98 标准（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>）。</p><p>C++20 协程的历史始于 Niklas Gustafsson（微软）关于“可恢复函数”的提案 [Gustafsson 2012]。其主要目的是支持异步 I&#x2F;O；“能够处理成千上万或以百万计客户的服务器应用程序”[Kohlhoff 2013]。它相当于当时引入到 C#（2015 年的 6.0 版）的 async&#x2F;await 功能。类似的功能已经存在于 Python、JavaScript 和其他语言里。Niklas 的提案引发了来自 Oliver Kowalke 和 Nat Goodspeed [Kowalke and Goodspeed 2013] 的基于 Boost.Coroutine 的竞争提案，并引起了人们的浓厚兴趣。<code>await</code> 设计无栈、不对称且需要语言支持，而源自 Boost 的设计则使用栈、具有对称控制原语且基于库。无栈协程只能在其自身函数体中挂起，而不能从其调用的函数中挂起。这样，挂起仅涉及保存单个栈帧（“协程状态”），而不是保存整个栈。对于性能而言，这是一个巨大的优势。</p><p>协程的设计空间很大，因此很难达成共识。委员会中的许多人（包括我在内）都希望能够综合考虑这两种方式的优点，因此一群感兴趣的成员对可选方案进行了分析 [Goodspeed 2014]。结论是，有可能同时利用这两种方式的优点，但这需要认真研究。这项研究花了数年时间，但没有得出明确的结果。与此同时，出现了更多的提案。</p><p>至于密切相关的并发主题（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>），对所编写、演示和讨论的提案的完整解释超出了本文的范围。在这里，我只描述一个概况。因为复杂的细节简直太多，在此也只能简而言之；仅论文就有数百页，许多讨论都取决于高级用例的（有时是假设的）高度优化实现的性能。讨论发生在 SG1（并发）、EWG（演化）、LEWG（库演化）、CWG（核心语言）、LWG（库），甚至在晚间会议和全体会议上。</p><p>在这些讨论和提案中，三种想法反复出现：</p><ul><li>将协程的状态及其操作表示为 lambda 表达式，从而使协程优雅地适配 C++ 类型系统，而不需要 <code>await</code> 式协程 [Kohlhoff 2013] 所使用的某些“编译器魔法”。</li><li>为无栈和有栈协程提供通用接口——也可能为其他类型的并发机制，例如线程和纤程，提供通用接口。[Kowalke 2015; Riegel 2015]。</li><li>为了在最简单和最关键的用途（生成器和管道）上获得最佳性能（运行时间和空间），无栈协程需要编译器支持，并且一定不能为了支持更高级的用例而在接口上作妥协 [Nishanov 2018，2019b]。</li></ul><p>你不可能同时满足这三者。我非常喜欢通用接口的想法，因为这样可以最大限度地减少学习需要的努力，并使得实验大为便捷。类似地，使用完全普通的对象来表示协程将开放整个语言来支持协程。然而，最终性能论胜出。</p><p>在 2017 年，Gor Nishanov 基于 <code>await</code> 无栈方式的提案被接受为 TS [Nishanov 2017]。这一提案（不可避免地被戏称为“Gor-routines”）获得批准的原因是，它的实现在其关键用例（管道和生成器）中表现出了卓越的性能 [Jonathan et al. 2018; Psaropoulos et al. 2017]。之所以把它写成 TS，而不是放到标准中，是因为许多人喜欢更通用（但速度较慢）的有栈协程，有些人仍然希望这两种方式的零开销统一。我当时（今天仍没有变）的观点是，在合理的时间段里，统一并不可能。我已经等了近 30 年的时间让协程重新回到 C++ 中，我可不想等待一个可能永远不会到来的突破：“最好是好的敌人。”</p><p>和往常一样，命名是一个有争议的问题。特别是，TS 草案使用了关键字 <code>yield</code>，这很快被判定为一个流行的标识符（例如，在金融和农业领域）。而且，协程产生的结果需要被包到一个调用者可以等待的结构中（例如，<code>future</code>（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）），因此，协程 <code>return</code> 语句的语义与普通 <code>return</code> 语句的语义不是完全一样。所以，有些人就反对 <code>return</code> 的“复用”。作为回应，演化工作组引入了关键字 <code>co_return</code>、<code>co_yield</code> 和 <code>co_await</code>，用于协程中的三个关键操作。使用下划线是为了防止母语为英语的人将 <code>coreturn</code>、<code>coyield</code> 和 <code>coawait</code> 误读为 <code>core-turn</code>、<code>coy-ield</code> 和 <code>coa-wait</code>。人们也探索了使 <code>yield</code> 和 <code>await</code> 成为上下文敏感的关键词的可能性，但没有达成共识。这些新的关键词并不漂亮，它们很快就成为了那些出于任何原因不喜欢 TS 协程的人们的靶子。</p><p>在 2018 年，TS 协程被提议纳入 C++20 标准，但在最后那一刻，来自谷歌的 Geoff Romer、James Dennett 和 Chandler Carruth 提出了一个对新手颇不友好的提案 [Romer et al. 2018]。谷歌的提案名为“核心协程”（Core Coroutines），它和 Gor 的提案一样，需要库支持来使基本机制对非专家用户变得友好。所需要的库当时还没有设计好。核心协程被宣称比 TS 协程更高效，并且解决了谷歌的一个用例，用于不基于异常的错误传播。其思想基于将协程的状态表示为 lambda 表达式。为了避免人们普遍鄙视的关键词 <code>co_return</code>、<code>co_yield</code> 和 <code>co_await</code>，核心协程提供了据称更友好的运算符 <code>[-&gt;]</code> 和 <code>[&lt;-]</code>。令人惊讶的是，作为运算符，<code>[-&gt;]</code> 有四个字符长，并且有四个操作数，“<code>[</code>”和“<code>]</code>”是标记的一部分。不幸的是，核心协程没有实现，因此可用性和效率的主张无法得到验证。这推迟了关于协程的进一步决定。</p><p>TS 协程的一个重要且可能致命的问题是，它依赖于自由存储区（动态内存、堆）上的分配。在某些应用程序中，这是很大的开销。更糟糕的是，对于许多关键的实时和嵌入式应用程序，自由存储区的使用是不允许的，因为它可能导致不可预测的响应时间和内存碎片的可能性。核心协程没有这个问题。然而，Gor Nishanov 和 Richard Smith 论证了，TS 协程可以通过多种方式之一保证几乎所有用法下都不使用自由存储区（并对其他用法进行检测和预防）[Smith and Nishanov 2018]。特别是，对于几乎所有的关键用例，都可以将自由存储区使用优化为栈分配（所谓的“Halo 优化”<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：Heap Allocation eLision Optimization">[1]</span></a></sup>）。</p><p>随着时间的推移，核心协程不断发展和完善 [Romer et al. 2019a]，但完整的实现一直没有出现。在 2018 年，保加利亚国家标准机构反对 TS 协程设计 [Mihaylov and Vassilev 2018]，并提出了另一种设计 [Mihaylov and Vassilev 2019]。又一次，提案宣称具有优雅、通用性和高性能，但同样地，没有任何实现存在。</p><p>这时候，演化小组的负责人 Ville Voutilainen 要求这三个仍然活跃的提案的作者撰写两份评估和比较论文：</p><ul><li><em>Coroutines: Use-cases and Trade-offs</em>（《协程：用例与取舍》）[Romer et al. 2019b]</li><li><em>Coroutines: Language and Implementation Impact</em>（《协程：语言与实现影响》）[Smith et al. 2019]</li></ul><p>这三个提案（Gor、谷歌和保加利亚）都是无栈的，需要栈的用例被留给未来的提案。所有这些提案都有数量惊人的定制点 [Nishanov 2018]，它们的实现者和专家用户都认为这些是必不可少的。结果表明，在不同的提案中，关键用例的表达并没有显著不同。因此，这些差异可以认为很大程度上只是表面文章，不用多理会。例如，<code>co_await</code> 比 <code>[&lt;-]</code> 更丑吗？</p><p>这就只留下性能问题有待讨论。Gor 的提案，因为有着四年的生产环境使用，并在微软和 Clang 编译器中都有实现，而具有明显的优势。在 C++20 的关键投票之前的最后几次会议上，委员会听取了来自 Sandia [Hollman 2019]、微软 [Jonathan et al. 2018] 和 Facebook [Howes et al. 2018] 的人的体验报告，并考虑了一些关于基于使用体验的改进和简化的建议 [Baker 2019]。然而，（据我判断）打动委员会、使其以 48 比 4 的绝对优势投票支持 Gor-routine 的要点是，在使用“普通的 lambda 表达式”来代表协程状态的策略中发现了一个根本性的缺陷。为了使表示协程状态的 lambda 表达式与其他 lambda 表达式一样，必须在编译的第一阶段就知道其大小。只有这样，我们才能在栈上分配协程状态、复制它们、移动它们，并以语言允许的各种方式使用它们。但是，在优化器运行之前，栈帧（根本上，这就是无栈协程的状态）的大小是未知的。没有从优化器返回到编译器早期阶段的信息路径。优化器可能会通过消除变量来减小帧的大小，也可能会通过添加有用的临时变量来增加帧的大小。因此，用来代表某个协程状态的 lambda 表达式不能是“普通的”。</p><p>最后，考虑一个 C++20 协程的简单例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">generator&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 生成 0,1,1,2,3,5,8,13 ...</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 初值</span><br>    <span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span> next = a+b;<br>        <span class="hljs-keyword">co_yield</span> a;    <span class="hljs-comment">// 返回下一个斐波那契数</span><br>        a = b;         <span class="hljs-comment">// 更新值</span><br>        b = next;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : <span class="hljs-built_in">fibonacci</span>())<br>        cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>co_yield</code> 使 <code>fibonacci()</code> 成为一个协程。<code>generator&lt;int&gt;</code> 返回值将保存生成的下一个 <code>int</code> 和 <code>fibonacci()</code> 等待下一个调用所需的最小状态。对于异步使用，我们将用 <code>future&lt;int&gt;</code> 而不是 <code>generator&lt;int&gt;</code>。对协程返回类型的标准库支持仍然不完整，不过库就应该在生产环境的使用中成熟。</p><p>委员会本来可以更好地处理协程提案吗？也许可以吧；C++20 协程与 Niklas Gustafsson 2012 年的提案非常相似。我们探索了替代方案固然很好，但我们真的需要 7 年时间吗？许多有能力的人所做的大量努力是否可以更多协作、更少竞争？我觉得更好的学术知识在早期阶段会有所帮助。毕竟，协程有约 60 年的历史，例如 [Conway 1963]。人们是知道 C++ 和相关语言中的现代方法的，但我们的理解既未共享，也不系统。如果我们当初花上几个月或一年的时间对基本设计选择、实现技术、关键用例和文献进行彻底审核，我怀疑我们早在 2014 年就可以得出 2019 年 2 月得出的结论。之后的几年本可以花在对我们所选择的基本方法进行增量改进和功能添加上。</p><p>我们取得的进展和最后的成功很大程度上归功于 Gor Nishanov。要不是有他的坚韧不拔和扎实实现（他完成了微软和 Clang 两种编译器里的实现），我们在 C++20 也不会有协程。锲而不舍是在委员会成功的关键要素。</p><h3 id="9-3-3-编译期计算支持"><a href="#9-3-3-编译期计算支持" class="headerlink" title="9.3.3 编译期计算支持"></a>9.3.3 编译期计算支持</h3><p>多年以来，在 C++ 中编译期求值的重要性一直在稳步提高。STL 严重依赖于编译期分发 [Stroustrup 2007]，而模板元编程主要旨在将计算从运行期转移到编译期（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。甚至在早期的 C++ 中，对重载的依赖以及虚函数表的使用都可以看作是通过将计算从运行期转移到编译期来获得性能。因此，编译期计算一直是 C++ 的关键部分。</p><p>C++ 从 C 继承了只限于整型且不能调用函数的常量表达式。曾有一段时间，宏对于任何稍微复杂点的事情都必不可少。但这些都不好规模化。一经引入模板并发现了模板元编程，模板元编程就被广泛用于在编译期计算值和类型上（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。在 2010 年，Gabriel Dos Reis 和 Bjarne Stroustrup 发表了一篇论文，指出编译期的值计算可以（也应该）像其他计算一样表达，一样地依赖于表达式和函数的常规规则，包括使用用户定义的类型 [Dos Reis and Stroustrup 2010]。这成为了 C++11 里的 <code>constexpr</code> 函数（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>），它是现代编译期编程的基础。C++14 推广了 <code>constexpr</code> 函数（<a href="05.md#55-constexpr-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">§5.5</a>），而 C++20 增加了好几个相关的特性：</p><ul><li><code>consteval</code>——保证在编译期进行求值的 <code>constexpr</code> 函数 [Smith et al. 2018a]</li><li><code>constinit</code>——保证在编译期初始化的声明修饰符 [Fiselier 2019]</li><li>允许在 <code>constexpr</code> 函数中使用成对的 <code>new</code> 和 <code>delete</code> [Dimov et al. 2019]</li><li><code>constexpr string</code> 和 <code>constexpr vector</code> [Dionne 2018]</li><li>使用 <code>virtual</code> 函数 [Dimov and Vassilev 2018]</li><li>使用 <code>unions</code>、异常、<code>dynamic_cast</code> 和 <code>typeid</code> [Dionne and Vandevoorde 2018]</li><li>使用用户定义类型作为值模板参数——最终允许在任何可以用内置类型的地方使用用户定义类型 [Maurer 2012]</li><li><code>is_constant_evaluated()</code> 谓词——使库实现者能够在优化代码时大大减少平台相关的内部函数的使用 [Smith et al. 2018b]</li></ul><p>随着这一努力，标准库正在变得对编译期求值更加友好。</p><p>这一努力的最终目的是为了让 C++23 或更高版本支持静态反射（<a href="#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>）。在我最初设计模板时，曾期望使用用户自定义类型作为模板参数类型，使用字符串作为模板参数，但以我当时的能力无法恰当地设计和实现出这一功能。</p><p>有些人希望<strong>每一个</strong> C++ 构件在编译期都能可用。特别是，他们希望能够在 <code>constexpr</code> 函数中使用完整的标准库。那可能就好过头了。比如，你真的需要在编译期使用线程吗？是的，这可行。没有使所有函数在编译期都可用，这就给我们留下了一个问题：哪些应该可用，哪些不应该可用。到目前为止，答案有点临场发挥而并不连贯。这需要进一步完善。</p><p>要让一个语言的构件或库组件成为 <code>constexpr</code>，我们必须非常精确地进行描述，并消除未定义行为的可能性。因此，推动编译期求值已经成为更精确的规范说明、平台依赖性分析和未定义行为根源分析的主要驱动力。</p><p>显然，这种对编译期计算的推动为编译器带来了更多的工作。接口里需要增加更多的信息，来允许编译器完成所有的工作，这个问题正在通过模块来解决（<a href="#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）。编译器还通过缓存结果进行补偿，依赖并行构建的系统也很常见。然而，C++ 程序员必须学会限制编译期计算和元编程的使用，只有在值得为了代码紧凑性和运行期性能而引入它们的地方才使用。</p><h3 id="9-3-4"><a href="#9-3-4" class="headerlink" title="9.3.4 &lt;&#x3D;&gt;"></a>9.3.4 &lt;&#x3D;&gt;</h3><p>参见（<a href="08.md#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>）。紧接在“飞船运算符”（<code>&lt;=&gt;</code>）投票进入 C++20 之后，很明显，在语言规则及其与标准库的集成方面都需要进一步的认真工作。出于对解决跟比较有关的棘手问题的过度热情和渴望，委员会成了意外后果定律的受害者。一些委员（包括我在内）担心引入 <code>&lt;=&gt;</code> 过于仓促。然而，在我们的担忧坐实的时候，早已经有很多工作在假设 <code>&lt;=&gt;</code> 可用的前提下完成了。此外，三路比较可能带来的性能优势让许多委员会成员和其他更广泛的 C++ 社区成员感到兴奋。因此，当发现 <code>&lt;=&gt;</code> 在重要用例中导致了显著的低效时，那就是一个相当令人不快的意外了。类型有了 <code>&lt;=&gt;</code> 之后，<code>==</code> 是从 <code>&lt;=&gt;</code> 生成的。对于字符串，<code>==</code> 通常通过首先比较大小来优化：如果字符数不同，则字符串不相等。从 <code>&lt;=&gt;</code> 生成的 <code>==</code> 则必须读取足够的字符串以确定它们的词典顺序，那开销就会大得多了。经过长时间的讨论，我们决定不从 <code>&lt;=&gt;</code> 生成 <code>==</code>。这一点和其他一些修正 [Crowl 2018; Revzin 2018, 2019; Smith 2018c] 解决了手头的问题，但损害了 <code>&lt;=&gt;</code> 的根本承诺：所有的比较运算符都可以从一行简单的代码中生成。此外，由于 <code>&lt;=&gt;</code> 的引入，<code>==</code> 和 <code>&lt;</code> 现在有了许多不同于其他运算符的规则（例如，<code>==</code> 被假定为对称的）。无论好坏，大多数与运算符重载相关的规则都将 <code>&lt;=&gt;</code> 作为特例来对待。</p><h3 id="9-3-5-范围"><a href="#9-3-5-范围" class="headerlink" title="9.3.5 范围"></a>9.3.5 范围</h3><p><strong>范围库</strong>始于 Eric Niebler 对 STL 序列观念的推广和现代化的工作 [Niebler et al. 2014]。它提供了更易于使用、更通用及性能更好的标准库算法。例如，C++20 标准库为整个容器的操作提供了期待已久的更简单的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(vector&lt;string&gt;&amp; vs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(vs);   <span class="hljs-comment">// 而不是 sort(vs.begin(),vs.end())</span><br>&#125;<br></code></pre></td></tr></table></figure><p>C++98 [Stroustrup 1993] 所采用的原始 STL 将序列定义为一对迭代器。这遗漏了指定序列的两种重要方式。范围库提供了三种主要的替代方法（现在称为 <code>ranges</code>）：</p><ul><li><code>(首项,尾项过一)</code> 用于当我们知道序列的开始和结束位置时（例如“对 vector 的开始到结束位置进行排序”）。</li><li><code>(首项,元素个数)</code> 用于当我们实际上不需要计算序列的结尾时（例如“查看列表的前 10 个元素”）。</li><li><code>(首项,结束判据)</code> 用于当我们使用谓词（例如，一个哨位）来定义序列的结尾时（例如“读取到输入结束”）。</li></ul><p><code>range</code> 本身是一种 <code>concept</code>（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。所有 C++20 标准库算法现在都使用概念进行了精确规定。这本身就是一个重大的改进，并使得我们在算法里可以推广到使用范围，而不仅仅是迭代器。这种推广允许我们把算法如管道般连接起来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><br><span class="hljs-keyword">auto</span> even = [](<span class="hljs-type">int</span> i)&#123; <span class="hljs-keyword">return</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>; &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : vec | view::<span class="hljs-built_in">filter</span>(even)<br>                 | view::<span class="hljs-built_in">transform</span>( [](<span class="hljs-type">int</span> i) &#123; <span class="hljs-keyword">return</span> i*i; &#125; )<br>                 | view::<span class="hljs-built_in">take</span>(<span class="hljs-number">5</span>))<br>    cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;    <span class="hljs-comment">// 打印前 5 个偶整数的平方</span><br></code></pre></td></tr></table></figure><p>像在 Unix 中一样，管道运算符 <code>|</code> 将其左操作数的输出作为输入传递到其右操作数（例如 <code>A|B</code> 表示 <code>B(A)</code>）。一旦人们开始使用协程（<a href="#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）来编写管道过滤器，这就会变得有趣得多。</p><p>在 2017 年，范围库成为了 TS [Niebler and Carter 2017]；在 2019 年 2 月，它被投进了 C++20 [Niebler et al. 2018]。</p><h3 id="9-3-6-日期和时区"><a href="#9-3-6-日期和时区" class="headerlink" title="9.3.6 日期和时区"></a>9.3.6 日期和时区</h3><p>日期库是 Howard Hinnant（现在任职于 Ripple，之前任职于苹果）的作品，为 C++ 提供标准的日历和时区支持 [Hinnant and Kamiński 2018]。它基于 <code>chrono</code> 标准库的时间支持。Howard 也是 <code>chrono</code> 标准库（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）背后的主要人物。日期库是多年工作和实际使用的结果。在 2018 年，它通过投票进入了 C++20，并和旧的时间工具一起放在 <code>&lt;chrono&gt;</code> 中。</p><p>考虑如何表达时间点（<code>time_point</code>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> tp = <span class="hljs-number">2016</span>y/May/<span class="hljs-number">29</span>d + <span class="hljs-number">7</span>h + <span class="hljs-number">30</span>min + <span class="hljs-number">6</span>s + <span class="hljs-number">153</span>ms;<br>cout &lt;&lt; tp &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;    <span class="hljs-comment">// 2016-05-29 07:30:06.153</span><br></code></pre></td></tr></table></figure><p>这一写法很传统（使用用户定义的字面量<a href="04.md#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>）），日期表示为 <code>年,月,日</code> 结构。但是，当需要时，日期会在编译期映射到标准时间线（<code>system_time</code>）上的某个点（使用 <code>constexpr</code> 函数（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）），因此它极其快速，也可以在常量表达式中使用。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">static_assert</span>(<span class="hljs-number">2016</span>y/May/<span class="hljs-number">29</span>==Thursday);  <span class="hljs-comment">// 编译期检查</span><br></code></pre></td></tr></table></figure><p>默认情况下，时区是 UTC（又称 Unix 时间），但转换为不同的时区很容易：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">zoned_time zt = &#123;<span class="hljs-string">&quot;Asia/Tokyo&quot;</span>, tp&#125;;<br>cout &lt;&lt; zt &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;          <span class="hljs-comment">// 2016-05-29 16:30:06.153 JST</span><br></code></pre></td></tr></table></figure><p>日期库还可以处理星期几（例如，<code>Monday</code> 和 <code>Friday</code>）、多个日历（例如，格里历和儒略历），以及更深奥（但必要）的概念，比如闰秒。</p><p>除了有用和快速之外，日期库还有趣在它提供了非常细粒度的静态类型检查。常见错误会在编译期捕获。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> d1 = <span class="hljs-number">2019</span>y/<span class="hljs-number">5</span>/<span class="hljs-number">4</span>;    <span class="hljs-comment">// 错误：是 5 月 4 日还是 4 月 5 日？</span><br><span class="hljs-keyword">auto</span> d2 = <span class="hljs-number">2019</span>y/May/<span class="hljs-number">4</span>;  <span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">auto</span> d2 = May/<span class="hljs-number">4</span>/<span class="hljs-number">2019</span>;   <span class="hljs-comment">// 正确（日跟在月后面）</span><br><span class="hljs-keyword">auto</span> d3 = d2+<span class="hljs-number">10</span>;        <span class="hljs-comment">// 错误：是加 10 天、10 个月还是 10 年？</span><br></code></pre></td></tr></table></figure><p>日期库是标准库组件中的一个少见的例子，它直接服务于某应用领域，而非“仅仅”提供支持性的“计算机科学”抽象。我希望在将来的标准中能看到更多这样的例子。</p><h3 id="9-3-7-格式化"><a href="#9-3-7-格式化" class="headerlink" title="9.3.7 格式化"></a>9.3.7 格式化</h3><p>iostream 库提供了类型安全的 I&#x2F;O 的扩展，但是它的格式化工具比较弱。另外，还有的人不喜欢使用 <code>&lt;&lt;</code> 分隔输出值的方式。格式化库提供了一种类 <code>printf</code> 的方式去组装字符串和格式化输出值，同时这种方法类型安全、快捷，并能和 iostream 协同工作。这项工作主要是由 Victor Zverovich [Zverovich 2019] 完成的。</p><p>类型中带有 <code>&lt;&lt;</code> 运算符的可以在一个格式化的字符串中输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;foo&quot;</span>;<br>cout &lt;&lt; format(<span class="hljs-string">&quot;The string &#x27;&#123;&#125;&#x27; has &#123;&#125; characters&quot;</span>,s,s.<span class="hljs-built_in">size</span>());<br></code></pre></td></tr></table></figure><p>输出结果是 <code>The string &#39;foo&#39; has 3 characters</code>。</p><p>这是“类型安全的 <code>printf</code>”变参模板思想的一个变体（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。大括号 <code>&#123;&#125;</code> 简单地表示了插入参数值的默认表示形式。</p><p>参数值可以按照任意顺序被使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// s 在 s.size() 前：</span><br>cout &lt;&lt; format(<span class="hljs-string">&quot;The string &#x27;&#123;0&#125;&#x27; has &#123;1&#125; characters&quot;</span>,s,s.<span class="hljs-built_in">size</span>());<br><span class="hljs-comment">// s.size() 在 s 前：</span><br>cout &lt;&lt; format(<span class="hljs-string">&quot;The string &#x27;&#123;1&#125;&#x27; has &#123;0&#125; characters&quot;</span>,s.<span class="hljs-built_in">size</span>(),s);<br></code></pre></td></tr></table></figure><p>像 <code>printf()</code> 一样，<code>format()</code> 为展现格式化细节提供了一门小而完整的编程语言，比如字段宽度、浮点数精度、整数基和字段内对齐。不同于 <code>printf()</code>，<code>format()</code> 是可扩展的，可以处理用户定义类型。下面是 <code>&lt;chrono&gt;</code> 库中（<a href="#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>）一个打印日期的例子 [Zverovich et al. 2019]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s1 = format(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, birthday);<br>string s2 = format(<span class="hljs-string">&quot;&#123;0:&gt;15%Y-%m-%d&#125;&quot;</span>, birthday);<br></code></pre></td></tr></table></figure><p>“年-月-日”是默认格式。<code>&gt;15</code> 意味着使用 15 个字符和右对齐文本。日期库中还包含了另一门小的格式化语言可以同 <code>format()</code> 一起用。它甚至可以用来处理时区和区域：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::format(std::locale&#123;<span class="hljs-string">&quot;fi_FI&quot;</span>&#125;, <span class="hljs-string">&quot;&#123;&#125;&quot;</span>, zt);<br></code></pre></td></tr></table></figure><p>这段代码将会给出芬兰的当地时间。默认情况下，格式化不依赖于区域，但是你可以选择是否根据区域来格式化。相比于传统的 iostream，默认区域无关的格式化大大提升了性能，尤其是当你不需要区域信息的时候。</p><p>输入（<code>istream</code>）没有等价的 <code>format</code> 支持。</p><h3 id="9-3-8-跨度"><a href="#9-3-8-跨度" class="headerlink" title="9.3.8 跨度"></a>9.3.8 跨度</h3><p>越界访问，有时也称为缓冲区溢出，从 C 的时代以来就一直是一个严重的问题。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>* p, <span class="hljs-type">int</span> n)</span>  <span class="hljs-comment">// n 是什么？</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; ++i)<br>        p[i] = <span class="hljs-number">7</span>;  <span class="hljs-comment">// 可以吗？</span><br>&#125;<br></code></pre></td></tr></table></figure><p>试问一个工具，比如编译器要如何知道 <code>n</code> 代表着所指向的数组中元素的个数？一个程序开发人员如何要能够在一个大型程序中对此始终保持正确？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">f</span>(a,x);    <span class="hljs-comment">// 可以</span><br><span class="hljs-built_in">f</span>(a,x/<span class="hljs-number">2</span>);  <span class="hljs-comment">// 可以：a 的前半部分</span><br><span class="hljs-built_in">f</span>(a,x+<span class="hljs-number">1</span>);  <span class="hljs-comment">// 灾难！</span><br></code></pre></td></tr></table></figure><p>几十年来，像“灾难”这样的评论一向是准确的，范围错误也一直是大多数重大安全问题的根因。编译器不能够捕获范围错误，而运行期检查所有的下标则普遍被认为对于生产代码来说代价过于高昂。</p><p>显而易见的解决方案就是提供一种抽象机制，带有一个指针再加上一个大小。举例来说，1990 年，Dennis Ritchie 向 C 标准委员会提议：“‘胖指针’，它的表示中包括了内存空间以存放运行期可调整的边界。”[Ritchie 1990]。由于各种原因，C 标准委员会没有通过这个提案。在当时，我听到一条极可笑的评论：“Dennis 不是 C 的专家；他从不来参加会议。”我没记住这到底是谁说的，也许这是件好事。</p><p>2015 年，Neil MacIntosh（那个时候他还在微软）在 C++ 核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）里恢复了这一想法，那里我们需要一种机制来鼓励和选择性地强制使用高效编程风格。<code>span&lt;T&gt;</code> 类模板就这样被放到 C++ 核心指南的支持库中，并立即被移植到微软、Clang 和 GCC 的 C++ 编译器里。2018 年，它投票进入了 C++20。</p><p>使用 <code>span</code> 的一个例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(span&lt;<span class="hljs-type">int</span>&gt; a)</span>  <span class="hljs-comment">// span 包含一根指针和一条大小信息</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>&amp; x : a)<br>        x = <span class="hljs-number">7</span>;  <span class="hljs-comment">// 可以</span><br>&#125;<br></code></pre></td></tr></table></figure><p>范围 <code>for</code> 从跨度中提取范围，并准确地遍历正确数量的元素（无需代价高昂的范围检查）。这个例子说明了一个适当的抽象可以同时简化写法并提升性能。对于算法来说，相较于挨个检查每一个访问的元素，明确地使用一个范围（比如 <code>span</code>）要容易得多，开销也更低。</p><p>如果有必要的话，你可以显式地指定一个大小（比如操作一个子范围）。但这样的话，你需要承担风险，并且这种写法比较扎眼，也易于让人警觉：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">f</span>(a);        <span class="hljs-comment">// 模板参数推导：f(span&lt;int&gt;&#123;a, 100&#125;)</span><br><span class="hljs-built_in">f</span>(&#123;a,x/<span class="hljs-number">2</span>&#125;);  <span class="hljs-comment">// 可以：a 的前半部分</span><br><span class="hljs-built_in">f</span>(&#123;a,x+<span class="hljs-number">1</span>&#125;);  <span class="hljs-comment">// 灾难</span><br></code></pre></td></tr></table></figure><p>自然，简单的元素访问也办得到，比如 <code>a[7]=9</code>，同时运行期也能进行检查。<code>span</code> 的范围检查是 C++ 核心指南支持库（GSL）的默认行为。</p><p>事实证明，将 <code>span</code> 纳入 C++20 的最具争议的部分在于下标和大小的类型。C++ 核心指南中 <code>span::size()</code> 被定义返回一个有符号整数，而不是标准库容器所使用的无符号整数。下标的情况也类似。像在数组中，下标一向是有符号的整数，而在标准库容器中下标却是无符号整数。这导致了一个古老争议的重演：</p><ul><li>一组人认为显然下标作为非负数应该使用无符号整数。</li><li>一组人认为与标准库容器保持一致性更重要，这点使得使用无符号整数是不是一个过去的失误变得无关紧要。</li><li>一组人认为使用无符号整数去表示一个非负数是一种误导（给人一种虚假的安全感），并且是错误的主要来源之一。</li></ul><p>不顾 <code>span</code> 最初的设计者（包括我在内）和实现者的强烈反对，第二组赢得了投票，并受到第一组热情地支持。就这样，<code>std::span</code> 拥有无符号的范围大小和下标。我个人认为那是一个令人悲伤的失败，即未能利用一个难得的机会来弥补一个令人讨厌的老错误 [Stroustrup 2018e]。C++ 委员会选择了与问题兼容而不是消除一个重大的错误来源，这在某种程度上是可以预见的，也算不无道理吧。</p><p>但是用无符号整数作为下标会出什么问题呢？这似乎是一个相当情绪化的话题。我曾收到很多封与之相关的仇恨邮件。存在两个基本问题：</p><ul><li>无符号数并不以自然数为模型：无符号数使用模算数，包括减法。比如，如果 <code>ch</code> 是个 <code>unsigned char</code>，<code>ch+100</code> 将永远不会溢出。</li><li>整数和无符号数彼此相互转换，稍不留意负数值就会变成巨大的无符号数值，反之亦然。比如，<code>-2&lt;2u</code> 为假；<code>2u</code> 是 <code>unsigned</code>，因此 <code>-2</code> 在比较前会被转换为一个巨大的正整数。</li></ul><p>这是一个在真实环境下偶尔可见的无限循环的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = n<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123; <span class="hljs-comment">/* ... */</span> &#125;  <span class="hljs-comment">// “反向循环”</span><br></code></pre></td></tr></table></figure><p>不幸的是，标准库中的类型 <code>size_t</code> 是无符号类型，然后很明显结果永远 <code>&gt;=0</code>。</p><p>总的来说，作为 C++ 继承自 C 的特性，有符号和无符号类型之间的转换规则几十年来都是那种难以发现的错误的一个主要来源。但说服委员会去解决那些老问题总是很难的。</p><h2 id="9-4-并发"><a href="#9-4-并发" class="headerlink" title="9.4 并发"></a>9.4 并发</h2><p>尽管做出了英勇的努力，并正在形成广泛的共识，但是人们所期望的通用并发模型（“执行器”）在 C++20 中还没有准备好（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）。这并非是因为缺乏努力，我们的努力中包括了 2018 年 9 月在华盛顿州贝尔维尔举行的为期两天的特别会议，约有 25 人出席，其中有来自英伟达、Facebook 和美国国家实验室的代表。不过，有几个不那么剧烈的有用改进还是及时完成了，其中包括：</p><ul><li><code>jthread</code> 和停止令牌 [Josuttis et al. 2019a]</li><li><code>atomic&lt;shared_ptr&lt;T&gt;&gt;</code> [Sutter 2017b]</li><li>经典的信号量 [Lelbach et al. 2019]</li><li>屏障和锁存器 [Lelbach et al. 2019]</li><li>小的内存模型的修复和改进 [Meredith and Sutter 2017]</li></ul><p><code>jthread</code>（“joining thread”的缩写）是一个遵守 RAII 的线程；也就是说，如果 <code>jthread</code> 超出作用域了，它的析构函数将汇合线程而不是终止程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">some_fct</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    thread t1;<br>    jthread t2;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在作用域的最后，<code>t1</code> 的析构函数会终止程序，除非 <code>t1</code> 的任务已经完成，已经 <code>join</code> 或 <code>detach</code>，而 <code>t2</code> 的析构函数将会等待其任务完成。</p><p>一开始的时候（C++11 之前），很多人（包括我在内）都希望 <code>thread</code> 可以拥有如今 <code>jthread</code> 的行为，但是根植于传统操作系统线程的人坚持认为终止一个程序要远比造成死锁好得多。2012 年和 2013 年，Herb Sutter 曾经提出过汇合线程（joining thread）[Sutter 2012, 2013a]。这引发了一系列讨论，但最终却没有作出任何决定。2016 年，Ville Voutilainen 总结了这些问题，并为将汇合线程纳入 C++17 发起了投票 [Voutilainen 2016a]。投票支持者众多以至于我（只是半开玩笑地）建议我们甚至可以把汇合线程作为一个错误修复提交给 C++14。但是不知何故，进展又再次停滞。到了 2017 年，Nico Josuttis 又一次提出了这个问题。最终，在八次修订和加入了停止令牌之后，这个提案才成功进入了 C++20 [Josuttis et al. 2019a]。</p><p>“停止令牌”解决了一个老问题，即如何在我们对线程的结果不再感兴趣后停止它。基本思想是使用协作式的线程取消方式（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）。假如我想要一个  <code>jthread</code> 停止，我就设置它的停止令牌。线程有义务不时地去检查停止令牌是否被设置了，如果被设置了就进行清理和退出。这个技巧由来已久，几乎对于每一个有主循环的线程都能完好高效地工作，在这个主循环里就可以对停止令牌进行检查。</p><p>像往常一样，命名成了问题：<code>safe_thread</code>、<code>ithread</code>（<code>i</code> 代表可中断）、<code>raii_thread</code>、<code>joining_thread</code>，最终成了 <code>jthread</code>。C++ 核心指南支持库 (GSL) 中称其为 <code>gsl::thread</code>。说真的，最合适的名字就是 <code>thread</code>，但是很不幸，那个名字已经被一类不太有用的线程占用了。</p><h2 id="9-5-次要特性"><a href="#9-5-次要特性" class="headerlink" title="9.5 次要特性"></a>9.5 次要特性</h2><p>C++20 提供了许多次要的新特性，包括：</p><ul><li>C99 风格的指派初始化器 [Shen et al. 2016]</li><li>对 lambda 捕获的改进 [Köppe 2017b]</li><li>泛型 lambda 表达式的模板参数列表 [Dionne 2017]</li><li>范围 <code>for</code> 中初始化一个额外的变量（<a href="08.md#87-%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%98%BE%E5%BC%8F%E6%B5%8B%E8%AF%95">§8.7</a>）</li><li>不求值语境中的 lambda 表达式 [Dionne 2016]</li><li>lambda 捕获中的包展开 [Revzin 2017]</li><li>在一些情况下移除对 <code>typename</code> 的需要 [Vandevoorde 2017]</li><li>更多属性：<code>[[likely]]</code> 和 <code>[[unlikely]]</code> [Trychta 2016]</li><li>在不使用宏的情况下，<code>source_location</code> 给出一段代码中的源码位置 [Douglas and Jabot 2019]</li><li>功能测试宏 [Voutilainen and Wakely 2018]</li><li>条件 <code>explicit</code> [Revzin and Lavavej 2018]</li><li>有符号整数保证是 2 的补码 [Bastien 2018]</li><li>数学上的常数，比如 <code>pi</code> 和 <code>sqrt2</code> [Minkovsky and McFarlane 2019]</li><li>位的操作，比如轮转和统计 1 的个数 [Maurer 2019]</li></ul><p>其中有些属于改进，但是我担心的是晦涩难懂的新特性的数量之大会造成危害 [Stroustrup 2018d]。对于非专家来说，它们使得语言变得更加难以学习，代码更加难以理解。我反对一些利弊参半的特性（比如，使用指派初始化器的地方原本可以使用构造函数，那会产生更易于维护的代码）。很多特性具有特殊用途，有些是“专家专用”。不过，有的人总是领会不到，一个对某些人有某种好处的特性，对于 C++ 整体可能是个净负债。当然，那些增加写法和语义上的通用性和一致性的小特性，则总是受欢迎的。</p><p>从标准化的角度来看，即使最小的特性也需要花时间去处理、记录和实现。这些时间是省不掉的。</p><h2 id="9-6-进行中的工作"><a href="#9-6-进行中的工作" class="headerlink" title="9.6 进行中的工作"></a>9.6 进行中的工作</h2><p>当然，很多把目标放在 C++20 之后版本的工作还在进行中，而另一些原本目标是在 C++20 发布的工作则没能及时完成，尤其是：</p><ul><li><a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>：网络和执行器——再度延迟。</li><li><a href="#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>：契约——断言、前置条件和后置条件；原本目标是 C++20，但延迟了。</li><li><a href="#962-%E9%9D%99%E6%80%81%E5%8F%8D%E5%B0%84">§9.6.2</a>：反射——基于当前编译的代码将代码注入程序；目标是 C++23。</li></ul><p>另外，工作组和研究组也仍有工作正在进行中（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）[Stroustrup 2018d]。</p><h3 id="9-6-1-契约"><a href="#9-6-1-契约" class="headerlink" title="9.6.1 契约"></a>9.6.1 契约</h3><p>契约的特殊之处在于，不但很多人希望它可以进入 C++20，而且契约是被投票写入 C++20 的工作文件中的，只是在最后一刻被从中移除。一个由 John Spicer 主持的新的研究组 SG21 已经成立，试图为 C++23 或者 C++26 提供某种形式的契约。契约于 C++20 的遭遇是令人惋惜的，但可能也能给人以启发。</p><p>各种形式的契约在 C++ 和其他语言中都有着悠久的历史。我记得在 1970 年代初，当我第一次遇到 Peter Naur 的不变量 [Naur 1966] 的时候，我一度被它深深吸引。在 1990 年代早期，一个被称为 A++ 的断言系统被考虑用于 C++，但却被认为涉及面太广而不现实。在 1980 年代晚期，Bertrand Meyer 曾推广过 Eiffel 里“契约”的概念 [Meyer 1994]。作为 C++0x 努力的一部分，一些提案 [Crowl and Ottosen 2006] 在 C++ 委员会受到了高度重视，但最终却失败了，主要原因在于被认为过于复杂，写法也不优雅。</p><p>多年来，Bloomberg（那家纽约市的金融信息公司）一直使用一个名为“契约”的实时断言系统去捕获代码中的问题。2013 年，来自 Bloomberg 的 John Lakos 提议标准化该系统 [Lakos and Zakharov 2013]。这个提案受到了好评，但它遇到两个问题：</p><ul><li>它基于宏</li><li>它严格来说是代码实现中的断言，而不是可以增强接口的东西</li></ul><p>修订接踵而至，但是共识却并没有出现。为了打破僵局，一群来自微软、Facebook、谷歌和马德里的卡洛斯三世大学的人提出一个“简单契约”的系统，该系统不使用宏，并且对前置条件和后置条件提供支持（正如 C++0x 所尝试的）[Garcia et al. 2015]。和 Bloomberg 的提案一样，这一提案得到了多年大规模工业应用的背书，但它的重点是在静态分析中使用契约。J. Daniel Garcia（卡洛斯三世大学）努力工作以求做出满足各方面需求的设计，但该提案也遭到了反对。</p><p>经过了无数次的会议、多篇论文和（偶尔激烈的）讨论之后，妥协显然是难以达成了。两个小组请求我来进行协调。我之前宣称，讨论太专注在细枝末节上了，而我们需要一个最小提案，包含两个小组的核心诉求，而不是有争议的细节。他们要我来证明我的推断，拿一个这样的最小提案出来。在我和两个小组的代表轮番讨论、工作了相当一段时间之后，我们最终联合各方共同起草了联合提案 [Dos Reis et al. 2016a]。我认为这个设计技术上是相当充分的，并非一个政治上的妥协。它旨在满足三方面的需求（按重要性排序）：</p><ul><li>系统和可控的运行期测试</li><li>为静态分析器提供信息</li><li>为优化器提供信息</li></ul><p>在 J. Daniel Garcia 领导的进一步工作之后，该提案最终在 2018 年 6 月正式被 C++20 采纳 [Dos Reis et al. 2018]。</p><p>为避免引入新的关键字，我们使用属性语法。例如，<code>[[assert: x+y&gt;0]]</code>。一个契约对一个有效的程序不起任何作用，因此这种方式满足属性的原来概念（<a href="04.md#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）。</p><p>有三种契约：</p><ul><li><code>assert</code>——可执行代码中的断言</li><li><code>expects</code>——函数声明中的前置条件</li><li><code>ensure</code>——函数声明中的后置条件</li></ul><p>有三种不同等级的契约检查：</p><ul><li><code>audit</code>——“代价高昂的”谓词，仅在某些“调试模式”检查</li><li><code>default</code>——“代价低廉的”谓词，即使在生产代码中检查也是可行的</li><li><code>axiom</code>——主要给静态分析器看的谓词，在运行期从不检查</li></ul><p>在违反契约时，将执行（可能是用户安装的）契约违反处理程序。默认行为是程序立即终止。</p><p>我发现一个有意思的事：有一种构建模式允许程序在契约失败后继续执行。我的第一反应是“疯了吧！契约旨在防止违反契约的程序运行”。那算是最最常见的反应了。不论如何，John Lakos 坚信，基于 Bloomberg 代码的相关经验，当你把契约加入一个大型的古老代码仓库，契约总是会被违反：</p><ul><li>某些代码会违反契约，而实际上并没有做任何该契约所要防止的事情。</li><li>某些新契约本身就包含错误。</li><li>某些新契约具有意料之外的效果。</li></ul><p>有了继续的选项，你可以使用契约违反处理程序去记录日志并继续运行。这样的话，你既可以在单次运行中检测到多次违规，也可以让契约在假定正确的老代码中启用。人们相信这是逐步采用契约的关键。</p><p>我们并没有找到充足的理由去添加类不变量，或允许在覆盖函数中削弱前置条件，或允许在覆盖函数中增强后置条件。要点是简单。理想情况是先为 C++20 提供一个最小的初始设计，然后如有需要再于其上添砖加瓦。</p><p>这个设计由 J. Daniel Garcia 实现，并于 2018 年 6 月投票通过进入 C++ 委员会的 C++20 的工作文件中。像往常一样，虽然规范还有一些问题，但我们相信能够赶在最终标准发布前的两年内修复所有的问题。例如，人们发现工作文件文本中允许编译器基于所有契约（无论检查与否）进行优化。那并非有意而为之。从所有的契约在正确的程序中都有效的角度看，这是合理的，但是这么做，对于那些带有特别为捕获“不可能的错误”而写的契约的程序来说却是灾难性的。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[assert: p!=<span class="hljs-literal">nullptr</span>]]<br>p-&gt;m = <span class="hljs-number">7</span>;<br></code></pre></td></tr></table></figure><p>假如 <code>p==nullptr</code>，那么 <code>p-&gt;m</code> 将是未定义行为。编译器被允许假设未定义行为不会发生；由此编译器优化掉那些导致未定义行为的代码。这样做的结果可能让人大吃一惊。在这样的情况下，如果违反契约之后程序能够继续执行，编译器将被允许假定 <code>p-&gt;m</code> 是有效的，因此 <code>p!=nullptr</code>；然后编译器会消除契约关于 <code>p==nullptr</code> 的检查。这种被称为“时间旅行优化”的做法当然是与契约的初衷大相径庭，还好若干补救方案被及时提出 [Garcia 2018; Stroustrup 2019c; Voutilainen 2019a]。</p><p>2018 年 8 月，在 C++20 新提案的最后期限过后，由 John Lakos 领导的 Bloomberg 的一个小组，包括 Hyman Rosen 和 Joshua Berne 在内，提出了一系列重新设计的提案 [Berne et al. 2018; Berne and Lakos 2018a,b; Lakos 2018]。特性冻结的日期（审议新提案的最后一天）是由委员会全体投票表决确定的。这些提案则是基于在契约自身中规定契约行为的方案。例如，<code>[[assert check_maybe_continue: x&gt;0]]</code> 和 <code>[[assert assume: p!=nullptr]]</code>。</p><p>与其使用构建模式去控制所有契约（比如，激活所有默认契约或关闭所有基于契约的运行期检查）的行为，你不如直接修改单个契约的代码。在这方面，这些新方案与工作文件中决议通过的设计大相径庭。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[assert assume: p!=<span class="hljs-literal">nullptr</span>]]<br></code></pre></td></tr></table></figure><p>这将使得 2014 年被否决的基于宏的方案卷土重来，因为管理代码变化的显然方式是用宏，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[assert MODE1: p!=<span class="hljs-literal">nullptr</span>]]<br></code></pre></td></tr></table></figure><p>这里的 <code>MODE1</code> 可以被 <code>#define</code> 成所支持的若干选项之一，如 <code>assume</code> 和 <code>default</code>。或者，大致等效地，通过命令行上的参数（类似于命令行宏）来定义诸如 <code>assume</code> 之类的限定符的含义。</p><p>本质上，契约违约后继续执行的可能性与程序员对契约含义的控制的两者的结合，将把契约机制从断言系统转变为一种新的控制流机制。</p><p>一些提案甚至建议放弃对静态分析的支持。类似这样的提案有几十个变种，全都来得太晚，没一个能增进共识。</p><p>大量涌入的新奇提案（来自 Bloomberg 团队和其他团队，比如，[Berne 2019; Berne and Lakos 2019; Khlebnikov and Lakos 2019; Lakos 2019; Rosen et al. 2019]）和成百上千讨论这些提案的电子邮件阻碍了真正必需的讨论，即对工作文件中的设计现状进行问题修复。正如我曾不断警告的那样（比如 [Stroustrup 2019c]），这些企图重新设计契约的提案的结果是，在 Nico Josuttis 的提议下，契约被从 C++20 中移除 [Josuttis et al. 2019b]。我认为去年关于契约的讨论是一个典型的例子，谁都得不到任何东西，因为有人只想要按他们的方式来。新的研究组 SG21 能否为 C++23 或 C++26 交付某种能够被更广泛接受的东西，时间将会给出答案。</p><h3 id="9-6-2-静态反射"><a href="#9-6-2-静态反射" class="headerlink" title="9.6.2 静态反射"></a>9.6.2 静态反射</h3><p>2013 年，一个研究“反射”的研究组（SG7）成立了，并发出了征集意见的呼吁 [Snyder and Carruth 2013]。有一个广泛的共识，那就是 C++ 需要静态反射机制。更确切地说，我们需要一种方法来写出能检查它自己是属于哪个程序的一部分的代码，并基于此往该程序中注入代码。这样我们就可以用简洁的代码替换冗长而棘手的样板代码、宏和语言外的生成器。比如，我们可以为下面的场景自动生成函数，如：I&#x2F;O 流、日志记录、比较、用于存储和网络的封送处理（marshalling）、构建和使用对象映射、枚举的“字符串化”、测试支持，及其他的更多可能 [Chochlík et al. 2017; Stroustrup 2018g]。反射研究组的目标是为 C++20 或 C++23 做好准备；我们认为 C++17 并不是一个现实的目标。</p><p>大家普遍认同，依赖在运行期遍历一个始终存在的数据结构的反射&#x2F;内省方式不适合 C++，因为这种数据的大小、语言构件的完整表示的复杂性和运行期遍历的成本都会是问题。</p><p>很快出现了一些提案 [Chochlík 2014; Silva and Auresco 2014; Tomazos and Spertus 2014]，并且，在接下来的数年里，由 Chandler Carruth 主持的研究组召开了多次会议试图决定其范围和方向。选定的方式基于类型，这些类型以经典的面向对象的类层次结构来组织，需要泛型的地方由概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）支持 [Chochlík 2015; Chochlík and Naumann 2016; Chochlík et al. 2017]。该方式主要由 Matóš Chochlík、Axel Naumann 和 David Sankel 发展和实现。结果作为一项技术规范在 2019 得以批准 [Sankel 2018]。</p><p>在静态反射（预期的）长时间的酝酿期内，基于 constexpr 函数（<a href="#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）的编译期计算稳步发展，最终出现了基于函数而不是类层次结构的静态反射的提案。主要的拥护者是 Andrew Sutton、Daveed Vandevoorde、Herb Sutter 和 Faisal Vali [Sutton and Sutter 2018; Sutton et al. 2018]。设计焦点转移的主要论据，一部分是由于分析和生成代码这些事天生就是函数式的，而且基于 constexpr 函数的编译期计算已经发展到元编程和反射相结合的地步。这种方法的另一个优点（最先由 Daveed Vandevoorde 提出）是，用于函数的编译器内部数据结构，跟用于类型层次结构的比起来，会更小巧，生命周期也更短，因此它们使用内存会少得多，编译起来也快得多。</p><p>2019 年 2 月在科隆召开的标准会议上，David Sankel 和 Michael Park 展示了一个结合了这两个方法优点的设计 [Sankel and Vandevoorde 2019]。在最根本的层面上仅有一个单一的类型存在。这达到了最大的灵活性，并且编译器开销也最小。</p><p>最重要的是，静态类型的接口可以通过一种类型安全的转换来实现（从底层的单一类型 <code>meta::info</code> 到更具体的类型，如 <code>meta::type_</code> 和 <code>meta::class_</code>）。这里有一个基于 [Sankel and Vandevoorde 2019] 的例子。通过概念重载（<a href="06.md#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>），它实现了从 <code>meta::info</code> 到更具体类型的转换。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> meta &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">consteval</span> std::span&lt;type_&gt; <span class="hljs-title">get_member_types</span><span class="hljs-params">(class_ c)</span> <span class="hljs-type">const</span></span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">baz</span> &#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">E</span> &#123; <span class="hljs-comment">/*...*/</span> &#125;;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Buz</span>&#123; <span class="hljs-comment">/*...*/</span> &#125;;<br>    <span class="hljs-keyword">using</span> Biz = <span class="hljs-type">int</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(meta::enum_)</span></span>;    <span class="hljs-comment">// 打印一个枚举类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(meta::class_)</span></span>;   <span class="hljs-comment">// 打印一个类类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(meta::type_)</span></span>;    <span class="hljs-comment">// 打印任何类型</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">constexpr</span> meta::class_ metaBaz = <span class="hljs-built_in">reflexpr</span>(baz);<br>    <span class="hljs-function"><span class="hljs-keyword">template</span> <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-keyword">constexpr</span> meta::type_ member : get_member_types(metaBaz))</span></span><br><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(meta::most_derived(member))</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里关键的新语言特性是 <code>reflexpr</code> 运算符，它返回一个（元）对象，该对象描述了它的参数，还有 <code>template for</code> [Sutton et al. 2019]，根据一个异质结构中的元素的类型扩展每个元素，从而遍历该结构的各元素。</p><p>此外，我们也有机制可以将代码注入正在编译的程序中。</p><p>类似这样的东西很可能会在 C++23 或 C++26 中成为标准。</p><p>作为一个副作用，在反射方案上的雄心勃勃的工作也刺激了编译期求值功能的改进：</p><ul><li>标准中的类型特征集（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）</li><li>源代码位置的宏（如 <code>__FILE__</code> 和 <code>__LINE__</code>）被内在机制所替代 [Douglas and Jabot 2019]</li><li>编译期计算的功能（例如，用于确保编译期求值的 <code>consteval</code>）</li><li>展开语句（<code>template for</code>——到 C++23 就可以用来遍历元组中的元素 [Sutton et al. 2019]）。</li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：Heap Allocation eLision Optimization<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_06/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_06/</url>
    
    <content type="html"><![CDATA[<h1 id="6-概念"><a href="#6-概念" class="headerlink" title="6. 概念"></a>6. 概念</h1><p>对 C++ 来说，泛型编程和使用模板的元编程已经取得了巨大的成功。但是，对泛型组件的接口却迟迟未能以一种令人满意的方式进行合适的规范。例如，在 C++98 中，标准库算法大致是如下规定的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Forward_iterator, <span class="hljs-keyword">typename</span> Value&gt;</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">find</span><span class="hljs-params">(Forward_iterator first, Forward_iterator last,</span></span><br><span class="hljs-params"><span class="hljs-function">                              <span class="hljs-type">const</span> Value &amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (first != last &amp;&amp; *first != val)<br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 标准规定：</p><ul><li>第一个模板参数必须是前向迭代器。</li><li>第二个模板参数类型必须能够使用 <code>==</code> 与该迭代器的值类型进行比较。</li><li>前两个函数参数必须标示出一个序列。</li></ul><p>这些要求是隐含在代码中的：编译器所要做的就是在函数体中使用模板参数。结果是：极大的灵活性，对正确调用生成出色的代码，以及对不正确的调用有糟糕得一塌糊涂的错误信息。解决方案显而易见，将前两项条件作为模板接口的一部分来指定：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;forward_iterator Iter, <span class="hljs-keyword">typename</span> Value&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> equality_comparable&lt;Value, Iter::value_type&gt;</span><br><span class="hljs-function">forward_iterator <span class="hljs-title">find</span><span class="hljs-params">(Iter first, Iter last, <span class="hljs-type">const</span> Value&amp; val)</span></span>;<br></code></pre></td></tr></table></figure><p>这大致就是 C++20 所提供的了。注意 <code>equity_comparable</code> 概念，它捕获了两个模板参数之间必需有的关系。这样的多参数概念非常常见。</p><p>表达第三个要求（[first:last) 是一个序列）需要一个库扩展。C++20 在 Ranges 标准库组件（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）中提供了该特性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;range R, <span class="hljs-keyword">typename</span> Value&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> equality_comparable&lt;Value, Range::value_type&gt;</span><br><span class="hljs-function">forward_iterator <span class="hljs-title">find</span><span class="hljs-params">(R r, <span class="hljs-type">const</span> Value&amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> first = <span class="hljs-built_in">begin</span>(r);<br>    <span class="hljs-keyword">auto</span> last = <span class="hljs-built_in">end</span>(r);<br>    <span class="hljs-keyword">while</span> (first!=last &amp;&amp; *first!=val)<br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了规范模板对其参数的要求，对其提供良好支持，有过数次尝试。本节会进行描述：</p><ul><li><a href="#61-%E6%A6%82%E5%BF%B5%E7%9A%84%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">§6.1</a>：概念的早期历史</li><li><a href="#62-c0x-%E6%A6%82%E5%BF%B5">§6.2</a>：C++0x 中的概念</li><li><a href="#63-concepts-ts">§6.3</a>：Concepts TS</li><li><a href="#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>：C++20 中的概念</li></ul><h2 id="6-1-概念的早期历史"><a href="#6-1-概念的早期历史" class="headerlink" title="6.1 概念的早期历史"></a>6.1 概念的早期历史</h2><p>1980 年，我猜想泛型编程可以通过 C 风格的宏来有效支持 [Stroustrup 1982]。然而我完全错了。一些有用的简单泛型抽象能通过这种方法表达，1980 年代的标准化之前的 C++ 通过 <code>&lt;generic.h&gt;</code> 中的一组宏为泛型编程提供支持，但宏在大型项目或广泛使用的情况下无法有效管理。尽管泛型编程在当时流行的“面向对象的思想”中并没有一席之地，我确实发现了一个问题，需要解决它才能达到我对“带类的 C”的目标。</p><p>大约在 1987 年，我尝试设计具有合适接口的模板 [Stroustrup 1994]，但失败了。我需要三个基本属性来支持泛型编程：</p><ul><li><strong>全面的通用性&#x2F;表现力</strong>——我明确不希望这些功能只能表达我想到的东西。</li><li><strong>与手工编码相比，零额外开销</strong>——例如，我想构建一个能够与 C 语言的数组在时间和空间性能方面相当的 vector。</li><li><strong>规范化的接口</strong>——我希望类型检查和重载的功能与已有的非泛型的代码相类似。</li></ul><p>那时候没人知道如何做到全部三个方面，因此 C++ 所做到的是：</p><ul><li>图灵完备性 [Veldhuizen 2003]</li><li>优于手动编码的性能</li><li>糟糕的接口（基本上是编译期鸭子类型），但仍然做到了静态类型安全</li></ul><p>前两个属性使模板大获成功。</p><p>由于缺乏规范化的接口，我们在这些年里看到了极其糟糕的错误信息，到了 C++17 还仍然是这样。缺乏规范化的接口这一问题，让我和很多其他人困扰很多年。它让我非常困扰的原因是，模板无法满足 C++ 的根本的设计标准 [Stroustrup 1994]。我们（显然）需要一种简单的、没有运行期开销的方法来指定模板对其模板参数的要求。</p><p>多年以来，一些人（包括我）相信模板参数的要求可以在 C++ 本身中充分指定。1994 年，我在 [Stroustrup 1994] 中记录了基本的想法，并在我的网站上发布了示例 [Stroustrup 2004–2020]。自 2006 年以来，基于 Jeremy Siek 的作品，Boost 提供了该想法的一个变体，Boost 概念检查库 [Siek and Lumsdaine 2000–2007]。不知何故，它并未像我所希望的那样广泛流行。我怀疑原因是它不够通用、不够优雅（Boost 感到有义务使用宏隐藏细节），并且在标准中不受支持。许多人将其视为一种奇技淫巧。</p><p>为 C++ 定义的概念可以追溯到 Alex Stepanov 在泛型编程上的工作，这是 1970 年代末开始的，一开始用的名称是“代数结构” [Kapur et al. 1981]。注意，那差不多比 Haskell 的类型类设计 [Wadler and Blott 1989] 要早十年，比我尝试解决 C++ 的类似问题要早 5 年。对于这种需求，Alex Stepanov 早在 1990 年代末期的讲座中就使用了“概念”这一名称，并记录在 [Dehnert and Stepanov 2000]。我之所以提到这些，是因为许多人猜测概念是从 Haskell 类型类派生而来但被错误命名了。Alex 使用“概念”这一名称是因为概念此处用来代表应用领域（如代数）中的基本概念。</p><p>目前把概念当作依靠使用模式来描述操作的类型谓词，这起源于二十一世纪初期 Bjarne Stroustrup 和 Gabriel Dos Reis 的工作，并记录在 [Dos Reis and Stroustrup 2005b, 2006; Stroustrup and Dos Reis 2003b, 2005a] 之中。这种方法在 1994 年的《设计和演化》[Stroustrup 1994] 一书也被提及，但是我不记得我第一次进行尝试的时间了。将概念建立于使用模式的主要原因是为了以一种简单而通用的方式处理隐式转换和重载。我们了解 Haskell 类型类，但它们对当前的 C++ 设计影响不大，因为我们认为它们太不灵活了。</p><p>精确指定并检查一个模板对于参数的要求曾经是 C++0x 的最出彩之处，会对泛型编程提供关键支持。可是，它最终甚至没能进入 C++17。</p><p>Bjarne Stroustrup 和 Gabriel Dos Reis 在 2003 年发表的论文 [Stroustrup 2003; Stroustrup and Dos Reis 2003a,b] 明确指出，概念是简化泛型编程的宏伟计划的一部分。例如，一个 <code>concept</code> 可以被定义为一组<strong>使用模式</strong>的约束，就是说，作为对某种类型有效的语言构件 [Stroustrup and Dos Reis 2003b]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> Value_type &#123;<br>    <span class="hljs-built_in">constraints</span>(Value_type a)<br>    &#123;<br>        Value_type b = a;      <span class="hljs-comment">// 拷贝初始化</span><br>        a = b;                 <span class="hljs-comment">// 拷贝赋值</span><br>        Value_type v[] = &#123;a&#125;;  <span class="hljs-comment">// 不是引用</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Value_type V&gt;</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(V&amp; a, V&amp; b)</span></span>;  <span class="hljs-comment">// swap() 的参数必须是值类型</span><br></code></pre></td></tr></table></figure><p>但是，当时的语法和语义还很不成熟。我们主要是试图建立设计标准 [Stroustrup and Dos Reis 2003a]。从现代（2018 年）的角度来看，[Stroustrup 2003; Stroustrup and Dos Reis 2003a,b] 有很多缺陷。但是，它们为概念提供了设计约束，并在以下方面提出了建议：</p><ul><li>概念——用于指定对模板参数要求的编译期谓词。</li><li>根据使用模式来指定原始约束——以处理重载和隐式类型转换。</li><li>多参数概念——例如 <code>Mergeable&lt;In1,In2,Out&gt;</code>。</li><li>类型和值概念——也就是说，概念既可以将值也可以将类型当作参数，例如 <code>Buffer&lt;unsigned char,128&gt;</code>。</li><li>模板的“类型的类型”简略写法—例如 <code>template&lt;Iterator Iter&gt; …</code>。</li><li>“模板定义的简化写法”——例如 <code>void f(Comparable&amp;);</code> 使泛型编程更接近于“普通编程”。</li><li><code>auto</code> 作为函数参数和返回值中约束最少的类型。</li><li>统一函数调用（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）——减少泛型编程与面向对象编程之间的风格差异问题（例如 <code>x.f(y)</code>、<code>f(x,y)</code> 和 <code>x+y</code>）。</li></ul><p>奇怪的是，我们没有建议通用的 <code>requires</code> 子句（<a href="#622-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.2.2</a>）。这些都是后面所有概念变体的一部分。</p><h2 id="6-2-C-0x-概念"><a href="#6-2-C-0x-概念" class="headerlink" title="6.2 C++0x 概念"></a>6.2 C++0x 概念</h2><p>2006 年，基本上每个人都期望 [Gregor et al. 2006; Stroustrup 2007] 中所描述的概念版本会成为 C++09 的一部分，毕竟它已经投票进入了 C++ 标准草案（工作文件）。但是，C++0x 变成了 C++11，并且在 2009 年，概念因复杂性和可用性问题陷入困境 [Stroustrup 2009a,b]，委员会以绝对多数票一致同意放弃概念设计 [Becker 2009]。失败的原因多种多样，而且可能使我们获得在 C++ 标准化努力之外的教训。</p><p>在 2004 年，有两项独立的工作试图将概念引入 C++。因为主要支持者分别来自印第安纳大学和得克萨斯农工大学，这两派通常就被称为“印第安纳”和“得克萨斯”：</p><ul><li><strong>印第安纳</strong>：一种与 Haskell 类型类相关的方法，主要依赖于操作表来定义概念。这派认为，程序员应当显式声明一个类型“模拟”了一个概念；也就是说，该类型提供了一组由概念指定的操作 [Gregor et al. 2006]。关键人物是 Andrew Lumsdaine（教授）和 Douglas Gregor（博士后和编译器作者）。</li><li><strong>得克萨斯</strong>：一种基于编译期类型谓词和谓词逻辑的方法。这派认为，可用性很重要，因而程序员<strong>不必</strong>显式指定哪些类型与哪些概念相匹配（这些匹配可以由编译器计算）。对于 C++，优雅而有效地处理隐式转换、重载以及混合类型的表达式被认为是必需的 [Dos Reis and Stroustrup 2006; Stroustrup and Dos Reis 2003b]。关键人物是 Bjarne Stroustrup（教授）和 Gabriel Dos Reis（博士后，后来成为教授）。</li></ul><p>根据这些描述，这些方法似乎是不可调和的，但是对于当时的参与人员而言，这并不明显。实际上，我认为这些方法在理论上是等效的 [Stroustrup and Dos Reis 2003b]。该论点的确可能是正确的，但对于 C++ 上下文中的详细语言设计和使用的实际影响并不等同。另外，按照委员会成员的解释，WG21 的共识流程强烈鼓励合作和联合提案，而不是在竞争性的提案上工作数年，最后在它们之间进行大决战（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）。我认为后一种方法是创造方言的秘诀，因为失败的一方不太可能放弃他们的实现和用户，并就此消失。请注意，上面提到的所有的人在一起与 Jeremy Siek（印第安纳的研究生和 AT&amp;T 实验室的暑期实习生）和 Jaakko Järvi（印第安那的博士后，得州农工大学教授）是 OOPSLA 论文的合著者，论文展示了折中设计的第一个版本。印第安纳和得克萨斯的团体从未完全脱节，我们为达成真正的共识而努力。另外，从事这项工作之前，我已经认识 Andrew Lumsdaine 很多年。我们确实希望折中方案能够正常工作。</p><p>在实现方面，印第安纳的设计的进度远远领先于得克萨斯的设计的进度，并且具有更多人员参与，所以我们主要基于此进行。印第安纳的设计也更加符合常规，基于函数签名，并且与 Haskell 类型类有明显相似之处。考虑到涉及的学术界人士的数量，重要的是印第安纳的设计被视为更符合常规并且学术上更为得体。看来我们“只是”需要</p><ul><li>使编译器足够快</li><li>生成有效的代码</li><li>处理重载和隐式转换。</li></ul><p>这个决定使我们付出了三年的辛勤工作和许多争论。</p><p>C++0x 概念设计在 [Gregor et al. 2006; Stroustrup 2007] 中得到阐述。前一篇论文包含一个标准的学术“相关工作”部分，将这个设计与 Java、C#、Scala、Cecil、ML、Haskell 和 G 中的工具进行比较。在这里，我使用 [Gregor et al. 2006] 中的例子进行总结。</p><h3 id="6-2-1-概念定义"><a href="#6-2-1-概念定义" class="headerlink" title="6.2.1 概念定义"></a>6.2.1 概念定义</h3><p>概念被定义为一组操作和相关类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> EqualityComparable&lt;<span class="hljs-keyword">typename</span> T&gt; &#123;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y);<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y) &#123; <span class="hljs-keyword">return</span> !(x==y); &#125;<br>&#125;<br><br><span class="hljs-keyword">concept</span> InputIterator&lt;<span class="hljs-keyword">typename</span> Iter&gt; &#123;<br>    <span class="hljs-comment">// Iter 必须有 value_type 成员：</span><br>    <span class="hljs-keyword">typename</span> value_type = Iter::value_type;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>某些人（印第安纳）认为概念和类之间的相似性是一种优势。</p><p>但是，概念中指定的函数并不完全类似于类中定义的函数。例如，在一个 <code>class</code> 中定义的运算符具有隐式参数（“<code>this</code>”），而 <code>concept</code> 中声明的运算符则没有。</p><p>将概念定义为一组操作的方法中存在一个严重的问题。考虑在 C++ 中传递参数的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X&amp;)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> X&amp;)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(X&amp;&amp;)</span></span>;<br></code></pre></td></tr></table></figure><p>暂时不考虑 <code>volatile</code>，因为它在泛型代码参数中很少见到，但是我们仍然有四种选择。在一个 <code>concept</code> 中，我们是否</p><ul><li>将 <code>f</code> 表示为一个函数，用户是否为调用选择了正确的参数？</li><li>是否重载了 <code>f</code> 的所有可能？</li><li>将 <code>f</code> 表示为一个函数，并要求用户定义一个 <code>concept_map</code>（<a href="#623-%E6%A6%82%E5%BF%B5%E6%98%A0%E5%B0%84">§6.2.3</a>）映射到 <code>f</code> 的所需的参数类型？</li><li>语言是否将用户的参数类型隐式映射到模板的参数类型？</li></ul><p>对于两个参数，我们将有 16 种选择。尽管很少有三个参数泛型函数，但是这种情况我们会有 4*4*4 种选择。变参模板会如何呢？我们会有 4<sup>N</sup> 种选择，如（<a href="04.md#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。</p><p>传递参数的不同方式的语义并不相同，因此我们自然而然地转向接受指定的参数类型，将匹配的负担推到了类型设计者和 <code>concept_maps</code> 的作者（<a href="#623-%E6%A6%82%E5%BF%B5%E6%98%A0%E5%B0%84">§6.2.3</a>）。</p><p>类似地，我们到底是在为 <code>x.f(y)</code>（面向对象样式）指定 <code>concept</code> 还是为 <code>f(x,y)</code>（函数样式），还是两者兼而有之。这个问题在我们尝试描述二元运算符时，例如 <code>+</code>，会立刻出现。</p><p>回想起来，我们对于在以特定类型的操作或特定的伪签名定义的概念框架内解决这些问题太过乐观了。“伪签名”某种程度上代表了对此处概述的问题的解决方案。</p><p>概念之间的关系通过显式<strong>细化</strong>定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> BidirectionalIterator&lt;<span class="hljs-keyword">typename</span> Iter&gt;    <span class="hljs-comment">// BidirectionalIterator 是</span><br>    : ForwardIterator&lt;Iter&gt; &#123;                   <span class="hljs-comment">// 一种 ForwardIterator</span><br>        <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>细化有点像，但又不那么像类派生。这个想法是为了让程序员明确地建立概念的层次结构。不幸的是，这给系统引入了严重的不灵活性。概念（按常规的英语含义）通常不是严格的层次结构。</p><h3 id="6-2-2-概念使用"><a href="#6-2-2-概念使用" class="headerlink" title="6.2.2 概念使用"></a>6.2.2 概念使用</h3><p>一个概念既可以用作 <code>where</code> 子句中的推断，也可以用在简略写法里：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>    where LessThanComparable&lt;T&gt;    <span class="hljs-comment">// 显式谓词</span><br><span class="hljs-function"><span class="hljs-type">const</span> T&amp; <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x&lt;y ? x : y;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;GreaterThanComparable T&gt;  <span class="hljs-comment">// 简略写法</span><br>    <span class="hljs-function"><span class="hljs-type">const</span> T&amp; <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x&gt;y ? x : y;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于简单的“类型的类型”的概念，简略写法（最早在 [Stroustrup 2003] 中提出）很快变得非常流行。但是，我们很快发现，现有代码中的标识符中 <code>where</code> 太过于流行，于是将其重命名为 <code>requires</code>。</p><h3 id="6-2-3-概念映射"><a href="#6-2-3-概念映射" class="headerlink" title="6.2.3 概念映射"></a>6.2.3 概念映射</h3><p>概念和类型之间的关系是由 <code>concept_map</code> 的特化来定义的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">concept_map EqualityComparable&lt;<span class="hljs-type">int</span>&gt; &#123;&#125;;  <span class="hljs-comment">// int 满足 EqualityComparable</span><br><br><span class="hljs-comment">// student_record 满足 EqualityComparable：</span><br>concept_map EqualityComparable&lt;student_record&gt; &#123;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> student_record&amp; a, <span class="hljs-type">const</span> student_record&amp; b)<br>    &#123;<br>        <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">id_equal</span>(b);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>对于 <code>int</code>，我们可以简单地说 <code>int</code> 类型具有 <code>EqualityComparable</code> 所要求的属性（也就是说，它具有 <code>==</code> 和 <code>!=</code>），然而，<code>student_record</code> 没有 <code>==</code>，但是我们可以在 <code>concept_map</code> 中添加一个。因此，<code>concept_map</code> 是一种非常强大的机制，可以在特定的环境中非侵入性地往类型中添加属性。</p><p>既然编译器已经知道 <code>int</code> 是可比较的，为什么我们还要再告诉编译器?</p><p>这一直是一个争论的焦点。“印第安纳小组”一般认为明确表达意图（永远）是好的，而“得克萨斯小组”倾向于认为除非一条概念映射能增加新的功能，写它就不只是没用，更可能有害。显式的声明是否能使用户避免因为语义上无意义的“意外”语法匹配而导致的严重错误？还是说这种错误会很少见，显式的建模语句多半只是增加了编写麻烦和犯错误的机会？折中的解决方案是允许在 <code>concept</code> 的定义处通过加上 <code>auto</code> 来声明使用某条 <code>concept_map</code> 是可选的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> <span class="hljs-keyword">concept</span> EqualityComparable&lt;<span class="hljs-keyword">typename</span> T&gt; &#123;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y);<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> T&amp; x, <span class="hljs-type">const</span> T&amp; y) &#123; <span class="hljs-keyword">return</span> !(x==y); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，当一个类型被要求是 <code>EqualityComparable</code> 时，即使用户没有提供该类型的特化，编译器也会自动使用指向 <code>EqualityComparable</code> 的 <code>concept_map</code>。</p><h3 id="6-2-4-定义检查"><a href="#6-2-4-定义检查" class="headerlink" title="6.2.4 定义检查"></a>6.2.4 定义检查</h3><p>编译器根据模板参数的概念检查模板定义中的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;InputIterator Iter, <span class="hljs-keyword">typename</span> Val&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> EqualityComparable&lt;Iter::value_type,Val&gt;</span><br><span class="hljs-function">Iter <span class="hljs-title">find</span><span class="hljs-params">(Iter first, Iter last, Val v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (first&lt;last &amp;&amp; !(*first==v))  <span class="hljs-comment">// 错误：EqualityComparable 中没有 &lt;</span><br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们用到了 <code>&lt;</code> 比较迭代器，但 <code>EqualityComparable</code> 只保证了 <code>==</code>，因此这个定义不能通过编译。捕获这种无保障操作的使用那时被视为一个重要的好处，但是事实证明这会带来严重的负面影响：（<a href="#625-%E6%95%99%E8%AE%AD">§6.2.5</a>）和（<a href="#631-%E5%AE%9A%E4%B9%89%E6%A3%80%E6%9F%A5">§6.3.1</a>）。</p><h3 id="6-2-5-教训"><a href="#6-2-5-教训" class="headerlink" title="6.2.5 教训"></a>6.2.5 教训</h3><p>初始提案得到了相对迅速的批准，之后的若干年，我们忙于为初始的设计堵漏，还要应付在通用性、可实现性、规范质量和可用性方面的意见。</p><p>作为主要实现者，Doug Gregor 为生成高质量的代码做出了英勇的表现，但最终，支持概念的编译器在速度上仍然比只实现了无约束模板的编译器慢了 10 倍以上。我怀疑实现问题的根源是在编译器中采用类的结构来表示概念。这样可以快速获得早期结果，但却让概念用上了本来为类精心打造的表示方式，但概念并不是类。将概念表示为一组函数（类似于虚成员函数），导致在处理隐式转换和混合类型操作时出问题。将来自不同上下文的代码灵活的加以组合，原本是支撑泛型编程和元编程的强大代码生成技术的“秘诀”，但这种组合却无法使用 C++0x 的概念来指定。要赶上（无约束的）模板性能，用于指定概念的函数就不能作为可被调用的函数出现在生成的代码中（更糟糕的是，间接的函数调用也不行）。</p><p>我不愉快地联想到了许多早期 C++ 编译器作者由于采用了 C 编译器的结构和代码库而遇到的问题，当时用来处理 C++ 作用域和重载的代码没法合适地放到 C 语言的编译器框架中。本着设计概念应该直接以代码表示的观点，Cfront（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）使用了特定的作用域类来避免这种问题，然而，大多数 C 语言背景的编译器作者认为他们可以使用熟悉的 C 技巧走捷径，最终还是不得不从头开始重写 C++ 前端代码。语言设计和实现技巧可以非常强烈地彼此影响。</p><p>很快，事情就变得很明显：为了完成从无约束的模板到使用概念的模板的转换，我们需要语言支持。在 C++0x 的设计中，这两类模板非常不同：</p><ul><li>受约束模板不能调用无约束模板，因为不知道无约束模板使用什么操作，因此无法对受约束模板进行定义检查。</li><li>无约束模板可以调用受约束模板，但是检查必须推迟到实例化的时候，因为在那之前我们不知道无约束模板在调用中使用什么类型。</li></ul><p>第一个问题的解决方案是允许程序员使用 <code>late_check</code> 块，告诉编译器“别检查这些来自受约束模板的调用” [Gregor et al. 2008]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Semigroup T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T x, T y)</span> </span>&#123;<br>    T r = x + y;    <span class="hljs-comment">// 用 Semigroup&lt;T&gt;::operator+</span><br>    late_check &#123;<br>        r = x + y;  <span class="hljs-comment">// 使用在实例化的时候找到的 operator+</span><br>                    <span class="hljs-comment">// （不考虑 Semigroup&lt;T&gt;::operator+）</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一“解决方案”充其量只能算是个补丁，而且有一个特殊的问题，即调用到的无约束模板中不会知道 <code>Semigroup</code> 的 <code>concept_map</code>。这样就导致一个“有趣效果”，即一个对象可以在一段程序的两个地方以一模一样的方式被使用，但却表达不同的语义。这样一来，类型系统就以一种实在难以追踪的方式被破坏了。</p><p>随着概念的使用越来越多，语义在概念（实际上是类型和库）设计中的作用变得越来越清晰，委员会中的许多人开始推动一种表达语义规则的机制。这并不奇怪，Alex Stepanov 喜欢说“概念全都是语义问题”。然而，大部分人那时都像对待其他语言功能一样对待概念，他们更关心语法和命名查找规则。</p><p>2009年，Gabriel Dos Reis（在我大力支持下）提出了一种称为 <code>axiom</code>（公理）的写法并获得批准 [Dos Reis et al. 2009]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">concept</span> TotalOrdering&lt;<span class="hljs-keyword">typename</span> Op, <span class="hljs-keyword">typename</span> T&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Op, T, T)</span></span>;<br>    <span class="hljs-function">axiom <span class="hljs-title">Antisymmetry</span><span class="hljs-params">(Op op, T x, T y)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">op</span>(x, y) &amp;&amp; <span class="hljs-built_in">op</span>(y, x))<br>            x &lt;=&gt; y;<br>    &#125;<br>    <span class="hljs-function">axiom <span class="hljs-title">Transitivity</span><span class="hljs-params">(Op op, T x, T y, T z)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">op</span>(x, y) &amp;&amp; <span class="hljs-built_in">op</span>(y, z))<br>        <span class="hljs-built_in">op</span>(x, z);<br>    &#125;<br>    <span class="hljs-function">axiom <span class="hljs-title">Totality</span><span class="hljs-params">(Op op, T x, T y)</span> </span>&#123;<br>        <span class="hljs-built_in">op</span>(x, y) || <span class="hljs-built_in">op</span>(y, x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>奇怪的是，要让公理的概念被接受很困难。主要的反对意见似乎是，提议者们明确拒绝了让编译器针对它们所使用的类型来对公理进行测试“以捕获错误”的想法。显然，<code>axiom</code> 就是数学意义上的公理（也就是说，是因为你通常无法检查而允许作的一些假设），这一观念对于某些委员是陌生的。另外一些人则不相信指定公理还可以帮助编译器以外的工具。不过，<code>axiom</code> 还是被纳入了 <code>concept</code> 规范中。</p><p>我们在概念的定义和实现上都存在明显的问题，但我们有了一套相当完整的工具，努力地试图通过使用标准库 [Gregor and Lumsdaine 2008] 和其他库中定义的概念来解决这些问题并获得经验。</p><h3 id="6-2-6-哪里出错了？"><a href="#6-2-6-哪里出错了？" class="headerlink" title="6.2.6 哪里出错了？"></a>6.2.6 哪里出错了？</h3><p>2009年，我不情愿地得出结论，概念工作陷入了困境。我期望能被我们解决掉的问题仍在加剧，而新的问题又层出不穷：</p><ul><li>我们仍然没有达成一致意见，在大多数情况下，到底应使用隐式还是显式建模（隐式或显式使用 <code>concept_map</code>），哪种才是正确的方法。</li><li>我们仍然没有达成一致意见，是要依赖概念之间隐式还是显式的关系陈述（我们是否应该以某种非常类似面向对象的继承的方式，显式地构建“精化”关系的层次结构？）。</li><li>我们仍不断看到一些实例，由受概念约束的代码生成出来的代码不及无约束模板生成出来的代码。来自模板的后期组合机会仍然显示出惊人的优势。</li><li>编写概念来捕获我们在泛型和非泛型 C++ 中惯于使用的每种转换和重载情况仍然很困难。</li><li>我们看到了越来越多的例子，这些例子中，足够复杂的 <code>concept_map</code> 和 <code>late_check</code> 的组合导致了对类型的不一致的看法（也就是对类型系统的惊人和几乎无法追踪的破坏）。</li><li>标准草案中规范的复杂性吹气球般迅速膨胀，超出了所有人的预期（有 91 页，这还不包括库中对概念的使用），我们中的一些人认为它基本上不可读。</li><li>用于描述标准库的概念集越来越大（大约有 125 个概念，仅 STL 就有 103 个）。</li><li>编译器在代码生成方面越来越好（因为 Doug Gregor 的英勇努力），但速度仍未提高。一些主要的编译器供应商私下里向我透露，如果一个支持概念的编译器比旧的编译器慢 20% 以上，他们就不得不反对这些概念，不管它们有多好。当时，支持概念的编译器要慢 10 倍以上。</li></ul><p>在 2009 年春季，在标准的邮件群组上进行过一场广泛的讨论。起头的是 Howard Hinnant，他提出一个关于概念使用的非常实际的问题：他正在设计的工具可以通过两种方式来完成：一种将需要大量用户——不一定是专家用户——编写概念映射。另一种——远不够优雅的——设计将避免使用概念映射（和概念），以免要求用户了解有关概念的任何重要知识。“普通用户”需要理解概念吗？理解到足以使用它们就行？还是要能理解到足以定义它们？</p><p>这个讨论主题后来被称作“码农小明是否需要概念？”。谁是“码农小明”？Peter Gottschling 问道。这是个好问题，我回答道：</p><blockquote><p>我认为大多数 C++ 程序员都是“码农小明”（我再次表示反对该术语），我大部分时间和使用大多数库的时候都是“码农小明”，我预料我一直都会是，因为我会一直保持学习新技术和库。但是，我想使用概念（并且在必要时使用概念映射），我希望“使用原则”比现在这样仅供专家使用的精细功能要简单得多。</p></blockquote><p>换句话说，我们是应该将概念设计成为供少数语言专家进行细微控制的精密设备，还是供大多数程序员使用的健壮工具？在语言特性和标准库组件的设计中，这个问题反复出现。关于类，我多年以来都听到这样的声音；某些人认为，显然不应该鼓励大多数程序员定义类。在某些人眼里，普通的程序员（有时被戏称为“码农小明”）显然不够聪明或没有足够的知识来使用复杂的特性和技巧。我一向强烈认为大多数程序员可以学会并用好类和概念等特性。一旦他们做到了，他们的编程工作就变得更容易，并且他们的代码也会变得更好。整个 C++ 社区可能需要花费数年的时间来吸取教训；但是如果做不到的话，我们——作为语言和库的设计者——就失败了。</p><p>为了回应这场讨论，并反映我对 C++0x 概念的工作方向的日益关注，我写了一篇论文 <em>Simplifying the use of concepts</em> [Stroustrup 2009c] 概述了在我看来要让概念在 C++0x 中变得可接受所必须做的最小改进：</p><ul><li>尽量少使用 <code>concept_map</code>。</li><li>使所有 <code>concept_map</code> 隐式&#x2F;自动化。</li><li>概念如需要 <code>begin(x)</code>，那它也得接受 <code>x.begin()</code>，反之亦然（统一函数调用）；（<a href="#61-%E6%A6%82%E5%BF%B5%E7%9A%84%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">§6.1</a>），（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）</li><li>使所有标准库概念隐式&#x2F;自动化。</li></ul><p>这篇论文非常详细地包含了多年来出现的许多例子和建议。</p><p>我坚持让<strong>所有</strong>概念都成为隐式&#x2F;自动的原因之一是观察到，如果给一个选择，最不灵活和最不轻信的程序员可能会强迫每个人都接受他们所选择的显式概念。库作者们表现出一种强烈的倾向，即通过使用显式的（非自动的）概念把决策推到用户那去做，即便是对于那些最明显的选择也一样。</p><p>我当时注意到，C++ 泛型编程之父 Alex Stepanov 不久之前所写的《编程原本》（<em>Elements of Programming</em>）[Stepanov and McJones 2009] 并没有使用哪怕是一条 <code>concept_map</code> 来描述 STL 工具的超集和当时常见的泛型编程技术的超集。</p><p>委员展开了一次讨论回应我的论文，焦点是，为了及时加入标准，我们是否来得及达成共识。结论也很显然，没多大希望。我们没法同意“修补”概念让它对大多数程序员可用，同时还能（多少）及时地推出标准。这样，“概念”，这个许多有能力的人多年工作的成果，被移出了标准草案。我对“删除概念”决定的总结 [Stroustrup 2009a,b] 比技术论文和讨论更具可读性。</p><p>当委员会以压倒多数投票赞成删除概念时（我也投票赞成删除），每个发言的人都再次确认他们想要概念。投票只是反映出概念设计还没有准备好进行标准化。我认为问题要严重得多：委员会想要概念，但委员们对他们想要什么样的概念没有达成一致。委员会没有一套共同的设计目标。这仍然是一个问题，也不仅仅出现在概念上。委员之间存在着深刻的“哲学上”的分歧，特别是：</p><ul><li><strong>显式还是隐式</strong>：为了安全和避免意外，程序员是否应该显式地说明如何从潜在可选方案中做决策？该讨论最终涉及有关重载决策、作用域决策、类型与概念的匹配、概念之间的关系，等等。</li><li><strong>专家与普通人</strong>：关键语言和标准库工具是否应该设计为供专家使用？如果是这样，是否应该鼓励“普通程序员”只使用有限的语言子集，是否应该为“普通程序员”设计单独的库？这个讨论出现在类、类层次结构、异常、模板等的设计和使用的场景中。</li></ul><p>这两种情况下，回答“是”都会使功能的设计偏向于复杂的特性，这样就需要大量的专业知识和频繁使用特殊写法才能保证正确。从系统的角度，我倾向于站在这类论点的另一端，更多地信任普通程序员，并依靠常规语言规则，通过编译器和其他工具进行检查以避免令人讨厌的意外。对于棘手的问题，采用显式决策的方式比起依靠（隐式）的语言规则，程序员犯错的机会只多不少。</p><p>不同的人从 C++0x 概念的失败中得出了不同的结论，我得出三点主要的：</p><ul><li>我们过分重视早期实现。我们原本应该花更多的精力来确定需求、约束、期望的使用模式，以及相对简单的实现模型。此后，我们可以依靠使用反馈来让我们的实现逐步增强。</li><li>有些分歧是根本的（哲学上的），无法通过折中解决，我们必须尽早发现并阐明此类问题。</li><li>没有一套功能集合能做到既满足一个大型专家委员会的所有不同愿望，又不会变得过分庞大，这种膨胀会成为实现者的难题和用户的障碍。我们必须确定核心需求，并用简单的写法来满足；对于更复杂的用法和罕见的用例，则可以用对使用者的专业知识要求更高的功能和写法。</li></ul><p>这些结论与概念没有什么特别的关系。它们是对大团体内的设计目标和决策过程的一般观察。</p><h2 id="6-3-Concepts-TS"><a href="#6-3-Concepts-TS" class="headerlink" title="6.3 Concepts TS"></a>6.3 Concepts TS</h2><p>2009 年，几乎是在概念刚从 C++0x 移除之后，Gabriel Dos Reis、Andrew Sutton 和我开始重新设计概念。这次设计是根据我们最初的想法、从 C++0x 语言设计中得到的经验、使用 C++0x 概念的经验，以及标准委员会的反馈。我们的结论是</p><ul><li>概念必须有语义上的意义</li><li>概念数量应该相对较少</li><li>概念应该基本，而非最小</li></ul><p>我们认为 C++ 标准库中包含的大部分单独使用的概念是没有意义的 [Sutton and Stroustrup 2011]。“对于任何合理的‘概念’定义，STL 都用不了 103 个‘概念’！”我在和 Andrew Sutton 的讨论中大声嚷道，“基础代数都没有超过十几个概念！”语言设计的讨论可以变得相当热烈。</p><p>2011年，在 Andrew Lumsdaine 的敦促下，Alex Stepanov 在 Palo Alto 召集了为期一周的会议。一个相当大的团队，包含了大多数与 C++0x 概念工作密切相关的人，加上 Sean Parent 和 Alex Stepanov，一起讨论从用户的角度来解决这个问题：理想情况下，一个被适度约束的 STL 算法集应当是什么样子？然后，我们回家记录我们以用户为导向的设计，并发明语言机制以接近这个理想设计 [Stroustrup and Sutton 2012]。这一努力重新启动了标准工作，而且使用的是一种全新的、与 C++0x 工作完全不同且更好的方法。2016 年 ISO 出版的概念的 TS（技术规范）[Sutton 2017] 和 C++20 概念（<a href="#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）就是该会议的直接结果。Andrew Sutton 的实现从 2012 年开始就被用于实验，并作为 GCC 6.0 或更高版本的一部分发布。</p><p>在 Concepts TS 中 [Sutton 2017]</p><ul><li>概念基于编译期谓词（包括多参数谓词和值参数）。</li><li>以使用模式来描述原始要求 [Dos Reis 和 Stroustrup 2006]（<code>requires</code> 表达式）。</li><li>概念可以用在一般的 <code>requires</code> 子句中，当作模板形参定义中 <code>typename</code> 的替代，也可以当作函数形参定义中类型名的替代。</li><li>从类型到概念的匹配是隐式的（没有 <code>concept_map</code>）。</li><li>重载中概念间是隐式的关系（通过计算得出，而不需要为概念进行显式细化）。</li><li>没有定义检查（至少目前还没有，所以也没有 <code>late_check</code>）。</li><li>没有 <code>axiom</code>，但这只是因为我们不想因为一个潜在有争议的特性而让设计更加复杂、产生拖延。C++0x 的 <code>axiom</code> 也可以是一个好起点。</li></ul><p>与 C++0x 的概念相比，这里非常强调简化概念的使用，其中的一个主要部分是不要求程序员做显式表达，而让编译器根据明确规定的、简单的算法来解决问题。</p><p>支持由用户显式决策的人认为以上的方案重语义而轻语法，并警告会有“意外匹配”和“惊吓”。最常见的例子是 <code>Forward_iterator</code> 与 <code>Input_iterator</code> 的区别仅在于语义：<code>Forward_iterator</code> 允许在其序列中做多遍扫描。没有人否认这种例子的存在，但围绕这些例子的重要性以及如何解决它们的争论却没断过（仍然很起劲）。我认为让几个罕见的复杂例子主导设计是大错特错。</p><p>Concepts TS 设计是基于这样的看法（有大量经验支持），即上面这样的例子非常罕见（特别是在精心设计的概念中 [Stroustrup 2017]），通常被概念编写者很好地理解，而且常常可以通过在最受约束的概念上添加操作以反映语义上的差异来解决。例如，<code>Forward_iterator</code>&#x2F;<code>Input_iterator</code> 问题的一个简单解决方案是要求 <code>Forward_iterator</code> 提供一个 <code>can_multipass()</code> 操作。此操作甚至不需要做任何事情；它存在只是为了让概念决策机制能够检查它的存在。因此，不需要专门添加新的语言特性来解决可能出现的意外歧义。</p><p>因为这一点经常被忽视，我必须强调，概念是谓词，它们不是类或类层次结构。根本上，我们只是问某个类型一些简单的问题，如“你是迭代器吗？”并问类型的集合关于它们的互操作的问题，如“你们之间能用 <code>==</code> 来相互比较吗？”（<a href="#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>）。使用概念时，我们只问那些可以在编译期回答的问题，不涉及运行期求值。潜在的歧义是通过比较类型（或类型集合）所涉及的谓词来检测的，而不是让程序员写决策规则（<a href="#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>）。</p><p>出于对 C++0x 概念（<a href="#626-%E5%93%AA%E9%87%8C%E5%87%BA%E9%94%99%E4%BA%86">§6.2.6</a>）中所发生问题的敏感，我们小心翼翼地设计概念，以求使用它们不会隐含显著的编译期开销。即使是 Andrew Sutton 的编译器的早期版本，编译使用了概念的模板的速度也比编译使用变通方案（例如 <code>enable_if</code>（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>））的程序要<strong>快</strong>。</p><h3 id="6-3-1-定义检查"><a href="#6-3-1-定义检查" class="headerlink" title="6.3.1 定义检查"></a>6.3.1 定义检查</h3><p>在 Palo Alto 会议后几个月之内的某个时间点，Andrew Sutton、Gabriel Dos Reis 和我做出决定，分阶段着手设计和实现概念的语言特性。这样，我们可以从实现的经验中学习，并在“设计冻结”之前获得早期的反馈。特别是，我们决定推迟实现<strong>定义检查</strong>（<a href="#624-%E5%AE%9A%E4%B9%89%E6%A3%80%E6%9F%A5">§6.2.4</a>）；也就是说，检查并确保模板没有使用并未为其参数指定的功能。考虑 <code>std::advance()</code> 的一个简化版本，它将迭代器在序列中向前移动 <code>n</code> 个位置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Forward_iterator Iter&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">advance</span><span class="hljs-params">(Iter p, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    p+=n;  <span class="hljs-comment">// p 前进 n 个位置</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Forward_iterator</code> 不提供 <code>+=</code>，只提供 <code>++</code>，所以定义检查会把它当作错误抓出来。如果不单独（在使用前）检查 <code>advance()</code> 的函数体，我们将只会从 <code>+=</code> 的（错误）使用中得到糟糕的实例化时的错误信息，请注意，模板实例化生成的代码总会经过类型检查，所以不做定义检查不会导致运行期错误。</p><p>我们认为，概念带来的约 90% 的好处会从使用点检查中收获，而对于那些相对专家级的受约束模板作者来说，没有定义检查也能将就一段时间。这里 90% 显然是基于有限信息的临时估计，但得益于十年间在概念上的工作，我认为这是一个不错的猜测。作为语言特性和库的设计者，对我们来说，更重要的是从使用中获得经验，这一经验获得的过程始于 Palo Alto 技术备忘录 [Stroustrup and Sutton 2012] 中的 STL 算法示例。我们重视反馈胜于重视理论完整性。这种看法曾是激进的。回顾一下关于概念的文档（在 C++ 和其他语言中），之所以将概念作为语言特性提供，定义检查总是被强调成一个主要原因 [Gregor et al. 2006; Stroustrup and Dos Reis 2003b]。</p><p>这种新设计一度被称为<strong>轻量概念</strong>（Concepts Lite），许多人认为它不完整，甚至没用。但是，我们很快发现，<strong>不</strong>进行定义检查会带来真正的好处 [Sutton and Stroustrup 2011]。</p><ul><li>有了定义检查，我们在开发过程中就没办法使用部分概念检查。在构建一个大程序的初始阶段中，不知道全部的需求是非常常见的。部分检查可以让很多错误在早期被发现，并有助于根据早期使用的反馈逐步改进设计。</li><li>定义检查使得设计难以拥有稳定的接口。特别是，要往类或者函数中增加调试语句、统计收集、追踪或者“遥测”之类的支持，就不能不改变类或函数的接口来包含相应功能。这些功能对于类或函数来说很少是根本的，而且往往会随着时间的推移而改变。</li><li>当我们不使用定义检查时，现有的模板可以逐渐转换为使用概念。但是，如果我们有定义检查，一个受约束的模板就不能使用一个无约束的模板，因为我们一般没法知道无约束的模板使用了哪些功能。另外，不管做不做定义检查，一个无约束的模板使用一个有约束的模板都意味着后期（实例化时）检查。</li></ul><p>从 2014 年起担任 EWG 主席的 Ville Voutilainen 更为坚定地表示：</p><blockquote><p>我不能支持任何包含定义检查的概念提案。</p></blockquote><p>我们最终可能会得到一种定义检查的形式，但前提是我们能够设计一种机制来避开它，以满足过渡和数据收集的需要。这需要仔细考虑，需要进行实验。C++0x 的 <code>late_check</code> 是不够的。</p><p>定义检查的问题是使用的问题，而不是实现的问题。Gabriel Dos Reis 设计并实现了一种名为 Liz 的实验语言，用来测试 Concepts TS 设计中的功能 [Dos Reis 2012]，包括定义检查。如果我们找到一种可接受的定义检查形式，我们就可以实现它。</p><h3 id="6-3-2-概念使用"><a href="#6-3-2-概念使用" class="headerlink" title="6.3.2 概念使用"></a>6.3.2 概念使用</h3><p>简单的示例看起来很像 C++0x 及更早的版本中的样子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Sequence Seq, Number Num&gt;</span><br><span class="hljs-function">Num <span class="hljs-title">sum</span><span class="hljs-params">(Seq s, Num v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; x : s)<br>        v += x;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 <code>Sequence</code> 和 <code>Number</code> 是概念。使用概念而不是 <code>typename</code> 来引入类型的名称，意味着使用的类型必须满足概念的要求。需要注意的是，由于 Concepts TS 不提供定义检查，所以使用 <code>+=</code> 不会被概念所检查，而只会在后期、在实例化时检查。以上是最初的开发阶段中可能的做法，稍后我们很可能会更为明确：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">using</span> Value_type = <span class="hljs-keyword">typename</span> T::value_type;  <span class="hljs-comment">// 简化的别名</span><br><br><span class="hljs-keyword">template</span>&lt;Sequence Seq, <span class="hljs-keyword">typename</span> Num&gt;<br>    <span class="hljs-keyword">requires</span> Arithmetic&lt;Value_type&lt;Seq&gt;,Num&gt;<br><span class="hljs-function">Num <span class="hljs-title">sum</span><span class="hljs-params">(Seq s, Num v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; x : s)<br>        v += x;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，我们必须有算数运算符，包括 <code>+=</code>，以供 <code>Sequence</code> 的值类型和我们用作累加器的类型的组合使用。我们不再需要说明 <code>Num</code> 为 <code>Number</code>，<code>Arithmetic</code> 会检查 <code>Num</code> 具有所需的一切属性。在这里，<code>Arithmetic</code> 被显式地用作（C++0x 风格的）<code>requires</code> 子句中的谓词。</p><p>重载是通过挑选具有最严格要求的函数来处理。考虑标准库中的经典函数 <code>advance</code> 的一个简单版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Forward_iterator Iter&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">advance</span><span class="hljs-params">(Iter p, <span class="hljs-type">int</span> n)</span>  <span class="hljs-comment">// 将 p 向前移动 n 个元素</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (n--)<br>        ++p;  <span class="hljs-comment">// 前向迭代器有 ++，但没有 + 或者 +=</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Random_access_iterator Iter&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">advance</span><span class="hljs-params">(Iter p, <span class="hljs-type">int</span> n)</span>  <span class="hljs-comment">// 将 p 向前移动 n 个元素</span></span><br><span class="hljs-function"></span>&#123;<br>    p += n;  <span class="hljs-comment">// 随机迭代器有 +=</span><br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，我们应该对提供随机访问的序列使用第二个版本，对只提供前向迭代的序列使用第一个版本。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">user</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;::iterator vip, list&lt;string&gt;::iterator lsp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">advance</span>(vip, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 使用较快的 advance()</span><br>    <span class="hljs-built_in">advance</span>(lsp, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 使用较慢的 advance()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译器将这两个函数的概念分解为原始（“原子”）要求，由于前向迭代的要求是随机访问迭代要求的严格子集，所以这个例子可以被解决。</p><p>当一个参数类型同时匹配到互相之间不是严格子集的重叠要求时，会产生歧义（编译期错误）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> Copyable&lt;T&gt; &amp;&amp; Integral&lt;T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">fct</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> Copyable&lt;T&gt; &amp;&amp; Swappable&lt;T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">fct</span><span class="hljs-params">(T x )</span></span>;<br><br><span class="hljs-type">int</span> x = <span class="hljs-built_in">fct</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 有歧义：int 满足 Copyable、Integral 和 Swappable</span><br><span class="hljs-keyword">auto</span> y = <span class="hljs-built_in">fct</span>(complex&lt;<span class="hljs-type">double</span>&gt;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;);  <span class="hljs-comment">// OK：complex 不满足 integral</span><br></code></pre></td></tr></table></figure><p>程序员唯一能利用的控制机制是在定义概念时为其增加操作。不过对于现实世界的例子来说，这似乎已经足够了。当然，你可以定义一些只在语义上有差异的概念，这样就没有办法根据我们的纯语法概念来区分它们。然而，要避免这样做并不困难。</p><h3 id="6-3-3-概念的定义"><a href="#6-3-3-概念的定义" class="headerlink" title="6.3.3 概念的定义"></a>6.3.3 概念的定义</h3><p>通过 <code>requires</code> 表达式的使用模式可指定概念的原始要求：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U =T&gt;<br><span class="hljs-keyword">concept</span> Equality_comparable =<br>    <span class="hljs-built_in">requires</span> (T a, U b) &#123;<br>        &#123; a == b &#125; -&gt; <span class="hljs-type">bool</span> ; <span class="hljs-comment">// 使用 == 比较 T 和 U 得到一个 bool 值</span><br>        &#123; a != b &#125; -&gt; <span class="hljs-type">bool</span> ; <span class="hljs-comment">// 使用 != 比较 T 和 U 得到一个 bool 值</span><br>    &#125;;<br></code></pre></td></tr></table></figure><p><code>requires</code> 表达式是 Andrew Sutton 发明的，作为他实现 Concepts TS 的一部分。事实证明它们非常有用，以至于用户坚持认为它们应该成为标准的一部分。</p><p><code>=T</code> 为第二个类型参数提供默认值，因此概念 <code>Equality_comparable</code> 可以用于单个类型。</p><p>使用模式的写法是 Bjarne Stroustrup 基于 2003 年的想法 [Stroustrup and Dos Reis 2003b] 在 Palo Alto 的现场会议上发明的。这种写法及其思想并不涉及函数签名或函数表的实现。</p><p>不存在特定的机制来表达类型与概念相匹配，但如果有人要这么做，可以使用 C++11 中普通的 <code>static_assert</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">static_assert</span>(Equality_comparable&lt;<span class="hljs-type">int</span>&gt;);       <span class="hljs-comment">// 成功</span><br><span class="hljs-built_in">static_assert</span>(Equality_comparable&lt;<span class="hljs-type">int</span>,<span class="hljs-type">long</span>&gt;);  <span class="hljs-comment">// 成功</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123; <span class="hljs-type">int</span> a; &#125;;<br><span class="hljs-built_in">static_assert</span>(Equality_comparable&lt;S&gt;);    <span class="hljs-comment">// 失败了，因为结构体不会</span><br>                                          <span class="hljs-comment">// 自动生成 == 和 != 操作</span><br></code></pre></td></tr></table></figure><p>来自 C++0x（及更早的 [Stroustrup 2003]）中的关联类型（associated type）概念也得到了支持：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> S&gt;<br><span class="hljs-keyword">concept</span> Sequence = <span class="hljs-built_in">requires</span>(S a) &#123;<br>  <span class="hljs-keyword">typename</span> Value_type&lt;S&gt;;             <span class="hljs-comment">// S 必须具有值类型。</span><br>  <span class="hljs-keyword">typename</span> Iterator_type&lt;S&gt;;          <span class="hljs-comment">// S 必须具有迭代器类型。</span><br><br>  &#123; <span class="hljs-built_in">begin</span>(a) &#125; -&gt; Iterator_type&lt;S&gt;;   <span class="hljs-comment">// begin(a) 必须返回一个迭代器。</span><br>  &#123; <span class="hljs-built_in">end</span>(a) &#125; -&gt; Iterator_type&lt;S&gt;;     <span class="hljs-comment">// end(a) 必须返回一个迭代器。</span><br>  &#123; a.<span class="hljs-built_in">begin</span>() &#125; -&gt; Iterator_type&lt;S&gt;;  <span class="hljs-comment">// a.begin() 必须返回一个迭代器。</span><br>  &#123; a.<span class="hljs-built_in">end</span>() &#125; -&gt; Iterator_type&lt;S&gt;;    <span class="hljs-comment">// a.end() 必须返回一个迭代器。</span><br><br>  <span class="hljs-keyword">requires</span> Same_type&lt;Value_type&lt;S&gt;,Value_type&lt;Iterator_type&lt;S&gt;&gt;&gt;;<br>  <span class="hljs-keyword">requires</span> Input_iterator&lt;Iterator_type&lt;S&gt;&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意上面的代码有重复，这是为了可以同时接受 <code>a.begin()</code> 和 <code>begin(a)</code>。缺少统一函数调用让人头疼（<a href="#61-%E6%A6%82%E5%BF%B5%E7%9A%84%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">§6.1</a>）、（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）。</p><h3 id="6-3-4-概念名称引导器"><a href="#6-3-4-概念名称引导器" class="headerlink" title="6.3.4 概念名称引导器"></a>6.3.4 概念名称引导器</h3><p>从使用中我们学到的一件事情是，基础概念的使用有很多重复。我们在 <code>requires</code> 语句中直接使用了太多的 <code>requires</code> 表达式，并且使用了太多“小”概念。我们的概念要求看起来像新手程序员编写的代码：很少的函数，很少的抽象，很少的符号名。</p><p>考虑标准的 <code>merge</code> 家族函数。这些函数都接受三个序列的输入并需要指明这些序列之间的关系。因此就有了对序列类型的三个要求和描述序列元素之间关系的三个要求。第一次尝试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;Input_iterator In1, Input_iterator In2, Output_iterator Out&gt;<br>    <span class="hljs-keyword">requires</span> Comparable&lt;Value_type&lt;In1&gt;,Value_type&lt;In2&gt;&gt;<br>    &amp;&amp; Assignable&lt;Value_type&lt;In1&gt;, Value_type&lt;Out&gt;&gt;<br>    &amp;&amp; Assignable&lt;Value_type&lt;In2&gt;, Value_type&lt;Out&gt;&gt;<br><span class="hljs-function">Out <span class="hljs-title">merge</span><span class="hljs-params">(In1, In1, In2, In2, Out)</span></span>;<br></code></pre></td></tr></table></figure><p>这种形式太乏味了；而且，这种引入类型名称的模式非常常见。例如，STL 中至少有四个 <code>merge</code> 函数。乏味且重复的代码非常容易出错，也难以维护。我们很快学会了更多使用多参数概念来定义类型间要求的共同模式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Input_iterator In1, Input_iterator In2, Output_iterator Out&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">requires</span> Mergeable&lt;In1,In2,Out&gt;</span><br><span class="hljs-function">Out <span class="hljs-title">merge</span><span class="hljs-params">(In1, In1, In2, In2, Out)</span></span>;<br></code></pre></td></tr></table></figure><p>对于 Andrew Sutton 来说，这还是太混乱了。他在 2012 年使用概念编写的代码量可能超过任何其他人。他提出了一种机制来表达“为满足一个概念的多个类型引入一个类型名集合”。这样将 <code>merge</code> 的示例减少到了逻辑上的最少限度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Mergeable&#123;In1,In2,Out&#125; <span class="hljs-comment">// 概念名称引导器</span><br><span class="hljs-function">Out <span class="hljs-title">merge</span><span class="hljs-params">(In1, In1, In2, In2, Out)</span></span>;<br></code></pre></td></tr></table></figure><p>仅仅通过尝试，你就能学到很多东西，这真是令人惊叹！同样令人惊叹的是，对于那些尚未经历过这些问题的人，新颖的写法和解决方案在他们那里也会遭遇巨大的阻力。</p><h3 id="6-3-5-概念和类型"><a href="#6-3-5-概念和类型" class="headerlink" title="6.3.5 概念和类型"></a>6.3.5 概念和类型</h3><p>许多人仍然将概念视为（无论过去和现在）类型的类型这个想法的变体。是的，只有一个类型参数的概念可以看作是一个类型的类型，但只有最简单的用法才适合该模式。</p><p>大多数泛型函数（算法）都需要不止一个模板参数，要让这样的函数有意义，这些参数类型必须以某种方式关联起来。因此，我们必须使用多参数概念。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;Forward_iterator Iter, <span class="hljs-keyword">typename</span> Val&gt;<br>    <span class="hljs-keyword">requires</span> Equality_comparable&lt;Value_type&lt;Iter&gt;,Val&gt;<br><span class="hljs-function">Forward_iterator <span class="hljs-title">find</span><span class="hljs-params">(Iter first, Iter last, Val v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (first!=last &amp;&amp; *first!=v)<br>        ++first;<br>    <span class="hljs-keyword">return</span> first;<br>&#125;<br></code></pre></td></tr></table></figure><p>至关重要的是，多参数概念直接解决了处理隐式转换和混合类型操作的需求。早在 2003 年，我就和 Gabriel Dos Reis 一起考虑过将每个参数的所有约束条件与其他参数隔离开来说明的可能性 [Stroustrup 2003; Stroustrup and Dos Reis 2003b]。这将涉及</p><ul><li>参数化（例如，用值类型来参数化的 <code>Iterator</code>）</li><li>某种形式的继承（例如，<code>Random_access_iterator</code> 是一个 <code>Forward_iterator</code>）</li><li>能对一个模板参数应用多个概念的能力（例如，一个 <code>Container</code> 的元素必须满足 <code>Value_type</code> 和 <code>Comparable</code>）</li><li>这三种技术的组合。</li></ul><p>结果是非常复杂的模板参数类型约束。我们认为这种复杂性是不必要的，也无法进行管理。譬如 <code>x+y</code> 和 <code>y+x</code>，其中 <code>x</code> 和 <code>y</code> 具有不同的模板参数类型，<code>X</code> 和 <code>Y</code>。在处理各自的模板参数时，我们必须将 <code>X</code> 和 <code>Y</code> 以及 <code>Y</code> 和 <code>X</code> 进行参数化。在纯面向对象语言中，这看起来很自然。毕竟，有两种方法可以进行 <code>+</code> 运算，一种在 <code>X</code> 的层次结构中，一种在 <code>Y</code> 的层次结构中。然而，我早在 1982 年就拒绝了 C++ 的这个解决方案。要完成这一图景，我们必须添加隐式类型转换（例如，处理 <code>x+2</code> 和 <code>2+x</code>）。而多参数概念与 C++ 解决此类场景的方式完全吻合，并避免了大部分的复杂性。</p><p>这个决定经过多年的反复审查并得到确认。在设计 C++0x 概念的努力中，人们尝试应用了标准的学术系统，正如在 Haskell 类型类（typeclass）和 Java 约束中可见的。但是，这些做法最终不能提供在大规模使用中所需要的实现和使用上的简单性。</p><p>当一个泛型用法符合类型的类型这一模式时，概念能非常优雅地支持它。</p><ul><li><strong>类型</strong>指定了一组可以（隐式和显式）应用于对象的操作，依赖于函数声明和语言规则，并会指定对象在内存中如何布局。</li><li><strong>概念</strong>指定了一组可以（隐式和显式）应用于对象的操作，依赖于可以反映函数声明和语言规则的使用模式，并且不涉及对象的布局。因此，概念是一种接口。</li></ul><p>我的理想是，能用类型的地方就能用概念，并且使用方式相同。除了定义布局外，它们非常相似。概念甚至可以用来约束那些由其初始化器来确定其类型的变量的类型（受约束的 <code>auto</code> 变量（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>））。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Integer = Same&lt;T,<span class="hljs-type">short</span>&gt; || Same&lt;T,<span class="hljs-type">int</span>&gt; || Same&lt;T,<span class="hljs-type">long</span>&gt;;<br><br>Integer x1 = <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> x2 = <span class="hljs-number">9</span>;<br><br>Integer y1 = x1+x2;<br><span class="hljs-type">int</span> y2 = x2+x1;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;)</span></span>;      <span class="hljs-comment">// 一个函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Integer&amp;)</span></span>;  <span class="hljs-comment">// 一个函数模板</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ff</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">f</span>(x1);<br>    <span class="hljs-built_in">f</span>(x2);<br>&#125;<br></code></pre></td></tr></table></figure><p>C++20 离实现这一理想接近了。为了使该例子能在 C++20 中工作，我们必须在每个 <code>Integer</code>（<a href="#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）概念后添加一个逻辑上冗余的 <code>auto</code>。另一方面，在 C++20 中，我们可以使用标准库里的 <code>integral</code> 概念来替换明显不完整的 <code>Integer</code>。</p><h3 id="6-3-6-改进"><a href="#6-3-6-改进" class="headerlink" title="6.3.6 改进"></a>6.3.6 改进</h3><p>在 Concepts TS 工作的初期，一个 <code>concept</code> 是一个返回 <code>bool</code> 值的 <code>constexpr</code> 函数（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）。这很合理，因为我们把概念看作是编译期的谓词。然后 Gabriel Dos Reis 将变量模板引入到 C++14（<a href="05.md#52-%E5%8F%98%E9%87%8F%E6%A8%A1%E6%9D%BF">§5.2</a>）中。现在，我们有了选择：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 函数风格：</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">concept</span> <span class="hljs-type">bool</span> <span class="hljs-title">Sequence</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Has_begin</span>&lt;T&gt;() &amp;&amp; <span class="hljs-built_in">Has_end</span>&lt;T&gt;(); &#125;<br><br><span class="hljs-comment">// 表达式风格：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> <span class="hljs-type">bool</span> Sequence = Has_begin&lt;T&gt; &amp;&amp; Has_end&lt;T&gt;;<br></code></pre></td></tr></table></figure><p>我们可以愉快地使用任何一种风格，但是如果两种风格都允许的话，使用概念的用户就必须知道概念定义中使用了哪种风格，否则无法正确使用括号。很快这就成了一个大麻烦。</p><p>函数式风格允许概念重载，但是我们只有很少的概念重载例子；于是我们决定没有概念重载也可以。因此，我们进行了简化，只使用变量模板来表达概念。Andrew Sutton 率先全面使用了概念的表达式形式。</p><p>我们（Andrew Sutton、Gabriel Dos Reis 和我）始终知道，显式写出 <code>concept</code> 返回 <code>bool</code> 是多余的。毕竟，概念从定义上来看就是一个谓词。然而，我们决定不去搞乱语法而专注于语义上的重要话题。后来，人们总是将冗余的 <code>bool</code> 作为一个反对概念设计的论点，因此我们对其进行了修正，不再提到 <code>bool</code>。</p><p>删除 <code>bool</code> 是 Richard Smith 提出的一系列改进建议的一部分，其中还包括更精确地描述什么是原子谓词，以及对匹配规则的简化 [Smith and Sutton 2017]。现在，我们使用表达式风格：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 表达式风格：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> Sequence = Has_begin&lt;T&gt; &amp;&amp; Has_end&lt;T&gt;;<br></code></pre></td></tr></table></figure><h3 id="6-3-7-等效语法"><a href="#6-3-7-等效语法" class="headerlink" title="6.3.7 等效语法"></a>6.3.7 等效语法</h3><p>Concepts TS 支持在函数声明中使用概念的三种写法：</p><ul><li>为通用起见，显式使用 <code>requires</code> 语句</li><li>简略写法，用于表示类型的类型</li><li>自然写法（也称为简短写法、常规写法等）</li></ul><p>基本思想是，让程序员使用与特定声明的需求紧密匹配的写法，而不会因使用更复杂声明所需的写法而淹没该定义。为了使程序员可以自由选择写法，尤其是允许在项目开发初期或维护阶段随着功能的变化而调整，这些风格的写法被定义为是等效的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Sortable &amp;)</span></span>; <span class="hljs-comment">// 自然写法</span><br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Sortable S&gt; <span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(S&amp;)</span></span>; <span class="hljs-comment">// 简略写法</span><br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> S&gt; <span class="hljs-keyword">requires</span> Sortable&lt;S&gt; <span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(S&amp;)</span></span>;<br></code></pre></td></tr></table></figure><p>用户对此感到非常满意，并且倾向于在大多数声明中使用自然和简略写法。但是，有些委员会成员对自然写法感到恐惧（“我看不出它是一个模板！”），而喜欢使用最显式的 <code>requires</code> 写法，因为它甚至可以表达最复杂的示例（“为什么你还要比那更复杂的东西？”）。我的解释是，我们对什么是简单有两种看法：</p><ul><li>我可以用最简单、最快捷的方式编写代码</li><li>我只需要学习一种写法</li></ul><p>我赞成前一种观点，认为这是洋葱原则（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）的一个很好的例子。</p><p>自然写法成为对概念强烈反对的焦点。我——还有其他人——坚持这种优雅的表达</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Sortable&amp;)</span></span>; <span class="hljs-comment">// 自然写法</span><br></code></pre></td></tr></table></figure><p>我们看到（过去和现在）这是有用而优雅的一步，可以使泛型编程逐渐变成一种普通的编程方式，而不是一种具有不同语法、不同源代码组织偏好（“仅头文件”）和不同编码风格（例如模板元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>））的暗黑艺术。模块解决了源代码组织问题（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）。另外，更“自然”的语法解决了人们总是抱怨的关于模板语法过于冗长和笨拙的问题，我同意这些抱怨。在设计模板时，<code>template&lt;…&gt;</code> 前缀语法不是我的首选。由于人们总是担心能力不强的程序员滥用模板而引起混淆和错误，我被迫接受了这种写法。繁重的异常处理语法（<code>try &#123; … &#125; catch ( … ) &#123; … &#125;</code>）也是类似的故事 [Stroustrup 2007]。似乎对于每个新特性，许多人都要求有<strong>醒目</strong>的语法来防止实际和想象中的潜在问题。然后过一段时间后，他们又抱怨太啰嗦了。</p><p>无论如何，有为数不少的委员会成员坚持认为自然语法会导致混乱和误用，因为人们（尤其是经验不足的程序员）不会意识到以这种方式定义的函数是模板，和其他函数并不相同。我在使用和教授概念的多年里并没有观察到这些问题，因此我并不特别担心这样的假设性问题，但反对意见仍然非常强烈。人们就是<strong>知道</strong>这样的代码很危险。主要的例子是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(C&amp;&amp;)</span></span>; <span class="hljs-comment">// 危险：C 是一个概念还是类型？</span><br></code></pre></td></tr></table></figure><p><code>C&amp;&amp;</code> 的含义因 <code>f</code> 是函数模板还是“普通的”函数而有所不同。在我看来，<code>C&amp;&amp;</code> 语义上的这种差异是 C++11 中最不幸的设计错误，我们应该尝试纠正这一错误，而不是让它影响概念的定义。毫无疑问，误解的可能性是真实存在的，并且一旦该机制被很多人使用时，肯定会发生。但是，我在现实中没有看到过这种问题，而且我怀疑经验相对丰富的程序员如果遇到这种差异真正会产生影响时，真的会遇到麻烦。换句话说，我认为这是“尾巴摇狗”的一个示例；也就是说，一个不起眼的例子阻止了一个可以使大量用户受益的特性。</p><p>我也很确定，我的目标是使泛型编程尽可能地像“普通”编程，但这不是普遍共识。仍然有人认为，泛型编程超出了绝大部分程序员的能力。但我没有看到任何证据。</p><h3 id="6-3-8-为什么在-C-17-中没有概念？"><a href="#6-3-8-为什么在-C-17-中没有概念？" class="headerlink" title="6.3.8 为什么在 C++17 中没有概念？"></a>6.3.8 为什么在 C++17 中没有概念？</h3><p>我曾希望并期望在 C++17 看到概念。在我认为在 2017 年时间窗口可行的扩展（<a href="09.md#92-%E6%88%91%E7%9A%84-c17-%E6%B8%85%E5%8D%95">§9.2</a>）中，我把概念看作是对 C++ 程序员的基本词汇的最重大改进。它可以消除很多对丑陋且易出错的模板元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）的需求，可以简化库的精确规范定义，并显著改善库的设计。恐怕这就是问题的一部分：概念会直接影响所有投票成员。有些人对旧的方式比较满意，有些人没有概念方面的经验，而有些人则认为它们是未被尝试过的（“学院派”&#x2F;“理论派”）想法。</p><p>C++0x 概念（<a href="#62-c0x-%E6%A6%82%E5%BF%B5">§6.2</a>）的惨败加剧了这种担忧，这导致我们首先有了技术规范（TS）[Sutton 2017]。我们没有语言特性方面的技术规范经验，但是这似乎值得尝试：Andrew Sutton 在 GCC 中的概念实现仍然比较新，需要谨慎评估。在（2013 年的）Bristol 标准会议上，Herb Sutter 强烈主张采用 TS 路线，而我和 J-Daniel Garcia 警告说可能会有延期。我还指出了将概念与通用 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）分开考虑的危险性，但是“谨慎”和“我们需要更多经验”在标准委员会里是很有力的理由。最终，我投票赞成了 Concepts TS。现在我把这看作是一个错误。</p><p>2013 年，我们有了一个概念的实现和一个相当不错的规范（主要感谢 Andrew Sutton），但是完成 Concepts TS 还是花了三年的时间。我无法识别出完善 TS 和纳入 ISO 标准在严格程度有什么区别。但是，在 2016 年 Jacksonville 会议上，当对 TS 中描述的概念进行投票以将其纳入标准时，先前的所有反对意见又出现了。反对者似乎只是把概念给忽略了三年。我甚至听到了只对 C++0x 中的概念设计有效、而与 TS 概念设计无关的反对意见。人们再次主张“谨慎”和“我们需要更多的经验”。据我所知，由于委员会人数增长的部分原因，在 Jacksonville 会议上还没有尝试过概念的人比在 Bristol 时更多。除了我在过去十年中听到的所有反对意见之外，有人提出了全新的反对意见，有人在全体委员会上提出了未经尝试的设计建议，还被认真考虑了。</p><p>在 2016 年 2 月的 Jacksonville 会议上，Ville Voutilainen（EWG 主席）提议按照 Concepts TS [Voutilainen 2016c] 把概念放到标准中：</p><blockquote><p>……程序员们非常渴望能使用新的语言特性，现在正是将其交付给他们的时候了。概念化标准库需要花费时间，相信在这个过程中不会发现概念设计有什么大的问题。我们不应该让程序员一直等待语言特性，只是因为一些假想中的设计问题，这些问题没有证据，甚至有一些反证，很可能根本不存在。为了使世界各地的 C++ 用户受益，让我们在 C++17 里交付概念这一语言特性吧。</p></blockquote><p>他得到了许多人的大力支持，尤其是 Gabriel Dos Reis、Alisdair Meredith（之前是 LWG 主席）和我，但是（尽管 EWG 在本周早些时候投了赞成票）投票结果依然对我们不利：25 票赞成，31 票反对，8 票弃权。我的解释是，用户投了赞成票，语言技术人员投了反对票，但这可能会被认为是酸葡萄吧。</p><p>在这次会议上，统一调用语法（<a href="08.md#883-%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">§8.8.3</a>）被否决，协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）被转为 TS，基本上确保了 C++17 只是标准的一个小版本（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）。</p><h2 id="6-4-C-20-概念"><a href="#6-4-C-20-概念" class="headerlink" title="6.4 C++20 概念"></a>6.4 C++20 概念</h2><p>在 2017 年，作为 C++20 的最早特性之一，WG21 将 Concepts TS [Sutton 2017] 中基础部分和无争议的部分通过投票进入了工作文件（<a href="#632-%E6%A6%82%E5%BF%B5%E4%BD%BF%E7%94%A8">§6.3.2</a>）：</p><ul><li>为通用起见，显式使用 <code>requires</code> 语句；例如 <code>requires Sortable&lt;S&gt;</code></li><li>简略写法，用于表示类型的类型；例如 <code>template&lt;Sortable S&gt;</code></li></ul><p>自然写法（例如 <code>void sort(Sortable&amp;);</code>（<a href="#637-%E7%AD%89%E6%95%88%E8%AF%AD%E6%B3%95">§6.3.7</a>））因有争议而被排除在外。被排除在外的原因有以下几点：</p><ul><li><code>void sort(Sortable&amp;);</code> 是一个模板，但这不很明显。</li><li><code>void f(C&amp;&amp;);</code> 的含义取决于 <code>C</code> 是概念还是类型。</li><li>在 <code>Iterator foo(Iterator,Iterator);</code> 中，三个 Iterator 必须是相同类型，还是可以分开约束的类型？</li><li>自然语法令人困惑且难以教授。</li><li>我们如何约束 <code>template&lt;auto N&gt; void f();</code> 中的参数？</li></ul><p>这些异议并不新鲜，但这次它们伴随着许多使用全新语法的提案 [Honermann 2017; Keane et al. 2017; Köppe 2017a; Riedle 2017; Sutter 2018a]。这些提案各不相同，和 Concepts TS 也不兼容。人们带着热情在会议上介绍这些提案，而其中没有一个有实际经验的支持。相比之下，我的立场是基于约四年的教学经验、很多的实验使用、一些业界应用，以及在几个标准库提案组件中的使用（如，迭代器封装 [Dawes et al. 2016]、元组实现 [Voutilainen 2016b]、范围 [Niebler et al. 2014]）。</p><p>在 Jacksonville 会议（2018）上，Tom Honerman 建议删除自然语法，并提出了另一种选择 [Honermann 2017]。我捍卫了自己的立场和 Concepts TS 的设计 [Stroustrup 2017a,b]。我的辩护主要是</p><ul><li>五年多来，自然语法在实际教学和使用中未引起任何问题。</li><li>用户喜欢它。</li><li>没有技术上的歧义。</li><li>它简化了常见用法。</li><li>这是使泛型编程更像普通编程的动力之一。</li></ul><p>但这未能说服任何反对者，因此自然语法没有移到 C++20 的工作文件中。</p><p>最后一个反对意见来自 C++17 的一个新的小特性，<code>auto</code> 值参数 [Touton and Spertus 2015]，并成为反对的焦点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">auto</span> N&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>人们想在语法上区分值模板参数和类型模板参数。通常，这意味着自 2002 年以来一直在提案里被使用的简写语法将不再有效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Concept T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp;)</span></span>; <span class="hljs-comment">// 建议被废止</span><br></code></pre></td></tr></table></figure><p>在 2018 年中，我提出了一个最小折中方案 [Stroustrup 2018b]：</p><ul><li>保留 <code>template&lt;Concept T&gt; void f(T&amp;);</code> 的含义；</li><li>使用前缀 <code>template</code> 来识别使用自然写法的模板（例如 <code>template void f(Concept&amp;)</code>）</li></ul><p>提议成功了，但是 Herb Sutter [Sutter 2018a] 提出的一个截然不同的建议也成功了 [Sutter 2018a]。我们当时处于一种非常特殊的境地，同时有两个截然不同且互不兼容的提案，每个都得到了 EWG 的大多数人的支持。这种僵局为 Ville Voutilainen（EWG 主席）提出一种变通方案打开了大门，这一方案在 2018 年 11 月得到了广泛的支持并被接受 [Voutilainen et al. 2018]：</p><ul><li>保留 <code>template&lt;Concept T&gt; void f(T&amp;);</code> 的含义</li><li>使用 <code>auto</code> 来识别使用自然写法的模板参数，例如 <code>void f(Concept auto&amp;);</code></li></ul><p>举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 几乎自然的写法：</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Sortable <span class="hljs-keyword">auto</span>&amp; x)</span></span>;  <span class="hljs-comment">// x 必须 Sortable</span><br>Integral <span class="hljs-keyword">auto</span> ch = <span class="hljs-built_in">f</span>(val);    <span class="hljs-comment">// f(val) 的结果必须为 Integral</span><br><span class="hljs-function">Integral <span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(Integral <span class="hljs-keyword">auto</span> x, Integral <span class="hljs-keyword">auto</span> x)</span></span>; <span class="hljs-comment">// 可以用一个更宽的</span><br>                                                     <span class="hljs-comment">// 类型来防止溢出</span><br></code></pre></td></tr></table></figure><p>“自然写法”已重命名为“缩写语法”，虽然它不仅仅是一个缩写。</p><p>尽管我认为在这种 <code>auto</code> 的使用有些多余，分散和损害了我想使泛型编程变成“普通编程”的目标，但我还是支持这种折中方案。也许在将来的某个时候，人们会（正如当时 Herb Sutter 所暗示的那样）达成一致，让在概念名后的 <code>auto</code> 不再必要。不过，我并没有抱太大的希望；很多人认为为技术实现而定义的语法标记很重要。或许 IDE 的自动完成功能可以使用户免于手写这多余的 <code>auto</code>。</p><p>遗憾的是，对于重新引入概念名称引导器并没有达成共识（<a href="#634-%E6%A6%82%E5%BF%B5%E5%90%8D%E7%A7%B0%E5%BC%95%E5%AF%BC%E5%99%A8">§6.3.4</a>）。缺乏足够传统的语法是一个主要的绊脚石。同样，仍然有很多人似乎不相信其有用。</p><p>延迟很多年才引入概念造成了长期的伤害。基于特征（traits）和 <code>enable_if</code> 的临时设计数量激增。一代程序员在低级的、无类型的元编程中成长起来。</p><h2 id="6-5-概念的命名"><a href="#6-5-概念的命名" class="headerlink" title="6.5 概念的命名"></a>6.5 概念的命名</h2><p>在发布 C++20 之前有关概念的最后讨论中，有一个是关于概念的命名约定。命名始终是一个棘手的话题。在我早期涉及概念的工作中，我通常以非标准的命名类型的方式来命名概念：像命名专有名词一样，将第一个字母大写，并用下划线来分隔单词，以保证可读性（例如 <code>Sortable</code> 和 <code>Forward_iterator</code>）。其他人（尤其是印第安纳团队）则使用了驼峰式命名（例如 <code>Sortable</code> 和 <code>ForwardIterator</code>）。不幸的是，这种命名约定悄悄进入了标准文本 [Carter 2018]，并由于与标准库中的所有其他名称不同而引起一些混乱。在那里，使用了下划线，不使用大写字母（除了一些宏和三个晦涩难懂的示例）。然后有人认为，不同的命名约定旨在将“新颖且困难”的概念与“常规构件”（例如函数和类型）区分开来。</p><p>当我注意到这种辩解时，我非常不喜欢。在 C++ 中，我们通常不会把类型编码到实体名称中，但我认为更改命名风格为时已晚。在 2019 年，Herb Sutter 对我的抱怨做出了回应，提议重命名所有标准库中的概念，以遵循常见的标准库命名约定 [Sutter et al. 2019]。大部分概念设计者和范围库（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）的设计者作为共同作者都签了字。进行此更改的另一个原因是，我们开始看到标准库里概念的驼峰式名称与其他库中的驼峰式名称之间存在冲突。使用驼峰式命名（或使用我的大写类型约定）的原因之一就是为了避免与标准库冲突。因此，我们现在有了 <code>sortable</code>、<code>forward_iterator</code> 等。</p><p>C++20 标准库包含大约 70 个概念，包括 <code>constructible_from</code>、<code>convertible_to</code>、<code>derived_from</code>、<code>equal_comparable</code>、<code>invocable</code>、<code>mergeable</code>、<code>range</code>、<code>regular</code>、<code>same_as</code>、<code>signed_integral</code>、<code>semiregular</code>、<code>sortable</code>、<code>swappable</code> 和 <code>totally_ordered</code>，涵盖了运算符调用、基本类型的使用、范围和标准算法的需求。它们将指导许多 C++ 库的设计。请注意，这 70 个概念中很多并不是基本概念，而只是为了方便表示或用作基本构建单元。</p>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_07/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_07/</url>
    
    <content type="html"><![CDATA[<h1 id="7-错误处理"><a href="#7-错误处理" class="headerlink" title="7. 错误处理"></a>7. 错误处理</h1><p>错误处理作为一种备受争议的话题，我认为将长期存在下去。许多人在这个问题上有强烈的固有认知，其中一些是基于各种应用领域中扎实的经验——过去 50 多年已经有了很多相关的技术积累。在错误处理领域，性能、通用性、可靠性的需求往往发生冲突。</p><p>与 C++ 一样，问题不是我们没有解决方案，而是有太多解决方案。从根本上讲，很难通过单一的机制来满足 C++ 社区的多样化需求，但是人们往往只看到问题的一部分，就以为他们掌握了解决问题的<strong>终极方案</strong> [Stroustrup 2019a]。</p><h2 id="7-1-背景"><a href="#7-1-背景" class="headerlink" title="7.1 背景"></a>7.1 背景</h2><p>C++ 从 C 语言中继承了各种基于错误返回码的机制，错误可以用特殊值、全局状态、局部状态和回调等多种方式表达。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span></span>;  <span class="hljs-comment">// 当 d 为负数时，设置 errno 为 33</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getchar</span><span class="hljs-params">()</span></span>;          <span class="hljs-comment">// 遇到文件结尾返回 -1</span><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">malloc</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;      <span class="hljs-comment">// 如果分配出错，返回 0</span><br></code></pre></td></tr></table></figure><p>C++ 的早期用户（1980 年代）发现这些技术令人困惑，也不足以解决所有问题。返回 (值,错误码) 对变得流行，但这更增加了混乱和变化。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Result r = <span class="hljs-built_in">make_window</span>(arguments); <span class="hljs-comment">// Result 是 (值,错误码) 对</span><br><span class="hljs-keyword">if</span> (r.error) &#123;<br>    <span class="hljs-comment">// ... 错误处理 ...</span><br>&#125;<br>Shape* p = r.value;<br></code></pre></td></tr></table></figure><p>繁琐的重复错误检查使代码变得混乱。使用错误码时，很难将程序的主要逻辑与错误处理区分开。程序的主线（业务逻辑）与大量奇怪和模糊的错误处理代码紧密耦合在一起。对于那些错误处理本身就是主要的复杂逻辑而言，这种基于错误返回码的处理方式可能会带来严重的问题。</p><p>使用包含 (值,错误码) 对的类会带来巨大的成本。除了检测错误码的成本外，许多 ABI（应用程序二进制接口）甚至不使用寄存器来传递小的结构体，所以 (值,错误码) 对不仅传递了更多的信息（是通常数量的两倍），而且也使传递的性能有数量级的降低。可悲的是，在许多 ABI 中，尤其那些针对嵌入式系统的 ABI（专为 C 代码设计），这个问题直到今天（2020 年）依然存在。</p><p>此外，并不存在真正的好方法可以使用错误码来处理发生在构造函数中的错误（构造函数没有返回值），还有那些过去流行的具有复杂类层次结构的系统，子对象创建中各种潜在错误也很难通过错误码的方式处理。</p><p>还有，对于所有传统的错误处理技术，最令人头疼的是人们会忘记检查错误。这一直是错误的主要根源，并且在 2020 年的今天依旧如此。C++ 异常机制的主要目标是使不完整或复杂的错误处理中的错误最小化。</p><p>C++ 异常是在 1988–89 年设计的，旨在解决当时普遍存在的复杂且容易出错的错误处理技术。它们记录在 ARM（<em>The Annotated C++ Reference Manual</em>）[Ellis and Stroustrup 1990] 中，并作为标准基础文档 [Stroustrup 1993] 的一部分被 ANSI C++ 所采用。</p><p>与其他语言的异常设计相比，用于 C++ 的异常设计由于 C++ 代码需要和其他语言（尤其是 C）的代码结合使用而变得复杂。考虑一个 C++ 函数 <code>f()</code> 调用一个 C 函数 <code>g()</code>，该函数又调用一个 C++ 函数 <code>h()</code>。现在 <code>h()</code> 抛出异常由 <code>f()</code> 捕获。通常，C++ 函数不知道被调用函数的实现语言。这样的场景使我们不能通过修改函数签名以添加“异常传播参数”，或隐式地向返回类型添加返回码的方法做错误处理。</p><p>与使用其他技术相比，异常与 RAII（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>）一起解决了许多棘手的错误处理问题（例如，如何处理构造函数中的错误以及那些远离错误处理代码的错误），而且所需的时间成本要小得多（与 1990 年代中期所用的技术相比通常不到 3％，甚至更便宜）。虽然异常从来都不是没有争议的，但我还是低估了它们引起争议的可能性。</p><h2 id="7-2-现实中的问题"><a href="#7-2-现实中的问题" class="headerlink" title="7.2 现实中的问题"></a>7.2 现实中的问题</h2><p>当然总有一些应用不适合使用异常，例如：</p><ul><li>内存严重受限系统，异常处理所需的运行期支持内存会占用应用程序功能所需要的内存。</li><li>工具链不能保证异常抛出后能够迅速做出响应的硬实时系统（例如 [Lockheed Martin Corporation 2005]）。</li><li>系统依赖于多台不可靠的计算机，因此立即崩溃并重新启动是对付那些无法在本地处理的错误的合理（且几乎是必要的）方式。</li></ul><p>因此，大多数 C++ 实现仍然保留了非异常机制的错误处理方式。另一方面，也存在一些通过错误码无法提供良好解决方案的场景：</p><ul><li><strong>构造函数失败</strong>——由于构造函数没有返回值（不算被构造对象本身），单纯依赖 RAII 的方式必须替换为通过对对象状态的显式检查来处理错误。</li><li><strong>运算符</strong>——没有办法从 <code>++</code>、<code>*</code>、<code>-&gt;</code> 中返回错误码。你将不得不使用非本地的错误指示，或使用一种糟糕的写法，如 <code>multiply(add(a,b),c)</code> 而不是 <code>(a+b)*c</code>。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：原文如此。实际上 Bjarne 的这个写法仍然是返回对象而不是错误码，因此仍需使用异常。不用异常的写法还要啰嗦得多。">[1]</span></a></sup></li><li><strong>回调</strong>——使用回调的函数应该能够调用具有多种可能错误的函数（通常，回调是 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>））。</li><li><strong>非 C++ 代码</strong>——我们无法通过那些没有专门做错误码处理的非 C++ 函数传递错误。</li><li><strong>调用链深处新的错误类型</strong>——必须准备调用链上的每个函数来处理或传播一种新的错误（例如，程序中的网络错误，而它并不是专门为通过网络访问数据而预先设计的）。</li><li><strong>忘记处理返回码</strong>——有一些精巧的方案来试图确保统一检查错误码，但是它们要么不完整，要么依赖于在遗漏检查时使用异常或程序终止（例如 [Botet and Bastien 2018]）。</li></ul><p>此外，还有一些与使用异常有关的现实问题：</p><ul><li>有些人不愿意引入异常机制，是因为他们的代码由于无原则使用指针而形成了一团乱麻。通常，这些人将他们的批评指向异常，而不是他们的陈旧代码。</li><li>有些人（很多）根本不理解甚至不知道 RAII（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>），而只是把异常当作返回错误码的一种替代机制来用。通常，把 try-catch 当作 if-then 的一种形式来用的话，代码比正确使用错误码或 RAII 要更丑陋、更繁琐、更缓慢。</li><li>异常的许多实现速度很慢，是因为实现者把 C++ 的异常与其他类型的异常（例如微软的结构异常）统一处理，优先考虑调试（例如 GCC 在 <code>throw</code> 后两次遍历堆栈来保存回溯），使用单一机制为各种语言服务（每一种都很糟糕），或者只是没有在异常处理优化上花费很多开发精力。</li><li>这些年来，异常处理的性能<strong>相对</strong>较慢，是因为我们在优化非异常方面花费了大量精力。我怀疑还有很大的优化机会。例如，Gor Nishanov 报告说，通过一些与 Windows 和 Linux 上的协程实现相关的简单优化，速度提高了多达 1000 倍 [Nishanov 2019a]。不过，大幅改善空间占用可能会更难实现。一些最近的实验看起来还比较不错 [Renwick et al. 2019]。</li><li>为了使异常被接受，我们不得不添加了异常规约 [Stroustrup 2007]。但异常规约从来没有提供支持者们所声称的更好的可维护性，而确实提供了反对者（包括我）所诟病的冗长和开销。一旦异常规约出现在语言中，许多人就觉得使用它们是受到鼓励的，并将由此产生的问题归咎于异常机制本身。具有讽刺意味的是，那些坚定支持异常规约的人转而去帮助设计 Java 了。异常规约在 2010 年被宣布废弃，并最终在 2017 年被移除（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）。作为部分替代方案，C++11 引入了 <code>noexcept</code> 作为一种更简单、更有效的控制异常的机制（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）。</li><li>通过指定要捕获的异常类型来捕获异常往往使 <code>throw</code> 和 <code>catch</code> 的实现与运行期类型识别（RTTI [Stroustrup 2007]）纠缠在一起，这导致了效率低下和复杂性。特别是，它会导致内存被消耗（被 RTTI 所需的数据消耗），即使应用程序从不依赖 RTTI 来区分异常，对于简单的场景也很难做优化。而且，依赖 RTTI 使得使用动态链接的类型匹配很难优化。基本上，异常处理实现是针对罕见的最复杂的情况进行优化的。当一个具有嵌套异常的类被添加到标准库中，人们甚至被鼓励在最简单的情况下使用它时，情况就更糟了。对于可以静态分析的类层次结构（在许多嵌入式系统中），以常量时间进行快速类型匹配是可能的 [Gibbs and Stroustrup 2006]。由于异常是平台 ABI 的一部分，这就使得要改变早期的过度设计非常之困难。</li><li>有人坚持只使用一种错误处理方法，并且通常得出这样的结论：由于异常不适用于每种情况，因此该方法必须是错误码。那些由错误码所带来的问题也就仅仅是“不方便而已”。</li><li>一些人相信那些关于异常机制的基于最坏情况和&#x2F;或不切实际的比较的低效传闻，例如在添加异常后保留错误码处理方式，将不完整的错误处理与基于异常的处理进行比较，或者使用异常来做简单的错误处理，而不是把异常用于无法在本地处理的错误。很少有关于异常及其替代方案成本的认真调查。我怀疑关于异常的虚假传说比任何事实都具有更大的影响力。</li></ul><p>最终结果是 C++ 社区分裂为异常和非异常阵营。事实上，“不要异常”是一种方言，而方言是标准要避免的事情之一（<a href="03.md#31-%E6%A0%87%E5%87%86">§3.1</a>）。对于个人组织或社区而言，方言可能有一些优势，但它使代码和技能的共享变得复杂，因此损害了整个 C++ 社区。</p><p>有人声称，异常机制的问题在于它违反了零开销原则（例如 [Sutter 2018b]）。对比通过终止应用来响应错误的处理方案，任何错误处理机制显然都是开销，也都违反了零开销原则（除非考虑到处理终止的成本，例如在另一个处理器中）。在我们设计异常时，我们考虑了这些，并认为开销是可接受的。理由是：异常情况很少见；除非抛出异常，否则没有运行期开销；并且用于实现异常的表可以保存在虚拟内存中 [Koenig and Stroustrup 1989]。在虚拟内存不可用或内存不足的情况下，使用表来实现异常可能成为一个严重问题。我们当时设计异常时主要关注的是，需要某种形式的错误传播和错误处理的系统。在这种情况下，零开销可以解释为“异常与以在同样严格程度的错误处理下的错误码使用相比没有额外开销”。</p><p>如今，错误处理的混乱比以往任何时候都严重，处理错误的替代技术比以往任何时候都多，从而造成很大的混乱和危害。假设有 N 种错误处理方式，又有人提出了一个新的解决方案，只要旧的解决方案不被抛弃，现在我们就必须应对 N+1 种方式（“N+1 问题”）。如果一个组织有 M 个程序，使用了 N 个库，我们甚至可能有 N*M 个需要处理的问题。异常的引入可以看作是将处理错误的常用方法从 7 种增加到了 8 种。2015 年，Lawrence Crowl 撰写了一份问题分析报告 [Crowl2015a] 对这个问题进行了分析。</p><p>基础库的作者对多种错误处理方案的问题感受最为深刻。他们不知道他们的用户喜欢什么，他们的用户可能有很多不同的偏好。C++17 文件系统库（<a href="08.md#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>）的作者们选择了把接口重复一遍：对于每个操作，他们提供两个函数，一个在错误的情况下抛出异常，另一个函数则通过设置标准库的 <code>error_code</code> 参数将错误码通过参数传递出来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">create_directory</span><span class="hljs-params">(<span class="hljs-type">const</span> filesystem::path&amp; p)</span></span>; <span class="hljs-comment">// 出现错误时抛异常</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">create_directory</span><span class="hljs-params">(<span class="hljs-type">const</span> filesystem::path&amp; p, error_code&amp; ec)</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><p>当然，这有点冗长，只会取悦那些仅喜欢异常或 <code>error_code</code> 的人。也要注意作者提供了 <code>bool</code> 返回值，这样人们就不必一直使用 <code>try</code> 或直接测试 <code>error_code</code> 了。事实上，文件系统（在我看来相当正确）使用异常来处理罕见的错误并不能让那些认为异常有根本缺陷的人满意，特别是，它仍要求存在异常支持。</p><h2 id="7-3-noexcept-规约"><a href="#7-3-noexcept-规约" class="headerlink" title="7.3 noexcept 规约"></a>7.3 <code>noexcept</code> 规约</h2><p>使用 <code>noexcept</code>（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>），人们可以抑制所有从函数抛出的异常，并允许调用者忽略抛出异常的可能性。</p><p>使用 <code>noexcept</code> 可以使担心性能问题（或真或假）的人们放心。它也可以通过减少控制路径的数量来改善优化效果，但前提是程序员不要通过测试返回码将这些路径添加回去。许多低级函数，例如大多数 C 函数，都不存在异常。</p><p>使用 <code>noexcept</code> 可以简化错误处理（如果一个函数不抛出异常，我们就不需要捕获任何异常），也可以使其复杂化（如果一个函数不能抛出异常，但又可能会失败，我们必须使用其他错误处理机制）。特别是，在异常抛出与其处理程序之间的路径上的 <code>noexcept</code>，会把一个异常变成程序终止运行。因此，对于一个处于维护期的程序，在函数中使用使用 <code>noexcept</code>，可能会导致先前正确的程序失败。</p><p>请注意，异常被添加到 C++ 中的一个重要原因是为了支持那些在发生错误时也决不可以无条件中止的应用。异常仅表示发生了故障，并且从 <code>main()</code> 到抛出点的路径上的任何代码都可以对其进行处理。特别是，这样可以支持一个重要场景：在终止之前进行一些本地清理（例如，刷新输出缓冲区，或向日志文件添加错误报告）。</p><h2 id="7-4-类型系统的支持"><a href="#7-4-类型系统的支持" class="headerlink" title="7.4 类型系统的支持"></a>7.4 类型系统的支持</h2><p>解决 C++ 中的逻辑和性能问题的传统方法是将计算从运行期挪到编译期。显然，将异常与静态类型系统集成的可能性在 1980 年代被认真考虑过，后来又反复被重新考虑。如果异常是函数类型的一部分，那么程序就会有更好的类型检查，函数就更能自我描述，异常处理也更容易优化。</p><p>不将异常作为类型系统的一部分的一个主要原因是，如果异常是函数类型的一部分，那么对该函数可能抛出的异常集的更改将要求所有调用该函数的函数重新编译。在一个大多数主要程序都由许多单独开发的库组成的世界里，这将导致灾难性的脆弱，及无法管理的相互依赖 [Stroustrup 1994]。</p><p>函数指针方面也有相关的明显问题。在大多数主要的 C++ 程序中都有很多 C 风格的代码，现在仍然如此。C 风格的泛型代码（例如，<code>qsort</code> 的比较函数参数）和回调（例如，在 GUI 中）的主要参数化机制均会用到函数指针。</p><p>如果我需要一个指向函数的指针，并且异常是类型系统的一部分，那么，我要么决定始终从所指向的函数中获取异常，要么不接受异常，要么以某种方式处理这两种选择。除非将对类型查询的支持或基于异常的重载添加到语言中，否则都很难两者兼顾。确定了要接受哪种类型函数指针参数后，我现在必须调整调用函数中的错误检查方式以匹配所接受的函数指针类型。即使这些可以在 C++ 语言中处理，也将影响与 C 的交互：这时如何将指向 C++ 函数的指针传递给 C？例如，如何处理从 C 中回调依赖异常的 C++ 的函数？显然，C++ 函数中的异常不会消失，因此我们将有四种选择：错误码、编译期检查的异常（例如 [Sutter 2018b]）、当前异常和 <code>noexcept</code>。只有当前的异常和非本地错误码不会影响类型系统或调用约定（ABI 接口）。幸运的是，很少有函数需要两个函数指针，否则我们将面临选择 16 种方案的风险。因此，如果接受异常类型系统（就当前的异常而言），混乱将是全方面的。</p><p>在现代 C++ 中，此类问题将以其他回调机制的不同形式继续存在，例如具有要被调用的成员函数的对象、函数对象和 lambda 表达式。</p><p>我的结论（得到 WG21 的认可）过去和现在都是，在 C++ 的静态类型系统中添加异常会导致系统脆弱、代码复杂性显著增加、严重的不兼容性以及与 C 代码交互的问题。这一点在 1989 年就得到了重视。</p><h2 id="7-5-回归基础"><a href="#7-5-回归基础" class="headerlink" title="7.5 回归基础"></a>7.5 回归基础</h2><p>从根本上讲，我认为 C++ 需要两种错误处理机制：</p><ul><li><strong>异常</strong>——罕见的错误或直接调用者无法处理的错误。</li><li><strong>错误码</strong>——错误码表示可以由直接调用者处理的错误（通常隐藏在易于使用的检测操作中或作为 (值,错误码) 对从函数返回）。</li></ul><p>考虑代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">user</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;string&gt; v&#123;<span class="hljs-string">&quot;hello!&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (string s; cin&gt;&gt;s; )<br>        v.<span class="hljs-built_in">push_back</span>(s);<br>    <span class="hljs-keyword">auto</span> ps = <span class="hljs-built_in">make_unique</span>&lt;Shape&gt;(<span class="hljs-built_in">read_shape</span>(cin));<br>    Smiley_face face&#123;Point&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<span class="hljs-number">20</span>&#125;;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子是人造的，但其编程风格并非不典型。我们可以从中看出，<code>user()</code> 函数里有很多发生不太可能的错误的可能性：内存耗尽、读取错误、构造失败（例如，在 <code>Smile_face</code> 的多层次结构中出现错误等）。另外，使用 <code>unique_ptr&lt;Shape&gt;</code> 可以防止内存泄漏。如果我们使用显式错误码而不是异常，那么这个函数中至少需要进行五次错误检查，源代码数量将翻倍，并需要在各个构造函数中进行更多检查。没有 RAII（及其与异常的集成），代码将进一步膨胀。一般来说，更多的代码意味着更多的错误。当添加的代码使控制流程复杂时，尤其如此。这一点经常被那些通过小例子论证的人所忽视。对于小例子来说，“就一项测试”关系不大，相对也很难漏掉。</p><p>另一方面，有些错误是预料得到的，我们更愿意使用某种形式的错误码来对其进行检查：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ifstream f &#123;<span class="hljs-string">&quot;Myfile&quot;</span>&#125;;<br><span class="hljs-keyword">if</span> (!f) &#123;<br>    <span class="hljs-comment">// ... 处理错误 ...</span><br>&#125;<br><span class="hljs-comment">// ... 使用 f ...</span><br></code></pre></td></tr></table></figure><p>在这里，为方便起见，错误码隐藏在输入流的状态里。</p><p>因此，在理想情况下，应该只有两种错误处理的方法，但是我真的不知道如何达到这样一种理想状态。仅仅 (值,错误码) 对就有十几种变体被广泛使用（例如 <code>std::map::insert()</code>），并且还有一些新的变体也在 2011 年的 WG21 中被讨论（如 [Botet and Bastien 2018; Sutter 2018b]）。即使委员会能就其中一个方案达成一致，也仍然会有至少十几个广泛使用的错误处理方案，每个方案都有一大群忠实的追随者支持，许多方案都有数百万行难以更动的代码。</p><p>很少有关于异常的性能和 C++ 中返回码可靠性的认真研究（[Renwick et al. 2019] 是一个例外）。但是，有许多不科学的小研究和许多大声表达的意见——常常声称异常天生就比各种形式的错误码检查慢。这与我的经验不符。就我所知，还没有任何严谨的研究发现在现实的例子中错误码能胜出“很多”，或者异常能胜出“很多”。在这一讨论场景下，“很多”表示整数倍的差异，而不是几个百分点。</p><p>运行一个简单的性能测试：进行一个 N 层深度的调用序列，然后报告错误。如果错误很少见，例如 1:1000 或 1:10000 的错误率，并且调用嵌套很深，例如 100 或 1000，则异常处理要比明确的错误码判断方式快得多。如果调用深度为 1，并且错误发生的概率为 50％，则显式判断错误码测试将大获全胜。调用深度和错误概率决定了这些测试之间的差异。我要问一个简单而潜在有用的问题：“一个错误要多罕见才被看作是异常情况”？不幸的是，答案是“这要看情况”。这取决于代码、硬件、优化器、异常处理的实现，等等等等。C++ 异常的设计假设答案至少在 1:100 的范围。换句话说，错误指示的传播要远比显式的处理更为常见。</p><p>空间占用问题可能比运行期问题更难解决。对于那些遇到不能在本地处理的错误就可以立即终止的系统，我可以想象这样一个实现，在遇到 <code>throw</code> 时立即终止程序。但是如果要传播和处理错误，那么就不可避免，需要面对选择各种困难的折中。</p><p>对于错误处理这团乱码，任何解决方案都很可能遇到 N+1 问题（<a href="04.md#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）[Stroustrup 2018a]。</p><p>奇怪的是，当初 C++ 引入异常时，人们担心的问题之一就是异常不够通用。许多人认为恢复（resumption）语义必不可少 [Stroustrup 1993]。当时我的猜测是，允许恢复将使异常处理的速度至少再降低两倍。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：原文如此。实际上 Bjarne 的这个写法仍然是返回对象而不是错误码，因此仍需使用异常。不用异常的写法还要啰嗦得多。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_05/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_05/</url>
    
    <content type="html"><![CDATA[<h1 id="5-C-14：完成-C-11"><a href="#5-C-14：完成-C-11" class="headerlink" title="5. C++14：完成 C++11"></a>5. C++14：完成 C++11</h1><p>依据大版本和小版本交替发布的计划，C++14 [du Toit 2014] 的目标是“完成 C++11”（<a href="03.md#32-%E7%BB%84%E7%BB%87">§3.2</a>）；也就是说，接受 2009 年特性冻结后的好的想法，纠正最初大规模使用 C++11 标准时发现的问题。对这个有限目标而言，C++14 是成功的。</p><p>重要的是，它表明 WG21 可以按时交付标准。反过来，这也使得实现者能够按时交付。在 2014 年年底之前，三个主要的 C++ 实现者（Clang、GCC 和微软）提供了大多数人认为完整的特性。尽管并没有完美地符合标准，但人们基本上可以对所有的特性和特性组合进行实验。要能编译“用到所有高级特性”的库，还需要延后一些时间（对微软而言要到 2018 年），但对于大多数用户而言，对标准的符合程度足以满足实际使用。标准工作和实现工作已经紧密联系在一起。这给社区带来了很大的不同。</p><p>C++14 特性集可以概括为：</p><ul><li>二进制字面量，例如 <code>0b1001000011110011</code></li><li><a href="#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>：数字分隔符——为了可读性，例如 <code>0b1001&#39;0000&#39;1111&#39;0011</code></li><li><a href="#52-%E5%8F%98%E9%87%8F%E6%A8%A1%E6%9D%BF">§5.2</a>：变量模板——参数化的常量和变量</li><li><a href="#53-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC">§5.3</a>：函数返回类型推导</li><li><a href="#54-%E6%B3%9B%E5%9E%8B-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§5.4</a>：泛型 lambda 表达式</li><li><a href="#55-constexpr-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">§5.5</a>：<code>constexpr</code> 函数中的局部变量</li><li>移动捕获——例如 <code>[p = move(ptr)] &#123;/* ... */&#125;;</code> 将值移入 lambda 表达式</li><li>按类型访问元组，例如 <code>x = get&lt;int&gt;(t);</code></li><li>标准库中的用户定义字面量，例如：<code>10i</code>，<code>&quot;Hello&quot;s</code>，<code>10s</code>，<code>3ms</code>，<code>55us</code>，<code>17ns</code></li></ul><p>这些特性中的大多数都面临着两个问题：“很好，什么使你花了这么长的时间？”以及“谁需要这个？”我的印象是，每个新特性都有着重要的需求作为动机——即使该需求不是通用的。在 <code>constexpr</code> 函数中添加局部变量和泛型 lambda 表达式大大改善了人们的代码。</p><p>重要的是，从 C++11 升级到 C++14 是相对无痛的，没有 ABI 破坏。经历过从 C++98 到 C++11 这一大而困难的升级的人感到了惊喜：他们升级可以比预想还快，花费的精力也更少。</p><h2 id="5-1-数字分隔符"><a href="#5-1-数字分隔符" class="headerlink" title="5.1 数字分隔符"></a>5.1 数字分隔符</h2><p>奇怪的是，数字分隔符引起了最激烈的争论。Lawrence Crowl 反复提出了各种选项的分析 [Crowl 2013]。包括我在内的许多人都主张使用下划线作为分隔符（和好几种其他语言一样）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">1</span>_234_567;    <span class="hljs-comment">// 1234567</span><br></code></pre></td></tr></table></figure><p>不幸的是，人们正在使用下划线作为用户定义字面量后缀的一部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">1</span>_234_567_s;  <span class="hljs-comment">// 1234567 秒</span><br></code></pre></td></tr></table></figure><p>这可能会引起歧义。例如，最后一个下划线是多余的分隔符还是后缀的开始？令我惊讶的是，这种潜在的歧义使下划线对很多人来说变得难以接受。其中一个原因是，为了免得程序员遇到意想不到的结果，库小组为标准库保留了不以下划线开头的后缀。经过长时间的讨论，包括全体委员会（约 100 人）的辩论，我们一致同意使用单引号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">1&#x27;234&#x27;567</span>;    <span class="hljs-comment">// 1234567（整数）</span><br><span class="hljs-keyword">auto</span> b = <span class="hljs-number">1&#x27;234&#x27;567</span>s;   <span class="hljs-comment">// 1234567 秒</span><br></code></pre></td></tr></table></figure><p>尽管有严厉的警告指出使用单引号会破坏无数的工具，但实际效果似乎不错。单引号由 David Vandevoorde 提出 [Crowl et al. 2013]。他指出，在一些国家，特别是在瑞士的金融写法中，单引号被当作分隔符来使用。</p><p>我的另一个建议，使用空白字符，则一直没有得到认同：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">1</span> <span class="hljs-number">234</span> <span class="hljs-number">567</span>;     <span class="hljs-comment">// 1234567</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">1</span> <span class="hljs-number">234</span> <span class="hljs-number">567</span> s;   <span class="hljs-comment">// 1234567 秒</span><br></code></pre></td></tr></table></figure><p>许多人认为这个建议是一个与在愚人节发表的老文章 [Stroustrup 1998] 有关的笑话。而实际上，它反映了一个旧规则，即相邻字符串会被连接在一起，因而 <code>&quot;abc&quot; &quot;def&quot;</code> 表示 <code>&quot;abcdef&quot;</code>。</p><h2 id="5-2-变量模板"><a href="#5-2-变量模板" class="headerlink" title="5.2 变量模板"></a>5.2 变量模板</h2><p>2012 年，Gabriel Dos Reis 提议扩展模板机制，在模板类、函数和别名 [Dos Reis 2012] 之外加入模板变量。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">constexpr</span> T pi = <span class="hljs-built_in">T</span>(<span class="hljs-number">3.1415926535897932385</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">circular_area</span><span class="hljs-params">(T r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pi&lt;T&gt; * r * r;<br>&#125;<br></code></pre></td></tr></table></figure><p>起初，我觉得这是一种平淡无奇的语言技术上的泛化，没有特别重要的意义。然而，为指定各种精度的常数而采取的变通办法由来已久，而且充斥着令人不安的变通和妥协。经过这种简单的语言泛化，代码可以大幅简化。特别是，变量模板作为定义概念的主要方式应运而生（<a href="06.md#636-%E6%94%B9%E8%BF%9B">§6.3.6</a>）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 表达式：</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">concept</span> SignedIntegral = Signed&lt;T&gt; &amp;&amp; Integral&lt;T&gt;;<br></code></pre></td></tr></table></figure><p>C++20 标准库提供了一组定义为变量模板的数学常数，最常见的情况是定义为 <code>constexpr</code> [Minkovsky and McFarlane 2019]。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">constexpr</span> T pi_v = unspecified;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> pi = pi_v&lt;<span class="hljs-type">double</span>&gt;;<br></code></pre></td></tr></table></figure><h2 id="5-3-函数返回类型推导"><a href="#5-3-函数返回类型推导" class="headerlink" title="5.3 函数返回类型推导"></a>5.3 函数返回类型推导</h2><p>C++11 引入了从 lambda 表达式的 return 语句来推导其返回类型的特性。C++14 将该特性扩展到了函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; a)</span> </span>&#123; <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>(); &#125;<br></code></pre></td></tr></table></figure><p>这种写法上的便利对于泛型代码中的小函数来说非常重要。但用户必须很小心，此类函数不能提供稳定的接口，因为它的类型现在取决于它的实现，而且在编译到使用这个函数的代码时，函数实现必须是可见的。</p><h2 id="5-4-泛型-lambda-表达式"><a href="#5-4-泛型-lambda-表达式" class="headerlink" title="5.4 泛型 lambda 表达式"></a>5.4 泛型 lambda 表达式</h2><p>lambda 表达式是函数对象（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>），因此它们显然可以是模板。有关泛型（多态）lambda 表达式的问题在 C++11 的工作中已经进行了广泛讨论，但当时被认为还没有完全准备好（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）。</p><p>2012 年，Faisal Vali、Herb Sutter 和 Dave Abrahams 提议了泛型 lambda 表达式 [Vali et al. 2012]。提议的写法只是从语法中省略了类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> get_size = [](&amp; m)&#123; <span class="hljs-keyword">return</span> m.<span class="hljs-built_in">size</span>(); &#125;;<br></code></pre></td></tr></table></figure><p>委员会中的许多人（包括我）都强烈反对，指出该语法太过特别，且不能推广到受约束的泛型 lambda 表达式中。因此，写法更改为使用 <code>auto</code> 作为标记，指明有类型需要推导：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> get_size = [](<span class="hljs-keyword">auto</span>&amp; m)&#123; <span class="hljs-keyword">return</span> m.<span class="hljs-built_in">size</span>(); &#125;;<br></code></pre></td></tr></table></figure><p>这使泛型 lambda 表达式与早在 2002 年就提出的概念提案和泛型函数建议 [Stroustrup 2003; Stroustrup and Dos Reis 2003a,b] 保持一致。</p><p>这种将 lambda 表达式语法与语言其他部分所用的语法相结合的方向与一些人的努力背道而驰，这些人希望为泛型 lambda 表达式提供一种独特（超简洁）的语法，类似于其他语言 [Vali et al. 2012]：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span># <span class="hljs-number">3</span>.<span class="hljs-number">0</span> (<span class="hljs-number">2007</span>):      x =&gt; x * x;<br><span class="hljs-attribute">Java</span> <span class="hljs-number">1</span>.<span class="hljs-number">8</span> (~<span class="hljs-number">2013</span>):   x -&gt; x * x;<br><span class="hljs-attribute">D</span> <span class="hljs-number">2</span>.<span class="hljs-number">0</span> (~<span class="hljs-number">2009</span>):      (x) &#123; return x * x; &#125;;<br></code></pre></td></tr></table></figure><p>我认为，使用 <code>auto</code> 而且没有为 lambda 表达式引入特殊的不与函数共享的写法是正确的。此外，我认为在 C++14 中引入泛型 lambda 表达式，而没有引入概念，则是个错误；这样一来，对受约束和不受约束的 lambda 表达式参数和函数参数的规则和写法就没有一起考虑。由此产生的语言技术上的不规则（最终）在 C++20 中得到了补救（<a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）。但是，我们现在有一代程序员习惯于使用不受约束的泛型 lambda 表达式并为此感到自豪，而克服这一点将花费大量时间。</p><p>从这里简短的讨论来看，似乎委员会流程对写法&#x2F;语法给予了特大号的重视。可能是这样，但是语法并非无足轻重。语法是程序员的用户界面，与语法有关的争论通常反映了语义上的分歧，或者反映了对某一特性的预期用途。写法应反映基础的语义，而语法通常偏向于对某种用法（而非其他用法）有利。例如，一个完全通用和啰嗦的写法有利于希望表达细微差别的专家，而一个为表达简单情况而优化的写法，则有利于新手和普通用户。我通常站在后者这边，并且常常赞成两者同时都提供（<a href="04.md#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>）。</p><h2 id="5-5-constexpr-函数中的局部变量"><a href="#5-5-constexpr-函数中的局部变量" class="headerlink" title="5.5 constexpr 函数中的局部变量"></a>5.5 <code>constexpr</code> 函数中的局部变量</h2><p>到 2012 年，人们不再害怕 <code>constexpr</code> 函数，并开始要求放松对其实现的限制。实际上有些人希望能够在 <code>constexpr</code> 函数中执行任何操作。但是，无论是使用者还是编译器实现者都还没有为此做好准备。</p><p>经过讨论，Richard Smith（谷歌）提出了一套相对适度的放松措施 [Smith 2013]。特别是，允许使用局部变量和 <code>for</code> 循环。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">min</span><span class="hljs-params">(std::initializer_list&lt;<span class="hljs-type">int</span>&gt; xs)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> low = std::numeric_limits&lt;<span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">max</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : xs)<br>    <span class="hljs-keyword">if</span> (x &lt; low)<br>      low = x;<br>  <span class="hljs-keyword">return</span> low;<br>&#125;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> m = <span class="hljs-built_in">min</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;);<br></code></pre></td></tr></table></figure><p>给定一个常量表达式作为参数，这个 <code>min()</code> 函数可以在编译时进行求值。本地的变量（此处为 <code>low</code> 和 <code>x</code>）仅在编译器中存在。计算不能对调用者的环境产生副作用。Gabriel Dos Reis 和 Bjarne Stroustrup 在原始的（学术）<code>constexpr</code> 论文中指出了这种可能性 [Dos Reis and Stroustrup 2010]。</p><p>这种放松简化了许多 <code>constexpr</code> 函数并使许多 C++ 程序员感到高兴。以前在编译时只能对算法的纯函数表达式进行求值，他们对此感到不满。特别是，他们希望使用循环来避免递归。就更长期来看，这释放出了要在 C++17 和 C++20（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）中进一步放松限制的需求。为了说明潜在的编译期求值的能力，我已经指出 <code>constexpr thread</code> 也是可能的，尽管我并不急于对此进行提案。</p>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_04/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_04/</url>
    
    <content type="html"><![CDATA[<h1 id="4-C-11：感觉像是门新语言"><a href="#4-C-11：感觉像是门新语言" class="headerlink" title="4. C++11：感觉像是门新语言"></a>4. C++11：感觉像是门新语言</h1><p>C++11 [Becker 2011] 发布后，其实现相对来说很快就出现了。这导致了极大的热情，增加了使用，有大量新人涌入 C++ 世界，并进行了大量的实验。C++11 的三个完整或几乎完整的实现在 2013 年面世。我当时的评论被广泛认为是准确的——<strong>C++11 感觉像是一门新的语言</strong> [Stroustrup 2014d]。为什么 C++11 在帮助程序员方面做得如此出色？又是如何做到的？</p><p>C++11 引入了大量令人眼花缭乱的语言特性，包括：</p><ul><li>内存模型——一个高效的为现代硬件设计的底层抽象，作为描述并发的基础（<a href="#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>）</li><li><code>auto</code> 和 <code>decltype</code>——避免类型名称的不必要重复（<a href="#421-auto-%E5%92%8C-decltype">§4.2.1</a>）</li><li>范围 <code>for</code>——对范围的简单顺序遍历（<a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）</li><li>移动语义和右值引用——减少数据拷贝（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>统一初始化—— 对所有类型都（几乎）完全一致的初始化语法和语义（<a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）</li><li><code>nullptr</code>——给空指针一个名字（<a href="#426-nullptr">§4.2.6</a>）</li><li><code>constexpr</code> 函数——在编译期进行求值的函数（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）</li><li>用户定义字面量——为用户自定义类型提供字面量支持（<a href="#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>）</li><li>原始字符串字面量——不需要转义字符的字面量，主要用在正则表达式中（<a href="#429-%E5%8E%9F%E5%A7%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.9</a>）</li><li>属性——将任意信息同一个名字关联（<a href="#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）</li><li>lambda 表达式——匿名函数对象（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）</li><li>变参模板——可以处理任意个任意类型的参数的模板（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）</li><li>模板别名——能够重命名模板并为新名称绑定一些模板参数（<a href="#433-%E5%88%AB%E5%90%8D">§4.3.3</a>）</li><li><code>noexcept</code>——确保函数不会抛出异常的方法（<a href="#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）</li><li><code>override</code> 和 <code>final</code>——用于管理大型类层次结构的明确语法</li><li><code>static_assert</code>——编译期断言</li><li><code>long long</code>——更长的整数类型</li><li>默认成员初始化器——给数据成员一个默认值，这个默认值可以被构造函数中的初始化所取代</li><li><code>enum class</code>——枚举值带有作用域的强类型枚举</li></ul><p>以下是主要的标准库组件列表（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）：</p><ul><li><code>unique_ptr</code> 和 <code>shared_ptr</code>——依赖 RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）的资源管理指针（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）</li><li>内存模型和 <code>atomic</code> 变量（<a href="#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>）</li><li><code>thread</code>、<code>mutex</code>、<code>condition_variable</code> 等——为基本的系统层级的并发提供了类型安全、可移植的支持（<a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）</li><li><code>future</code>、<code>promise</code> 和 <code>packaged_task</code>，等——稍稍更高级的并发（<a href="#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）</li><li><code>tuple</code>——匿名的简单复合类型（<a href="#434-tuple">§4.3.4</a>）</li><li>类型特征（type trait）——类型的可测试属性，用于元编程（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）</li><li>正则表达式匹配（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）</li><li>随机数——带有许多生成器（引擎）和多种分布（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）</li><li>时间——<code>time_point</code> 和 <code>duration</code>（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）</li><li><code>unordered_map</code> 等——哈希表</li><li><code>forward_list</code>——单向链表</li><li><code>array</code>——具有固定常量大小的数组，并且会记住自己的大小</li><li>emplace 运算——在容器内直接构建对象，避免拷贝</li><li><code>exception_ptr</code>——允许在线程之间传递异常</li></ul><p>还有很多，但这些是最重要的变化。所有这些都在 [Stroustrup 2013] 中进行了描述，许多信息可以在网上获得（例如 [Cppreference 2011–2020]）。</p><p>这些表面上互不相干的扩展怎么能组成一个连贯的整体？这怎么可能真正地改变我们写代码的方式，使之变得更好呢？C++11 确实做到了这一点。在相对较短的时间里（算 5 年吧），大量的 C++ 代码被升级到 C++11（并进一步升级到 C++14 和 C++17），而且 C++ 在会议和博客上的呈现也完全改变了。</p><p>这种在语言的“感觉”和使用风格上的巨大变化，并不是由某位大师级工匠指导的传统的精心设计过程的结果，而是海量建议经由一大批不断变化的个人层层决策过滤后的结果。</p><p>在我的 HOPL3 论文 [Stroustrup 2007] 中，我正确地描述了 C++11 语言的许多特性。值得注意的例外是“概念”，我会在（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）中进行讨论。我将不再赘述细节，而是根据它们所解决的程序员需求来描述功能的“主题”分类。我认为这种看待提案的方式是 C++11 成功的根源：</p><ul><li><a href="#41-c11%E5%B9%B6%E5%8F%91%E6%94%AF%E6%8C%81">§4.1</a>：支持并发</li><li><a href="#42-c11%E7%AE%80%E5%8C%96%E4%BD%BF%E7%94%A8">§4.2</a>：简化使用</li><li><a href="#43-c11%E6%94%B9%E8%BF%9B%E5%AF%B9%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E7%9A%84%E6%94%AF%E6%8C%81">§4.3</a>：改进对泛型编程的支持</li><li><a href="#44-c11%E6%8F%90%E9%AB%98%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8">§4.4</a>：提高静态类型安全</li><li><a href="#45-c11%E6%94%AF%E6%8C%81%E5%AF%B9%E5%BA%93%E7%9A%84%E5%BC%80%E5%8F%91">§4.5</a>：支持对库的开发</li><li><a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>：标准库组件</li></ul><p>这些“主题”并不是不相干的。事实上，我猜想 C++11 之所以成功，是因为它相互关联的功能彼此加成，形成了一张精细的网络，可以处理真正的需求。每一个主题里都有我喜欢的特性。我怀疑，我在写作（例如 [Stroustrup 1993, 1994, 2007]）和演讲中明确表述了 C++ 的目标，也帮助设计保持了合理的重点。对我来说，衡量每个新特性的一个关键指标是它是否使 C++ 更接近它的理想，例如，是否通过引入该特性能让对内建类型和用户定义类型的支持更加相似（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）。</p><p>纵观 C++11，我们可以看到有些改进建议在 2002 年左右就被提出，有不少库也出现得很早，经常是作为 Boost 的一部分 [Boost 1998–2020]。然而，直到 2013 年才有完整的 C++11 实现。在 2020 年，一些组织仍在为升级到 C++11 而苦恼，因为代码库巨大，程序员不思进取，教学方式陈旧，以及编译器严重过时（尤其是在嵌入式系统领域）。不过 C++17 的采用速度明显快于 C++98 和 C++11；并且，早在 2018 年，C++20 的一些主要特性就已经投入生产使用。</p><p>直到 2018 年，我仍能看到 C++98 前的编译器被用于教学。我认为这是对学生的虐待，剥夺了他们接触学习我们 20 多年的进展的机会。</p><p>对标准委员会、主要编译器厂商以及大多数 C++ 的积极支持者来说已是遥远的过去的东西，对许多人来说仍然是现在，甚至是未来。其结果是，人们对 C++ 到底是什么仍然感到困惑。只要 C++ 继续演化，这种困惑就会持续下去。</p><h2 id="4-1-C-11：并发支持"><a href="#4-1-C-11：并发支持" class="headerlink" title="4.1 C++11：并发支持"></a>4.1 C++11：并发支持</h2><p>C++11 必须支持并发。这既是显而易见的，也是所有主要用户和平台供应商的共同需求。C++ 一直在大多数软件工业的基础中被重度使用，而在二十一世纪的头十年，并发性变得很普遍。利用好硬件并发至关重要。和 C 一样，C++ 当然一直支持各种形式的并发，但这种支持那时没有标准化，并且一般都很底层。机器架构正在使用越来越精巧的内存架构，编译器编写者也在应用越来越激进的优化技术，这让底层软件编写者的工作极为困难。机器架构师和优化器编写者之间亟需一个协定。只有有了明确的内存模型，基础库的编写者才能有一个稳定的基础和一定程度的可移植性。</p><p>并发方面的工作从 EWG 中分离出来，成为由 Hans-J. Boehm（惠普，后加入谷歌）领导的专家成员组成的并发组。它有三项职责：</p><ul><li><a href="#411-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">§4.1.1</a>：内存模型</li><li><a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>：线程和锁</li><li><a href="#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>：期值</li></ul><p>此外，并行算法（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）、网络（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）和协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）是单独分组处理的，并且（正如预期）还没法用于 C++11。</p><h3 id="4-1-1-内存模型"><a href="#4-1-1-内存模型" class="headerlink" title="4.1.1 内存模型"></a>4.1.1 内存模型</h3><p>最紧迫的问题之一，是在一个有着多核、缓存、推测执行、指令乱序等的世界里精确地规定访问内存的规则。来自 IBM 的 Paul McKenney 在内存保证方面的课题上非常活跃。来自剑桥大学的 Mark Batty 的研究 [Batty et al. 2013, 2012, 2010, 2011] 帮助我们将这一课题形式化，见 P. McKenney、M. Batty、C. Nelson、H. Boehm、A. Williams、S. Owens、S. Sarkar、P. Sewell、T. Weber、M. Wong、L. Crowl 和 B. Kosnik 合作的论文 [McKenney et al. 2010]。它是 C++11 的一个庞大而至关重要的部分。</p><p>在 C11 中，C 采用了 C++ 的内存模型。然而，就在 C 标准付诸表决前的最后一刻，C 委员会引入了不兼容的写法，而此时 C++11 标准修改的最后一次机会已经过去。这成了 C 和 C++ 实现者和用户的痛苦。</p><p>内存模型很大程度上是由 Linux 和 Windows 内核的需求驱动的。目前它不只是用于内核，而且得到了更加广泛的使用。内存模型被广泛低估了，因为大多数程序员都看不到它。从一阶近似来看，它只是让代码按照任何人都会期望的方式正常工作而已。</p><p>最开始，我想大多数委员都小瞧了这个问题。我们知道 Java 有一个很好的内存模型 [Pugh 2004]，并曾希望采用它。令我感到好笑的是，来自英特尔和 IBM 的代表坚定地否决了这一想法，他们指出，如果在 C++ 中采用 Java 的内存模型，那么我们将使所有 Java 虚拟机的速度减慢至少两倍。因此，为了保持 Java 的性能，我们不得不为 C++ 采用一个复杂得多的模型。可以想见而且讽刺的是，C++ 此后因为有一个比 Java 更复杂的内存模型而受到批评。</p><p>基本上，C++11 模型基于<strong>先行发生（happens-before）关系</strong> [Lamport 1978]，并且既支持宽松的内存模型，也支持顺序一致 [Lamport 1979] 的模型。在这些之上，C++11 还提供了对原子类型和无锁编程的支持，并且与之集成。这些细节远远超出了本文的范围（例如，参见 [Williams 2018]）。</p><p>不出所料，并发组的内存模型讨论有时变得有点激烈。这关系到硬件制造商和编译器供应商的重大利益。最困难的决定之一是同时接受英特尔的 x86 原语（某种全存储顺序，Total Store Order（TSO）模型 [TSO Wikipedia 2020] 加上一些原子操作）和 IBM 的 PowerPC 原语（弱一致性加上内存屏障）用于最底层的同步。从逻辑上讲，只需要一套原语，但 Paul McKenney 让我相信，对于 IBM，有太多深藏在复杂算法中的代码使用了屏障，他们不可能采用类似英特尔的模型。有一天，我真的在一个大房间的两个角落之间做了穿梭外交。最后，我提出必须支持这两种方式，这就是 C++11 采用的方式。当后来人们发现内存屏障和原子操作可以一起使用，创造出比单单使用其中之一更好的解决方案时，我和其他人都感到非常高兴。</p><p>稍后，我们增加了对基于数据依赖关系的一致性支持，通过属性（<a href="#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>）在源代码中表示，比如 <code>[[carries_dependency]]</code>。</p><p>C++11 引入了 <code>atomic</code> 类型，上面的简单操作都是原子的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">atomic&lt;<span class="hljs-type">int</span>&gt; x;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    x++;  <span class="hljs-comment">// 不是 x = x + 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>显然，这些都是广泛有用的。例如，使用原子类型使出名棘手的双重检查锁定优化变得极为简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mutex mutex_x;<br>atomic&lt;<span class="hljs-type">bool</span>&gt; init_x;  <span class="hljs-comment">// 初始为 false</span><br><span class="hljs-type">int</span> x;<br><br><span class="hljs-keyword">if</span> (!init_x) &#123;<br>    <span class="hljs-function">lock_guard&lt;mutex&gt; <span class="hljs-title">lck</span><span class="hljs-params">(mutex_x)</span></span>;<br>    <span class="hljs-keyword">if</span> (!init_x) x = <span class="hljs-number">42</span>;<br>    init_x = <span class="hljs-literal">true</span> ;<br>&#125;  <span class="hljs-comment">// 在此隐式释放 mutex_x（RAII）</span><br><br><span class="hljs-comment">// ... 使用 x ...</span><br></code></pre></td></tr></table></figure><p>双重检查锁定的要点是使用相对开销低的 <code>atomic</code> 保护开销大得多的 <code>mutex</code> 的使用。</p><p><code>lock_guard</code> 是一种 RAII 类型（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>），它确保会解锁它所控制的 <code>mutex</code>。</p><p>Hans-J. Boehm 将原子类型描述为“令人惊讶地流行”，但我不能说我感到惊讶。我没 Hans 那么专业，对简化更为欣赏。C++11 还引入了用于无锁编程的关键运算，例如比较和交换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">stack</span> &#123;<br>    std::atomic&lt;node&lt;T&gt;*&gt; head;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        node&lt;T&gt;* new_node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>&lt;T&gt;(data);<br>        new_node-&gt;next = head.<span class="hljs-built_in">load</span>(std::memory_order_relaxed);<br>        <span class="hljs-keyword">while</span>(!head.<span class="hljs-built_in">compare_exchange_weak</span>(new_node-&gt;next, new_node,<br>              std::memory_order_release, std::memory_order_relaxed)) ;<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>即使有了 C++11 的支持，我仍然认为无锁编程是专家级的工作。</p><h3 id="4-1-2-线程和锁"><a href="#4-1-2-线程和锁" class="headerlink" title="4.1.2 线程和锁"></a>4.1.2 线程和锁</h3><p>在内存模型之上，我们还提供了“线程和锁”（threads and locks）的并发模型。我认为线程和锁级别的并发是应用程序使用并发最差的模型，但是对于 C++ 这样的语言来说，它仍然必不可少。不管它还是别的什么，C++ 一直是一种能够与操作系统直接交互的系统编程语言，可用于内核代码和设备驱动程序。因此，它必须支持系统最底层支持的东西。在此基础上，我们可以建立各种更适合特定应用的并发模型。就我个人而言，我特别喜欢基于消息的系统，因为它们可以消除数据竞争，而数据竞争可能产生极为隐晦的并发错误。</p><p>C++ 对线程和锁级别编程的支持是 POSIX 和 Windows 所提供的线程和锁的类型安全变体。在 [Stroustrup 2013] 有所描述，在 Anthony Williams 的书 [Williams 2012, 2018] 中有更为深入的探讨：</p><ul><li><code>thread</code>——系统的执行线程，支持 <code>join()</code> 和 <code>detach()</code></li><li><code>mutex</code>——系统的互斥锁，支持 <code>lock()</code>、<code>unlock()</code> 和保证 <code>unlock()</code> 的 RAII 方式</li><li><code>condition_variable</code>——系统中线程间进行事件通信的条件变量</li><li><code>thread_local</code>——线程本地存储</li></ul><p>与 C 版本相比，类型安全使代码更简洁，例如，不再有 <code>void**</code> 和宏。考虑一个简单的例子，让一个函数在不同的线程上执行并返回结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span> &#123;  <span class="hljs-comment">// 传统函数对象</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">F</span>(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; vv, <span class="hljs-type">double</span>* p) : v&#123;vv&#125;, res&#123;p&#125; &#123; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span></span>;        <span class="hljs-comment">// 将结果放入 *res</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; v;  <span class="hljs-comment">// 输入源</span><br>    <span class="hljs-type">double</span>* res;              <span class="hljs-comment">// 输出目标</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; v)</span></span>;  <span class="hljs-comment">// 传统函数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; v, <span class="hljs-type">double</span>* res)</span></span>; <span class="hljs-comment">// 将结果放入 *res</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">comp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">double</span>&gt;&amp; vec1, vector&lt;<span class="hljs-type">double</span>&gt;&amp; vec2, vector&lt;<span class="hljs-type">double</span>&gt;&amp; vec3)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> res1;<br>    <span class="hljs-type">double</span> res2;<br>    <span class="hljs-type">double</span> res3;<br>    <span class="hljs-comment">// ...</span><br>    thread t1 &#123;F&#123;vec1,&amp;res1&#125;&#125;;           <span class="hljs-comment">// 函数对象</span><br>    thread t2 &#123;[&amp;]()&#123;res2=<span class="hljs-built_in">f</span>(vec2);&#125;&#125;;    <span class="hljs-comment">// lambda 表达式</span><br>    thread t3 &#123;g,<span class="hljs-built_in">ref</span>(vec3),&amp;res3&#125;;       <span class="hljs-comment">// 普通函数</span><br><br>    t1.<span class="hljs-built_in">join</span>();<br>    t2.<span class="hljs-built_in">join</span>();<br>    t3.<span class="hljs-built_in">join</span>();<br><br>    cout &lt;&lt; res1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; res2 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; res3 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类型安全库支持的设计非常依赖变参模板（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。例如，<code>std::thread</code> 的构造函数就是变参模板。它可以区分不同的可执行的第一个参数，并检查它们后面是否跟有正确数量正确类型的参数。</p><p>类似地，lambda 表达式（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）使 <code>&lt;thread&gt;</code> 库的许多使用变得更加简单。例如，<code>t2</code> 的参数是访问周围局部作用域的一段代码（lambda 表达式）。</p><p>在发布标准的同时，让新特性在标准库中被接受和使用是很困难的。有人提出这样做过于激进，可能会导致长期问题。引入新的语言特性并同时使用它们无疑是有风险的，但它通过以下方式大大增加了标准的质量：</p><ul><li>给用户一个更好的标准库</li><li>给用户一个很好的使用语言特性的例子</li><li>省去了用户实现底层功能的麻烦</li><li>迫使语言特性的设计者应对现实世界的困难应用</li></ul><p>线程和锁模型需要使用某种形式的同步来避免竞争条件。C++11 为此提供了标准的 <code>mutex</code>（互斥锁）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mutex m;  <span class="hljs-comment">// 控制用的互斥锁</span><br><span class="hljs-type">int</span> sh;   <span class="hljs-comment">// 共享的数据</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">access</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unique_lock&lt;mutex&gt; lck &#123;m&#125;;   <span class="hljs-comment">// 得到互斥锁</span><br>    sh += <span class="hljs-number">7</span>;                      <span class="hljs-comment">// 操作共享数据</span><br>&#125; <span class="hljs-comment">// 隐式释放互斥锁</span><br></code></pre></td></tr></table></figure><p><code>unique_lock</code> 是一个 RAII 对象，确保用户不会忘记在这个 <code>mutex</code> 上调用 <code>unlock()</code>。</p><p>这些锁对象还提供了一种防止最常见形式的死锁的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    unique_lock&lt;mutex&gt; lck1 &#123;m1,defer_lock&#125;;  <span class="hljs-comment">// 还未得到 m1</span><br>    unique_lock&lt;mutex&gt; lck2 &#123;m2,defer_lock&#125;;<br>    unique_lock&lt;mutex&gt; lck3 &#123;m3,defer_lock&#125;;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">lock</span>(lck1,lck2,lck3);  <span class="hljs-comment">// 获取所有三个互斥锁</span><br>    <span class="hljs-comment">// ... 操作共享数据 ...</span><br>&#125;   <span class="hljs-comment">// 隐式释放所有互斥锁</span><br></code></pre></td></tr></table></figure><p>这里，<code>lock()</code> 函数“同时”获取所有 <code>mutex</code> 并隐式释放所有互斥锁（RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>））。C++17 有一个更优雅的解决方案（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>）。</p><p>线程库是由 Pete Becker（Dinkumware）在 2004 年首次为 C++0x 提出的 [Becker 2004]，它基于 Dinkumware 对 Boost.Thread [Boost 1998–2020] 所提供的接口的实现。在同一次会议上（华盛顿州 Redmond 市，2004 年 9 月）提出了第一个关于内存模型的提案 [Alexandrescu et al. 2004]，这可能不是巧合。</p><p>最大的争议是关于取消操作，即阻止线程运行完成的能力。基本上，委员会中的每个 C++ 程序员都希望以某种形式实现这一点。然而，C 委员会在给 WG21 的正式通知 [WG14 2007] 中反对线程取消，这是唯一由 WG14（ISO C 标准委员会）发给 WG21 的正式通知。我指出，“但是 C 语言没有用于系统资源管理和清理的析构函数和 RAII”。管理 POSIX 的 Austin Group 派出了代表，他们 100% 反对任何形式的这种想法，坚称取消既没有必要，也不可能安全进行。事实上 Windows 和其他操作系统提供了这种想法的变体，并且 C++ 不是 C，然而 POSIX 人员对这两点都无动于衷。在我看来，恐怕他们是在捍卫自己的业务和 C 语言的世界观，而不是试图为 C++ 提出最好的解决方案。缺乏标准的线程取消一直是一个问题。例如，在并行搜索（<a href="08.md#85-%E5%B9%B6%E8%A1%8C-stl">§8.5</a>）中，第一个找到答案的线程最好可以触发其他此类线程的取消（不管是叫取消或别的名字）。C++20 提供了停止令牌机制来支持这个用例（<a href="09.md#94-%E5%B9%B6%E5%8F%91">§9.4</a>）。</p><h3 id="4-1-3-期值（future）"><a href="#4-1-3-期值（future）" class="headerlink" title="4.1.3 期值（future）"></a>4.1.3 期值（future）</h3><p>一个类型安全的、标准的、类似 POSIX&#x2F;Windows 的线程库是对正在使用的不兼容的 C 风格库的重大改进，但这仍然是 1980 年代风格的底层编程。一些成员，特别是我，认为 C++ 迫切需要更现代、更高层次的东西。举例来说，Matt Austern（谷歌，之前代表 SGI）和我主张消息队列（“通道”）和线程池。这些意见没有什么进展，因为有反对意见说没有时间来做这些事情。我恳求并指出，如果委员会中的专家不提供这样的功能，他们最终将不得不使用“由我的学生匆匆炮制的”功能。委员会当然可以做得比这好得多。“如果你不愿意这样做，请给我一种方法，就一种方法，在没有显式同步的情况下在线程之间传递信息！”</p><p>委员会成员分为两派，一派基本上想要在类型系统上有改进的 POSIX（尤其是 P.J. Plauger），另一派指出 POSIX 基本上是 1970 年代的设计，“每个人”都已经在使用更高层次的功能。在 2007 年的 Kona 会议上，我们达成了一个妥协：C++0x（当时仍期望会是 C++09）将提供 <code>promise</code> 和 <code>future</code>，以及异步任务的启动器 <code>async()</code>，允许但不需要线程池。和大多数折中方案一样，“Kona 妥协”没有让任何人满意，还导致了一些技术问题。然而，许多用户认为它是成功的——大多数人不知道这当时是一种妥协——并且这些年来，已经出现了一些改进。</p><p>最后，C++11 提供了：</p><ul><li><code>future</code>——一个句柄，通过它你可以从一个共享的单对象缓冲区中 <code>get()</code> 一个值，可能需要等待某个 <code>promise</code> 将该值放入缓冲区。</li><li><code>promise</code>——一个句柄，通过它你可以将一个值 <code>put()</code> 到一个共享的单对象缓冲区，可能会唤醒某个等待 <code>future</code> 的 <code>thread</code>。</li><li><code>packaged_task</code>——一个类，它使得设置一个函数在线程上异步执行变得容易，由 <code>future</code> 来接受 <code>promise</code> 返回的结果。</li><li><code>async()</code>——一个函数，可以启动一个任务并在另一个 <code>thread</code> 上执行。</li></ul><p>使用这一切的最简单方法是使用 <code>async()</code>。给定一个普通函数作为参数，<code>async()</code> 在一个 <code>thread</code> 上运行它，处理线程启动和通信的所有细节：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">comp4</span><span class="hljs-params">(vector&lt;<span class="hljs-type">double</span>&gt;&amp; v)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 如果 v 足够大则会产生多个任务</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (v.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">10000</span>)    <span class="hljs-comment">// 值得用并发机制吗？</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">accum</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0.0</span>);<br>    <span class="hljs-keyword">auto</span> v0 = &amp;v[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">auto</span> sz = v.<span class="hljs-built_in">size</span>();<br><br>    <span class="hljs-keyword">auto</span> f0 = <span class="hljs-built_in">async</span>(accum,v0,v0+sz/<span class="hljs-number">4</span>,<span class="hljs-number">0.0</span>);         <span class="hljs-comment">// 第一部分</span><br>    <span class="hljs-keyword">auto</span> f1 = <span class="hljs-built_in">async</span>(accum,v0+sz/<span class="hljs-number">4</span>,v0+sz/<span class="hljs-number">2</span>,<span class="hljs-number">0.0</span>);    <span class="hljs-comment">// 第二部分</span><br>    <span class="hljs-keyword">auto</span> f2 = <span class="hljs-built_in">async</span>(accum,v0+sz/<span class="hljs-number">2</span>,v0+sz*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>,<span class="hljs-number">0.0</span>);  <span class="hljs-comment">// 第三部分</span><br>    <span class="hljs-keyword">auto</span> f3 = <span class="hljs-built_in">async</span>(accum,v0+sz*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>,v0+sz,<span class="hljs-number">0.0</span>);    <span class="hljs-comment">// 第四部分</span><br><br>    <span class="hljs-keyword">return</span> f0.<span class="hljs-built_in">get</span>()+f1.<span class="hljs-built_in">get</span>()+f2.<span class="hljs-built_in">get</span>()+f3.<span class="hljs-built_in">get</span>();    <span class="hljs-comment">// 收集结果</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>async</code> 将代码包装在 <code>packaged_task</code> 中，并管理 <code>future</code> 及其传输结果的 <code>promise</code> 的设置。</p><p>值或异常都可以通过这样一对 <code>future</code>&#x2F;<code>promise</code> 从一个 <code>thread</code> 传递到另一个 <code>thread</code>。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">X <span class="hljs-title">f</span><span class="hljs-params">(Y)</span></span>; <span class="hljs-comment">// 普通函数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ff</span><span class="hljs-params">(Y y, promise&lt;X&gt;&amp; p)</span>     <span class="hljs-comment">// 异步执行 f(y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        X res = <span class="hljs-built_in">f</span>(y);           <span class="hljs-comment">// ... 给 res 计算结果 ...</span><br>        p.<span class="hljs-built_in">set_value</span>(res);<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (...) &#123;               <span class="hljs-comment">// 哎呀：没能计算出 res</span><br>        p.<span class="hljs-built_in">set_exception</span>(<span class="hljs-built_in">current_exception</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为简单起见，我没有使用参数的完美转发（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）。</p><p>对应 <code>future</code> 的 <code>get()</code> 现在要么得到一个值，要么抛出一个异常——与 <code>f()</code> 的某个等效同步调用完全一样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">user</span><span class="hljs-params">(Y arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> pro = promise&lt;X&gt;&#123;&#125;;<br>    <span class="hljs-keyword">auto</span> fut = pro.<span class="hljs-built_in">get_future</span>();<br>    thread t &#123;ff,arg,<span class="hljs-built_in">ref</span>(pro)&#125;; <span class="hljs-comment">// 在不同线程上运行 ff</span><br>    <span class="hljs-comment">// ... 做一会别的事情 ...</span><br>    X x = fut.<span class="hljs-built_in">get</span>();<br>    cout &lt;&lt; x.x &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    t.<span class="hljs-built_in">join</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">user</span>(Y&#123;<span class="hljs-number">99</span>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>标准库的 <code>packaged_task</code> 自动化了这个过程，可以将普通函数包装成一个函数对象，负责 <code>promise</code>&#x2F;<code>future</code> 的自动配置并处理返回和异常。</p><p>我曾希望这会产生一个由线程池支持的工作窃取（work-stealing）的实现，但我还是失望了。</p><p>另见（<a href="08.md#84-%E5%B9%B6%E5%8F%91">§8.4</a>）。</p><h2 id="4-2-C-11：简化使用"><a href="#4-2-C-11：简化使用" class="headerlink" title="4.2 C++11：简化使用"></a>4.2 C++11：简化使用</h2><p>C++ 是“专家友好”的。我想我是第一个将这句话用作委婉的批评，并且在 C++ 中推行“<strong>简单的事情简单做！</strong>”的口号的人。当然，主要面向工业应用的语言就应该对专家友好，但是一门语言不能只对专家友好。大多数使用编程语言的人并不是专家——他们也不想精通该语言的方方面面，而只是想把工作做到足够好，不会因为语言而分心。编程语言的存在，是为了能够表达应用程序的创意，而不是把程序员变成语言律师。语言的设计应该尽力让简单的事情能够简单地做。语言要给专家使用的话，则必须额外确保，没有什么基本事项是做不了的，并且代价也不会过于高昂。</p><p>当讨论潜在的 C++ 语言扩展和标准库组件时，另外一个准则是“教起来容易吗？”这个问题现在已经很普遍了，它最早是由 Francis Glassborow 和我倡导的。“教起来容易”的思想起源于 C++ 的早期，可以在《C++ 语言的设计和演化》[Stroustrup 1994] 中找到。</p><p>当然，新事物的拥护者不可避免地认为他们的设计简单、易用、足够安全、高效、易于传授，及对大多数程序员有用。反对者则倾向于怀疑他们的部分甚至全部说法。但是，确保对 C++ 提议的每个特性都经历这样的讨论是很重要的：可以通过面对面会议，可以通过论文 [WG21 1989–2020]，也可以通过电子邮件。在这些讨论中，我经常指出，我大部分时间也是个新手。也就是说，当我学习新的特性、技巧或应用领域时，我是一个新手，我会用到从语言和标准库中可以获得的所有帮助。一个结果是，C++11 提供了一些特别的功能，旨在简化初学者和非语言专家对 C++ 的使用。</p><p>每一项新特性都会让一些人做某些事时更加简单。“简化使用”的主题聚焦于这样一些语言特性，它们的主要设计动机是让已知的惯用法使用起来更加简单。下面列举其中的一些：</p><ul><li><a href="#421-auto-%E5%92%8C-decltype">§4.2.1</a>：<code>auto</code>——避免类型名称的不必要重复</li><li><a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>：范围 <code>for</code>——简化范围的顺序遍历</li><li><a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>：移动语义和右值引用——减少数据拷贝</li><li><a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>：资源管理指针——管理所指向对象生命周期的“智能”指针（<code>unique_ptr</code> 和 <code>shared_ptr</code>）</li><li><a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>：统一初始化——对所有类型都（几乎）完全一致的初始化语法和语义</li><li><a href="#426-nullptr">§4.2.6</a>：<code>nullptr</code>——给空指针一个名字</li><li><a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>：<code>constexpr</code> 函数——编译期被估值的函数</li><li><a href="#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>：用户定义字面量——为用户自定义类型提供字面量支持</li><li><a href="#429-%E5%8E%9F%E5%A7%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.9</a>：原始字符串字面量——转义字符（<code>\</code>）不被解释为转义符的字面量，主要用在正则表达式中</li><li><a href="#4210-%E5%B1%9E%E6%80%A7">§4.2.10</a>：属性——将任意信息同一个名字关联</li><li><a href="#4211-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86">§4.2.11</a>：与可选的垃圾收集器之间的接口</li><li><a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>：lambda 表达式——匿名函数对象</li></ul><p>在 C++11 开始得到认真使用后，我就开始在旅行时做一些不那么科学的小调查。我会问各地的 C++ 使用者：你最喜欢哪些 C++11 的特性？排在前三位的一直都是：</p><ul><li><a href="#421-auto-%E5%92%8C-decltype">§4.2.1</a>：<code>auto</code></li><li><a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>：范围 <code>for</code></li><li><a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>：lambda 表达式</li></ul><p>这三个特性属于 C++11 中新增的最简单特性，它们并不能提供任何新的基础功能。它们做的事情，在 C++98 中也能做到，只是不那么优雅。</p><p>我认为这意味着不同水平的程序员都非常喜欢让惯常用法变简洁的写法。他们会高兴地放弃一个通用的写法，而选择一个在适用场合中更简单明确的写法。有一个常见的口号是，“一件事只应有一种说法！<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：参考 Python 在 PEP 20—The Zen of Python 中的不同态度：“应该有且仅有一种明显的完成任务的方式（There should be one—and preferably only one—obvious way to do it）。”">[1]</span></a></sup>”这样的“设计原则”根本不能反映现实世界中的用户偏好。我则倾向于依赖<strong>洋葱原则</strong> [Stroustrup 1994]。你的设计应该是这样的：如果要完成的任务是简单的，那就用简单的方法做；当要完成的任务不是那么简单时，就需要更详细、更复杂的技巧或写法。这就好比你剥下了一层洋葱。剥得越深，流泪就越多。</p><p>请注意，这里<strong>简单</strong>并不意味着<strong>底层</strong>。<code>void*</code>、宏、C 风格字符串和类型转换等底层功能表面上学起来简单，但使用它们来产出高质量、易维护的软件就难了。</p><h3 id="4-2-1-auto-和-decltype"><a href="#4-2-1-auto-和-decltype" class="headerlink" title="4.2.1 auto 和 decltype"></a>4.2.1 <code>auto</code> 和 <code>decltype</code></h3><p>C++11 中最古老的新特性，是能够在初始化的时候就给对象指定一个确定的类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> i = <span class="hljs-number">7</span>;          <span class="hljs-comment">// i 是个整数</span><br><span class="hljs-keyword">auto</span> d = <span class="hljs-number">7.2</span>;        <span class="hljs-comment">// d 是个双精度浮点数</span><br><span class="hljs-keyword">auto</span> p = v.<span class="hljs-built_in">begin</span>();  <span class="hljs-comment">// p 是 v 的迭代器类型</span><br>                     <span class="hljs-comment">// （begin() 返回一个迭代器）</span><br></code></pre></td></tr></table></figure><p><code>auto</code> 是一个方便的静态特性，它允许从初始化表达式中推导出对象的静态类型。如果要用动态类型的变量，应该使用 <code>variant</code> 或者 <code>any</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）。</p><p>我早在 1982&#x2F;83 年冬天就实现了 <code>auto</code>，但是后来为了保持 C 兼容性而不得不移除了这一特性。</p><p>在 C++11 中，大家提出用 <code>typeof</code> 运算符代替已经流行的 <code>typeof</code> 宏和编译器扩展。不幸的是，不同 <code>typeof</code> 宏在处理引用时并不兼容，因而采用任何一种都会严重破坏现有代码。引入一个新的关键字总是困难的，因为如果它简短而且意义明确，那它一定已经被使用了成千上万次。如果建议的关键字又丑又长，那大家就会讨厌它。</p><p>Jaakko Järvi，Boost 库最多产的贡献者之一，那时是我在得州农工大学的同事。他当时领导了 <code>typeof</code> 的讨论。我们意识到语义的问题可以概括为：“一个引用的 <code>typeof</code> 到底是引用自身，还是所引用的类型？”同时，我们还感觉到，<code>typeof</code> 有点冗长而且容易出错，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">typeof</span>(x+y) z = y+x;<br></code></pre></td></tr></table></figure><p>在这里，我以为我重复计算了 <code>x+y</code>，但其实并没有（潜在的不良影响），但不管怎么样，我为什么要把任何东西重复写两遍呢？这时候我意识到，我其实在 1982 年就解决过这个问题，我们可以“劫持”关键字 <code>auto</code> 来消除这种重复：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> z = y+x;  <span class="hljs-comment">// z 获得 y+x 的类型</span><br></code></pre></td></tr></table></figure><p>在 C 和早期的 C++ 中，<code>auto</code> 曾表示“在自动存储（比如栈上）上分配”，但是从来没有被用过。我们查看了数百万行的 C 和 C++ 代码，确认了 <code>auto</code> 只在一些测试集和错误中用到过，于是我们就可以回收这个关键字，用作我 1982 年的意思，表示“获取初始化表达式的类型”。</p><p>剩下的问题是，我们要在某些场景中把引用的类型也推导为一个引用。这在基于模板的基础库中并不少见。我们提出了用 <code>decltype</code> 运算符来处理这种保留引用的语义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp; r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> v = r;            <span class="hljs-comment">// v 是 T</span><br>    <span class="hljs-keyword">decltype</span>(r) r2 = r;    <span class="hljs-comment">// r2 是 T&amp;</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为什么是 <code>decltype</code>？可惜，我已经不记得是谁建议了这个名字了，但是我还记得原因：</p><ul><li><code>typeof</code> 已经不能用了，因为那样会破坏很多老代码</li><li>我们找不到其他优雅、简短、且没有被用过的名字了</li><li><code>decltype</code> 足够好记（“declared type”的简写）；但也足够古怪，因而没有在现有代码中用过</li><li><code>decltype</code> 还算比较短</li></ul><p>提议 <code>decltype</code> 的论文写于 2003 年 [Järvi et al. 2003b]，而通过投票接受到标准中的论文写于 2006 年 [Järvi et al. 2007]。Jaakko Järvi 做了让 <code>decltype</code> 通过委员会评审的大部分细节的工作，Doug Gregor、Gabriel Dos Reis、Jeremy Siek 和我也帮过忙，并且在一些论文中作为合著作者出现。事实证明，澄清 <code>decltype</code> 的确切语义比我在这里说的要难得多。花费数年在一个看上去很简单的特性细节上的情况并不少见——部分原因是特性的固有复杂性，部分原因则是，需要最后批准的人可真不少，他们需要同意每个细节的设计和具体说明都已经让人满意了。</p><p>我认为 <code>auto</code> 是个纯粹的简化特性，而 <code>decltype</code> 的主要目的，则是让基础库可以使用复杂的元编程。然而，从语言使用的技术角度来看，它们是密切相关的。</p><p>我探索过推广 <code>auto</code> 到另外两个显而易见的场景 [Stroustrup and Dos Reis 2003b]：作为返回类型和参数类型。这显而易见，因为在 C++ 中，参数传递和值返回被定义为一种初始化。但在 2003 年，当我第一次向委员会提出这些想法时，演化工作组的成员们毫不掩饰地表现出恐惧的神情。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">auto</span> arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br><br><span class="hljs-keyword">auto</span> x = <span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>);                <span class="hljs-comment">// x 是 int</span><br><span class="hljs-keyword">auto</span> s = <span class="hljs-built_in">f</span>(<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;Hello&quot;</span>));  <span class="hljs-comment">// s 是 string</span><br></code></pre></td></tr></table></figure><p>当我向委员会提出这个想法时，我收到了超过我的任何其他提案的负面反馈。我形容当时的情景“就像贵妇见到了老鼠一样”，他们叫嚷着：“咦咿……！”。然而，故事还没结束。C++17 后来对 lambda 表达式（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）的参数和返回值都支持了 <code>auto</code>，而对普通的函数，C++17 只支持返回值的 <code>auto</code>。作为概念的一部分（<a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>），C++20 为函数参数添加了 <code>auto</code> 支持，至此才完全实现了我在 2003 年提出的建议。</p><p>C++11 中添加了一种弱化的 <code>auto</code> 用法，把返回类型的说明放到参数后面。例如，在 C++98 中，我们会这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>vector&lt;T&gt;::iterator vector&lt;T&gt;::<span class="hljs-built_in">begin</span>() &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>重复出现的 <code>vector&lt;T&gt;::</code> 令人厌烦，当时也没法表达返回类型依赖于参数类型（这在一些泛型编程中很有用）。C++11 弥补了这个问题，并提高了代码的可读性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">auto</span> vector&lt;T&gt;::<span class="hljs-built_in">begin</span>() -&gt; iterator &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>这样，在多年努力后，我们终于有了 <code>auto</code>。它立即就变得非常流行，因为它让程序员不用再拼写冗长的类型名称，也不需要在泛型代码中考虑类型的细节。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p = v.<span class="hljs-built_in">begin</span>(); p != v.<span class="hljs-built_in">end</span>(); ++p) ...  <span class="hljs-comment">// 传统的 STL 循环</span><br></code></pre></td></tr></table></figure><p>它允许人们对齐名字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> -&gt; <span class="hljs-type">int</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">gpr</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span> -&gt; <span class="hljs-type">void</span></span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">char</span>* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> x2 = x*<span class="hljs-number">2</span>;   <span class="hljs-comment">// x2 是 int</span><br>    <span class="hljs-keyword">auto</span> ch = p[x];  <span class="hljs-comment">// ch 是 char</span><br>    <span class="hljs-keyword">auto</span> p2 = p+<span class="hljs-number">2</span>;   <span class="hljs-comment">// p2 是 char*</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还曾经有论文主张尽量多地使用 <code>auto</code> [Sutter 2013b]。有句话很经典：每个有用的新特性，一开始都会被滥用和误用。一段时间后，部分开发者找到了平衡点。把这种平衡的用法阐述为最佳实践，是我（和很多其他人）致力于编程指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）的原因之一。对于 <code>auto</code>，我收到了很多评论，说当人们将它和没有明显类型的初始化表达式放一起使用时可读性不好。因此，<strong>C++ 核心指南</strong> [Stroustrup and Sutter 2014–2020]（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）有了这条规则：</p><blockquote><p>ES.11：使用 <code>auto</code> 来避免类型名称的多余重复</p></blockquote><p>我的书 [Stroustrup 2013, 2014d] 中也有类似的建议。考虑下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> n = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 很好：n 是 int</span><br><span class="hljs-keyword">auto</span> x = <span class="hljs-built_in">make_unique</span>&lt;Gadget&gt;(arg);  <span class="hljs-comment">// 很好：x 是 std::unique_ptr&lt;Gadget&gt;</span><br><span class="hljs-keyword">auto</span> y = <span class="hljs-built_in">flopscomps</span>(x,<span class="hljs-number">3</span>);           <span class="hljs-comment">// 不好：flopscomps() 返回的是啥东西？</span><br></code></pre></td></tr></table></figure><p>这仍然无法百分百地确定如何在每种情况下应用该规则，但有规则总比没有规则要好得多，并且代码会比使用绝对规则“不许使用 <code>auto</code>！”和“永远使用 <code>auto</code>！”更加可读。真实世界的编程往往需要更多的技巧，不会像展示语言特性的例子这样简单。</p><p>如果 <code>flopscomps()</code> 不是泛型计算的一部分，那么最好显式地声明想要的类型。我们需要等到 C++ 20 才能用概念来约束返回类型（<a href="06.md#635-%E6%A6%82%E5%BF%B5%E5%92%8C%E7%B1%BB%E5%9E%8B">§6.3.5</a>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Channel <span class="hljs-keyword">auto</span> y = <span class="hljs-built_in">flopscomps</span>(x,<span class="hljs-number">3</span>);   <span class="hljs-comment">// y 可以当做 Channel 使用</span><br></code></pre></td></tr></table></figure><p>那么，针对 <code>auto</code> 的工作值得吗？它是一个很小的功能，对于简单的情况，一天就可以实现，但却花了 4 年的时间才在委员会通过。它甚至都不算新颖：很多语言 40 年前就有这样的功能了，甚至带类的 C 在 35 年前就有这样的功能！</p><p>对 C++ 标准委员会通过哪怕是最小的功能所需的时间，以及常伴其间的痛苦讨论，经常让我感到绝望。但是另一方面，把事情做好之后，成千上万的程序员会从中受益。当某件事做得很好时，最常见的评论是：“这很明显啊！怎么你们要花那么久？”</p><h3 id="4-2-2-范围-for"><a href="#4-2-2-范围-for" class="headerlink" title="4.2.2 范围 for"></a>4.2.2 范围 <code>for</code></h3><p>范围 <code>for</code> 是用来顺序遍历一个序列中所有元素的语句。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v, list&lt;string&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : v) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>&#125;) sum+=i; <span class="hljs-comment">// 初始化列表是一个序列</span><br>    <span class="hljs-keyword">for</span> (string&amp; s : lst) s += <span class="hljs-string">&quot;.cpp&quot;</span>; <span class="hljs-comment">// 使用引用允许遍历时修改</span><br>&#125;<br></code></pre></td></tr></table></figure><p>它最初是由 Thorsten Ottosen（丹麦奥尔堡大学）提出的，理由是“基本上任何现代编程语言都内置了某种形式的 for each” [Ottosen 2005]。我通常不认为“别人都有了”是个好的论据，但在这一情况下，真正的要点是，简单的范围循环可以简化一种最常见的操作，并提供了优化的机会。所以，范围 <code>for</code> 完美符合我对 C++ 的总体设计目标。它直接表达应该做什么，而不是详细描述如何做。它的语法简洁，语义明晰。</p><p>由于更简单和更明确，范围 <code>for</code> 的写法消除了一些“微不足道”然而常见的错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v, list&lt;string&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;imax; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; i&lt;imax; ++j) ...  <span class="hljs-comment">// 错误的嵌套循环</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=max; ++i) ...      <span class="hljs-comment">// 多循环了一次的错误</span><br>&#125;<br></code></pre></td></tr></table></figure><p>尽管范围 <code>for</code> 够简单了，它在这些年还是有些变化。Doug Gregor 曾建议使用 C++0x 中的概念来修改范围 <code>for</code>，方案优雅并且得到了批准 [Ottosen et al. 2007]。我还记得他在我在得州的办公室里写这个提案的场景，但很遗憾，后来因为删除了 C++0x 的概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>），我们不得不回退了那些修改。在 2016 年，它还做过一点小修改，以配合 Ranges TS（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）所支持的无限序列。</p><h3 id="4-2-3-移动语义"><a href="#4-2-3-移动语义" class="headerlink" title="4.2.3 移动语义"></a>4.2.3 移动语义</h3><p>在 C 和 C++ 中，要从函数获得大量的数据，传统做法是在自由存储区（堆、动态内存）上分配空间，然后传递指向该空间的指针作为函数参数。比如，对于工厂函数和返回容器（例如 <code>vector</code> 和 <code>map</code>）的函数就需要如此。这对开发者来说看起来很自然，而且相当高效。不幸的是，它是显式使用指针的主要来源之一，导致了写法上的不便、显式的内存管理，以及难以查找的错误。</p><p>多年来，很多专家使用“取巧”的办法来解决这个问题：把句柄类作为简单数值（常称为<strong>值类型</strong>）来传递，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Matrix <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Matrix&amp;, <span class="hljs-type">const</span> Matrix&amp;);<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; m1, <span class="hljs-type">const</span> Matrix&amp; m2)</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix m3 = m1+m2;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里 <code>operator+</code> 让我们可以使用常规的数学写法，同时也是一个工厂函数返回大对象的示例。</p><p>通过 <code>const</code> 引用把 <code>Matrix</code> 传递给函数，一直是传统而高效的做法。而问题在于，如何以传值来返回 <code>Matrix</code> 而不用拷贝所有的元素。早在 1982 年，我曾通过一种优化方案来部分解决这一问题，即干脆将返回值分配在调用函数的栈帧上。它工作得很好，但它只是优化技术，不能处理更复杂的返回语句。而用户在按值返回“大对象”时，需要确保绝不会进行大量的数据复制。</p><p>要做到这一点，需要观察到“大对象”通常是在自由存储区上的数据的一个句柄。为了避免复制大量的数据，我们只需要确保在实现返回时，构造函数复制的只是句柄，而不是所有元素。C++11 对这个问题的解决方案如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Matrix</span> &#123;<br>    <span class="hljs-type">double</span>* elements;    <span class="hljs-comment">// 指向所有元素的指针</span><br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Matrix</span> (Matrix&amp;&amp; a)  <span class="hljs-comment">// 移动构造</span><br>    &#123;<br>        elements = a.elements;  <span class="hljs-comment">// 复制句柄</span><br>        a.elements = <span class="hljs-literal">nullptr</span>;   <span class="hljs-comment">// 现在 a 的析构函数不用做任何事情了</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>当用于初始化或赋值的源对象马上就会被销毁时，<strong>移动</strong>就比<strong>拷贝</strong>要更好：移动操作只是简单地把对象的内部表示“窃取”过来。<code>&amp;&amp;</code> 表示构造函数是一个<strong>移动构造函数</strong>，<code>Matrix&amp;&amp;</code> 被称为<strong>右值引用</strong>。当用于模板参数时，右值引用的写法 <code>&amp;&amp;</code> 被叫做<strong>转发引用</strong>，这是由 John Spicer 在 2002 年的一次会议上，同 Dave Abrahams 和 Howard Hinnant 一起提出的。</p><p>这个 <code>Matrix</code> 的例子有个有意思的地方：如果 <code>Matrix</code> 的加法返回指针的话，那传统的数学写法（<code>a+b</code>）就不能用了。</p><p>移动语义蕴含着性能上的重大好处：它消除了代价高昂的临时变量。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Matrix mx = m1+m2+m3;  <span class="hljs-comment">// 不需要临时变量</span><br>string sx = s1+s2+s3;  <span class="hljs-comment">// 不需要临时变量</span><br></code></pre></td></tr></table></figure><p>这里我添加了 <code>string</code> 的例子，因为移动语义立刻就被添加到了所有的标准库容器上，这可以让一些 C++98 的程序拿来不做任何代码修改就获得性能提升。</p><p>允许类的设计者定义移动操作后，我们就有了完整的对对象生命周期和资源管理的控制，这套控制始于 1979 年对构造函数和析构函数的引入。移动语义是 C++ 资源管理模型的重要基石 [Stroustrup et al. 2015]，正是这套机制使得对象能够在不同作用域之间简单而高效地进行移动。</p><p>早期对参数传递、完美转发和智能指针强调颇多，可能掩盖了这个重要的一般性观点。Howard Hinnant、Dave Abrahams 和 Peter Dimov 在 2002 年提出了移动语义的一般化版本 [Hinnant et al. 2004, 2002]：</p><blockquote><p>右值引用可以用于给现有类方便地添加移动语义。意思是说，拷贝构造函数和赋值运算符可以根据实参是左值还是右值来进行重载。当实参是右值时，类的作者就知道他拥有对该实参的唯一引用。</p></blockquote><p>一个突出的例子是生成“智能指针”的工厂函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">A1</span>&gt;<br><span class="hljs-function">std::shared_ptr&lt;T&gt; <span class="hljs-title">factory</span><span class="hljs-params">(A1&amp;&amp; a1)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">shared_ptr</span>&lt;T&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">T</span>(std::forward&lt;A1&gt;(a1)));<br>&#125;<br></code></pre></td></tr></table></figure><p>现已进入标准库的函数 <code>forward</code> 告诉编译器将实参视为右值引用，因此 <code>T</code> 的移动构造函数（而不是拷贝构造函数）会被调用，来窃取该参数。它本质上就是个右值引用的类型转换。</p><p>在 C++98 中，没有右值引用，这样的“智能指针”很难实现。在 C++11 中，解决方案就简单了 [Hinnant et al. 2006]：<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：下面的代码引自 2006 年的论文，但 `operator=` 的实现不符合现代惯用法：一般要么把参数设为 `clone_ptr p`，这就成了一个可以同时适配拷贝或移动的通用赋值函数；要么在函数体内进行一次移动构造，先 `clone_ptr temp(std::move(p));` 再 `std::swap(ptr, temp.ptr);`。否则，当传递的实参是 `std::move` 的结果（xvalue）而不是真正的临时对象（prvalue）时，代码的行为会不符合预期。当然，就如下面 Bjarne 讨论到的，在 2006 年应该还没有 xvalue 和 prvalue 的概念。">[2]</span></a></sup></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">clone_ptr</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    T* ptr;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">clone_ptr</span>(clone_ptr&amp;&amp; p)            <span class="hljs-comment">// 移动构造函数</span><br>        : <span class="hljs-built_in">ptr</span>(p.ptr)    <span class="hljs-comment">// 拷贝数据的表示</span><br>    &#123;<br>        p.ptr = <span class="hljs-number">0</span>;      <span class="hljs-comment">// 把源数据的表示置空</span><br>    &#125;<br>    clone_ptr&amp; <span class="hljs-keyword">operator</span>=(clone_ptr&amp;&amp; p) <span class="hljs-comment">// 移动赋值</span><br>    &#123;<br>        std::<span class="hljs-built_in">swap</span>(ptr, p.ptr);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;   <span class="hljs-comment">// 销毁目标的旧值</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>很快，移动语义技术就被应用到了标准库的所有容器类上，像 <code>vector</code>、<code>string</code> 和 <code>map</code>。<code>shared_ptr</code> 和 <code>unique_ptr</code> 的确智能，但它们仍然是指针。我更喜欢强调移动构造和移动赋值，它们使得（以句柄表示的）大型对象在作用域间能够高效移动。</p><p>右值引用的提案在委员会中涉险过关。有人认为右值引用和移动语义多半来不及进入 C++11，因为这些概念很新，而我们那时连合适的术语都没有。部分由于术语上的问题 [Miller 2010]，<strong>右值引用</strong>这一术语在核心语言和标准库中的使用就有了分歧，从而使得标准草案中出现了不一致。在 2010 年 3 月的匹兹堡会议上，我参与了核心工作组（CWG）的讨论，在午饭休息的时间，在我看来“我们陷入了僵局，或者混乱之中，也许兼而有之”。我没有去吃午饭，而是对问题进行了分析，并得出结论，这里只涉及到两个基本概念：<strong>有标识符</strong>（identity），及<strong>可被移动</strong>。从这两个原语出发，我推导出了传统的左值和右值类别 [Barron et al. 1963]，以及解决我们的定义问题所需要的三个新类别。在核心工作组回来之后，我提出了我的解决方案。它很快就得到了接受，这样我们就在 C++11 中保留了移动语义 [Stroustrup 2010a]。</p><h3 id="4-2-4-资源管理指针"><a href="#4-2-4-资源管理指针" class="headerlink" title="4.2.4 资源管理指针"></a>4.2.4 资源管理指针</h3><p>C++11 提供了“智能指针”（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）：</p><ul><li><code>shared_ptr</code>——代表共享所有权</li><li><code>unique_ptr</code>——代表独占所有权（取代 C++98 中的 <code>auto_ptr</code>）</li></ul><p>添加这些表示所有权的资源管理“智能指针”对编程风格有很大的影响。对很多人来说，这意味着不再有资源泄漏，悬空指针的问题也显著减少。在自动化资源管理和减少裸指针使用的努力中，它们是最明显的部分了（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）。</p><p><code>shared_ptr</code> 是传统的计数指针：指向同一对象的所有指针共享一个计数器。当最后一个指向对象的共享指针被销毁时，被指向的对象也会被销毁。这是一种简单、通用且有效的垃圾收集形式。它能正确地处理非内存资源（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）。为了正确处理环形数据结构，还需要有 <code>weak_ptr</code>；不过，这往往不是最好的做法。人们常常简单地使用 <code>shared_ptr</code> 来安全地从工厂函数返回数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">shared_ptr&lt;Blob&gt; <span class="hljs-title">make_Blob</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">shared_ptr</span>&lt;Blob&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a));<br>    <span class="hljs-comment">// ... 把很多好东西填到 *p ...</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>当把对象移出函数时，引用计数会从 1 变到 2 再变回 1。在多线程程序中，这通常是涉及到同步的缓慢操作。另外，粗率地使用和&#x2F;或实现引用计数，会增加分配和回收的开销。</p><p>正如预期的那样，<code>shared_ptr</code> 很快就流行起来，并在有些地方被严重滥用。因此，后来我们提供了不引入额外开销的 <code>unique_ptr</code>。<code>unique_ptr</code> 对它所指的对象拥有独占的所有权，并会在自身被销毁的时候把指向的对象也简单地 <code>delete</code> 掉。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">unique_ptr&lt;Blob&gt; <span class="hljs-title">make_Blob</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">unique_ptr</span>&lt;Blob&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a));<br>    <span class="hljs-comment">// ... 把很多好东西填到 *p ...</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>shared_ptr</code> 和 <code>weak_ptr</code> 是 Peter Dimov 的工作成果 [Dimov et al. 2003]。Howard Hinnant 贡献的 <code>unique_ptr</code> 是对 C++98 的 <code>auto_ptr</code> 的改进 [Hinnant et al. 2002]。考虑到 <code>unique_ptr</code> 是 <code>auto_ptr</code> 的即插即用式的替代品，这提供了从标准中（最终）删除有缺陷的功能的难得机会。资源管理指针跟移动语义、完美转发及右值引用的工作密切相关（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）。</p><p>资源管理指针被广泛地用于持有对象，以便异常（及类似的情况）不会导致资源泄漏（<a href="02.md#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">old_use</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> q = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (foo) <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Bad</span>();  <span class="hljs-comment">// 会泄漏</span><br>    <span class="hljs-keyword">if</span> (bar) <span class="hljs-keyword">return</span>;       <span class="hljs-comment">// 会泄漏</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">delete</span> q;    <span class="hljs-comment">// 容易忘</span><br>&#125;<br></code></pre></td></tr></table></figure><p>显式使用 <code>new</code> 和 <code>delete</code> 的旧方式容易出错，在现代 C++ 中已经不推荐使用（例如，C++ 核心指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>））。现在我们可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">newer_use</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">unique_ptr</span>&lt;Blob&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Blob</span>(a));<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (foo) <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Bad</span>();  <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-keyword">if</span> (bar) <span class="hljs-keyword">return</span>;       <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这种写法更简短、更安全，迅速就流行开去。不过，“智能指针”仍然被过度使用：“它们的确智能，但它们仍然是指针。”除非我们确实需要指针，否则，简单地使用局部变量会更好：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">simplest_use</span><span class="hljs-params">(Args a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Blob <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (foo) <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Bad</span>(); <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-keyword">if</span> (bar) <span class="hljs-keyword">return</span>;      <span class="hljs-comment">// 不会泄漏</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>智能指针用于表示资源所有权的主要用途是面向对象编程，其中指针（或引用）用于访问对象，而对象的确切类型在编译时并不知道。</p><h3 id="4-2-5-统一初始化"><a href="#4-2-5-统一初始化" class="headerlink" title="4.2.5 统一初始化"></a>4.2.5 统一初始化</h3><p>出于历史原因，C++ 有多种初始化的写法，而它们的语义有惊人的不同。</p><p>从 C 语言中，C++ 继承了三种初始化形式，并添加了第四种形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x;              <span class="hljs-comment">// 默认初始化（仅适用于静态变量）</span><br><span class="hljs-type">int</span> x = <span class="hljs-number">7</span>;          <span class="hljs-comment">// 值初始化</span><br><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;    <span class="hljs-comment">// 聚合初始化</span><br>string s;           <span class="hljs-comment">// 由默认构造函数初始化</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;  <span class="hljs-comment">// 由构造函数初始化</span><br></code></pre></td></tr></table></figure><p>用于初始化的概念既取决于要初始化的对象的类型，也取决于初始化的上下文。这是一团乱麻，而且人们也认识到这一点。比如，为什么可以用列表初始化内建数组，但却不能初始化 <code>vector</code>？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;        <span class="hljs-comment">// 可以</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;  <span class="hljs-comment">// 应该可以工作（显然，但是没有）</span><br></code></pre></td></tr></table></figure><p>上一个例子令我非常不舒服，因为它违反了 C++ 的根本设计目标，即为内建类型和用户定义的类型提供同等的支持。特别是，因为对数组初始化有比 <code>vector</code> 更好的支持，这会鼓励人们使用容易出错的内建数组。</p><p>当 C++0x 的工作从 2002 年开始的时候，Daniel Gutson、Francis Glassborow、Alisdair Meredith、Bjarne Stroustrup 和 Gabriel Dos Reis 曾进行了许多讨论和提议，来解决其中一些问题。在 2005 年，Gabriel Dos Reis 和我提出了<strong>统一初始化</strong>的写法，该写法可用于每种类型，并且在程序中的任何地方都具有相同的含义 [Stroustrup and Dos Reis 2005b]。这种写法有望大大简化用户代码并消除许多不易察觉的错误。这一写法基于使用花括号的列表写法。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = &#123;<span class="hljs-number">5</span>&#125;;            <span class="hljs-comment">// 内建类型</span><br><span class="hljs-type">int</span> a[] &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;          <span class="hljs-comment">// 数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;  <span class="hljs-comment">// 具有构造函数的用户定义的类型</span><br></code></pre></td></tr></table></figure><p>花括号（<code>&#123;&#125;</code>）对于单个值是可选的，并且花括号初始化器列表之前的 <code>=</code> 也是可选的。为了统一起见，在许多 C++98 不允许使用花括号或者 <code>=</code> 初始化的地方都接受花括号样式的初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;)</span></span>;<br><span class="hljs-type">int</span> i = <span class="hljs-built_in">f</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;);  <span class="hljs-comment">// 函数参数</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">X</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-type">int</span> a[];<br>    <span class="hljs-built_in">X</span>() : v&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;, a&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125; &#123;&#125;  <span class="hljs-comment">// 成员初始化器</span><br>    <span class="hljs-built_in">X</span>(<span class="hljs-type">int</span>);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;* p = <span class="hljs-keyword">new</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;  <span class="hljs-comment">// new 表达式</span><br>X x &#123;&#125;;  <span class="hljs-comment">// 默认初始化</span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-type">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(T)</span></span>;<br><span class="hljs-type">int</span> z = <span class="hljs-built_in">foo</span>(X&#123;<span class="hljs-number">1</span>&#125;);  <span class="hljs-comment">// 显式构造</span><br></code></pre></td></tr></table></figure><p>其中许多的情形，例如为使用 <code>new</code> 创建的对象提供初始化器列表，使用以前的写法根本就做不到。</p><p>可惜，对于这一理想，我们仅仅达到不完全的近似，我们有的方案只能算大致统一。有些人发现，使用 <code>&#123;…&#125;</code> 很别扭，除非 <code>…</code> 是同质对象的列表，而其他人则坚持 C 语言中对聚合和非聚合的区分，并且许多人担心没有显式类型标记的列表会导致歧义和错误。例如，以下写法被认为是危险的，不过最终还是被接受了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span> &#123; string s; <span class="hljs-type">int</span> i; &#125;;<br><br><span class="hljs-function">S <span class="hljs-title">foo</span><span class="hljs-params">(S s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;string&#123;<span class="hljs-string">&quot;foo&quot;</span>&#125;,<span class="hljs-number">13</span>&#125;;<br>&#125;<br><br>S x = <span class="hljs-built_in">foo</span>(&#123;string&#123;<span class="hljs-string">&quot;alpha&quot;</span>&#125;,<span class="hljs-number">12.3</span>&#125;);<br></code></pre></td></tr></table></figure><p>在一种情况下，对统一写法的追求被一种惯用法击败。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;          <span class="hljs-comment">// 10 个元素</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v2 &#123;<span class="hljs-number">10</span>&#125;;         <span class="hljs-comment">// 10 个元素还是 1 个值为 10 的元素？</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v3 &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;  <span class="hljs-comment">// 拥有 5 个元素的 vector</span><br></code></pre></td></tr></table></figure><p>使用像 <code>vector&lt;int&gt; v1(10)</code> 的指定大小的初始化器的代码有数百万行，而从基本原则上来说，<code>vector&lt;int&gt; v2 &#123;10&#125;</code> 确实是模棱两可的。假如是在一门新的语言中，我不会使用普通的整数来表示大小，我会为此指定一种特定的类型（比如 <code>Size</code> 或 <code>Extent</code>）；举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; v1 &#123;Extent&#123;<span class="hljs-number">10</span>&#125;&#125;;  <span class="hljs-comment">// 10 个元素，默认值为 0</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v2 &#123;<span class="hljs-number">10</span>&#125;;          <span class="hljs-comment">// 1 个元素，值为 10</span><br></code></pre></td></tr></table></figure><p>但是，C++ 并不是一门新语言，因此我们决定，在构造函数中进行选择时优先选择初始化器列表解释。这使 <code>vector&lt;int&gt; v2 &#123;10&#125;</code> 成为具有一个元素的 <code>vector</code>，并且使 <code>&#123;…&#125;</code> 初始化器的解释保持一致。但是，当我们想要避免使用初始化器列表构造函数时，这就迫使我们使用 <code>(…)</code> 写法。</p><p>初始化的问题之一正在于，它无处不在，因此基本上所有程序和语言规则的问题都会在初始化上下文中体现出来。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">7.2</span>;  <span class="hljs-comment">// 传统的初始化</span><br><span class="hljs-type">int</span> y &#123;<span class="hljs-number">7.2</span>&#125;;  <span class="hljs-comment">// 花括号初始化</span><br></code></pre></td></tr></table></figure><p>从大约 1974 年将浮点数引入 C 语言以来，<code>x</code> 的值就是 <code>7</code>；也就是说，<code>7.2</code> 被隐式截断，从而导致信息丢失。这是错误的来源。花括号初始化不允许窄化转换（此处为截断）。很好，但是升级旧代码变得更加困难：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> d = <span class="hljs-number">7.2</span>;<br><span class="hljs-type">int</span> x = d;   <span class="hljs-comment">// 可以：截断</span><br><span class="hljs-type">int</span> y &#123;d&#125;;   <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p>这是一个常见问题的例子。人们想要一条简单的升级路径，但是除非需要做出一些努力和更改，否则一次非常简单的升级的结果是，旧的问题和错误得以保留。改善一门广泛使用的语言比我们一般想像的要难。</p><p>经过许多激烈的辩论和许多修改（并非其中每一项我都认为是改进），统一初始化在 2008 年被批准进入 C++0x [Stroustrup 2008b]。</p><p>与以往一样，写法是一个有争议的问题，但是最终我们同意有一个标准库类型的 <code>initializer_list</code> 用作初始化器列表构造函数的参数类型。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">vector</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">vector</span>(initializer_list&lt;T&gt;);  <span class="hljs-comment">// 初始化器列表构造函数</span><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v3 &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;  <span class="hljs-comment">// 具有 5 个元素的 vector</span><br></code></pre></td></tr></table></figure><p>令人遗憾的是，统一初始化（<code>&#123;&#125;</code> 初始化）的使用并不像我期望的那样广泛。人们似乎更喜欢熟悉的写法和熟悉的缺陷。我似乎陷入了 N+1 问题：你有 N 个不兼容和不完整的解决方案，因此添加了一个新的更好的解决方案。不幸的是，原始的 N 个解决方案并没有消失，所以你现在有了 N+1 个解决方案。公平地说，有一些细微的问题超出了本文的范围，这些问题只是在 C++14、C++17 和 C++20 中被逐步补救。我的印象是，泛型编程和对更简洁写法的普遍推动正在慢慢增加统一初始化的吸引力。所有标准库容器（如 <code>vector</code>）都有初始化器列表构造函数。</p><h3 id="4-2-6-nullptr"><a href="#4-2-6-nullptr" class="headerlink" title="4.2.6 nullptr"></a>4.2.6 <code>nullptr</code></h3><p>在 C 和 C++ 中，如果将字面量 <code>0</code> 赋值给指针或与指针比较时它表示空指针。更令人困惑的是，如果将任何求值为零的整数常量表达式赋值给指针或与指针比较时它也表示空指针。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p = <span class="hljs-number">99</span><span class="hljs-number">-55</span><span class="hljs-number">-44</span>; <span class="hljs-comment">// 空指针</span><br><span class="hljs-type">int</span>* q = <span class="hljs-number">2</span>;        <span class="hljs-comment">// 错误：2 是一个 int，而不是一个指针</span><br></code></pre></td></tr></table></figure><p>这使很多人感到烦恼和困惑，因此有一个标准库宏 <code>NULL</code>（从 C 中采用），它在标准 C++ 中定义为 <code>0</code>。某些编译器会对 <code>int* p = 0</code> 提出警告；但是我们仍然没法为函数针对指针和整数重载而避免 <code>0</code> 的歧义。</p><p>这很容易通过给空指针命名来解决，但是不知何故没有人能提出一份人们能达成一致的提议。在 2003 年的某个时候，我正通过电话参加一个会议，讨论如何给空指针命名。如 <code>NULL</code>、<code>null</code>、<code>nil</code>、<code>nullptr</code> 和 <code>0p</code> 等建议名都是备选方案。照旧，那些简短而“漂亮”的名字已经被使用了成千上万次，因此不能在不破坏数百万行代码的情况下使用。我听了数十次这样的讨论，有点厌烦了，只是在似听非听。人们说到 null pointer、null ptr、nullputter 的变体。我醒过来说：“你们都在说 <code>nullptr</code>。我想我没有在代码中看到过它。”</p><p>Herb Sutter 和我写下了该提案 [Sutter and Stroustrup 2003]，该提案在 2007 年相对容易地通过了（仅仅进行了四次小修订后），所以现在我们可以说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p0 = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span>* p1 = <span class="hljs-number">99</span><span class="hljs-number">-55</span><span class="hljs-number">-44</span>;  <span class="hljs-comment">// 可以，为了兼容性</span><br><span class="hljs-type">int</span>* p2 = <span class="hljs-literal">NULL</span>;      <span class="hljs-comment">// 可以，为了兼容性</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">char</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-type">int</span> x1 = <span class="hljs-built_in">f</span>(<span class="hljs-literal">nullptr</span>); <span class="hljs-comment">// f(char*)</span><br><span class="hljs-type">int</span> x2 = <span class="hljs-built_in">f</span>(<span class="hljs-number">0</span>);       <span class="hljs-comment">// f(int)</span><br></code></pre></td></tr></table></figure><p>我对 <code>nullptr</code> 的发音是“null pointer”。</p><p>我仍然认为如能将宏 <code>NULL</code> 定义为 <code>nullptr</code> 可以消除一类重要的问题，但委员会认为这一改变过于激进。</p><h3 id="4-2-7-constexpr-函数"><a href="#4-2-7-constexpr-函数" class="headerlink" title="4.2.7 constexpr 函数"></a>4.2.7 <code>constexpr</code> 函数</h3><p>在 2003 年，Gabriel Dos Reis 和我提出了用于在 C++ 中进行常量表达式求值的一种根本不同且明显更好的机制 [Dos Reis 2003]。人们当时使用（无类型的）宏和贫乏的 C 语言定义的常量表达式。另一些人则开始使用模板元编程来计算值（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。“这既乏味又容易出错” [Dos Reis and Stroustrup 2010]。我们的目标是</p><ul><li>让编译期计算达到类型安全</li><li>一般来说，通过将计算移至编译期来提高效率</li><li>支持嵌入式系统编程（尤其是 ROM）</li><li>直接支持元编程（而非<strong>模板</strong>元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>））</li><li>让编译期编程与“普通编程”非常相似</li></ul><p>这个想法是简单的：允许在常量表达式中使用以 <code>constexpr</code> 为前缀的函数，还允许在常量表达式中使用简单用户定义类型，叫字面量类型。字面量类型基本上就是一种所有运算都是 <code>constexpr</code> 的类型。</p><p>考虑这样一个应用，为了提高效率、支持 ROM 或可靠性，我们想使用一套单位制 [Dos Reis and Stroustrup 2010]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LengthInKM</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> <span class="hljs-title">LengthInKM</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> : val(d) &#123;</span> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> val; &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> val;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LengthInMile</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">explicit</span> <span class="hljs-title">LengthInMile</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> : val(d) &#123;</span> &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> val; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">LengthInKM</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">LengthInKM</span>(<span class="hljs-number">1.609344</span> * val); &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> val;<br>&#125;;<br></code></pre></td></tr></table></figure><p>有了这些，我们可以制作一个常量表，而不必担心单位错误或转换错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">LengthInKM marks[] = &#123; <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">2.3</span>), <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">0.76</span>) &#125;;<br></code></pre></td></tr></table></figure><p>传统的解决方案要么需要更多的运行时间，要么需要程序员在草稿纸上算好值。我对单位制的兴趣是由 1999 年的火星气候探测者号的失事激发的，事故原因是单位不匹配没有被发现 [Stephenson et al. 1999]。</p><p><code>constexpr</code> 函数可以在编译期进行求值，因此它无法访问非本地对象（它们在编译时还不存在），因此 C++ 获得了一种纯函数。</p><p>为什么我们要求程序员应该使用 <code>constexpr</code> 来标记可以在编译期执行的函数？原则上，编译器可以弄清楚在编译期可以计算出什么，但是如果没有标注，用户将受制于各种编译器的聪明程度，并且编译器需要将所有函数体“永远”保留下来，以备常量表达式在求值时要用到它们。我们选择 <code>constexpr</code> 一词是因为它足够好记，但又“足够奇怪”而不会破坏现有代码。</p><p>在某些地方，C++ 需要常量表达式（例如，数组边界和 case 标签）。另外，我们可以通过将变量声明为 <code>constexpr</code> 来要求它在编译期被初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> LengthInKM marks[] = &#123; <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">2.3</span>), <span class="hljs-built_in">LengthInMile</span>(<span class="hljs-number">0.76</span>) &#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> y1 = x;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> y2 = x;   <span class="hljs-comment">// 错误：x 不是一个常量</span><br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> y3 = <span class="hljs-number">77</span>;  <span class="hljs-comment">// 正确</span><br>&#125;<br></code></pre></td></tr></table></figure><p>早期的讨论集中在性能和嵌入式系统的简单示例上。直到后来（大约从 2015 年开始），<code>constexpr</code> 函数才成为元编程的主要支柱（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）。C++14 允许在 <code>constexpr</code> 函数中使用局部变量，从而支持了循环；在此之前，它们必须是纯函数式的。C++20（最终，在首次提出后约 10 年）允许将字面类型用作值模板参数类型 [Maurer 2012]。因此，C++20 将非常接近最初的目标（1979 年），即在可以使用内建类型的地方也都可以使用用户定义的类型（<a href="02.md#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）。</p><p><code>constexpr</code> 函数很快变得非常流行。它们遍布于 C++14、C++17 和 C++20 标准库，并且不断有相关建议，以求在 <code>constexpr</code> 函数中允许更多的语言构件、将 <code>constexpr</code> 应用于标准库中的更多函数，以及为编译期求值提供更多支持（<a href="09.md#933-%E7%BC%96%E8%AF%91%E6%9C%9F%E8%AE%A1%E7%AE%97%E6%94%AF%E6%8C%81">§9.3.3</a>）。</p><p>但是，<code>constexpr</code> 函数进入标准并不容易。它们一再被认为是无用和无法实现的。实现 <code>constexpr</code> 函数显然需要改进较老的编译器，但是很快，所有主要编译器的作者都证明了“无法实现”的说法是错误的。关于 <code>constexpr</code> 的讨论几乎是有史以来最激烈、最不愉快的。让初始版本通过标准化流程 [Dos Reis and Stroustrup 2007] 花费了四年的时间，而完整地完成又花了十二年的时间。</p><h3 id="4-2-8-用户定义字面量"><a href="#4-2-8-用户定义字面量" class="headerlink" title="4.2.8 用户定义字面量"></a>4.2.8 用户定义字面量</h3><p>“用户定义字面量”是一个非常小的功能。但是，它合乎我们的总体目标，即让用户定义类型得到和内建类型同等的支持。内建类型有字面量，例如，<code>10</code> 是整数，<code>10.9</code> 是浮点数。我试图说服人们，对于用户定义类型，显式地使用构造函数是等价的方式；举例来说，<code>complex&lt;double&gt;(1.2,3.4)</code> 就是 <code>complex</code> 的字面量等价形式。然而，许多人认为这还不够好：写法并不传统，而且不能保证构造函数在编译期被求值（尽管这还是早年间的事）。对于 <code>complex</code>，人们想要 <code>1.2+3.4i</code>。</p><p>与其他问题相比，这似乎并不重要，所以几十年来什么都没有发生。2006 年的一天，David Vandevoorde（EDG）、Mike Wong（IBM）和我在柏林的一家中餐馆吃了一顿丰盛的晚餐。我们在餐桌边聊起了天，于是一个设计浮现在一张餐巾纸上。这个讨论的起因是 IBM 的一项十进制浮点提案中对后缀的需求，该提案最终成了一个独立的国际标准 [Klarer 2007]。在大改后，该设计在 2008 年成为<strong>用户定义字面量</strong>（通常称为 UDL）[McIntosh et al. 2008]。当时让 UDL 变得有趣的重要发展是 <code>constexpr</code> 提案的进展（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）。有了它，我们可以保证编译期求值。</p><p>照例，找到一种可接受的写法是一个问题。我们决定使用晦涩的 <code>operator&quot;&quot;</code> 作为字面量运算符（literal operator）的写法是可以接受的，毕竟 <code>&quot;&quot;</code> 是一个字面量。然后，<code>&quot;&quot;x</code> 是用来表示字面量后面跟后缀 <code>x</code> 的写法。这样一来，要定义一个用于 <code>complex</code> 数的 <code>Imaginary</code> 类型，我们可以定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> Imaginary <span class="hljs-keyword">operator</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">i</span>(<span class="hljs-type">long</span> <span class="hljs-type">double</span> x) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Imaginary</span>(x); &#125;<br></code></pre></td></tr></table></figure><p>现在，<code>3.4i</code> 是一个 <code>Imaginary</code>，而 <code>1.2+3.4i</code> 是 <code>complex&lt;double&gt;(1.2,3.4)</code>。任务完成！</p><p>这一功能的语言技术细节相当古怪，但我认为对于一个相对很少使用的特性来说，这是合理的。即使在大量使用 UDL 时，字面量运算符的定义也很少。最重要的是后缀的优雅和易用性。对于许多类型，重要的是可以在编译时完成从内建类型到用户定义类型的转换。</p><p>很自然，人们使用 UDL 来定义许多有用的类型的字面量，有些来自标准库（例如，<code>s</code> 代表 秒，<code>s</code> 代表 <code>std::string</code>）。关于支持二进制字面量的讨论，Peter Sommerlad（HSR）提出了我认为的“最佳滥用规则”奖的候选方案：适当地定义 <code>operator&quot;&quot;_01(long int)</code>，于是 <code>101010_01</code> 就成了个二进制字面量！当惊讶和笑声平息下来后，委员会决定在语言本身里定义二进制字面量并使用 <code>0b</code> 作为前缀，表示“binary”（例如 <code>0b101010</code>），类似于使用 <code>0x</code> 表示“hexadecimal”（例如 <code>0xDEADBEEF</code>）。</p><h3 id="4-2-9-原始字符串字面量"><a href="#4-2-9-原始字符串字面量" class="headerlink" title="4.2.9 原始字符串字面量"></a>4.2.9 原始字符串字面量</h3><p>这是一个罕见的简单特性，它的唯一目的是为容易出错的写法提供一种替代方法。和 C 一样，C++ 使用反斜杠作为转义字符。这意味着要在字符串字面量中表示反斜杠，你需要使用双反斜杠（<code>\\</code>），当你想在字符串中使用双引号时，你需要使用 <code>\&quot;</code>。然而，通常的正则表达式模式广泛使用反斜杠和双引号，所以模式很快变得混乱和容易出错。考虑一个简单的例子（美国邮政编码）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">regex pattern1 &#123;<span class="hljs-string">&quot;\\w&#123;2&#125;\\s*\\d&#123;5&#125;(-\\d&#123;4&#125;)?&quot;</span>&#125;; <span class="hljs-comment">// 普通字符串字面量</span><br><br>regex pattern2 &#123;<span class="hljs-string">R&quot;(\w&#123;2&#125;\s*\d&#123;5&#125;(-\d&#123;4&#125;)?)&quot;</span>&#125;;  <span class="hljs-comment">// 原始字符串字面量</span><br></code></pre></td></tr></table></figure><p>这两种模式是相同的。<strong>原始字符串字面量</strong> <code>R&quot;(…)&quot;</code> 的括号可以精调以容纳更复杂的模式，但是当你使用正则表达式（<a href="#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）时，最简单的版本就足够了，而且非常方便。当然，提供原始字符串字面量是一个小细节，但是（类似于数字分隔符（<a href="05.md#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>））深受需要大量使用字面量的人们的喜爱。</p><p>原始字符串字面量是 Beman Dawes 在 2006 年 [Dawes 2006] 基于使用 Boost.Regex [Maddock 2002] 的经验而提出来的。</p><h3 id="4-2-10-属性"><a href="#4-2-10-属性" class="headerlink" title="4.2.10 属性"></a>4.2.10 属性</h3><p>在程序中，属性提供了一种将本质上任意的信息与程序中的实体相关联的方法。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[[noreturn]] <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">forever</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-built_in">do_work</span>();<br>        <span class="hljs-built_in">wait</span>(<span class="hljs-number">10</span>s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性 <code>[[noreturn]]</code> 通知编译器或其他工具 <code>forever()</code> 永远不会返回，这样它就可以抑制关于缺少返回的警告。属性用 <code>[[…]]</code> 括起来。</p><p>属性最早是在 2007 年由库工作组的负责人 Alisdair Meredith [Meredith 2007] 提出来的，目的是消除专有属性写法（例如 <code>__declspec</code> 和 <code>__attribute__</code>）之间的不兼容性，这种不兼容性会使库实现更加复杂。对此，Jens Maurer 和 Michael Wong 对问题进行了分析，并提出了 <code>[[…]]</code> 语法，方案是基于 Michael 为 IBM 的 XL 编译器所做的实现 [Maurer and Wong 2007]。除了对大量不可移植的实践进行标准化之外，这还将允许用更少的关键字来完成语言扩展，而新的关键字总是有争议的。</p><p>该提案提到了可能的使用：覆盖虚函数的明确语法，动态库，用户控制的垃圾收集，线程本地存储，控制对齐，标识“简旧数据”（POD）类，default 和 delete 的函数，强类型枚举，强类型 typedef，无副作用的纯函数，final 覆盖，密封类，对并发性的细粒度控制，运行期反射支持，及轻量级契约编程主持。在早期的讨论中还提到了更多。</p><p>“属性”当然是一个使某些事情变得更简单的特性，但我不确定它是否鼓励了良好的设计，或者它简化的“事情”总是能产生最大的好处。我可以想象属性打开了闸门，放进来一大堆不相关的、不太为人们了解的、次要的特性。任何人都可以为编译器添加一个属性，并游说各处采用它，而不是向 WG21 提出一个特性。许多程序员就是喜欢这些小特性。它不需要引入关键字和修改语法，这可以降低门槛，但也更容易不可避免地导致对特性交互关注度不够，造成重叠而不兼容的类似特性出现在不同的编译器中。这种情况在私有扩展中已经发生过了，但我认为私有扩展是不可避免的、局部的，而且往往是暂时的。</p><p>为了限制潜在的损害，我们决定属性应该意味着不改变程序的语义。也就是说，忽略属性，编译器不会有任何危害。多年来，这条“规则”几乎奏效。大多数标准属性——尽管不是全部——没有语义效果，即使它们有助于优化和错误检测。</p><p>最后，大多数最初那些建议的对属性的使用都通过普通的语法和语言规则来解决。</p><p>C++11 增加了标准属性 <code>[[noreturn]]</code> 和 <code>[[carries_dependency]]</code>。</p><p>C++17 增加了 <code>[[fallthrough]]</code>、<code>[[nodiscard]]</code> 和 <code>[[maybe_unused]]</code>。</p><p>C++20 增加了 <code>[[likely]]</code>、<code>[[unlikely]]</code>、<code>[[deprecated(message)]]</code>、<code>[[no_unique_address]]</code> 和 <code>[[using: …]]</code>。</p><p>我仍然看到属性扩散是一个潜在的风险，但到目前为止，水闸还没有打开。C++ 标准库大量使用了属性；<code>[[nodiscard]]</code> 属性尤其受欢迎，特别用来防止由于没有使用本身是资源句柄的返回值而造成的潜在资源泄漏。</p><p>属性语法被用于（失败的）C++20 契约设计（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）。</p><h3 id="4-2-11-垃圾收集"><a href="#4-2-11-垃圾收集" class="headerlink" title="4.2.11 垃圾收集"></a>4.2.11 垃圾收集</h3><p>从 C++ 的早期开始，人们就考虑<strong>可选</strong>的垃圾收集（对于“可选”有各种定义）[Stroustrup 1993, 2007]。经过一番争论，C++11 为 Mike Spertus 和 Hans-J. Boehm 设计的保守垃圾收集器提供了一个接口 [Boehm and Spertus 2005; Boehm et al. 2008]。然而，很少有人留意到这一点，更少有人使用了垃圾收集（尽管有好的收集器可用）。设计的方法是 [Boehm et al. 2008]：</p><blockquote><p>同时支持垃圾收集实现和基于可达性的泄漏检测器。这是通过把“隐藏指针”的程序定为未定义行为来实现的；举例来说，将指针与另一个值进行异或运算，然后将它转换回普通指针并对其进行解引用就是一种隐藏行为。</p></blockquote><p>这项工作造福了 C++ 语义的精确规范，并且 C++ 中也存在一些对垃圾收集的使用（例如，在 Macaulay2 中 [Eisenbud et al. 2001; Macaulay2 2005–2020]）。然而，垃圾收集器不处理非内存资源，而 C++ 社区通常选择使用资源管理指针（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）和 RAII（<a href="02.md#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）二者的组合。</p><h2 id="4-3-C-11：改进对泛型编程的支持"><a href="#4-3-C-11：改进对泛型编程的支持" class="headerlink" title="4.3 C++11：改进对泛型编程的支持"></a>4.3 C++11：改进对泛型编程的支持</h2><p>泛型编程（及其产物模板元编程（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>））在 C++ 98 中迅速轻松地获得了成功。它的使用对语言造成了严重的压力，而不充分的语言支持导致了巴洛克式矫揉造作的编程技巧和可怕的错误消息。这证明了泛型编程和元编程的实用性，许多明智的程序员为了获得其好处而甘愿承受其痛苦。这些好处是</p><ul><li>超越以 C 风格或面向对象风格所可能获得的灵活性</li><li>更清晰的代码</li><li>更细的静态类型检查粒度</li><li>效率（主要来自内联、让编译器同时查看多处的源代码，以及更好的类型检查）</li></ul><p>C++11 中支持泛型编程的主要新特性有：</p><ul><li><a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>：lambda 表达式</li><li><a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>：变参模板</li><li><a href="#433-%E5%88%AB%E5%90%8D">§4.3.3</a>：<code>template</code> 别名</li><li><a href="#434-tuple">§4.3.4</a>：<code>tuple</code></li><li><a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>：统一初始化</li></ul><p>在 C++11 中，概念本应是改进支持泛型编程的核心，但这并没有发生（<a href="06.md#626-%E5%93%AA%E9%87%8C%E5%87%BA%E9%94%99%E4%BA%86">§6.2.6</a>）。我们不得不等到 C++20（<a href="06.md#64-c20-%E6%A6%82%E5%BF%B5">§6.4</a>）。</p><h3 id="4-3-1-lambda-表达式"><a href="#4-3-1-lambda-表达式" class="headerlink" title="4.3.1 lambda 表达式"></a>4.3.1 lambda 表达式</h3><p>BCPL 允许将代码块作为表达式，但是为了节省编译器中的空间，Dennis Ritchie 没有在 C 中采用这个特性。我在这点上遵循了 C 的做法，但是添加了 <code>inline</code> 函数，从而（重新）得到在没有函数调用的开销下执行代码的能力。不过，这仍然不能提供以下能力</p><ul><li>把代码写在需要它的那个准确位置上（通常作为函数参数）。</li><li>从代码内部访问代码的上下文。</li></ul><p>在 C++98 的开发过程中，曾有人提议使用局部函数来解决第二点，但被投票否决了，因为这可能成为缺陷的来源。</p><p>C++ 不允许在函数内部定义函数，而是依赖于在类内部定义的函数。这使得函数的上下文可以表示为类成员，因而函数对象变得非常流行。<strong>函数对象</strong>只是一个带有调用运算符（<code>operator()()</code>）的类。这曾是一种非常高效和有效的技术，我（和其他人）认为有名字的对象比未命名的操作更清晰。然而，只有当我们可以在某样东西使用的上下文之外给它一个合理的名称，特别是如果它会被使用多次时，这种清晰度上的优势才会表现出来。</p><p>2002 年，Jaakko Järvi 和 Gary Powell 编写了 Boost.Lambda 库 [Järvi and Powell 2002] 这让我们可以写出这样的东西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), _1&lt;i);  <span class="hljs-comment">// 查找值小于 i 的元素</span><br></code></pre></td></tr></table></figure><p>这里，<code>_1</code> 是代码片段 <code>_1&lt;i</code> 的某个第一个实参的名称，而 <code>i</code> 是表达式所在作用域（enclosing scope）中的一个变量。<code>_1&lt;i</code> 展开为一个函数对象，其中 <code>i</code> 被绑定到一个引用，<code>_1</code> 成为 <code>operator()()</code> 的实参：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Less_than</span> &#123;<br>    <span class="hljs-type">int</span>&amp; i;<br>    <span class="hljs-built_in">Less_than</span>(<span class="hljs-type">int</span>&amp; ii) :<span class="hljs-built_in">i</span>(ii) &#123;&#125;  <span class="hljs-comment">// 绑定到 i</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x&lt;i; &#125;  <span class="hljs-comment">// 跟参数比较</span><br>&#125;<br></code></pre></td></tr></table></figure><p>lambda 表达式库是早期模板元编程的典范（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>），非常方便和流行。不幸的是，它的效率并不特别高。多年来，我追踪了它相对于手工编码的同等实现的性能，发现它的开销是后者的 2.5 倍且这种差距相当一致。我不能推荐一种方便但却很慢的东西。这样做会损害 C++ 作为产生高效代码的语言的声誉。显然，这种慢在一定程度上是由于优化不当造成的，但出于这个和其他原因，我们有一群人在 Jaakko Järvi 领导下决定将 lambda 表达式作为一种语言特性 [Willcock et al. 2006] 来提出。举例来说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> Oper&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(Oper op)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> xx = <span class="hljs-built_in">op</span>(<span class="hljs-number">7</span>);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">g</span>(&lt;&gt;(<span class="hljs-type">int</span> x) -&gt; <span class="hljs-type">int</span> &#123;<span class="hljs-keyword">return</span> x + y;&#125;);  <span class="hljs-comment">// 以 lambda 表达式作为参数调用 g()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里，<code>xx</code> 会变成 <code>3+7</code>。</p><p><code>&lt;&gt;</code> 是 lambda 表达式引导器。我们不敢提出一个新的关键词。</p><p>这一提议引起了相当多的兴奋和许多热烈的讨论：</p><ul><li>语法应该是富有表现力的还是简洁的？</li><li>lambda 表达式可以从哪个作用域引用什么名字？[Crowl 2009]。</li><li>从 lambda 表达式生成的函数对象应该是可变的吗？默认情况下不是。</li><li>lambda 表达式能是多态的吗？到 C++14 才可以（<a href="05.md#54-%E6%B3%9B%E5%9E%8B-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§5.4</a>）。</li><li>lambda 表达式的类型是什么？独有的类型，除非它基本上是一个局部函数。</li><li>lambda 表达式可以有名字吗？不可以。如果你需要一个名字，就把它赋给一个变量。</li><li>名称是由值绑定还是由引用绑定？你来选择。</li><li>变量可以移动到 lambda 表达式中（相对于复制）吗？到 C++14 才可以（<a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>）。</li><li>语法是否会与各种非标准扩展发生冲突？（不严重）。</li></ul><p>到 2009 年 lambda 表达式被批准时，语法已经发生了变化，变得更加合乎惯例 [Vandevoorde 2009]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">abssort</span><span class="hljs-params">(<span class="hljs-type">float</span>* x, <span class="hljs-type">unsigned</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::<span class="hljs-built_in">sort</span>(x, x+N,<br>        [](<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b) &#123; <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">abs</span>(a) &lt; std::<span class="hljs-built_in">abs</span>(b); &#125;<br>             );<br>&#125;<br></code></pre></td></tr></table></figure><p>从 <code>&lt;&gt;</code> 切换到 <code>[]</code> 是由 Herb Sutter 建议并由 Jonathan Caves 实现的。这种变化在一定程度上是由于需要一种简单的方法来指定 lambda 表达式可以使用周围作用域中的哪些名称。Herb Sutter 回忆道：</p><blockquote><p>我的并行算法项目需要 lambda 表达式，这是我的动机……看到 EWG 所采用的 lambda 表达式那实在丑到爆的用法，以及从语法一致性&#x2F;干净性的角度来看极为糟糕的设计（例如，捕获出现在两个分开的位置，语法元素使用不一致，顺序错误——因为“构造函数”元素应该先出现然后才是调用“运算符”元素，以及其他一些小问题）。</p></blockquote><p>默认情况下，lambda 表达式不能引用在本地环境的名字，所以它们只是普通的函数。然而，我们可以指定 lambda 表达式应该从它的环境中“捕获”一些或所有的变量。回调是 lambda 表达式的一个常见用例，因为操作通常只需要写一次，并且操作会需要安装该回调的代码上下文中的一些信息。考虑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-comment">// ... 为 s 计算一个合适的值 ...</span><br>    w.<span class="hljs-built_in">foo_callback</span>([&amp;s](<span class="hljs-type">int</span> i)&#123; <span class="hljs-built_in">do_foo</span>(i,s); &#125;);<br>    w.<span class="hljs-built_in">bar_callback</span>([=s](<span class="hljs-type">double</span> d)&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">do_bar</span>(d,s); &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>[&amp;s]</code> 表示 <code>do_foo(i,s)</code> 可以使用 <code>s</code>，<code>s</code> 通过引用来传递（“捕获”）。<code>[=s]</code> 表示 <code>do_bar(d,s)</code> 可以使用 <code>s</code>，<code>s</code> 是通过值传递的。如果回调函数在与 <code>test</code> 相同的线程上被调用，<code>[&amp;s]</code> 捕获可能效率更高，因为 <code>s</code> 没有被复制。如果回调函数在不同的线程上被调用，<code>[&amp;s]</code> 捕获可能是一个灾难，因为 <code>s</code> 在被使用之前可能会超出作用域；这种情况下，我们想要一份副本。一个 <code>[=]</code> 捕获列表意味着“将所有局部变量复制到 lambda 表达式中”。而一个 <code>[&amp;]</code> 捕获列表意味着“lambda 表达式可以通过引用指代所有局部变量”，并意味着 lambda 表达式可以简单地实现为一个局部函数。事实证明，捕获机制的灵活性非常有价值。捕获机制允许控制可以从 lambda 表达式引用哪些名称，以及如何引用。这是对 1990 年代人们担心局部函数容易出错的一种回答。</p><p>lambda 表达式的实现基本上是编译器构建一个合适的函数对象并传递它。捕获的局部变量成为由构造函数初始化的成员，lambda 表达式的代码成为函数对象的调用运算符。例如，<code>bar_callback</code> 变成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__XYZ</span> &#123;<br>    string s;<br>    __XYZ(<span class="hljs-type">const</span> string&amp; ss) : s&#123;ss&#125; &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">do_bar</span>(d,s); &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>lambda 表达式的返回类型可以从它的返回语句推导出来。如果没有 return 语句，lambda 表达式就不会返回任何东西。</p><p>我把 lambda 表达式归类为对泛型编程的支持，因为最常见的用途之一——也是主要的动机——是用作 STL 算法的参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 按降序排序：</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),[](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) &#123; <span class="hljs-keyword">return</span> x&gt;y; &#125;);<br></code></pre></td></tr></table></figure><p>因此，lambda 表达式显著地增加了泛型编程的吸引力。</p><p>在 C++11 之后，C++14 添加了泛型 lambda 表达式（<a href="05.md#54-%E6%B3%9B%E5%9E%8B-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§5.4</a>）和移动捕获（<a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>）。</p><h3 id="4-3-2-变参模板"><a href="#4-3-2-变参模板" class="headerlink" title="4.3.2 变参模板"></a>4.3.2 变参模板</h3><p>2004 年，Douglas Gregor、Jaakko Järvi 和 Gary Powell（当时都在印第安纳大学）提出了<strong>变参模板</strong> [Gregor et al. 2004] 的特性，用来：</p><blockquote><p>直接解决两个问题：</p><ul><li>不能实例化包含任意长度参数列表的类模板和函数模板。</li><li>不能以类型安全的方式传递任意个参数给某个函数</li></ul></blockquote><p>这些都是重要目标，但我起初发现其解决方案过于复杂，写法太过晦涩，按我的品味其编程风格又太递归。不过在 Douglas Gregor 于 2004 年做的精彩演示之后，我改变了主意并全力支持这项提案，帮助它在委员会顺利通过。我被说服的部分原因是变参模板和当时的变通方案在编译时间上的对比测量。编译时间过长的问题随模板元编程的大量使用（<a href="10.md#1052-%E5%85%83%E7%BC%96%E7%A8%8B">§10.5.2</a>）变得越来越严重，对此变参模板是一项重大（有时是 20 倍）改进。可惜，变参模板越变越流行，也成了 C++ 标准库中必需的部分，以至编译时间的问题又出现了。不过，成功的惩罚（在当时）还是在遥远的将来。</p><p>变参模板的基本思路是，递归构造一个<strong>参数包</strong>，然后在另一个递归过程来使用它。递归技巧是必须的，因为参数包中的每个元素都有它自己的类型（和大小）。</p><p>考虑 <code>printf</code> 的一种实现，能够处理可由标准库 iostream 的输出运算符 <code>&lt;&lt;</code> 输出的每种类型 [Gregor 2006]：</p><blockquote><p>为了创建类型安全的 <code>printf()</code>，我们采用以下策略：写出字符串直至碰到第一个格式说明符，按格式打印相应的值，然后递归调用 <code>printf()</code> 来打印字符串剩下部分和其余各值。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s, <span class="hljs-type">const</span> T&amp; value, <span class="hljs-type">const</span> Args&amp;... args)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (*s) &#123;<br>        <span class="hljs-keyword">if</span> (*s == <span class="hljs-string">&#x27;%&#x27;</span> &amp;&amp; *++s != <span class="hljs-string">&#x27;%&#x27;</span>) &#123; <span class="hljs-comment">// 忽略 % 后的字符：</span><br>                                        <span class="hljs-comment">// 我们已经知道要打印的类型了！</span><br>            std::cout &lt;&lt; value;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(++s, args...);<br>        &#125;<br>        std::cout &lt;&lt; *s++;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;extra arguments provided to printf&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 <code>&lt;typename T, typename... Args&gt;</code> 指定了一个传统的列表，有头（<code>T</code>）和尾（<code>Args</code>）。每次调用会处理头，然后以尾为参数来调用自身。普通字符会被简单打印，而格式符 <code>%</code> 则表示某个参数要被打印了。Doug（当时他住在印第安纳州）提供了一个测试例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg = <span class="hljs-string">&quot;The value of %s is about %g (unless you live in %s).\n&quot;</span>;<br><span class="hljs-built_in">printf</span>(msg, std::<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;pi&quot;</span>), <span class="hljs-number">3.14159</span>, <span class="hljs-string">&quot;Indiana&quot;</span>);<br></code></pre></td></tr></table></figure><p>结果会打印</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">The value <span class="hljs-keyword">of</span> <span class="hljs-literal">pi</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">about</span> <span class="hljs-number">3.14159</span> (unless you live <span class="hljs-keyword">in</span> Indiana).<br></code></pre></td></tr></table></figure><p>这个实现的好处之一是，和标准的 <code>printf</code> 不同，用户定义的类型也和内建类型一样会得到正确处理。通过使用 <code>&lt;&lt;</code> 也避免了类型指示符和参数类型之间的不匹配，比如 <code>printf(&quot;%g %c&quot;,&quot;Hello&quot;,7.2)</code>。</p><p>这个 <code>printf</code> 所展示的技巧是 C++20 <code>format</code>（<a href="09.md#937-%E6%A0%BC%E5%BC%8F%E5%8C%96">§9.3.7</a>）的基础之一。</p><p>变参模板的缺点是容易导致代码膨胀，因为 N 个参数意味着模板的 N 次实例化。</p><h3 id="4-3-3-别名"><a href="#4-3-3-别名" class="headerlink" title="4.3.3 别名"></a>4.3.3 别名</h3><p>C 定义类型别名的机制是靠 <code>typedef</code>。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">double</span> <span class="hljs-params">(*pf)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;   <span class="hljs-comment">// pf 是一个函数指针，该函数接受一个 int</span><br>                             <span class="hljs-comment">// 返回一个 double</span><br></code></pre></td></tr></table></figure><p>这是有点诘屈聱牙，但是类型别名在 C 和 C++ 代码中非常有用，使用非常普遍。从最初有 C++ 模板的时候，人们就一直考虑是否可以有 <strong>typedef 模板</strong>；如果可以，它们应该是什么样子。2002 年时，Herb Sutter 提出一个方案 [Sutter 2002]：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> A, <span class="hljs-keyword">typename</span> B&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">typedef</span> X&lt;T,<span class="hljs-type">int</span>&gt; Xi;  <span class="hljs-comment">// 定义别名</span><br>Xi&lt;<span class="hljs-type">double</span>&gt; Ddi;                            <span class="hljs-comment">// 相当于 X&lt;double, int&gt;</span><br></code></pre></td></tr></table></figure><p>在此基础之上，又经历了冗长的邮件列表讨论，Gabriel Dos Reis（当时在法国国立计算机及自动化研究院）和 Matt Marcus（Adobe）解决了特化相关的若干棘手问题，并引入 David Vandevoorde 称之为<strong>别名模板</strong>的简化语法 [Dos Reis and Marcus 2003]。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> A&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyVector</span> &#123; <span class="hljs-comment">/* ... */</span>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">using</span> Vec = MyVector&lt;T, MyAlloc&lt;T&gt; &gt;;<br></code></pre></td></tr></table></figure><p>其中的 <code>using</code> 语法，即要引入的名字总是出现在前面，则是我的建议。</p><p>我和 Gabriel Dos Reis 一道把这个特性推广成一个（几乎）完整的别名机制，并最终得到接受 [Stroustrup and Dos Reis 2003c]。即便不涉及模板，它也给了人们一种写法上的选择：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">double</span> <span class="hljs-params">(*analysis_fp)</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;Student_info&gt;&amp;)</span></span>;<br><br><span class="hljs-keyword">using</span> analysis_fp = <span class="hljs-built_in">double</span> (*)(<span class="hljs-type">const</span> vector&lt;Student_info&gt;&amp;);<br></code></pre></td></tr></table></figure><p>类型和模板别名是某些最有效的零开销抽象及模块化技巧的关键。别名让用户能够使用一套标准的名字而同时让各种实现使用各自（不同）的实现技巧和名字。这样就可以在拥有零开销抽象的同时保持方便的用户接口。考虑某通讯库（利用了 Concepts TS [Sutton 2017] 和 C++20 的写法简化）中的一个实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;InputTransport Transport, MessageDecoder MessageAdapter&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InputChannel</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> InputMessage = MessageAdapter::InputMessage&lt;Transport::InputBuffer&gt;;<br>    <span class="hljs-keyword">using</span> MessageCallback = function&lt;<span class="hljs-built_in">void</span>(InputMessage&amp;&amp;)&gt;;<br>    <span class="hljs-keyword">using</span> ErrorCallback = function&lt;<span class="hljs-built_in">void</span>(<span class="hljs-type">const</span> error_code&amp;)&gt;;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>概念和别名对于规模化地管理这样的组合极有价值。</p><p><code>InputChannel</code> 的用户接口主要由三个别名组成，<code>InputMessage</code>、<code>MessageCallback</code> 和 <code>ErrorCallback</code>，它们由模板的参数初始化而来。</p><p><code>InputChannel</code> 需要初始化它的传输层，该传输层由一个 <code>Transport</code> 对象表示。然而，<code>InputChannel</code> 不应该知道传输层的实现细节，所以它不应直接初始化它的 <code>Transport</code> 成员。变参模板（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）就派上了用场：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;InputTransport Transport, MesssageDecoder MessageAdapter&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InputChannel</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... TransportArgs&gt;</span><br><span class="hljs-function">        <span class="hljs-title">InputChannel</span><span class="hljs-params">(TransportArgs&amp;&amp;... transportArgs)</span></span><br><span class="hljs-function">            : _transport &#123;</span>forward&lt;TransportArgs&gt;(transportArgs)... &#125;<br>        &#123;&#125;<br>    <span class="hljs-comment">// ...</span><br>    Transport _transport;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有变参模板，就得定义出一个通用接口来初始化传输层，或者得把传输层暴露给用户。</p><p>这个漂亮的例子展示了如何把 C++11 的特性（加上概念）组合起来以优雅的零开销方案解决一个困难问题。</p><h3 id="4-3-4-tuple"><a href="#4-3-4-tuple" class="headerlink" title="4.3.4 tuple"></a>4.3.4 <code>tuple</code></h3><p>C++98 有个 <code>pair&lt;T,U&gt;</code> 模板；它主要用来返回成对的值，比如两个迭代器或者一个指针加上一个成功标志。2002 年时，Jaakko Järvi 在参考 Haskell、ML、Python 和 Eiffel 后，提议把这个思路进一步推广，变成 <code>tuple</code>（元组）[Järvi 2002]：</p><blockquote><p>元组是大小固定而成员类型可以不同的容器。作为一种通用的辅助工具，它们增加了语言的表现力。举几个元组类型一般用法的例子：</p><ul><li>作为返回类型，用于需要超过一个返回类型的函数</li><li>编组相关的类型或对象（如参数列表中的各条目）成为单个条目</li><li>同时赋多个值</li></ul></blockquote><p>对于特定的设计意图，定义一个类，并在里面对成员进行合理命名、清晰表述成员间的语义关系，通常会是最好的做法。Alisdair Meredith 在委员会内力陈以上观点，劝阻在接口中过度使用未命名的类型。然而，当撰写泛型代码时，把多个值打包到一个元组中作为一个实体进行处理往往能简化实现。元组对于不值得命名、不值得设计类的一些中间情况特别有用。</p><p>比如，考虑一个只需返回三个值的矩阵分解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SVD</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; A)</span> -&gt; tuple&lt;Matrix, Vector, Matrix&gt;</span><br><span class="hljs-function"></span>&#123;<br>    Matrix U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_tuple</span>(U,S,V);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix A, U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">tie</span>(U,S,V) = <span class="hljs-built_in">SVD</span>(A); <span class="hljs-comment">// 使用元组形式</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，<code>make_tuple()</code> 是标准库函数，可以从参数中推导元素类型来构造 <code>tuple</code>，<code>tie()</code> 是标准库函数，可以把 <code>tuple</code> 的成员赋给有名字的变量。</p><p>使用 C++17 的结构化绑定（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>），上面例子可简化为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SVD</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; A)</span> -&gt; tuple&lt;Matrix, Vector, Matrix&gt;</span><br><span class="hljs-function"></span>&#123;<br>    Matrix U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;U,S,V&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix A;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">auto</span> [U,S,V] = <span class="hljs-built_in">SVD</span>(A); <span class="hljs-comment">// 使用元组形式和结构化绑定</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进一步的写法简化被提议加入 C++20 [Spertus 2018]，但没来得及成功通过：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">tuple <span class="hljs-title">SVD</span><span class="hljs-params">(<span class="hljs-type">const</span> Matrix&amp; A)</span> <span class="hljs-comment">// 从返回语句中推导出元组模板参数</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix U, V;<br>    Vector S;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> &#123;U,S,V&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>为什么 <code>tuple</code> 不是语言特性？我不记得当时有人这么问过，尽管一定有人想到过这一点。长期以来（自 1979 年），我们的策略就是，如果能合理地将新特性以库的形式加入 C++，就不要以语言特性加入；如果不能，就要改进抽象机制使其成为可能。这一策略有显而易见的优势：</p><ul><li>通常对一个库做试验比对一个语言特性做试验更容易，这样我们就更快地得到更好的反馈。</li><li>库可以早在所有编译器升级到支持新特性之前就得到严肃使用。</li><li>抽象机制（类，模板等）上的改进，能在眼前问题之外提供帮助。</li></ul><p><code>tuple</code> 以 Boost.Tuple 为基础构建，其实现之巧妙也足以让众人引以为傲。在这一特性上，并没有出现运行期效率方面的理由，使我们去偏向一个语言实现而不是库实现。这让人颇为敬佩。</p><p>参数包就是一个拥有编译器支持接口的元组的例子（<a href="#432-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF">§4.3.2</a>）。</p><p>元组大量用于 C++ 和其他语言（例如 Python）交互的程序库里。</p><h2 id="4-4-C-11：提高静态类型安全"><a href="#4-4-C-11：提高静态类型安全" class="headerlink" title="4.4 C++11：提高静态类型安全"></a>4.4 C++11：提高静态类型安全</h2><p>依赖静态类型安全有两大好处：</p><ul><li>明确意图<ul><li>帮助程序员直接表达想法</li><li>帮助编译器捕获更多错误</li></ul></li><li>帮助编译器生成更好的代码。</li></ul><p>第二点是第一点的结果。受 Simula 的启发，我对 C++ 的目标是要提供一个灵活可扩展的静态类型系统。目的不仅是类型安全，还要能够直接表达细粒度的区别，例如物理单位检查（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）。一段只用了内建类型如整型和浮点型写成的程序，也算是类型安全但却没有由此带来特别的安全优势。那样的代码没有直接表达应用中的概念。特别需要指出，<code>int</code> 或者 <code>string</code> 几乎可以表达任何东西，所以传递这样的值就完全没有给出被传递值的任何语义信息。</p><p>C++11 中与类型安全直接相关的改进有：</p><ul><li>对于线程和锁的类型安全接口——避免 POSIX 和 Windows 在并发代码中对 <code>void**</code> 及宏的依赖（<a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）</li><li>范围 <code>for</code>——避免错误地指定范围（<a href="#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）</li><li>移动语义——解决指针的过度使用问题（<a href="#423-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89">§4.2.3</a>）</li><li>资源管理指针（<code>unique_ptr</code> 和 <code>shared_ptr</code>（<a href="#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>））</li><li>统一初始化——让初始化更通用，更一致，更安全（<a href="#425-%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96">§4.2.5</a>）</li><li><code>constexpr</code>——消除多处（无类型和无作用域的）宏的使用（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）</li><li>用户定义的字面量——让用户定义类型更像内建类型（<a href="#428-%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E5%AD%97%E9%9D%A2%E9%87%8F">§4.2.8</a>）</li><li><code>enum class</code>——消除一些涉及整型常量的弱类型做法</li><li><code>std::array</code>——避免内建数组不安全地“退化”成指针</li></ul><p>委员会一直收到建议，应当通过禁止不安全特性（例如，废弃像内建数组和类型转换这样的 C 风格特性）来改善类型安全。然而，移除特性（“取缔”它们）的尝试一再失败，因为用户无视移除的警告并坚持要求实现的提供者继续支持这些特性。一个更可行的方式似乎是给用户提供使用指南和实施指南的手段，同时保持标准本身继续和先前的版本兼容（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><h2 id="4-5-C-11：支持对库的开发"><a href="#4-5-C-11：支持对库的开发" class="headerlink" title="4.5 C++11：支持对库的开发"></a>4.5 C++11：支持对库的开发</h2><p>设计 C++ 基础库，往往要在性能和易用性方面同 C++ 及其他语言的内置功能进行竞争。这时，查找规则、重载决策、访问控制、模板实例化规则等特性之中的微妙之处会组合起来，产生强大的表达能力，但同时也暴露出可怕的复杂性。</p><h3 id="4-5-1-实现技巧"><a href="#4-5-1-实现技巧" class="headerlink" title="4.5.1 实现技巧"></a>4.5.1 实现技巧</h3><p>有些实现技巧实属“黑魔法”，不应当暴露给非专家。大部分程序员可以愉快地编写多年好的 C++ 代码，而不用了解这些复杂手段和神秘技巧。遗憾的是，初学者们一拥而上去研究这些最可怕的特殊代码，并从给别人（经常是错误地）解释它们的过程中得到巨大的自豪感。博主和演讲者们通过显摆令人提心吊胆的例子抬高他们的名望。这是 C++ 语言复杂性名声的一个主要来源。在其他语言中，要么不提供这样的优化机会，要么手段被藏在了优化器内部。</p><p>我不能在此深入细节，就只提一个技巧，它在 C++11 的发展中作为关键技巧出现，并在基于模板的库（包括 C++ 标准库）中广为使用。它以奇怪的缩写为人所知：<strong>SFINAE</strong>（Substitution Failure Is Not An Error，替换失败不是错误）。</p><p>你如何表达一个当且仅当某个谓词为真时才有的操作？概念为 C++20 提供了这样的支持（GCC 自 2015 年开始支持），但在 21 世纪早期，人们不得不依赖于晦涩的语言规则。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pair</span> &#123;<br>    T first;<br>    U second;<br>    <span class="hljs-comment">// ...</span><br>    enable_if&lt;is_copy_assignable&lt;T&gt;::value<br>              &amp;&amp; is_copy_assignable&lt;U&gt;::value,pair&amp;&gt;::type<br>        <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> pair&amp;);<br>    <span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这样，当且仅当 <code>pair</code> 的两个成员都有拷贝赋值操作时 <code>pair</code> 才有拷贝赋值操作。这超乎寻常的丑陋，但它对于定义和实现基础库也超乎寻常的有用——在概念还没有出现时。</p><p>要点在于，如果成员都有拷贝赋值，<code>enable_if&lt;…,pair&amp;&gt;::type</code> 会成为一个普通的 <code>pair&amp;</code>，否则它的实例化就会失败（因为 <code>enable_if</code> 没有为赋值提供一个返回类型）。这里 SFINAE 就起作用了：替换失败不是错误；失败的结果就如同整条声明不曾出现一样。</p><p>这里的 <code>is_copy_assignable</code> 是一个 <code>type trait</code>（类型特征），C++11 提供了数十个这样的特征以便程序员在编译期询问类型的属性。</p><p><code>enable_if</code> 元函数由 Boost 开创并成为 C++11 的一部分。一个大致合理的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-type">bool</span> B, <span class="hljs-keyword">typename</span> T = <span class="hljs-type">void</span>&gt;<br><span class="hljs-keyword">struct</span> enable_if &#123;&#125;; <span class="hljs-comment">// false 的情况：里面没有 type</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">enable_if</span>&lt;<span class="hljs-literal">true</span>, T&gt; &#123; <span class="hljs-keyword">typedef</span> T type; &#125;; <span class="hljs-comment">// type 是 T</span><br></code></pre></td></tr></table></figure><p>SFINAE 的精确规则非常微妙而难以驾驭，但是在用户的不断压力下，它们在 C++11 的发展过程中变得越来越简单和通用。SFINAE 的一个附带收获是，它从内部显著改善了编译器，因为编译器必须能够从失败的模板实例化中进行无副作用的回退。这就大大阻止了编译器对非本地状态的使用。</p><h3 id="4-5-2-元编程支持"><a href="#4-5-2-元编程支持" class="headerlink" title="4.5.2 元编程支持"></a>4.5.2 元编程支持</h3><p>二十一世纪的头十年对于 C++ 元编程来说有点像是无法无天的美国西部拓荒时代，新的技巧和应用在仅有基本模板机制支持的情况下被不断尝试。那些基本机制被反复使用到令人痛苦。错误信息可谓糟糕透顶，编译时间经常奇慢无比，编译器资源（如内存、递归深度和标识符长度）会轻易耗尽。同时，人们纷纷重新发现同样的问题，并重新发明一些基本技巧。显然，我们需要更好的支持。改进尝试采用了两条（至少理论上）互补的路径：</p><ul><li><strong>语言</strong>：概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>），编译期函数（<a href="#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>），lambda 表达式（<a href="#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>），模板别名（<a href="#433-%E5%88%AB%E5%90%8D">§4.3.3</a>），以及更精确的模板实例化规范（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</li><li><strong>标准库</strong>：<code>tuple</code>（<a href="#434-tuple">§4.3.4</a>），类型特征（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>），以及 <code>enable_if</code>（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</li></ul><p>遗憾的是，概念在 C++11（<a href="06.md#62-c0x-%E6%A6%82%E5%BF%B5">§6.2</a>）中失败了，这给（通常复杂得可怕而且容易出错的）权宜之计留下了生存空间，典型情况会涉及类型特征和 <code>enable_if</code>（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</p><h3 id="4-5-3-noexcept-规约"><a href="#4-5-3-noexcept-规约" class="headerlink" title="4.5.3 noexcept 规约"></a>4.5.3 <code>noexcept</code> 规约</h3><p>起初的异常设计没有办法表明某个异常可能会从某函数中抛出。我仍然认为那才是正确的设计。为了让异常为 C++98 接纳，我们不得不加入异常规约，来列举一个函数会抛出那些异常 [Stroustrup 1993]。使用异常规约可选，并会在运行期进行检查。正如我担心的那样，这带来了维护的问题，在展开路径上对异常反复检查增加的运行期开销，还有源代码膨胀。在 C++11 中，异常规约被废弃 [Gregor 2010]，而到了 C++17，我们终于（一致同意）移除了异常规约这个特性。</p><p>一直有人希望能够在编译时检查函数会抛出什么异常。从类型理论的角度，在小规模程序中，在有高速编译器和对代码完全控制的情况下，那当然行得通。委员会一再拒绝这种想法，原因是它不能扩展到由数十（或更多）组织维护的百万行代码规模的程序上 [Stroustrup 1994]。参见（<a href="07.md#74-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%AF%E6%8C%81">§7.4</a>）。</p><p>没有异常规约，库实现者们就要面对一个性能问题：在许多重要场合，一个库实现者需要知道一个拷贝操作是否会抛异常。如果会，就必须拿到一份拷贝以避免留下一个无效对象（这样会违犯异常保证 [Stroustrup 1993]）。如果不会，我们可以直接写入到目标中。在这种场合，性能的差别可以非常显著，而最简单的异常规约 <code>throw()</code>，什么也不抛出，在此可以帮助判断。于是，在异常规约被弃之不用并最终从标准中移除的时候，我们基于 David Abrahams 和 Doug Gregor 的提案 [Abrahams et al. 2010; Gregor 2010; Gregor and Abrahams 2009] 引入了 <code>noexcept</code> 概念。</p><p>一个 <code>noexcept</code> 函数仍会被动态检查。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <code>do_something()</code> 抛异常，程序会被终止。这样操作恰好非常接近零开销，因为它简单地短路了通常的异常传播机制。参见（<a href="07.md#73-noexcept-%E8%A7%84%E7%BA%A6">§7.3</a>）。</p><p>还有一个条件版本的 <code>noexcept</code>，用它可以写出这样的模板，其实现依赖于某参数是否会抛异常。这是最初促成 <code>noexcept</code> 的用例。例如，下面代码中，当且仅当 <code>pair</code> 的两个元素都有不抛异常的移动构造函数时，<code>pair</code> 的移动构造函数才会声明不抛异常：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> First, <span class="hljs-keyword">typename</span> Second&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">pair</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> First2, <span class="hljs-keyword">typename</span> Second2&gt;<br>    <span class="hljs-built_in">pair</span>(pair&lt;First2, Second2&gt;&amp;&amp; rhs)<br>        <span class="hljs-built_in">noexcept</span>(is_nothrow_constructible&lt;First, First2&amp;&amp;&gt;::value<br>              &amp;&amp; is_nothrow_constructible&lt;Second, Second2&amp;&amp;&gt;::value)<br>    : <span class="hljs-built_in">first</span>(<span class="hljs-built_in">move</span>(rhs.first)),<br>      <span class="hljs-built_in">second</span>(<span class="hljs-built_in">move</span>(rhs.second))<br>    &#123;&#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中的 <code>is_nothrow_constructible&lt;&gt;</code> 是 C++11 标准库的类型特征（type traits）之一（<a href="#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</p><p>在这相对底层和非常通用的层级写出最优代码可不简单。在基础层面上，懂得到底该按位拷贝，该移动，还是该按成员拷贝，会带来非常大的区别。</p><h2 id="4-6-C-11：标准库组件"><a href="#4-6-C-11：标准库组件" class="headerlink" title="4.6 C++11：标准库组件"></a>4.6 C++11：标准库组件</h2><p>C++ 跟其他现代语言比一直有个小巧的标准库。此外，大多标准库组件都很基础，而不是试图处理应用层面的任务。不过，C++11 增加了几个关键的库组件来支持特定任务：</p><ul><li><code>thread</code>——基于线程和锁的并发</li><li><code>regex</code>——正则表达式</li><li><code>chrono</code>——时间</li><li><code>random</code>——随机数产生器和分布</li></ul><p>和大量的商业支持程序库相比，这显然小得可怜，但这些组件质量很高，并且跟之前的标准 C++ 相比数量也多多了。</p><p>设计这些组件，是要服务于一些特定任务。在这些任务中，它们为程序员提供了重大帮助。遗憾的是，这些库来自不同背景，体现在接口风格上，就出现了差异；除了要灵活和高性能之外它们没有一致的整体设计哲学。C++11 在合入一个组件方面没有明晰的标准（C++98 有一些 [Stroustrup 1994]）。更准确地说，我们只是从现有的、已被社区证明成功的组件中接收组件进来。很多组件来自 Boost（<a href="02.md#23-c-%E7%9A%84-2006">§2.3</a>）。</p><p>如果你需要使用正则表达式，标准库中新加入的 <code>regex</code> 就是个巨大改进了。类似，加入无序容器（哈希表），如 <code>unordered_map</code>，为很多程序员省去了大量繁琐的工作，使之可以产出更好的程序。然而，这些库组件并没有对人们组织代码的方式产生重大影响，所以我在此不对这些库组件的细节展开讨论。</p><p><code>regex</code> 库主要是 John Maddock 的工作 [Maddock 2002]。</p><p>哈希表不巧错过了 C++98 的截止时间，因而出现在了 C++0x 的第一批提案之中 [Austern 2002]。它们被称做无序的（例如 <code>unordered_map</code>），是为了区别于老的、有序的标准容器（例如 <code>map</code>），也是因为较明显的名字（例如 <code>hash_map</code>）已经在 C++11 之前被其他库大量使用了。另外，<code>unordered_map</code> 也可以说是个更好的名字，因为它指出了类型提供什么，而不是它是如何实现的。</p><p><code>random</code> 库提供了分布函数和随机数产生器，其复杂性被誉为“每个随机数库都想长成的样子”。但它对初学者或者一般用户（常需要随机数）并不易用。它在 2002 年由 Jens Maurer [Maurer 2002] 提出，并在 2006 年经由费米国家实验室的一群人修订 [Brown et al. 2006]，随即被接受。</p><p>相比之下，Howard Hinnant 的 <code>chrono</code> 库 [Hinnant et al. 2008] 处理时间点和时间间隔，在提供复杂功能的同时仍保持了易用性。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::chrono;  <span class="hljs-comment">// 在子命名空间 std::chrono</span><br><span class="hljs-keyword">auto</span> t0 = system_clock::<span class="hljs-built_in">now</span>();<br><span class="hljs-built_in">do_work</span>();<br><span class="hljs-keyword">auto</span> t1 = system_clock::<span class="hljs-built_in">now</span>();<br>cout &lt;&lt; <span class="hljs-built_in">duration_cast</span>&lt;milliseconds&gt;(t1-t0).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;msec\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>其中的 <code>duration_cast</code> 把依赖于时钟的“嘀嗒”节拍数转换为程序员选用的时间单位。</p><p>使用如此简单的代码，你可以让大一学生都能感受到不同算法和数据结构的代价差异。<code>chrono</code> 为 <code>thread</code> 库提供了时间支持（<a href="#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）。</p><p>到了 C++20，<code>chrono</code> 得到进一步增强，加入了处理日期和时区的功能（<a href="09.md#936-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E5%8C%BA">§9.3.6</a>）。C++20 也允许把上面的例子简化为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; t1-t0 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这就会把 <code>t0</code> 和 <code>t1</code> 之间的时间差自动以合适的单位进行输出。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：参考 Python 在 PEP 20—The Zen of Python 中的不同态度：“应该有且仅有一种明显的完成任务的方式（There should be one—and preferably only one—obvious way to do it）。”<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>译注：下面的代码引自 2006 年的论文，但 <code>operator=</code> 的实现不符合现代惯用法：一般要么把参数设为 <code>clone_ptr p</code>，这就成了一个可以同时适配拷贝或移动的通用赋值函数；要么在函数体内进行一次移动构造，先 <code>clone_ptr temp(std::move(p));</code> 再 <code>std::swap(ptr, temp.ptr);</code>。否则，当传递的实参是 <code>std::move</code> 的结果（xvalue）而不是真正的临时对象（prvalue）时，代码的行为会不符合预期。当然，就如下面 Bjarne 讨论到的，在 2006 年应该还没有 xvalue 和 prvalue 的概念。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_02/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_02/</url>
    
    <content type="html"><![CDATA[<h1 id="2-背景：C-的-1979–2006"><a href="#2-背景：C-的-1979–2006" class="headerlink" title="2. 背景：C++ 的 1979–2006"></a>2. 背景：C++ 的 1979–2006</h1><p>C++ 从 1979 年到 2006 年的历史记录在我的 HOPL 论文中 [Stroustrup 1993, 2007]。在那段时间里，C++ 从一个单人的研究项目成长为大约有 300 万程序员的社区。</p><h2 id="2-1-第一个十年"><a href="#2-1-第一个十年" class="headerlink" title="2.1 第一个十年"></a>2.1 第一个十年</h2><p>后来成为了 C++ 的东西始于 1979 年 4 月，名为<strong>带类的 C</strong>（C with Classes）。我的目标是设计一个工具，它既拥有直接而高效的处理硬件的能力（例如编写内存管理器、进程调度器和设备驱动程序），又同时可以有类似 Simula 的功能来组织代码（例如“强”静态可扩展类型检查、类、多级类和协程）。我想用这个工具编写一版 Unix 内核，可以在通过局域网或共享内存互联的多个处理器上运行。</p><p>我选择 C 作为我工作的基础，因为它足够好，并且在办公室里就能得到很好的支持：我的办公室就在 Dennis Ritchie 和 Brian Kernighan 走廊对面。然而，C 语言并不是我考虑的唯一语言。Algol68 当时深深吸引了我，我还是 BCPL 和其他一些机器层面的语言的专家。C 后来的巨大成功在当时还完全不确定，但是 Brian Kernighan 和 Dennis Ritchie 杰出的介绍和手册 [Kernighan and Ritchie1978] 已经出现，Unix 也正开始它的胜利路程。</p><p>最初我实现的是一个预处理器，它将“带类的 C” 差不多逐行翻译成 C。1982 年，在“带类的 C”的用户数量增长到了几十人的时候，这种方法已经显得无法把控了。所以我写了一个传统的编译器，叫作 <strong>Cfront</strong>，1983 年 10 月第一次给别人使用。Cfront 是一个传统的编译器，它有一个词法分析器、一个构建抽象语法树的语法分析器、一个用类型装饰语法树的类型检查器，以及一个重新排列 AST 以提高生成代码的运行期效率的高层次优化器。关于 Cfront 的本质有很多困惑，因为当时它最终输出的是 C（优化的，不是特别可读的 C）。我生成了 C，这样我就不必直接处理当年正在使用的众多的（非标准化）链接器和优化器。不过，Cfront 一点也不像传统的预处理器。你可以在计算机历史博物馆的源代码收藏 [McJones 2007–2020] 中找到一份带有文档的 Cfront 源代码。Cfront 从“带类的 C”自举为 C++，所以第一个 C++ 编译器是用（简单的）C++ 写的，适合非常小的计算机（内存小于 1MB，处理器速度小于 1MHz）。</p><p>“带类的 C” 添加到 C 上的第一个特性是类。我从早期在 Simula 中的使用中了解到它们的力量，在 Simula 中，类是严格静态、但又可扩展的类型系统的关键。我立即添加了构造函数和析构函数。它们当时非常新颖，但从我的计算机架构和操作系统背景来看，我认为它们也不算很新奇，因为我需要一个机制来建立一个工作环境（构造函数）和一个逆操作来释放运行期获得的资源（析构函数）。以下摘自我 1979 年的实验记录本：</p><blockquote><ul><li>“new 函数”为成员函数创建运行的环境</li><li>“delete 函数”则执行相反的操作</li></ul></blockquote><p>“new 函数”和“delete 函数”这两个术语是“构造函数”和“析构函数”的原始术语。直到今天，我仍然认为构造函数和析构函数是 C++ 的真正核心。另见（<a href="#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）和（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><p>当时，除了 C 语言，基本上所有语言都有适当的函数参数类型检查。我认为没有它我无法完成任何重要的事情。因此，在我的部门主管 Alexander Fraser 的鼓励下，我立即添加了（可选的）函数参数声明和参数检查。这就是 C 语言中现在所说的函数原型。1982 年，在看到让函数参数检查保持可选的效果后，我将其设为强制的。这导致了十几二十年里关于与 C 不兼容的大声抱怨。人们想要保留他们的类型错误，或者至少许多人大声说他们不想检查，并以此作为不使用 C++ 的借口。这个小事实也许能让人们认识到演化一门被大量使用的语言会涉及到的各种问题。</p><p>鉴于过于狭隘的 C 和 C++ 爱好者之间偶尔会恶语相向，或许值得指出，我一直是 Dennis Ritchie 和 Brian Kernighan 的朋友，在 16 年里几乎天天同他们一起吃午饭。我从他们那里学到了很多，现在还经常同 Brian 见面。我将一些对 C++ 语言的贡献 [Stroustrup 1993] 归功于他们两位，而我自己也是 C 的主要贡献者（例如函数定义语法、函数原型、<code>const</code>  和 <code>//</code> 注释）。</p><p>为了能够理性思考 C++ 的成长，我想出了一套设计规则。这些在 [Stroustrup 1993, 1994] 中有介绍，所以这里我只提一小部分：</p><blockquote><ul><li>不要陷入对完美的徒劳追求。</li><li>始终提供过渡路径。</li><li>说出你的意图（即，能够直接表达高层次的思路）。</li><li>不要隐式地在静态类型系统方面违规。</li><li>为用户定义类型提供和内置类型同样好的支持。</li><li>应取消预处理器的使用。</li><li>不要给 C++ 以下的低级语言留有余地（汇编语言除外）。</li></ul></blockquote><p>这些目标的野心并不小。其中某些目标，现在 2020 年了我依然在为之努力工作。在 1980 年代早期到中期，我给 C++ 添加了更多的语言功能：</p><ul><li><strong>1981 年</strong>：<code>const</code>——支持接口和符号常量的不变性。</li><li><strong>1982 年</strong>：虚函数——提供运行期多态。</li><li><strong>1984 年</strong>：引用——支持运算符重载和简化参数传递。</li><li><strong>1984 年</strong>：运算符和函数重载——除了算术和逻辑运算符外，还包括：允许用户定义 <code>=</code>（赋值）、<code>()</code>（调用；支持函数对象（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>））、<code>[]</code>（下标访问）和 <code>-&gt;</code>（智能指针）。</li><li><strong>1987 年</strong>：类型安全链接——消除许多来自不同翻译单元中不一致声明的错误。</li><li><strong>1987 年</strong>：抽象类——提供纯接口。</li></ul><p>在 1980 年代后期，随着计算机能力的急剧增强，我对大型软件更感兴趣，并做了如下补充：</p><ul><li>模板——在经历了多年使用宏进行泛型编程的痛苦之后，更好地支持泛型编程。</li><li>异常——试图给混乱的错误处理带来某种秩序；RAII（<a href="#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>）便是为此目标而设计的。</li></ul><p>后面这些功能并没有受到普遍欢迎（例如，见（<a href="07.md#7-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">§7</a>））。部分原因是社区已经变得庞大和难以管理。ANSI 标准化已经开始，所以我不再能够私下实现和实验。人们坚持大规模的精心设计，坚持在认真实施之前进行广泛的辩论。我不能再在明知道不可能让每个人都满意的情况下，从一个最小的提议开始，把它发展成一个更完整的功能。例如，人们坚持到处使用笨重的带有 <code>template&lt;class T&gt;</code> 前缀的模板语法。</p><p>在 1980 年代末，“面向对象”的宣传变得震耳欲聋，淹没了我对 C++ 传达的讯息。我对 C++ 是什么和应当成为什么的看法被广泛忽视了——很多人甚至从未听说过。对于“面向对象”的某些定义来说，所有新语言都应是“纯面向对象的”。“不真正面向对象”被视为是糟糕的，不容争辩。</p><p>我从未使用过“C++ 是一种面向对象的编程语言”这种说法，这件事很多人并不知道，或者因为感到有些尴尬而有意忽略了。那时候，我的标准描述是</p><blockquote><p>C++ 是一门偏向系统编程的通用编程语言，它是</p><ul><li>更好的 C</li><li>支持数据抽象</li><li>支持面向对象编程</li><li>支持泛型编程</li></ul></blockquote><p>这个说法过去和现在都是准确的，但不如“万物皆对象！”这样的口号那么令人兴奋。</p><h2 id="2-2-第二个十年"><a href="#2-2-第二个十年" class="headerlink" title="2.2 第二个十年"></a>2.2 第二个十年</h2><p>ANSI C++ 委员会是 1989 年 12 月在华盛顿特区的一次会议上成立的，距离第一次使用“带类的 C”这个名称仅仅 10 年多的时间。大约有 25 名 C++ 程序员出席了会议。我出席了会议，还有另外一些近些年来依然活跃的 ISO C++ 标准委员会成员当时也在。</p><p>经过了惯例性的、大约十年的工作，该委员会终于发布了第一个标准：C++98。我和许多其他人自然更愿意更快地输出一个标准，但是委员会规则、过度的雄心和各种各样的延迟使我们在时间表方面与 Fortran、C 和其他正式标准化的语言站在了同一起跑线上。</p><p>形成 C++98 的工作是 HOPL3 论文的核心 [Stroustrup 2007]，所以这里我只简单总结一下。</p><h3 id="2-2-1-语言特性"><a href="#2-2-1-语言特性" class="headerlink" title="2.2.1 语言特性"></a>2.2.1 语言特性</h3><p>C++98 的主要语言特性是</p><ul><li>模板——无约束的、图灵完备的、对泛型编程的编译期支持，在我早期工作（<a href="#21-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.1</a>）的基础上进行了许多细化和改进；这项工作仍在继续（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。</li><li>异常——一套在单独（不可见的）路径上返回错误值的机制，由调用方栈顶上的“在别处”的代码处理；见（<a href="07.md#7-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">§7</a>）。</li><li><code>dynamic_cast</code> 和 <code>typeid</code>——一种非常简单的运行期反射形式（“运行期类型识别”，又名 RTTI）。</li><li><code>namespace</code>——允许程序员在编写由几个独立部分组成的较大程序时避免名称冲突。</li><li>条件语句内的声明——让写法更紧凑和限制变量作用域。</li><li>具名类型转换——（<code>static_cast</code>、<code>reinterpret_cast</code> 和 <code>const_cast</code>）：消除了 C 风格的类型转换中的二义性，并使显式类型转换更加显眼。</li><li><code>bool</code>：一种被证明非常有用和流行的布尔类型；C 和 C++ 曾经使用整数作为布尔变量和常量。</li></ul><p>让我们看一个简单的 C++98 例子。<code>dynamic_cast</code> 是面向对象语言中常被称为类似“是某种”的概念的 C++ 版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something</span><span class="hljs-params">(Shape* p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Circle* pc = <span class="hljs-built_in">dynamic_cast</span>&lt;Circle*&gt;(p)) &#123; <span class="hljs-comment">// p 是某种 Circle？</span><br>        <span class="hljs-comment">// ... 使用 pc 指向的 Circle ...</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// ... 不是 Circle，做其他事情 ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>dynamic_cast</code> 是一个运行期操作，依赖于存储在 Shape 的虚拟函数表中的数据。它通用、易用，并且与其他语言类似的功能一样高效。然而，<code>dynamic_cast</code> 变得非常不受欢迎，因为它的实现往往是复杂的，特殊情况下手动编码可能更高效（可以说这导致 <code>dynamic_cast</code> 违反了零开销原则）。在条件语句里使用声明很新颖，不过当时我认为我只是沿用了 Algol68 里的这个主意而已。</p><p>一种更简单的变种是使用引用而不是指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_something2</span><span class="hljs-params">(Shape&amp; r)</span></span><br><span class="hljs-function"></span>&#123;<br>    Circle&amp; rc = <span class="hljs-built_in">dynamic_cast</span>&lt;Circle&amp;&gt;(r);  <span class="hljs-comment">// r 是某种 Circle！</span><br>    <span class="hljs-comment">// ... 使用 rc 引用的 Circle ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这简单地断言 <code>r</code> 指代一个 <code>Circle</code>，如果不是则抛出一个异常。思路就是，错误能够在本地被合理地处理时，使用指针和测试，如果不能则依赖引用和异常。</p><p>C++98 中最重要的技术之一是 RAII（Resource Acquisition Is Initialization, 资源获取即初始化）。那是我给它取的一个笨拙的名字，想法就是每个资源都应该有一个所有者，它由作用域对象表示：构造函数获取资源、析构函数隐式地释放它。这个想法出现在早期的“带类的 C”中，但直到十多年后才被命名。这里有一个我经常使用的例子，用来说明并非所有资源都是内存：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_fct</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span>  <span class="hljs-comment">// C 风格的资源管理</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE* p = <span class="hljs-built_in">fopen</span>(name, <span class="hljs-string">&quot;r&quot;</span>);  <span class="hljs-comment">// 打开文件 name 来读取</span><br>    <span class="hljs-comment">// ... 使用 p ...</span><br>    <span class="hljs-built_in">fclose</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>问题是，如果（在 <code>fopen()</code> 和 <code>fclose()</code> 的调用之间）我们从函数 <code>return</code> 了，或者 <code>throw</code> 了一个异常，或者使用了 C 的 <code>longjmp</code>，那么 <code>p</code> 指向的文件句柄就泄漏了。文件句柄泄漏会比内存泄漏更快地耗尽操作系统的资源。这个文件句柄是<strong>非内存资源</strong>的一个例子。</p><p>解决方案是将文件句柄表示为带有构造函数和析构函数的类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File_handle</span> &#123;<br>    FILE* p;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">File_handle</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* permissions);  <span class="hljs-comment">// 打开文件</span><br>    ~<span class="hljs-built_in">File_handle</span>();  <span class="hljs-comment">// 关闭文件</span><br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>我们现在可以简化我们的用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_fct2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span>  <span class="hljs-comment">// RAII 风格的资源管理</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">File_handle <span class="hljs-title">p</span><span class="hljs-params">(name,<span class="hljs-string">&quot;r&quot;</span>)</span></span>;    <span class="hljs-comment">// 打开文件 name 来读取</span><br>    <span class="hljs-comment">// ... 使用 p ...</span><br>&#125; <span class="hljs-comment">// p 被隐式地关闭</span><br></code></pre></td></tr></table></figure><p>随着异常的引入，这样的资源句柄变得无处不在。特别的，标准库文件流就是这样一个资源句柄，所以使用 C++98 标准库，这个例子变成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_fct3</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">p</span><span class="hljs-params">(name)</span></span>;    <span class="hljs-comment">// 打开文件 name 来读取</span><br>    <span class="hljs-comment">// ... 使用 p ...</span><br>&#125; <span class="hljs-comment">// p 被隐式的关闭</span><br></code></pre></td></tr></table></figure><p>请注意，RAII 代码不同于传统的函数使用，它允许在库中一劳永逸地定义“清理内存”，而不是程序员每次使用资源时都必须记住并显式编写。至关重要的是，正确和健壮的代码更简单、更短，并且至少与传统风格一样高效。在接下来的 20 年里，RAII 已遍布 C++ 库。</p><p>拥有非内存资源意味着垃圾收集本身不足以进行资源管理。此外，RAII 加上智能指针（<a href="04.md#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）消除了对垃圾收集的需求。另见（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><h3 id="2-2-2-标准库组件"><a href="#2-2-2-标准库组件" class="headerlink" title="2.2.2 标准库组件"></a>2.2.2 标准库组件</h3><p>C++98 标准库提供了：</p><ul><li>STL——创造性的、通用的、优雅的、高效的容器、迭代器和算法框架，由 Alexander Stepanov 设计。</li><li>特征（trait）——对使用模板编程有用的编译期属性集（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）。</li><li><code>string</code>——一种用于保存和操作字符序列的类型。字符类型是一个模板参数，其默认值是 <code>char</code>。</li><li><code>iostream</code>——由 Jerry Schwartz 和标准委员会精心制作，基于我 1984 年的简单的数据流，处理各种各样的字符类型、区域设置和缓冲策略。</li><li><code>bitset</code>——一种用于保存和操作比特位集合的类型。</li><li><code>locale</code>——用来处理不同文化传统的精致框架，主要与输入输出有关。</li><li><code>valarray</code>——一个数值数组，带有可优化的向量运算，但遗憾的是，未见大量使用。</li><li><code>auto_ptr</code>——早期的代表独占所有权的指针；在 C++11 中，它被 <code>shared_ptr</code>（共享所有权）和 <code>unique_ptr</code>（独占所有权）（<a href="04.md#424-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8C%87%E9%92%88">§4.2.4</a>）替代。</li></ul><p>毫无疑问，STL 框架是最为重要的标准库组件。我认为可以说，STL 和它开创的泛型编程技术挽救了 C++，使它成长为一种有活力的现代语言。像所有的 C++98 功能一样，STL 在其他地方已经有了广泛的描述（例如 [Stroustrup 1997, 2007]），所以在这里我只会给出一个简单的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(vector&lt;string&gt;&amp; v, list&lt;<span class="hljs-type">int</span>&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;string&gt;::iterator p<br>        = <span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">Less_than</span>&lt;string&gt;(<span class="hljs-string">&quot;falcon&quot;</span>));<br>    <span class="hljs-keyword">if</span> (p != v.<span class="hljs-built_in">end</span>())  &#123;  <span class="hljs-comment">// p 指向 &#x27;falcon&#x27;</span><br>        <span class="hljs-comment">// ... 使用 *p ...</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">// 没找到 &#x27;falcon&#x27;</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>    list&lt;<span class="hljs-type">int</span>&gt;::iterator q<br>        = <span class="hljs-built_in">find_if</span>(lst.<span class="hljs-built_in">begin</span>(), lst.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">Greater_than</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">42</span>));<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>标准库算法 <code>find_if</code> 遍历序列（由 <code>begin</code>&#x2F;<code>end</code> 定界）寻找谓词为真的元素。该算法在三个维度上都是通用的：</p><ul><li>序列元素的存储方式（这里是 <code>vector</code> 和 <code>list</code>）</li><li>元素的类型（这里是 <code>string</code> 和 <code>int</code>）</li><li>用于确定何时找到元素的谓词（此处为 <code>Less_than</code> 和 <code>Greater_than</code>）</li></ul><p>注意这里没有用到任何面向对象的方法。这是依赖模板的泛型编程，有时也被称为编译期多态。</p><p>模板的写法仍然很原始，但是从 2017 年左右开始，我可以使用 <code>auto</code>（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）、范围（<a href="09.md#935-%E8%8C%83%E5%9B%B4">§9.3.5</a>）和 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）来简化代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">(vector&lt;string&gt;&amp; v, list&lt;<span class="hljs-type">int</span>&gt;&amp; lst)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">find_if</span>(v,[](<span class="hljs-type">const</span> string&amp; s) &#123; <span class="hljs-keyword">return</span> s&lt;<span class="hljs-string">&quot;falcon&quot;</span>; &#125;)<br>    <span class="hljs-keyword">if</span> (p!=v.<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">auto</span> q = <span class="hljs-built_in">find_if</span>(lst,[](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> x&gt;<span class="hljs-number">42</span>; &#125;)<br>    <span class="hljs-keyword">if</span> (q!=lst.<span class="hljs-built_in">end</span>()) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-C-的-2006"><a href="#2-3-C-的-2006" class="headerlink" title="2.3 C++ 的 2006"></a>2.3 C++ 的 2006</h2><p>2006 年，我和 ISO C++ 委员会的大多数其他成员都对功能丰富的 C++0x 标准寄予厚望。计划在 2007 进行特性冻结，所以我们有一个合理的预期，C++0x 将是 C++08 或 C++09。事实上 C++0x 变成了 C++11，引出了关于十六进制 C++0xB 的笑话。</p><p>在我 2006 年的 HOPL 论文 [Stroustrup 2007] 中，我列出了 39 个提案，并预测前 21 个会进入 C++0x。有趣的是，我列表上的前 25 个建议中，有 24 个进入了 C++11。我把提案 22–25 列为“正在制定中，目标是在 2007 年 7 月进行投票”。令我惊喜的是，它们全都成功了。而提案 26–39 则连 C++17 都没有进入。这中间就留下了第 10 号提案“概念”，它有一个自己的长长的悲伤故事，不过最终还是以进入 C++20 而快乐收尾。</p><p>我和其他许多人对 C++0x 的延迟感到沮丧，并担心在面对来自更现代、资金更充足的替代品的竞争时，一个未经改进的 C++ 可能无法作为一种活的语言生存下去。在 2006 年，Java 的使用仍在增加，微软的 C# 也有大量的支持和营销。我在 2006 年的估计是 C++ 的使用在过去 4 年中首次略有下降。获取真实的数字很难，我的最佳估计（下降 7%）完全在误差范围内，但确实有理由去担心。类似 Java 和 C# 这样的语言会作出这样一种假设——并常常大声宣扬——C++ 没有生态位：</p><ul><li>“低级编程”可以由少量的 C 或汇编代码处理。</li><li>“高级编程”则可以使用一种带有巨大的运行时支持系统的更安全、更小并使用垃圾收集的语言来做，这样可以更好、更便宜、更高效地完成。</li><li>像 Java 和 C# 这样的托管语言使用垃圾收集和一致的运行期范围检查，使得不太专业的程序员能更有生产力，这样可以减少对高技能的开发人员的需求。</li><li>编程语言与平台的深度集成，并使用集成工具来进行支持，这对生产力和大型系统的构建至关重要。</li></ul><p>显然，我和许多其他人并不同意。但这些在过去和现在都是严肃的争辩，它们如果正确的话应该导致 C++ 被放弃使用。C++ 基于传统的编程语言模型，与底层操作系统分离，并由众多独立的工具供应者提供支持。托管语言往往是专有的；只有一个庞大而富有的组织才能开发所需的庞大基础设施和库。我和 C++ 社区中的其他许多人更喜欢不受公司控制的语言；这是我参加 ISO 标准工作的一个原因。</p><p>回想起来，2006 年可能是 C++ 的最低谷，但重要的技术事件也恰好在此时发生了：大约在 2005 年，历史上第一次单个处理器（单核）的性能停止提高，能效（“每瓦特的性能”）成为一个关键指标（尤其是对于服务器集群和手持设备）。计算经济学转而青睐更好的软件。硬件的进步再也不能完全掩盖语言或编程技术的低效。这样，执掌“利器”的高手跟差点的程序员或受工具链开销束缚的程序员相比，能赢得高一个数量级的经济优势，而这种优势十多年之后还依然存在。即使在今天，这些事实还没有被所有的教育和管理体制充分领会，但是现在有许多重要的任务，为它们花时间精心打造高性能的代码会获得巨大的回报。</p><p>另一个转折点来自供应商，他们试图通过定义标准接口（比如图形用户界面）将自己喜欢的语言强加给所有用户，而这只能通过使用他们喜欢的、通常是专有的语言来实现。比如谷歌对安卓系统使用 Java，苹果对 iOS 使用 Objective-C，微软对 Windows 使用 C#。应用程序供应商可以尝试通过使用一些编程方言来避开锁定，例如 Objective C++ [Objective C++ Wikipedia 2020] 或 C++&#x2F;CLI [ECMA International 2005]，但是这样写出的代码仍然不可移植。许多组织，比如 Adobe、谷歌和微软，他们的响应方式是使用 C++ 编写他们要求苛刻的应用程序的主要部分，然后为各种平台（如 Android、iOS 和 Windows）使用薄接口层。2006 年时这一趋势几乎不引人注目。</p><p>在便携式设备（尤其是智能手机）上，对能效和平台独立性的需求是彼此融合的。一个影响是，据我在 2018 年的最佳估计，自 2006 年以来 C++ 程序员的数量增长了约 50%，达到约 450 万名开发人员 [Kazakova 2015]。也就是说开发者每年增长 15 万人，十年来每年大约增长 4%。</p><p>2006 年，很少有人注意到硬件趋势对 C++ 固有优势的滋养。而社区和标准委员会正在关注新的语言特性和库，以增加 C++ 的实用性并提高对它的热情。包括我在内的一些委员感到迫切需要重大改进。其他人更关注于稳定语言和改进它的实现。一个标准委员会需要这两个群体，但创新和整顿之间不断的拉锯战是紧张的来源。就像在任何大型组织中一样，维护现状和服务当前用户的人有组织上优势。在《C++ 程序设计语言（第三版）》[Stroustrup 1997] 中，我引用了尼科洛·马基雅维利（Niccolò Machiavelli）的话：</p><blockquote><p>没有什么比开创一种新秩序更难于推行、更让人怀疑能否成功、处理起来更加危险。因为改革者会与所有从旧秩序中获利的人为敌，而所有从新秩序中获利的人却只是冷淡的捍卫者。</p></blockquote><p>我的观点是 C++ 需要显著的改进来更好地服务于它的用户群体。C++ 应用程序被大规模部署，但是新项目通常选择更流行的语言，一些成功的 C++ 项目被改写成这样的语言。举例来说，谷歌的许多大规模应用，如搜索，一直是基于他们的 map-reduce 框架 [Dean and Ghemawat 2004, 2008]。它就是 C++ 程序。然而，由于它因为商业原因是专有的，人们复制了它，而开源的 map-reduce 框架（Hadoop）出于各种原因是用 Java 实现的。这对于 C++ 社区来说是一件憾事。</p><p>开发转向其他语言的另一个重要原因是，模板提供的接口的灵活性使得使用所有 C++ 特性并提供稳定的 ABI 变得极其困难：可以灵活，也可以提供稳定的二进制接口，但大多数组织都做不到两者兼顾。我认为人们之所以需要 C++ 编写的程序提供 C、Java、C# 之类的接口，这是个促成因素。C++ 的 ABI 稳定性是一个真正的技术难题，尤其是因为 C++ 标准必须独立于平台。</p><p>更让 C++ 社区的问题雪上加霜的是，到了 2006 年，随着纸质出版的衰退，以及记者们关注更流行的技术和广告收入，大多数报道 C++ 的专业软件杂志已经消亡。Dr. Dobbs 期刊还支撑了几年（2009 年 2 月停刊）。C++ 会议被吸收到“面向对象”或一般软件开发会议中，剥夺了 C++ 社区展示新发展的场所。书籍仍在编写中，但程序员阅读的书籍越来越少（或至少购买的书越来越少，因为盗版变得越来越容易，因此统计数据变得越来越不可靠），在线资源变得越来越受欢迎。</p><p>一个更严重的问题是 C++ 在教育中的作用正在急剧下降。C++ 不再是“新的、有趣的”，而 Java 正作为一种更简单、更强大的语言被直接推向大学。美国高中计算机科学考试突然从 C++ 变成了 Java。在大学里，Java 作为入门语言的使用急剧增加。C++ 的教学质量也在下降，大多数课程优先选择 C 语言，或者认为严重依赖类层次结构的面向对象编程是唯一正确的方法。这两种方法都弱化了 C++ 的优势，并且需要大量使用宏。标准库（依靠泛型编程；（<a href="#22-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8D%81%E5%B9%B4">§2.2</a>））和 RAII（依赖构造函数&#x2F;析构函数对（<a href="#221-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">§2.2.1</a>））经常被完全排除在基础课程之外，或者被放在一个所谓的“高级特性”部分，大多数学生要么从未接触过，要么认为它很可怕。教科书经常陷入晦涩难懂的细节。当然也有例外，但平均来说，呈现给学生的 C++ 远不是最佳的工程实践。在 2005 年，我接受了挑战，给大学一年级的学生教编程。我调查了大约二十本最流行的 C++ 编程教材，最后大声抱怨：</p><blockquote><p>如果那就是 C++，我也会不喜欢它！</p></blockquote><p>在用一本著名的教科书教了一年书后，我开始只用自己的教案，并且在 2008 年出版了《C++ 程序设计：原理与实践》（*Programming: Principles and Practice Using C++*）[Stroustrup 2008a]，但直到今天，许多 C++ 教学仍带有 1980 年代的特色。</p><p>尽管如此，C++ 的使用又开始增加了。我认为这是因为根本的技术趋势再次青睐 C++，并且在二十一世纪的第一个十年结束的时候，C++11 的出现也有所帮助。</p><p>Boost 库和 Boost 组织非常重要 [Boost 1998–2020]。1998 年，经验丰富的开发者及 WG21 的有影响力的成员 Beman Dawes 建立了一个“C++ 代码库网站”[Dawes 1998]，其明确目标是开发 C++ 库以确立现有实践，使得未来的标准化可以据此进行。在此之前，C++ 甚至从来没有一个公共的代码库。Boost 慢慢成长为一个活跃的组织，有新库的同行评审和一年一度的会议。Boost 库被广泛使用，最流行的被吸收到标准中（例如，<code>regex</code>（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）、<code>thread</code>（<a href="04.md#412-%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%94%81">§4.1.2</a>）、<code>shared_ptr</code>（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）、<code>variant</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）和文件系统（<a href="08.md#86-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">§8.6</a>））。对于 C++ 社区来说重要的是，Boost 库比它们的 ISO 标准版本早十多年，但仍被当作某种“预备标准”来信任。有许多委员会成员都参与了 Boost，特别是 Dave Abrahams、Doug Gregor、Jaakko Järvi、Andrew Sutton，当然还有 Beman Dawes。</p><p>到 2006 年，C++ 在业界已经不再是新鲜刺激的东西，但它遍布很多行业。在 C++ 诞生的电信行业，它一直被大量使用。从电信领域出发，它已经扩展到游戏（如 Unreal、PlayStation、Xbox 和 Douglas Adams 的《宇宙飞船泰坦》）、金融（如摩根士丹利和 Renaissance Technologies）、微电子（如英特尔和 Mentor Graphics）、电影（如皮克斯和 Maya）、航空航天（如洛克希德·马丁和美国国家航空航天局）和许多其他行业。</p><p>就我个人而言，我特别喜欢 C++ 在科学和工程中的广泛使用，比如高能物理（例如 CERN 欧洲核子研究中心、SLAC 国家加速器实验室、费米实验室）、生物学（例如人类基因组项目）、空间探索（例如火星漫游车和深空通信网络）、医学和生物学（例如断层扫描、常规成像、人类基因组项目和监控设备）等等。</p><h2 id="2-4-其他语言"><a href="#2-4-其他语言" class="headerlink" title="2.4 其他语言"></a>2.4 其他语言</h2><p>人们常常会寻找其他编程语言对 C++ 的直接技术影响。其实非常之少。典型情况是，影响涌现自共同的前代语言和共同思想（而非特定的现有语言）。扩展 C++ 的决定性理由往往与 C++ 社区中已经发现的问题有关。直接从流行语言中借鉴的情况并不常见，而且比人们想象的要困难得多。大多数标准委员会成员都掌握多种语言，并密切留意（其他语言中）有用的功能、库和技巧。</p><p>下面是其他语言在二十一世纪对 C++ 的某些真实或假想的影响：</p><ul><li><code>auto</code>——从初始化器推断类型的能力。它在现代语言中很流行，但也已由来已久。我不知它的最早起源，但我在 1983 年实现这个功能的时候，也并不认为它很新颖（<a href="04.md#421-auto-%E5%92%8C-decltype">§4.2.1</a>）。</li><li><code>tuple</code>——许多语言，特别是源自函数式编程传统的语言，都有元组，它通常是一个内置类型。C++ 标准库 <code>tuple</code> 及其许多用法都从中受到启发。<code>std::tuple</code> 派生自 <code>boost::tuple</code> [Boost 1998–2020]（<a href="04.md#434-tuple">§4.3.4</a>）。</li><li><code>regex</code>——加入 C++11 的标准库 <code>regex</code> 是（经由 Boost；已致谢）从 Unix 和 JavaScript 的功能中拷贝来的（<a href="04.md#46-c11%E6%A0%87%E5%87%86%E5%BA%93%E7%BB%84%E4%BB%B6">§4.6</a>）。</li><li>函数式编程——函数式编程特性和 C++ 构件之间有许多明显的相似之处。大多数不是简单的语言特性，而是编程技巧。STL 受到函数式编程的启发，并首先在 Scheme [Stepanov 1986] 和 Ada [Musser and Stepanov 1987] 中进行了尝试（未成功）。</li><li><code>future</code> 和 <code>promise</code>——源自 Multilisp，经由其他 Lisp 方言（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）。</li><li>范围 <code>for</code>——许多语言中都有对应物，但直接启发来自 STL 序列（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）。</li><li><code>variant</code>、<code>any</code> 和 <code>optional</code>——显然受到多种语言的启发（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）。</li><li>lambda 表达式——显然，部分灵感来自于函数式语言中 lambda 表达式的应用。但是，在 C++ 中，lambda 表达式的根源还可以上溯到 BCPL 语言中用作表达式的代码块、局部函数（多次被 C 和 C++ 拒绝，因其容易出错且增加了复杂性）和（最重要的）函数对象（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）。</li><li><code>final</code> 和 <code>override</code>——用于更明确地管理类层次结构，并且在许多面向对象的语言中都可以使用。在早期的 C++ 中已经考虑过它们了，但当时被认为是不必要的。</li><li>三路比较运算符 <code>&lt;=&gt;</code>，受 C 的 <code>strcmp</code> 及 PERL、PHP、Python 和 Ruby 语言的运算符的启发（<a href="09.md#934-">§9.3.4</a>）。</li><li><code>await</code>——C++ 里最早的协程（<a href="01.md#11-%E5%B9%B4%E8%A1%A8">§1.1</a>）受 Simula 启发，但是作为库提供，而不是作为语言特性，这是为了给其他替代的并发技术留出空间。C++20 中的无栈协程的思想主要来自 F#（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）。</li></ul><p>即使以非常直接的方式从另一种语言借用了某个特性，该特性也会发生变化。通常，为了适合 C++ 语法会发生很大变化。当从支持垃圾收集的语言借鉴时，生命周期问题必须得到解决。而 C++ 区分对象和对象的引用，这通常使得 C++ 需要以和原语言不同的方式来解决。在“翻译”成 C++ 的过程中，经常会发现全新的用法。在把 lambda 引入 C++ 的过程中，出现了大量此类现象的例子（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）。</p><p>在很多人的想象中，我（和其他参与 C++ 的人）整日无所事事，满脑子想的是在流行语言中如何占据主导地位，为这个复杂的语言战争制定战略。实际上，我并没有在那上面花时间。大多数日子里，我不会去思考其他的语言，除非我碰巧出于一般的技术兴趣去学习一门其他语言或要使用它来完成一些工作。我要做的是与软件开发人员交谈，考虑人们在使用 C++ 时遇到的问题，还要考虑潮水般涌入标准委员会的改进建议。当然，我也编写代码来体验问题并测试改进思路。问题在于要能抽出时间冷静地考虑，什么是根本的，什么只是一时流行，以及什么会造成危害。</p><p>同样，C++ 对其他语言的贡献也难以估量。通常，类似的特性是平行演化的，或有着共同的根源。例如：</p><ul><li>Java 和 C# 中的泛型——他们采用了其他语言的泛型模式，但采用了 C++ 语法，并且是在 C++ 大规模展示了泛型编程的用途之后，才添加泛型。</li><li>Java、Python 等的资源弃置惯用法（dispose idiom）——这大致是在垃圾收集语言中最能接近析构函数的做法了。</li><li>D 编程语言进行编译期求值——我向 Walter Bright 解释了早期的 constexpr 设计。</li><li>C++ 基于构造函数和析构函数的对象生存期模型是 Rust 灵感的一部分。好笑的是，最近 C++ 经常被指责从 Rust 那里借用了这种想法。</li><li>C 采用了 C++11 的内存模型、函数声明和定义语法、以声明为语句、<code>const</code>、<code>//</code> 注释、<code>inline</code> 以及 <code>for</code> 循环中的初始化表达式。</li></ul><p>C++ 与其他语言之间的许多差异源于 C++ 对析构函数的使用。这使得垃圾收集的语言很难直接从 C++ 借用。</p>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_03/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_03/</url>
    
    <content type="html"><![CDATA[<h1 id="3-C-标准委员会"><a href="#3-C-标准委员会" class="headerlink" title="3. C++ 标准委员会"></a>3. C++ 标准委员会</h1><p>国际 C++ 标准委员会正式名称为 <strong>ISO&#x2F;IEC JTC1&#x2F;SC22&#x2F;WG21</strong>，它是 C++ 发展的核心。自 1991 年成立以来，就一直如此。而从 1989 年开始到它成立之前，C++ 开发的中心则是美国国家标准学会（ANSI）的 C++ 标准委员会 [Stroustrup 1993]。C++ 没有腰缠万贯的所有者，也没有其他重要的资金提供来源，因此社区依赖于企业开发和开源项目。对于很多处于相互竞争的组织中的人来说，WG21 和各个国家的标准委员会是他们能够会面并联合解决问题的唯一场合。</p><p>委员会成员都是志愿者，也没有带薪的秘书处，虽然许多委员确实以其工作组织的代表身份出现。在每次会议上，都会有人自豪地声称就代表“自己”。也就是说，他们没有得到赞助，只代表自己。有些人换工作后，就会代表新组织，这种情况并不少见。许多人以“参加 C++ 标准委员会”作为接受新工作的条件。有人加入了委员会来学习 C++，有人则把“C++ 委员会成员”当作资格来引用（并非一定是真的）。</p><p>有些人仅参加过几次会议，不那么经常。另一方面，也有人一直参加了大多数会议，数十年没有间断。一开始时，还有现在，我们一年开三次会。在 1998 年标准之后的几年里，我们一年只开两次会。目前，除了面对面的会议，还有很多的电话会议进行补充，以及天天都有的大量电子邮件。</p><p>在这里，我会描述</p><ul><li>标准的作用（<a href="#31-%E6%A0%87%E5%87%86">§3.1</a>）</li><li>委员会的组织（<a href="#32-%E7%BB%84%E7%BB%87">§3.2</a>）</li><li>委员会的结构对 C++ 设计的影响（<a href="#33-%E5%AF%B9%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%BD%B1%E5%93%8D">§3.3</a>）</li></ul><h2 id="3-1-标准"><a href="#3-1-标准" class="headerlink" title="3.1 标准"></a>3.1 标准</h2><p>标准委员会的目的是编写标准。制定标准的一个官方理由是“<strong>促进贸易，特别是减少国际贸易的技术壁垒和人为障碍</strong>”，及“<strong>提供实现经济、效率和互操作性的框架</strong>”。标准是规范，不是实现。它的目的是保持多个实现一致，并确定“一致性”在一个必须能够有效利用各种不同底层硬件的世界里到底意味着什么。许多程序员在理解这一点上存在问题。他们要么认为当前的编译器就是语言的定义，要么难以理解为什么很难在许多不同的、通常是竞争性的组织之间达成 100％ 的协议。在 1990 年代，委员会考虑过制定形式规约（formal specification），但咨询过世界一流的专家后得出结论，规约技术的进展和成员的水平都还达不到制定 C++ 形式规约的程度。当然，也考虑过参考实现，但语言的复杂度，特别是与硬件使用和优化相关的问题，已经挫败了这种想法。如果有参考实现，它会太复杂，也会代价过大。要么就得把它简化到一种对最困难的问题没有帮助的程度，但这样的困难问题正是最需要参考实现的场合。再有，当 N 个彼此竞争的实现团队记录他们的决策、运行广泛的合规性测试并讨论它们的不同之处时，会有些意外收获；如果已经有了个复杂的参考实现，就可能掩盖掉这样的意外收获。对于 C++，从前端实现来说（Clang、EDG、GCC 和微软）N 至少为 4，至于后端，N 少说有十几个。</p><p>因此，标准委员会正在努力解决拥有多种实现带来的问题。另一条路是冒险搞单一文化。如果 C++ 技术只来源于一个组织，那么无论好坏，每个人都会得到相同的东西。一个控制“唯一真正实现”的组织将在社区中拥有主导话语权，他们出现的问题，就会影响到所有人。特别是，一旦有资金问题、商业顾虑、政治见解或者技术上的一意孤行，就会严重破坏语言及其用户群体。</p><p>无论好坏，C++ 社区选择了“半组织”的混乱，里面有一个很大的委员会加上多个编译器、工具及库的供应者。我们没有用统一所有权或独裁者模式。</p><h2 id="3-2-组织"><a href="#3-2-组织" class="headerlink" title="3.2 组织"></a>3.2 组织</h2><p>对于 C++17 和 C++ 20 的工作，每次面对面的 WG21 会议有多达 250 人出席，而总成员人数约为出席人数的两倍。此外，加拿大、芬兰、法国、德国、俄罗斯、西班牙、英国、美国等十几个国家都有国家标准委员会以及 C++ 标准技术联盟的付费支持成员。成员代表了一百多个组织。为了让大家有所了解，在此列举部分成员所属组织：苹果、Bloomberg、欧洲核子研究中心、Codeplay、EDG（Edison Design Group）、Facebook、谷歌、IBM、英特尔、微软、摩根士丹利、英伟达、Qt、高通、红帽、Ripple、美国 Sandia 国家实验室、拉珀斯维尔应用科技大学（HSR）和马德里卡洛斯三世大学。编译器供应者、硬件供应者、金融、游戏、库供应者、平台供应者、国家实验室（物理）等都有坚实的代表。早期 C++ 中突出的电信业者的身影已经减少，而过去极少的大学的身影似乎在增加。</p><p>显然，如此庞大的组织和个人组成的群体代表着千差万别的兴趣和技术背景，需要一个组织结构来运作。会议是围绕工作组（WG）和研究组（SG）进行组织的。2019 年的夏天，我们已经有了这样一些分组：</p><ul><li><strong>核心工作组</strong>（Core WG 或 CWG）——编写语言的最终标准文本——主席 Michael Miller（EDG）。</li><li><strong>库工作组</strong>（Library WG 或 LWG）——为标准库编写最终标准文本——主席 Marshall Clow（C++ 联盟，之前代表高通）。</li><li><strong>演化工作组</strong>（Evolution WG 或 EWG）——处理语言建议——主席 Ville Voutilainen（Qt，之前代表 Symbio）。</li><li><strong>库演化工作组</strong>（Library Evolution WG 或 LEWG）——处理标准库提案——主席 Titus Winters（谷歌）。</li></ul><p>研究组探索新领域并设计可能的标准化：</p><ul><li><strong>SG1 并发</strong>——并发和并行性主题——主席 Olivier Giroux（英伟达）。</li><li><strong>SG5 事务内存</strong>——探索事务内存的构件——主席 Michael Wong（Codeplay，之前代表 IBM）。</li><li><strong>SG6 数值</strong>——包括但不限于定点数、浮点数和分数——主席 Lawrence Crowl（“自己”，之前代表谷歌和 Sun）。</li><li><strong>SG7 编译期编程</strong>——最初专注于编译期反射，然后扩展到一般的编译期编程——主席 Chandler Carruth（谷歌）。</li><li><strong>SG12 未定义的行为和漏洞</strong>——系统地审查漏洞和未定义&#x2F;未指定的行为——主席 Gabriel Dos Reis（微软，之前代表得州农工大学）。</li><li><strong>SG13 人机界面和 I&#x2F;O</strong>——精选的底层输出（例如图形、音频）和输入（例如键盘、指点设备）的 I&#x2F;O 原语——主席 Roger Orr（英国标准（BSI））。</li><li><strong>SG14 游戏开发和低延迟</strong>——游戏开发者和其他有低延迟要求的人感兴趣的主题——主席 Michael Wong（Codeplay，之前代表 IBM）。</li><li><strong>SG15 工具</strong>——与针对标准 C++ 的开发者工具创建有关的主题，其中包括但不仅限于模块和包管理——主席 Titus Winters（谷歌）。</li><li><strong>SG16 Unicode</strong>——与 C++ 中的 Unicode 文本处理相关的主题——主席 Tom Honermann（Synopsys）。</li><li><strong>SG19 机器学习</strong>——主席 Michael Wong（CodePlay，之前代表 IBM）</li><li><strong>SG20 教育</strong>——探索可以支持学习者和教师掌握今天的 C++ 的方法——主席 Jan Christiaan van Winkel（谷歌）</li><li><strong>SG21 契约</strong>——在 C++20 失败后尝试设计出契约系统（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）——主席 John Spicer（EDG）</li></ul><p>2017 年成立了一个小组来解决与语言和标准库设计缺乏方向有关的问题 [Dawes et al. 2018]。该<strong>方向组</strong>（DG）的成员由召集人与工作组主席协商后任命，其成员是委员会、语言和标准库的长期贡献者。最初的成员是 Beman Dawes、Howard Hinnant、Bjarne Stroustrup、David Vandevoorde 和 Michael Wong。之后，Beman 退休，Roger Orr 加入。DG 的主席是轮流担任的，从我开始。DG 是咨询机构，其政策是只有在其成员一致同意的情况下才能提出意见。它维护有一份描述其建议的文档 [Dawes et al. 2018; Hinnant et al. 2019]。</p><p>工作组可持续十年以上，成员变化也很少。研究组则聚散自由，可能因兴趣使然，或者因为工作已经完成并提交给工作组进行最后的处理。例如，四个最重要的研究组已宣告胜利完成并解散：</p><ul><li><strong>SG2 模块</strong>——主席 Gabriel Dos Reis（微软，之前代表得州农工大学）。</li><li><strong>SG3 文件系统</strong>——主席 Beman Dawes（“自己”）。</li><li><strong>SG8 概念</strong>——主席 Andrew Sutton（俄亥俄州阿克伦大学，之前代表得州农工大学）。</li><li><strong>SG9 范围</strong>——更新 STL，以使用概念，简化写法，及提供无限序列和管道——主席，Eric Niebler（Facebook）。</li></ul><p><strong>SG4 网络</strong>，目前处于休眠状态，因为其结果正在等待被合并到标准（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）中。另一个研究组 <strong>SG11 数据库</strong>，因缺乏共识和缺乏足够数量的志愿者完成工作而解散。</p><p>某些研究组会产出技术规范（TS），这些技术规范可能是具有重要意义的文件，也以标准本身的风格写就。它们具有一定的官方（ISO）地位，但不能提供国际标准（IS）所具有的长期稳定性。并发研究组（SG1）自 2006 年以来一直活跃，大部分时间由 Hans-J. Boehm（谷歌，之前代表过惠普实验室和 SGI）领导，它的地位已经接近 WG 了。</p><p>除了这些分组外，还有一个半官方的 C&#x2F;C++ 联络组，由同时加入 C++ 委员会和 C 委员会（ISO&#x2F;SC22&#x2F;WG14）的成员组成。这个小组力图减少 C 和 C++ 之间的不兼容性，而 C++ 标准也会把每种不兼容之处记录下来。如果没有联络小组的不断努力，C 和 C++ 的兼容性远没有现在好。不过，即便如此，大多数从 C++ 导入 C 的特性都被修改过，而这就引入了一些不兼容性。</p><p>ISO 只需要也只认可三名正式官员：</p><ul><li><strong>召集人</strong>——担任工作组主席，制定工作组会议时间表（召开会议），任命研究组，并向更高级别的 ISO（SC22、JTC1 和 ITTF）负责——Herb Sutter（微软），自 2002 年以来一直担任该职位的工作，除 2008–2009 年期间是由 P.J. Plauger（Dinkumware）担任。</li><li><strong>项目编辑</strong>——最终负责将委员会批准的更改应用于标准的工作草案——Richard Smith（谷歌）；Pete Becker（Dinkumware）负责 C++11；Stefanus Du Toit（Intel）负责 C++14。</li><li><strong>书记</strong>——负责记录和分发 WG21 会议的会议纪要——Nina Ranns（Edison Design Group，之前代表 Symantec）。</li></ul><p>各个国家的标准委员会有各自自己的官员和章程。</p><p>显然，这些年来这些职位由不同的人担任过，但尽管工作量通常很大，很少有人在职少于 5 年。我曾担任 EWG 的主席 24 年，到 2014 年才把这一职位移交给 Ville Voutilainen。</p><p>通常，较小的提案直接提交给 EWG 和&#x2F;或 LEWG，较大的提案则从研究组开始。提案需要以书面形式提出，并有人进行演示。一般来说，处理一项重要的提案需要数次会议（通常为数年），并且需要数篇论文、修订论文和反复演示。最后，已经获得大力支持的提案将提交给整个委员会进行最终表决。召集人查看表决结果并裁定是否达成共识。共识不只是要多数。委员会更倾向于能在经过工作组处理和投票后获得一致同意，如果达不到，通常至少也需要 9 比 1 或 8 比 2 的优势。召集人很可能会认为 8 比 2 的多数票“未达成共识”。如果国家标准机构的负责人或几个主要委员表示强烈反对，就会发生这种情况。这样议题就会处于悬而未决的状态或者导致提案只被部分采纳。</p><p>标准会议令人筋疲力尽。通常，委员们从早餐到午夜一直在讨论工作问题。大多数时候，正式会议在 8:30–12:30 和 14:00–17:30 举行，加上大多数时候都会进行的晚间会议（19:00–22:00）。正在准备提案的委员的工作时间比这些还要长。WG 和 SG 主席一般在大多数用餐时间都在开会。周一至周五是全天，而如果没有任何意外发生，大多数委员会成员到了星期六的 15:00 左右会收工。不过，当会议在诸如夏威夷科纳（Kona）之类的好地方举行时，委员会以外的人似乎都不愿意相信开会并不是什么度假。</p><p>在 WG 和 SG 里，每个出席者都可以投一票。委员会全体会议的正式投票则是每个到会的组织一票（这样，大型组织就不会有多票），再加上国家标准机构的票数。“技术性投票”和国家机构投票必须一致才算达成共识。</p><p>委员会 2006 年以前的历史记录在 [Stroustrup 1993, 1994, 2007] 中。C++ 基金会（<a href="10.md#102-c-%E7%A4%BE%E5%8C%BA">§10.2</a>）在其网站（<a href="https://isocpp.org/std">isocpp.org&#x2F;std</a>）上维护了一份会及时更新的描述，涵盖组织、关键人物和委员会流程。</p><p>从 1989 年起，委员会的所有论文几乎都可以从一份文集中获取到 [WG21 1989–2020]。目前，该文集每年增加 500 多篇论文。另外，很多委员会的讨论是在已归档的邮件列表中进行的。每天可能有超过一百条邮件消息。要跟上委员会中发生的所有事情非常难，特别是由于很多事情需要专门的技术知识才能跟进。我将自己的 WG21 论文集保存在主页 [Stroustrup 1990–2020] 上。</p><p>传统上，ISO 标准每十年左右修订一次。例如，我们有 C89、C99 和 C11。如此长的修订周期是有问题的，如果新特性错过了特性冻结，我们就会要再等上 12 年左右才能将它加入标准。人们自然就会主张将即将通过的标准拖延一两年：“这个特性太重要了，不能等，因此得延迟一下标准的发布！”这就是为什么原本的 C++0x 结果成了 C++11，在 C++98 后过了 13 年。</p><p>在 C++11 之后，一些委员会成员希望缩短周期，召集人 Herb Sutter 建议我们采用列车模型。也就是说，列车在预定时间出发，任何没上车的人将不得不等待下一班。大家喜欢这个建议，也花了挺长时间讨论标准修订之间的合适间隔。我主张短点，3 年，因为再长（例如 5 年）就容易被“这个特性非常重要，等不了”这样的说法拖累，导致发布延迟。我们商定了三年的发布周期，Herb Sutter 补充建议采用交替发行大版本和小版本的英特尔“滴答”模型。这也得到了同意，因此在 C++11（<a href="04.md#4-c11%E6%84%9F%E8%A7%89%E5%83%8F%E6%98%AF%E9%97%A8%E6%96%B0%E8%AF%AD%E8%A8%80">§4</a>）三年后，我们发布了 C++14（<a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>），它纳入了之前被延迟的特性并纠正了早期使用中发现的小问题。C++17 也按时交付，但可惜并不是一次大升级（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）。C++20 在 2019 年 2 月通过投票，确定了完整的发布特性。最终技术性投票于 2020 年 2 月在布拉格完成。</p><h2 id="3-3-对设计的影响"><a href="#3-3-对设计的影响" class="headerlink" title="3.3 对设计的影响"></a>3.3 对设计的影响</h2><p>这样的工作组织方式、复杂的决策流程以及大量的参与者会如何影响 C++ 的发展？看看委员会的规模、组成及其流程，我认为，任何建设性成果居然能从中产生，都足以令人惊喜。这已经不只是“委员会的设计”了，而是“多委员会的联合设计”。</p><p>此外，委员会的管理结构非常薄弱，甚至缺乏最基本的管理工具：</p><ul><li>成员资格、发言或投票没有任何资质要求（例如，学历或实际经验）。支付 ISO 会员费（2018 年美国会员为 1280 美元）并参加两次会议，就能拥有正式投票权。在研究组和工作组中，任何人都可以发言与投票，即使这是他们的第一次参加会议。</li><li>除了让提案得到采纳，以及看到改进后的标准而感到满足，并没有任何其他回报。不过，满足感确实是一个主要动力。</li><li>没有真正的办法来阻止破坏性行为。非官方委员会管理人员所能做的只是有礼貌地提醒人们不要做别人认为具有破坏性的事情。然而委员们对于什么是有破坏性的，意见也不一致。</li></ul><p>当考虑在一个大型委员会里演化一门语言的各种问题之前，请记住委员会里大部分时间和工作都是为了解决“小问题”；就是那些不会上升到语言设计哲学、学术出版物、或会议演示层面的问题。它们对于防止语言及其标准库被分割成方言，并保证在编译器和平台之间的可移植性至关重要。这些问题包括：命名、名称查找、重载决策、语法细节、构件的确切含义、临时变量的生存周期、链接，还有其他很多很多。许多问题需要技巧才能解决，而拙劣的解决方案可能带来让人吃惊而具有破坏性的后果。解决方案往往经过精心设计，以最大程度减少对现有代码的破坏。委员会每年解决数百个问题。我估计委员至少要为此花费他们时间和精力的三分之一，乃至于三分之二。这项工作往往被忽视和低估。如果你用过计算机或计算机化的设备（例如电话或汽车），你得感谢 CWG 和 LWG 的工作。</p><p>当关注由一个庞大的委员会引起的问题时，也请记住，这些问题本质是一种有钱人的烦恼：C++ 的标准化流程由数百位各种不同背景的热心人士所驱动，他们的经验各不相同，但都满怀理想主义。</p><p>委员会应起到过滤作用，也就是说，把坏提案挡在标准之外，同时，还要提升最后通过的提案的品质。委员会的存在，是要鼓励大家提出建议，并主动提供帮助。然而，并没有正式的提案征求流程。</p><p>不存在全职的 C++ 设计者，尽管有许多全职人员从事 C++ 编译器、库和工具方面的工作。直到最近，委员会中还很少有人从事应用程序开发，这是一个问题，因为它使委员会偏向于语言“律师”、高阶特性和实现问题，而不是直接解决大量 C++ 开发者的需求——很多成员只是间接地了解这些需求。最近新成员急剧增加，也许会部分缓解这个问题。</p><p>委员会中的教育工作者相对较少。这可能是个问题，因为委员会（理所当然地）高度重视“易于学习”，但是委员们对其含义有着非常不同的理念（经常会意见强烈）。这往往使关于“简单性”和“易用性”的讨论变得混乱。</p><p>当思考组织问题对 C++ 发展的影响时，请记住，ISO 流程本不是为 200 人的会议而设计的——典型的 ISO 编程语言委员会只有一二十人。平均而言，我们在某种程度上是通过识别和解决问题来进行管理。考虑下面这些观察到的问题：</p><ul><li><p><strong>延迟</strong>：多阶段的流程为延迟、阻止提案和提案变化提供了很多机会。常常出现几十名委员坚持要满足他们的要求的情况，往往是通过阐释、扩展和寻找特例的方式。一个人眼中的过度延迟在另一个人看来却是尽职尽力。</p><p>  例如：概念（当前方案为 6 年（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>））、契约（从开始到失败花了 6 年（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>））、网络（15 年，仍在进行中（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>））和 constexpr（5 年（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>））。甚至 <code>nullptr</code> 被接受也花费了三年时间（<a href="04.md#426-nullptr">§4.2.6</a>）。</p></li><li><p><strong>孤立特性</strong>：大多数委员会成员喜欢特性的添加。另一方面，他们（非常合理地）深刻地担心破坏现有代码的可能性。这给了<strong>孤立特性</strong>系统性的优势，孤立特性是不影响语言和标准库其余部分的小提案。这样的小提案很少会对语言的使用产生重大影响，但却会增加学习和实现的复杂性。而且，到头来，它们往往还是会和其他特性发生令人惊讶的交互。</p><p>  例如：大多数在本语言演化总结中不值得提及的特性。结构化绑定（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）和运算符 <code>&lt;=&gt;</code>（<a href="08.md#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>）都需要多次会议去完善。</p></li><li><p><strong>后来者居上</strong>：有时经过多年的工作之后，提案已接近投票表决，一些一向未曾关注提案的委员此时进入讨论并提供了替代提案。这样的提案可能与原始提案有戏剧性的差异，或者只是一系列小的请求。这往往导致延迟、混乱、甚至有时是争执。这种时候，已经议定的问题又重被激活，而未经尝试（通常也未实现）的新想法和多年工作的成果获得了接近相等的权重。对老提案而言，瑕疵已经被发现过了，相应的技术折中也已经完成。人们很容易想象新事物的好处而忘记意外后果定律：<strong>意外后果总是会出现的</strong>。新的和相对未经审查的总是看起来比老的更好。这使得较早提案的拥护者变得具有防御性，从而分散了进一步完善“老提案”的精力。在这里“老”可能只是几年，或者就像概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）那样十几年。有时，接受未经尝试的后期变更（所谓改进）是为了安抚反对派；这经常导致意外的后果。后期加入讨论的人们，通常不会认为有“冲刺的必要”，而是自然地希望他们自己的想法得到认真考虑（而通常并没有认真考虑老提案的细节和理由）。这就可能会与已经在老提案上投入多年工作的人们产生摩擦。</p><p>  例子：结构化绑定（语法更改，对位域的新增支持，笨拙的 <code>get()</code>（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>））、概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。数字分隔符（<a href="05.md#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>）、点运算符（<a href="08.md#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>）、模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）、协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）、契约（<a href="09.md#961-%E5%A5%91%E7%BA%A6">§9.6.1</a>）。</p></li><li><p><strong>热情总青睐新事物</strong>：唤起对新事物的热情比反对它们容易。每个提案都是为某人解决某事，支持者愿意花大量时间展现其价值。而要反对它们，有人就不得不说像这样的话：</p><ul><li>“不，这个问题不是那么重要。”</li><li>“不，这种解决方案有缺陷。”</li><li>“不，你还没有充分记录解决方案。”</li><li>“不，你还没有仔细检查替代方案。”</li></ul><p>  不管措辞怎么客气，这都让反对者看起来更像“坏人”，是他们阻碍了进步并否认支持者需求的合理性。更糟糕的是，拥护者总是比反对者花费更多的时间来准备论文和演讲。大多数人喜欢对自己相信的事物进行建设性的工作，而不是小心地拆除他人的工作。因此，支持者通常都很热情并且准备充分，而反对者总是显得意见含糊而不懂细节。然而，每项新特性都有其成本：如设计、规范、实现、修订、部署和教学（<a href="09.md#95-%E6%AC%A1%E8%A6%81%E7%89%B9%E6%80%A7">§9.5</a>）。我害怕在演化工作组度过周四下午。那时，EWG 成员经过几天的大提案工作而感到疲倦，许多老成员（例如我）已经被拖入其他小组，参会者又急于看到有成果。这种时候，小提案就会只经受相对较少的审查而滑入标准。</p><p>  例如：条件中的显式测试（<a href="08.md#87-%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%98%BE%E5%BC%8F%E6%B5%8B%E8%AF%95">§8.7</a>）、<code>inline</code> 变量（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）、结构化绑定的后期更改（<a href="08.md#82-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A">§8.2</a>）。</p></li><li><p><strong>过度自信</strong>：相对于整个语言及标准库的复杂度，尤其是不同应用领域的 C++ 用户所面临的问题的复杂度，个人在日常工作中能获得的经验总是不足的。并非所有委员会成员都能意识到这一局限，或是能通过质疑自身经验的推广价值加以弥补。这就导致某些一般性有限的提案被过度推广。更糟糕的是，一些委员强烈反对某些提案，是因为他们不认为有必要解决该提案所针对的问题。语言设计需要一定的智力上的谦逊 [Stroustrup 2019b]。先想出来的解决方案很少是最好的，而未经进一步认真思考就提出轻率的反对意见和建议很少会带来改进。</p><p>  例子：出于对犯错者的保护，就不举例了。</p></li><li><p><strong>实现时机不当</strong>：在标准流程中，实现提案晚了有风险：特性出现严重缺陷、有潜在无法实现的部分、以及缺乏使用反馈；实现早了也有风险：特性以不完整的、次优的且难以使用的形式冻结。委员会中的许多人不会投票赞成尚未实现或以他们不信任的方式实现的提案。另一方面，许多实现者不愿意为委员会未批准的提案投入实现资源。这是一个困难而现实的两难困境。委员会经常听到“它已经实现了吗？”的问题。通常，“它是经过设计的吗？” 和“要如何使用？” 是更重要的问题。人们很容易在细节中迷失。我提出的走出这一困境的方法是，就建议的方向、提案的总体范围达成一致，然后从一个相对较小子集的详细设计和实现出发，以关键用例为指导前进。这样，我们可以相对较早地获得用户体验，并了解该特性如何与其他特性交互。这需要对这种语言应该是什么有一个长远的看法 [Stroustrup 1993, 1994, 2007]（<a href="01.md#1-%E5%89%8D%E8%A8%80">§1</a>），（<a href="11.md#112-%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%88%90%E5%8A%9F">§11.2</a>），否则语言就会沦为机会主义的零敲碎打。如果这个方法起作用，语言将从反馈和有机增长中受益。</p><p>  例子：模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）、C++ 0x 概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）和 <code>&lt;=&gt;</code>（<a href="08.md#884-%E7%BC%BA%E7%9C%81%E6%AF%94%E8%BE%83">§8.8.4</a>）。</p></li><li><p><strong>特性交互</strong>：最难处理的问题之一是特性的组合使用。一定程度上这是规范和实现的技术问题。因此，这会占用大量委员会时间。从设计的角度来看，更难的问题是要预计新特性在整个语言的语境中如何使用，这些语境包括其他正在考虑中的语言和库的新特性。每个特性都应设计成便于同其他特性结合使用。我担心这一点没有得到重视。很少有提案书提供详细的讨论，而委员会里关于特性交互的讨论往往简短或混乱。其结果之一是，个别特性趋于膨胀而只好把它孤立于语言的其余部分才能用起来。</p><p>  例子：<code>tuple</code>（<a href="04.md#434-tuple">§4.3.4</a>）和 <code>&lt;=&gt;</code>（<a href="09.md#934-">§9.3.4</a>）。为 lambda 表达式（<a href="04.md#431-lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F">§4.3.1</a>）中的动作指定专用语法的（失败）提案。</p></li><li><p><strong>篇幅和分心</strong>：千头万绪往往同时发生，没有人能全跟得上。那些尝试全部关注的人，就容易失去对真正重要课题的关注，而把注意力分散在一些事实证明并不那么重要的课题上。如今每年有超过 500 篇委员会论文，有些长达数十甚至数百页。与 2010 年代初相比，文献总篇幅翻了一番。我注意到，2018 年秋天的会前邮件（新论文汇总）的字数是莎士比亚全集的三倍。</p><p>  电子邮件的泛滥最让人分心，因为许多委员喜欢通过一波一波地爆发短邮件来进行技术讨论。在这样的讨论中掉队意味着失去对问题的跟踪，其结果可能是，共识只是从几个一直能跟得上讨论的人中间浮现。</p><p>  这种讨论不利于冷静而系统地权衡各种选择。有时候，它会导致不幸的特性滑入标准。有时候，它会导致不一致的设计理念体现于语言和标准库的不同部分，进而损害了互操作性。</p><p>  例子：<code>any</code>、<code>optional</code> 和 <code>variant</code> 的不同接口（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）。概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）。</p></li><li><p><strong>精确规范</strong>：标准是规范，而不是实现。但是，标准是用英语编写的，因此我们做不到数学般的精度。委员会的许多成员擅长数学，但不擅长数学的人更多，因此在规范中没办法使用数学式的写法。试图使英文文本精确而详尽，则会让文本变得生硬又难以理解。我常常很难理解标准中对我自己提案的描述。</p><p>  大多数委员是程序员，而不是设计师，因此规范有时看起来会像程序——用没有类型系统或编译器的低级语言写成的程序。有详尽的如果、那么、否则的说明，却很少写出不变量。更糟糕的是，很多词汇继承自 C，而且是基于程序源代码文本中的标记，因此，更高级别的概念仅被间接提出。</p><p>  奇怪的是，标准库规范在结构上明显比语言规范更为正式。</p></li><li><p><strong>经院主义</strong>：当然有必要大力强调标准文本的正确性和准确性。但是，人们有时会忘记标准本身可能就是错误的，而仅根据标准文本的论证来讨论正确性。这样一来，根据标准文本所应反映的模型和使用上的论证，反倒可能被忽略。</p></li><li><p><strong>方向</strong>：哪些问题是真实的？重要吗？对于谁？哪些紧急？十年后，哪些解决方案仍然有意义？有些事情也许算个问题，但这并不意味着它必须在语言里有直接的解决方案。尤其是，委员会很难记住这一点：一种语言不可能对所有人来说都是万能的。更难以接受的是，它居然不能解决每个委员最紧急的问题 [Stroustrup 2018d]。</p><p>  例子：C++17（<a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>）和 C++ 20（<a href="09.md#9-c20%E6%96%B9%E5%90%91%E4%B9%8B%E4%BA%89">§9</a>）。</p></li><li><p><strong>专一关注</strong>：一些委员仅关注一个或两个课题，例如语言技术、易用性、“可教学性”、效率、使用单一编程风格、在单个行业中使用、在单个公司中使用、单个语言特性等。对于专一关注的委员而言，这可能是一种非常有效的技巧，但这样做会让广泛的、平衡的进展变得困难。过分相信理论或个人经验则是这个问题的另一类例子。一个好的建议在许多领域都会推动进步，但通常不能在所有这些方面都达到完美。</p></li><li><p><strong>原则的不适当应用</strong>：将一般原则应用于具体事例通常很困难。有时，我们会不与其他原则进行必要折中，就去严格应用某项原则。折中的必要性是《设计和演化》一书 [Stroustrup 1994] 将设计原则称为“经验法则”的原因之一。有时，似乎没有经验基础就凭空冒出来一个原则。有时，一个提案严格遵循了某一个原则，而另一个提案则忽略它。有原则的设计很困难；它需要品味、经验以及原则。实用的语言设计不只是从第一原理出发进行演绎的练习。通常，多种原则之间必须进行权衡。</p></li><li><p><strong>倾向专家的偏见</strong>：想象别人的问题总是困难的。委员会成员几乎都是某方面的专家。在日常工作中，他们通常是处理最细微、最复杂问题的人。这样的问题在“外面”的数十亿行常规 C++ 代码中一般不常见，而且也不是大多数 C++ 程序员所苦恼的问题。但是，对委员会来说，专家级的问题通常就是紧急问题，也是最容易通过流程的问题。</p><p>  例子：支持 <code>enable_if</code> 和类型特征（<a href="04.md#451-%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7">§4.5.1</a>）在标准库中的使用简直水到渠成，但接受概念（<a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>）却大费周章。</p></li><li><p><strong>聪明的问题</strong>：委员会成员一般是聪明人，他们中许多人无法抵御机灵的解决方案。此外，他们也很难断定，并非每个问题都值得解决，而拥有解决方案也并不意味着我们必须将其纳入标准。这会带来过于精巧的特性，带来大多数程序员用不着的特性。公平起见，也需要指出，许多程序员也很聪明，有时也会以使用过分机灵的语言和标准库特性为乐。</p><p>  例子：在有些提案中，即使简单用法也需要用上严肃的模板元编程。</p></li><li><p><strong>不愿妥协</strong>：大多数委员会成员都有强烈的意见，但要在一个大型团体中达成共识需要妥协。分辨哪些妥协无关紧要，而哪些妥协事关基本原则，有时会很困难。后一类妥协可能对语言造成破坏，应该避免。不幸的是，当委员们坚信自己所担忧的才至关重要时，他们比起心态开放的委员就有了有关键的战术优势。有些人能做到从整体上关注语言而不纠结于个别话题，但他们往往得向不能如此的人们屈服。而反过来，那些从不认真质疑自己的原则或需求的人，倒往往可以向别人视为必要的技术妥协发动猛攻。取得进展需要关注整个社区，有自知之明，并懂得适当的谦逊 [Stroustrup 2019b]。</p></li><li><p><strong>缺乏优先级</strong>：从技术的角度来看，所有问题都是平等的：不精确的规范就是不精确的规范，这一点与它未能正确规定的内容是什么不相干。任何可能从类型系统的漏洞中混进代码的错误原则上都可能造成死亡和毁灭。但是，现实世界中不同错误的影响可能大不相同。实际上，大多数晦涩的细节基本上没有破环性。有些人在研究设计细节时很难记住这一点。</p><p>  例子：在数字分隔符（<a href="05.md#51-%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6">§5.1</a>）上花费的时间比在范围 <code>for</code>（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）上花费的时间更多。</p></li><li><p><strong>完美主义</strong>：一个标准预期会被几百万人用到，并且可以稳定数十年。人们自然希望它是完美的。这会导致特性膨胀（特性过多），尤其是导致单个特性的膨胀。程序员善于想象出问题，特性在委员会走流程的时候，委员们会坚持要它解决掉所有想象中的问题。这会导致严重的使命偏离，并导致只有专家才会喜爱的特性。这也可能导致特性一直无法加入标准。</p><p>  例子：<code>.</code> 运算符（<a href="08.md#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>）、网络库（<a href="08.md#881-%E7%BD%91%E7%BB%9C%E5%BA%93">§8.8.1</a>）和异常规约（<a href="04.md#453-noexcept-%E8%A7%84%E7%BA%A6">§4.5.3</a>）。</p></li><li><p><strong>少数人的阻挠</strong>：共识流程可以防止某些类型的错误，尤其是防止多数人的暴政。但是，它很容易受到个人和小团体的阻挠。这可以是好事（避免错误），但是当它在提案流程的各个阶段一再发生，或正好在最后一刻发生时，就会具有破坏性了。</p><p>  例子：<code>constexpr</code>（<a href="04.md#427-constexpr-%E5%87%BD%E6%95%B0">§4.2.7</a>）、<code>.</code> 运算符（<a href="08.md#882-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6">§8.8.2</a>）、模块（<a href="09.md#931-%E6%A8%A1%E5%9D%97">§9.3.1</a>）和协程（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）。</p></li><li><p><strong>内聚的团体</strong>：许多工作组和研究组都拥有稳定的核心人员群体，这些年来他们形成了内聚的技术观、共享的词汇表和特定的运作方式。这会使“外部人员”难以交流和贡献。这也可能使设计跨越 WG 边界的特性（例如同时具有库和语言部分的特性）变得困难。每个小组都往往会设计出适合其自身组织结构领域的内容，再次印证了老格言，即系统的结构总是长得像创造它的组织的结构。</p><p>  例子：范围 <code>for</code>（<a href="04.md#422-%E8%8C%83%E5%9B%B4-for">§4.2.2</a>）和可能需要更改语言的并发机制（<a href="04.md#413-%E6%9C%9F%E5%80%BCfuture">§4.1.3</a>）。<code>any</code>、<code>optional</code> 和 <code>variant</code>（<a href="08.md#83-variantoptional-%E5%92%8C-any">§8.3</a>）的接口差异。</p></li></ul><p>从积极的一面来看，基于个人敌意或针锋相对的行为非常罕见。从这个意义上讲，委员会是非常专业的。</p><p>幸运的是，并非每个提案都受所有这些现象的影响，并且大多数其他大型项目也会遇到这类问题。但是，以其 ISO 标准所代表的 C++ 语言，整体上反映出了这些现象。它们不是新问题，但是自 C++11 起出现得越来越多。我怀疑它们是由以下因素共同造成的</p><ul><li>委员会人数增加</li><li>新人的涌入</li><li>成员的专业化（分散化）</li><li>成员对 C++ 历史的了解有所减少</li></ul><p>尽管存在这些严重的问题，但标准制定流程仍屡屡成功，原因之一是很多人不断努力将负面影响降到最低。方向组（Direction Group）的建立就是这方面的努力的一部分（<a href="#32-%E7%BB%84%E7%BB%87">§3.2</a>）[Dawes et al. 2018; Stroustrup 2018d]。另见（<a href="11.md#114-%E6%95%99%E8%AE%AD">§11.4</a>）。工作组主席、笔记记录员、会议组织者和编辑组的不懈努力是无形的，但却至关重要。例如，Jens Maurer 数十年来一直在 CWG 中做笔记，帮助提案者编写标准文本，安排网络访问，为无法出席的成员安排电话接入，安排会议室，告知成员当地旅行的可能性，等等。</p><p>有其他方案吗？在理想的世界里，我会建议限定由一小部分（大约 5 人）的全职受信任专家委员做决定，而由大团队完成（例如超过 350 人的委员会）完成讨论、提案、以及大部分流程。但我不认为 C++ 会发展成这样，因为：</p><ul><li>没有人喜欢放弃权力（在这种情况下是投票权）。</li><li>要为固定的全职专家团队保持稳定的资金投入需要非同小可的技能（而这种技能在 C++ 社区还没有出现）。</li><li>激进的变化不会发生在成功的时候；只有 C++ 使用量的显著下降才能促使委员会进行剧烈的组织创新（到那时多半为时已晚）。</li></ul><p>我不认为公司控制是可行的替代方案，因为：</p><ul><li>公司期望投资回报。</li><li>公司的支持往往几年后就会消失。</li><li>公司往往选择差异化的优势，而不是惠及所有人的进步。</li></ul><p>我也不认为完全开放的审议流程（由成千上万人投票）是可行的：</p><ul><li>超过千人的投票就会失去品味。</li><li>大群体的成员和意见没法在几十年里保持稳定。</li></ul><p>对许多大型开源项目起作用的分级审批程序可能至少提供了部分方案，但是在 C 和 C++ 的标准化开始时，这方面的经验很少。当这样一个系统运行良好时，你在审批层级中的地位越高，审批者的知识基础就越广阔，他们关注的领域也就越广泛。在组织结构顶部，我们会找到一人或多人，他们对所有知识都有所了解、对所有用户都有所关心。而与此相对的是，提案越接近最终批准，ISO 流程就越会稀释专业知识和关注领域：全体会议上，许多委员投票的提案是他们不感兴趣、领域经验有限且没有密切关注的。人们努力想负起责任，但是这真的很难。还要从大局角度来看待每个提案，把它们当作其中的一部分，那就几乎不可能了。</p><p>这样看来，WG21 的工作还不算糟糕。我确实担心这样的工作模式能否使 C++ 长久保持连贯并与时俱进。从另一个角度来看，出席 C++ 标准会议的有 200 多人，比其他标准的团体要大一个数量级，而 ISO 的流程本来就是为那种较小的团体设计的。另外，委员的多样性远远超过了过去的老三样：头发斑白的专家、公司代表、以及国家机构代表。混乱有可能爆发。</p><p>我从温斯顿·丘吉尔的格言中得到些许安慰，“民主是最糟糕的政府形式，除了所有那些人类一再尝试过的其他形式”。</p><p>特别要指出，我不认为经常被建议的“仁慈的终身独裁者”模式可以规模化，而且，不管怎么说，该模型从来就没对 C++ 适用过。</p><p>在我心目中，启动语言设计项目的理想模式是单个人或一小群密切配合的朋友。但我看不到这种方式可以规模化。一门成熟的语言需要数十甚至数百个人来解决他们必须面对的各种问题。即使只是与相关的标准、行业组织进行协调，也会让一个小规模、紧密配合的团体彻底应接不暇。</p><h2 id="3-4-提案检查清单"><a href="#3-4-提案检查清单" class="headerlink" title="3.4 提案检查清单"></a>3.4 提案检查清单</h2><p>C++98 有个“如何编写提案”的指南 [Stroustrup et al. 1992]，但奇怪的是，演化组并没有为提给 C++14、C++17 或 C++20 的提案准备一份检查清单。有一份针对标准库提案的检查清单 [Meredith 2012]。对于 C++20，国家标准机构负责人的一份说明 [van Winkel et al. 2017] 和 Direction Group 的一份文件 [Hinnant et al. 2019] 给出了一些指导。以下是一个简短而不完整的问题清单，这些问题几乎总会被提给一项提案：</p><ul><li>要解决的问题是什么？将为什么样的用户提供服务？新手？专家？</li><li>解决方案是什么？阐明它所基于的原则。给出简单的使用案例和专家级的使用案例。</li><li>有哪些替代解决方案？库解决方案是否足够？为什么现有功能不够好？</li><li>为什么解决方案需要在标准中？</li><li>采用该技术存在哪些障碍？从现有的技术过渡可能需要多久？</li><li>已经实现了吗？在实现过程中遇到了或预期会遇到哪些问题？有用户体验吗？</li><li>会不会有很大的编译期开销？</li><li>该特性是否能融入到现有工具和编译器的框架中？</li><li>与变通方案相比，会有运行期开销吗？在时间上？在空间上？</li><li>会有兼容性问题吗？会破坏现有的代码吗？ABI 会被破坏吗？</li><li>新功能将如何与现有功能和其他新功能交互？</li><li>解决方案是否容易教授？教给谁？谁来教？</li><li>标准库会受到怎样的影响？</li><li>该提案是否会导致对未来标准进一步扩展的要求？</li><li>该特性在标准里如何措辞表达？</li><li>用户在使用新功能时可能会犯哪些错误？</li><li>就整个 C++ 社区的利益而言，该提案是否属于前 20 名？前 10？</li><li>该提案是否属于特定子社区的前三名？哪个子社区？</li><li>该提案是解决某一类问题的通用机制还是某个特定问题的特定解决方法？如果是针对一类问题，是哪一类问题？</li><li>该提案在语义、语法和命名方面是否与语言的其余部分一致？</li></ul><p>理想的情况是，一项提案能够回答所有这些问题，甚至更多，但这种情况很少发生。特别是，在最初的提案中，理由往往非常薄弱，因为提案者认为所处理的问题的重要性和他们建议的解决方案非常明显。然而，后续的论文、修改、电子邮件讨论和演化组的面对面讨论通常都会涉及这些问题，但很少对各个提案进行系统的或一致的检查。成员们倾向于关注技术细节（例如，语法、歧义、优化机会和命名），而不是重新探讨根本问题。有时，我所认为的糟糕的提案会混进去。原因通常是提案者的极大热情加上反对者的分心、礼貌和疲惫 [Stroustrup 2019b]。</p>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在纷繁多变的世界里茁壮成长：C++ 2006–2020</title>
    <link href="/2024/10/29/Cxx_HOPL4_zh_01/"/>
    <url>/2024/10/29/Cxx_HOPL4_zh_01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>最初，我设计 C++ 是为了回答这样的一个问题：如何直接操作硬件，同时又支持高效、高级的抽象？C++ 在 1980 年代仅仅是一个基于 C 和 Simula 语言功能的组合，在当时的计算机上作为系统编程的相对简单的解决方案，经过多年的发展，已经成长为一个远比当年更复杂和有效的工具，应用极其广泛。它保持了如下两方面的关注：</p><ul><li><strong>语言构件到硬件功能的直接映射</strong></li><li><strong>零开销抽象</strong></li></ul><p>这种组合是 C++ 区别于大多数语言的决定性特征。“零开销”是这样解释的 [Stroustrup 1994]：</p><ul><li>你不用的东西，你就不需要付出代价（“没有分散开销”）。</li><li>你使用的东西，你手工写代码也不会更好。</li></ul><p>抽象在代码中体现为函数、类、模板、概念和别名。</p><p>C++ 是一种活的语言，因此它会不断变化以应对新出现的挑战和演变中的使用风格。2006 年至 2020 年期间的这些挑战和变化是本文的重点。当然，一门语言本身不会改变；是人们改变了它。所以这也是参与 C++ 演化的人们的故事，他们识别出面临的挑战，诠释解决方案的局限，组织他们的工作成果，并解决他们之间必然出现的分歧。当我呈现一种语言或标准库特性时，其背景是 C++ 的一般发展和当时参与者的关切。对于在早期被接受的许多特性，我们现在从大量的工业使用中获得了后见之明。</p><p>C++ 主要是一种工业语言，一种构建系统的工具。对于用户来说，C++ 不仅仅是一种由规范定义的语言；它是由许多部分组成的工具集的一部分：</p><ul><li>语言</li><li>标准库</li><li>许多的其他库</li><li>庞大的——常常是旧的——代码库</li><li>工具（包括其他语言）</li><li>教学和培训</li><li>社区支持</li></ul><p>只要有可能，只要合适，我就会考虑这些组成部分之间的相互作用。</p><p>有一种流传广泛的谬见，就是程序员希望他们的语言是简单的。当你不得不学习一门新的语言、不得不设计一门编程课程、或是在学术论文中描述一门语言时，追求简单显然是实情。对于这样的用途，让语言干净地体现一些明确的原则是一个明显的优势，也是理想情况。当开发人员的焦点从学习转移到交付和维护重要的应用程序时，他们的需求从简单转移到全面的支持、稳定性（兼容性）和熟悉度。人们总是混淆熟悉度和简单，如果可以选择的话，他们更倾向于熟悉度而不是简单。</p><p>看待 C++ 的一种方式是，把它看成几十年来三种相互矛盾的要求的结果：</p><ul><li><strong>让语言更简单！</strong></li><li><strong>立即添加这两个必要特性！！</strong></li><li><strong>不要搞砸我的（任何）代码！！！</strong></li></ul><p>我添加了感叹号，因为这些观点的表达常常带着不小的情绪。</p><p>我想让简单的事情简单做，并确保复杂的事情并非不可能，也不会没有必要地难。前者对于不是语言律师的开发者来说是必不可少的；后者对于基础性代码的实现者是必要的。稳定是所有意图持续运行几十年的系统的基本属性，然而一种活的语言必须适应不断变化的世界。</p><p>C++ 有一些总体构想。我阐述了一些（如《C++ 语言的设计和演化》（*The Design and Evolution of C++*）[Stroustrup 1994]（<a href="02.md#2-%E8%83%8C%E6%99%AFc-%E7%9A%84-19792006">§2</a>）、设计原则（<a href="09.md#91-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§9.1</a>），以及 C++ 模型（<a href="11.md#111-c-%E6%A8%A1%E5%9E%8B">§11.1</a>））并试图让语言在演化时遵循它们。然而，C++ 的开发由 ISO 标准委员会控制，它主要关注的是长长的新特性列表，以及对实际细节的关心。这是社区里最能表达和最有影响力的人所坚持的东西，仅仅基于哲学或理论观点就否认他们的关切和意见的话，恐怕就失之鲁莽了。</p><h2 id="1-1-年表"><a href="#1-1-年表" class="headerlink" title="1.1 年表"></a>1.1 年表</h2><p>为了给出一个快速的概述，这里有一个粗略的年表。如果你不熟悉 C++，很多术语、构件、库都会晦涩难懂；大多数在以前的 HOPL 论文 [Stroustrup 1993, 2007] 或本文中有详细解释。</p><ul><li>1979 年：工作始于“带类的 C”，它变成了 C++；拥有了第一个非研究性的用户；<ul><li>语言：<code>class</code>、构造函数&#x2F;析构函数、<code>public</code>&#x2F;<code>private</code>、简单继承、函数参数类型检查</li><li>库：<code>task</code>（协程和仿真支持）、用宏参数化的 <code>vector</code></li></ul></li><li>1985 年：C++ 的首次商业发行；TC++PL1 [Stroustrup 1985b]<ul><li>语言：<code>virtual</code> 函数、运算符重载、引用、常量</li><li>库：<code>complex</code> 算法，流输入输出</li></ul></li><li>1989–91 年：ANSI 和 ISO 标准化开始；TC++PL2 [Stroustrup 1991]<ul><li>语言：抽象类、多重继承、异常、模板</li><li>库：输入输出流（但没有 <code>task</code>）</li></ul></li><li>1998 年：C++98、第一个 ISO C++ 标准 [Koenig1998]、TC++PL3 [Stroustrup 1997]<ul><li>语言：<code>namespace</code>、具名类型转换<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="译注：即新的、非 C 风格的类型转换">[1]</span></a></sup>、<code>bool</code>、<code>dynamic_cast</code></li><li>库：STL（容器和算法）、<code>string</code>、<code>bitset</code></li></ul></li><li>2011 年：C++11 [Becker 2011]，TC++PL4 [Stroustrup 2013]<ul><li>语言：内存模型、<code>auto</code>、范围 <code>for</code>、<code>constexpr</code>、lambda 表达式、用户定义字面量……</li><li>库：<code>thread</code> 和锁、<code>future</code>、<code>unique_ptr</code>、<code>shared_ptr</code>、<code>array</code>、时间和时钟、随机数、无序容器（哈希表）……</li></ul></li><li>2014 年：C++14 [du Toit 2014]<ul><li>语言：泛型 lambda 表达式、<code>constexpr</code> 函数中的局部变量、数字分隔符……</li><li>库：用户定义字面量……</li></ul></li><li>2017 年：C++17 [Smith 2017]<ul><li>语言：结构化绑定、变量模板、模板参数的构造函数推导……</li><li>库：文件系统、<code>scoped_lock</code>、<code>shared_mutex</code>（读写锁）、<code>any</code>、<code>variant</code>、<code>optional</code>、<code>string_view</code>、并行算法……</li></ul></li><li>2020 年：C++20 [Smith 2020]<ul><li>语言：<code>concept</code>、<code>module</code>、协程、三路比较、改进对编译期计算的支持……</li><li>库：概念、范围、日期和时区、<code>span</code>、格式、改进的并发和并行支持……</li></ul></li></ul><p>请注意，早年 C++ 的库是很匮乏的。事实上，当时还是存在大量各种各样的库（包括图形用户界面库），但很少被广泛使用，并且很多库是专有软件。这是在开源开发普及之前的事。这造成了 C++ 社区没有一个重要的共享基础库。在我的 HOPL2 论文 [Stroustrup 1993] 的回顾中，我认为那是早期 C++ 最糟糕的错误。</p><p>任务库 [Stroustrup 1985a,c] 是一个基于协程的库，支持事件驱动的仿真（例如随机数生成），与替代方案相比是非常高效的，甚至可以运行在很小的计算机上。例如，我在 256KB 的内存中运行了 700 个任务的仿真。任务库在 C++ 早期非常重要，是贝尔实验室和其他地方许多重要应用的基础。然而，它有点丑陋，并且不容易移植到 Sun 的 SPARC 体系结构，因此大多数 1989 年以后的实现都不支持它。2020 年，协程才刚刚回归（<a href="09.md#932-%E5%8D%8F%E7%A8%8B">§9.3.2</a>）。</p><p>总的来说，C++ 的特性不断增多。ISO 委员会也废除了一些特性，对语言进行了稍许清理，但是考虑到 C++ 的大量使用（数十亿行代码），重要的特性是永远不会被移除的。稳定性也是 C++ 的关键特性。要解决跟语言不断增长的规模和复杂性相关的问题，办法之一是通过编码指南（<a href="10.md#106-%E7%BC%96%E7%A0%81%E6%8C%87%E5%8D%97">§10.6</a>）。</p><h2 id="1-2-概述"><a href="#1-2-概述" class="headerlink" title="1.2 概述"></a>1.2 概述</h2><p>这篇论文是按照 ISO 标准发布的大致时间顺序组织的。</p><ul><li><a href="#1-%E5%89%8D%E8%A8%80">§1</a>：前言</li><li><a href="02.md#2-%E8%83%8C%E6%99%AFc-%E7%9A%84-19792006">§2</a>：背景：C++ 的 1979–2006</li><li><a href="03.md#3-c-%E6%A0%87%E5%87%86%E5%A7%94%E5%91%98%E4%BC%9A">§3</a>：C++ 标准委员会</li><li><a href="04.md#4-c11%E6%84%9F%E8%A7%89%E5%83%8F%E6%98%AF%E9%97%A8%E6%96%B0%E8%AF%AD%E8%A8%80">§4</a>：C++11：感觉像是门新语言</li><li><a href="05.md#5-c14%E5%AE%8C%E6%88%90-c11">§5</a>：C++14：完成 C++11</li><li><a href="06.md#6-%E6%A6%82%E5%BF%B5">§6</a>：概念</li><li><a href="07.md#7-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">§7</a>：错误处理</li><li><a href="08.md#8-c17%E5%A4%A7%E6%B5%B7%E8%BF%B7%E8%88%AA">§8</a>：C++17：大海迷航</li><li><a href="09.md#9-c20%E6%96%B9%E5%90%91%E4%B9%8B%E4%BA%89">§9</a>：C++20：方向之争</li><li><a href="10.md#10-2020-%E5%B9%B4%E7%9A%84-c">§10</a>：2020 年的 C++</li><li><a href="11.md#11-%E5%9B%9E%E9%A1%BE">§11</a>：回顾</li></ul><p>如果一个主题跨越了一段较长的时间，比如“概念”和标准化流程，我会把它放在一个地方，让内容优先于时间顺序。</p><p>这篇论文特别长，真是一篇专题论文了。但是从 2006 年到 2020 年，C++ 经历了两次主要修订：C++11 和 C++20；而论文的早期读者们也都要求获得更多的信息。结果就是论文的页数几乎翻倍。即使以目前的篇幅，读者也会发现某些重要的主题没有得到充分的展现，如并发和标准库。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>译注：即新的、非 C 风格的类型转换<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>History of C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp stl</title>
    <link href="/2024/09/11/algorithm/algorithm_learning/"/>
    <url>/2024/09/11/algorithm/algorithm_learning/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><iostream></h2><p>包含 </p><ol><li>&lt;ios&gt;</li><li>&lt;streambuf&gt;</li><li>&lt;istream&gt;</li><li>&lt;ostream&gt;</li></ol><p>对象</p><ol><li>cin wcin（wcin用来处理宽字符wide character，可配合<cwchar>使用）</li><li>cout wcout</li><li>cerr wcerr:不会被缓冲，会立即写出，通常用于输出错误信息或其他紧急消息。</li><li>clog wclog:和cou一样会被缓冲，而非立即写出，通常用于输出调试信息或日志信息。</li></ol><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><fstream></h2><p>fstream是iostream库的一部分，支持文本和二进制文件的读写。</p><p>是iostream库中的一个类，它继承自istream和ostream类</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Republic</title>
    <link href="/2024/09/08/the-republic/"/>
    <url>/2024/09/08/the-republic/</url>
    
    <content type="html"><![CDATA[<p>‘If we’re thinking about the effect of education – or the lack of it – on our nature, there’s another comparison we can make. Picture human beings living in some sort of underground cave dwelling, with an entrance which is long, as wide as the cave, and open to the light. Here they live, from earliest childhood, with their legs and necks in chains, so that they have to stay where they are, looking only ahead of them, prevented by the chains from turning their heads. They have light from a distant fire, which is burning behind them and above them. Between the fire and the prisoners, at a higher level than them, is a path along which you must picture a low wall that has been built, like the screen which hides people when they are giving a puppet show, and above which they make the puppets appear.’</p><p>‘Yes, I can picture all that,’ he said.</p><p>‘Picture also, along the length of the wall, people carrying all sorts of implements which project above it, and statues of people, and animals made of stone and wood and all kinds of materials. As you’d expect, some of the people carrying the objects are speaking, while others are silent.’</p><p>‘A strange picture. And strange prisoners.’</p><p>‘No more strange than us,’ I said. ‘Do you think, for a start, that prisoners of that sort have ever seen anything more of themselves and of one another than the shadows cast by the fire on the wall of the cave in front of them?’</p><p>‘How could they, if they had been prevented from moving their heads all their lives?’</p><p>‘What about the objects which are being carried? Wouldn’t they see only shadows of these also?’</p><p>‘Yes, of course.’</p><p>‘So if they were able to talk to one another, don’t you think they’d believe that the things they were giving names to were the things they could see passing?’</p><p>‘Yes, they’d be bound to.’</p><p>‘What if the prison had an echo from the wall in front of them? Every time one of the people passing by spoke, do you suppose they’d believe the source of the sound to be anything other than the passing shadow?’</p><p>‘No, that’s exactly what they would think.’</p><p>‘All in all, then, what people in this situation would take for truth would be nothing more than the shadows of the manufactured objects.’</p><p>‘Necessarily.’</p><p>‘Suppose nature brought this state of affairs to an end,’ I said. ‘Think what their release from their chains and the cure for their ignorance would be like. When one of them was untied, and compelled suddenly to stand up, turn his head, start walking, and look towards the light, he’d find all these things painful. Because of the glare he’d be unable to see the things whose shadows he used to see before. What do you suppose he’d say if he was told that what he used to see before was of no importance, whereas now his eyesight was better, since he was closer to what is, and looking at things which more truly are? Suppose further that each of the passing objects was pointed out to him, and that he was asked what it was, and compelled to answer. Don’t you think he’d be confused? Wouldn’t he believe the things he saw before to be more true than what was being pointed out to him now?’</p><p>‘Yes, he would. Much more true.’</p><p>‘If he was forced to look at the light itself, wouldn’t it hurt his eyes? Wouldn’t he turn away, and run back to the things he could see? Wouldn’t he think those things really were clearer than what was being pointed out?’</p><p>‘Yes,’ he said.</p><p>‘And if he was dragged out of there by force, up the steep and difficult path, with no pause until he had been dragged right out into the sunlight, wouldn’t he find this dragging painful? Wouldn’t he resent it? And when he came into the light, with his eyes filled with the glare, would he be able to see a single one of the things he is now told are true?’</p><p>‘No, he wouldn’t. Not at first.’</p><p>‘He’d need to acclimatise himself, I imagine, if he were going to see things up there. To start with, he’d find shadows the easiest things to look at. After that, reflections – of people and other things – in water. The things themselves would come later, and from those he would move on to the heavenly bodies and the heavens themselves. He’d find it easier to look at the light of the stars and the moon by night than look at the sun, and the light of the sun, by day.’</p><p>‘Of course.’</p><p>‘The last thing he’d be able to look at, presumably, would be the sun. Not its image, in water or some location that is not its own, but the sun itself. He’d be able to look at it by itself, in its own place, and see it as it really was.’</p><p>‘Yes,’ he said, ‘unquestionably.’</p><p>‘At that point he would work out that it was the sun which caused the seasons and the years, which governed everything in the visible realm, and which was in one way or another responsible for everything they used to see.’</p><p>‘That would obviously be the next stage.’</p><p>‘Now, suppose he were reminded of the place where he lived originally, of what passed for wisdom there, and of his former fellow-prisoners. Don’t you think he would congratulate himself on the change? Wouldn’t he feel sorry for them?’</p><p>‘Indeed he would.’</p><p>‘Back in the cave they might have had rewards and praise and prizes for the person who was quickest at identifying the passing shapes, who had the best memory for the ones which came earlier or later or simultaneously, and who as a result was best at predicting what was going to come next. Do you think he would feel any desire for these prizes? Would he envy those who were respected and powerful there? Or would he feel as Achilles does in Homer? Would he much prefer “to labour as a common serf, serving a man with nothing to his name,” putting up with anything to avoid holding those opinions and living that life?’1</p><p>‘Yes,’ he said. ‘If you ask me, he’d be prepared to put up with anything to avoid that way of life.’</p><p>‘There’s another question I’d like to ask you,’ I said. ‘Suppose someone like that came back down into the cave and took up his old seat. Wouldn’t he find, coming straight in from the sunlight, that his eyes were swamped by the darkness?’</p><p>‘I’m sure he would.’</p><p>‘And suppose he had to go back to distinguishing the shadows, in competition with those who had never stopped being prisoners. Before his eyes had grown accustomed to the dark, while he still couldn’t see properly – and this period of acclimatisation would be anything but short – wouldn’t he be a laughing-stock? Wouldn’t it be said of him that he had come back from his journey to the upper world with his eyesight destroyed, and that it wasn’t worth even trying to go up there? As for anyone who tried to set them free, and take them up there, if they could somehow get their hands on him and kill him, wouldn’t they do just that?’</p><p>‘They certainly would,’ he said.</p><p>‘That is the picture, then, my dear Glaucon. And it fits what we were talking about earlier in its entirety. The region revealed to us by sight is the prison dwelling, and the light of the fire inside the dwelling is the power of the sun. If you identify the upward path and the view of things above with the ascent of the soul to the realm of understanding, then you will have caught my drift – my surmise – which is what you wanted to hear. Whether it is really true, perhaps only god knows. My own view, for what it’s worth, is that in the realm of what can be known the thing seen last, and seen with great difficulty, is the form or character of the good. But when it is seen, the conclusion must be that it turns out to be the cause of all that is right and good for everything. In the realm of sight it gives birth to light and light’s sovereign, the sun, while in the realm of thought it is itself sovereign, producing truth and reason unassisted. I further believe that anyone who is going to act wisely either in private life or in public life must have had a sight of this.’</p><p>‘Well, I for one agree with you,’ he said. ‘As far as I can follow, at any rate.’</p><p>‘Can you agree with me, then, on one further point? It’s no wonder if those who have been to the upper world refuse to take an interest in everyday affairs, if their souls are constantly eager to spend their time in that upper region. It’s what you’d expect, presumably, if things really are like the picture we have just drawn.’</p><p>‘Yes, it is what you’d expect.’</p><p>‘And here’s another question. Do you think it’s at all surprising if a person who turns to everyday life after the contemplation of the divine cuts a sorry figure, and makes a complete fool of himself – if before he can see properly, or can get acclimatised to the darkness around him, he is compelled to compete, in the lawcourts or anywhere else, over the shadows of justice or the statues which cast those shadows, or to argue about the way they are understood by those who have never seen justice itself?’</p><p>‘No, it’s not in the least surprising,’ he said.</p><p>‘Anyone with any sense,’ I said, ‘would remember that people’s eyesight can be impaired in two quite different ways, and for two quite different reasons. There’s the change from light to darkness, and the change from darkness to light. He might then take it that the same is true of the soul, so that when he saw a soul in difficulties, unable to see, he would not laugh mindlessly, but would ask whether it had come from some brighter life and could not cope with the unfamiliar darkness, or whether it had come from greater ignorance into what was brighter, and was now dazzled by the glare. One he would congratulate on what it had seen, and on its way of life. The other he would pity. Or if he chose to laugh at it, his laughter would be less absurd than laughter directed at the soul which had come from the light above.’</p><p>‘Yes. What you say is entirely reasonable.’</p><p>‘Well,’ I said, ‘if it’s true, there’s one conclusion we can’t avoid. Education is not what some people proclaim it to be. What they say, roughly speaking, is that they are able to put knowledge into souls where none was before. Like putting sight into eyes which were blind.’</p><p>‘Yes, that is what they say.’</p><p>‘Whereas our present account indicates that this capacity in every soul, this instrument by means of which each person learns, is like an eye which can only be turned away from the darkness and towards the light by turning the whole body. The entire soul has to turn with it, away from what is coming to be, until it is able to bear the sight of what is, and in particular the brightest part of it. This is the part we call the good, isn’t it?’</p><p>‘Yes.’</p>]]></content>
    
    
    <categories>
      
      <category>art</category>
      
    </categories>
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP大数运算</title>
    <link href="/2024/08/30/algorithm/2024_8_30/"/>
    <url>/2024/08/30/algorithm/2024_8_30/</url>
    
    <content type="html"><![CDATA[<h1 id="蜜蜂路线"><a href="#蜜蜂路线" class="headerlink" title="蜜蜂路线"></a>蜜蜂路线</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>无</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只蜜蜂在下图所示的数字蜂房上爬动,已知它只能从标号小的蜂房爬到标号大的相邻蜂房,现在问你：蜜蜂从蜂房 $m$ 开始爬到蜂房 $n$，$m&lt;n$，有多少种爬行路线？（备注：题面有误，右上角应为 $n-1$）</p><p><img src="https://cdn.luogu.com.cn/upload/pic/1575.png"></p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入 $m,n$ 的值</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>爬行有多少种路线</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">377<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于100%的数据，$1 \le M,N\le 1000$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// Function to add two big numbers represented as vectors of digits.</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">addBigNumbers</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; num1, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; num2)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; result;<br>    <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> it1 = num1.<span class="hljs-built_in">rbegin</span>(), it2 = num2.<span class="hljs-built_in">rbegin</span>();<br><br>    <span class="hljs-keyword">while</span> (it1 != num1.<span class="hljs-built_in">rend</span>() || it2 != num2.<span class="hljs-built_in">rend</span>() || carry != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> sum = carry;<br>        <span class="hljs-keyword">if</span> (it1 != num1.<span class="hljs-built_in">rend</span>()) sum += *it1++;<br>        <span class="hljs-keyword">if</span> (it2 != num2.<span class="hljs-built_in">rend</span>()) sum += *it2++;<br>        carry = sum / <span class="hljs-number">10</span>;<br>        result.<span class="hljs-built_in">push_back</span>(sum % <span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">reverse</span>(result.<span class="hljs-built_in">begin</span>(), result.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-type">int</span> num = n - m + <span class="hljs-number">1</span>;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a</span>(<span class="hljs-number">1001</span>);<br>    <br>    <span class="hljs-comment">// Initialize the first three numbers in the sequence.</span><br>    a[<span class="hljs-number">0</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br>    a[<span class="hljs-number">1</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br>    a[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt; <span class="hljs-number">1001</span>; ++i) &#123;<br>        a[i] = <span class="hljs-built_in">addBigNumbers</span>(a[i<span class="hljs-number">-2</span>], a[i<span class="hljs-number">-1</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// Print the number at position &#x27;num&#x27;.</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> digit : a[num]) &#123;<br>        cout &lt;&lt; digit;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>思路与问题</strong>：</p><ol><li>这是斐波那契数列问题，需要关注n-m</li><li>实际编程问题：斐波那契数列膨胀过快，需要用大数存储运算</li></ol><p><strong>cpp实现大数</strong>：</p><ol><li>用vector动态数组来存放长度无法确定的大数</li><li>利用rend rbegin而非begin end迭代，即从低位向高位加，最后结果再reverse得到</li><li>输出时，使用vector本身的迭代输出</li></ol>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01背包问题</title>
    <link href="/2024/08/28/algorithm/2024_8_28/"/>
    <url>/2024/08/28/algorithm/2024_8_28/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h1 id="NOIP2005-普及组-采药"><a href="#NOIP2005-普及组-采药" class="headerlink" title="[NOIP2005 普及组] 采药"></a>[NOIP2005 普及组] 采药</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有 $2$ 个整数 $T$（$1 \le T \le 1000$）和 $M$（$1 \le  M \le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。</p><p>接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出在规定的时间内可以采到的草药的最大总价值。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 $30%$ 的数据，$M \le 10$；</li><li>对于全部的数据，$M \le 100$。</li></ul><p><strong>【题目来源】</strong></p><p>NOIP 2005 普及组第三题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> t, num,i;<br>    cin &gt;&gt; t&gt;&gt; num;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> time[num+<span class="hljs-number">1</span>],value[num+<span class="hljs-number">1</span>],best[t+<span class="hljs-number">1</span>][num+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> ii;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>;i&lt;num+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        cin &gt;&gt; time[i] &gt;&gt; value[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; t+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; num+<span class="hljs-number">1</span>;ii++)&#123;<br>            best[i][ii] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; t+<span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">1</span>; ii &lt; num+<span class="hljs-number">1</span>; ii++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; time[ii])<br>            &#123;<br>                <span class="hljs-comment">// 总时间少于草药ii</span><br>                best[i][ii] = best[i][ii<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//best[i][ii]表示在总时间i内，草药0 - ii内的最大价值</span><br>                <span class="hljs-comment">//总时间大于草药ii</span><br>                <span class="hljs-comment">//左边为不含草药ii，右边的为包含草药ii</span><br>                best[i][ii] = <span class="hljs-built_in">max</span>(best[i][ii<span class="hljs-number">-1</span>], best[i - time[ii]][ii<span class="hljs-number">-1</span>] + value[ii]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; best[t][num];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><strong>思路与问题</strong>：</p><ol><li>这是一个01背包问题</li><li>总体思路：使用一个二维数组，不断遍历重量和物品数，实现总时间复杂度$O(nm)$。</li><li>实际编程问题：注意边界，因为递推公式的存在，因此需要将边界0作为0的基准，而1-n&#x2F;1-m存放实际的物品和重量</li></ol>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HUST考研科目</title>
    <link href="/2024/08/21/master/"/>
    <url>/2024/08/21/master/</url>
    
    <content type="html"><![CDATA[<h3 id="101-思想政治理论"><a href="#101-思想政治理论" class="headerlink" title="101|思想政治理论"></a>101|思想政治理论</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li>马克思主义基本原理概论</li><li>毛泽东思想和中国特色社会主义理论体系概论</li><li>中国近现代史纲要</li><li>思想道德修养与法律基础</li><li>形势与政策以及当代世界经济与政治</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>单项选择题：16小题，每题1分，共16分</li><li>多项选择题：17小题，每题2分，共34分</li><li>分析题：5小题，每题10分，共50分</li><li>总分100分</li></ul></li></ul><h3 id="201-英语一"><a href="#201-英语一" class="headerlink" title="201|英语一"></a>201|英语一</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li>英语综合运用能力，包括阅读理解、词汇、语法、写作等。</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>完形填空：20小题，每题0.5分，共10分</li><li>阅读理解A部分：4篇文章，20小题，每题2分，共40分</li><li>阅读理解B部分（新题型）：5小题，每题2分，共10分</li><li>阅读理解C部分（翻译）：1篇短文，共10分</li><li>写作：应用文1篇（10分），短文1篇（20分）</li><li>总分100分</li></ul></li></ul><h3 id="301-数学一"><a href="#301-数学一" class="headerlink" title="301|数学一"></a>301|数学一</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li><strong>高等数学</strong>：占总分的56%，主要考察函数、极限、连续、导数与微分、不定积分、定积分、微分方程等。</li><li><strong>线性代数</strong>：占总分的22%，主要考察行列式、矩阵、向量组的线性相关性、线性方程组、特征值与特征向量、二次型等。</li><li><strong>概率论与数理统计</strong>：占总分的22%，主要考察随机事件的概率、随机变量及其分布、多维随机变量及其分布、随机变量的数字特征、大数定律与中心极限定理、参数估计、假设检验等。</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>单选题：8小题，每题4分，共32分</li><li>填空题：6小题，每题4分，共24分</li><li>解答题（包括证明题）：9小题，共94分</li><li>总分150分</li></ul></li></ul><h3 id="408计算机统考"><a href="#408计算机统考" class="headerlink" title="408计算机统考"></a>408计算机统考</h3><ul><li><p><strong>考察内容</strong>：</p><ul><li><strong>数据结构</strong>：占总分的45%，主要考察线性结构（数组、链表等）、树形结构、图、查找与排序等。</li><li><strong>计算机组成原理</strong>：占总分的15%，主要考察计算机系统的层次结构、整数的表示和运算、浮点表示和运算、指令系统、中央处理器、存储系统、输入输出系统等。</li><li><strong>操作系统</strong>：占总分的15%，主要考察进程管理、内存管理、文件管理和输入输出系统等。</li><li><strong>计算机网络</strong>：占总分的25%，主要考察物理层、数据链路层、网络层、传输层、应用层等。</li></ul></li><li><p><strong>试卷题型及分值</strong>：</p><ul><li>单选题：40小题，每题2分，共80分</li><li>综合应用题：7小题，共70分</li><li>总分150分</li></ul></li></ul><h3 id="复试科目"><a href="#复试科目" class="headerlink" title="复试科目"></a>复试科目</h3><p>笔试（40分）+机试（20分）+面试（20分专业+20分口语）</p><p>考研总成绩按初试成绩占60%，复试成绩占40%计算，其中初试四门考试成绩按百分制进行折算。 不破格录取，复试不及格一律不予录取（总成绩60分）</p><p>① 笔试、闭卷、2.5小时。</p><p>以下四门课程由考生本人任选二门。参考书如下：</p><p>《计算机系统结构教程》，张晨曦等，清华大学出版社，2009。</p><p>《80X86汇编语言程序设计》王元珍、曹忠升、韩宗芬，华中科技大学出版社</p><p>《数据库系统概论》第三版，萨师煊、王珊，高等教育出版社。</p><p>《计算机算法基础》第三版，余祥宣、崔国华、邹海明，华中科技大学出版社</p><p>② 计算机操作能力考核是在Turbo C或VC环境下用C语言编程，90分钟3题。</p><p>③ 面试主要对考生的知识结构和综合能力进行测试。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重返未来1999 1.7</title>
    <link href="/2024/08/17/reverse-1999-1-7-1/"/>
    <url>/2024/08/17/reverse-1999-1-7-1/</url>
    
    <content type="html"><![CDATA[<h2 id="E-lucevan-le-stelle"><a href="#E-lucevan-le-stelle" class="headerlink" title="E lucevan le stelle"></a>E lucevan le stelle</h2><p>伴着歌声与舞步，在歌剧的高潮之中</p><p>暴雨倾然而至</p><p>亲情、友情、爱情</p><p>痛苦与释放、阳光与阴郁</p><p>都在雨点中混在一起</p><p>失去了原本的颜色</p><h2 id="为艺术，为爱情"><a href="#为艺术，为爱情" class="headerlink" title="为艺术，为爱情"></a>为艺术，为爱情</h2><img src="/img/1999/1_7_at_chuangzhongwangshi1.png">]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Half is not Enough</title>
    <link href="/2024/05/26/half-is-not-enough/"/>
    <url>/2024/05/26/half-is-not-enough/</url>
    
    <content type="html"><![CDATA[<p>Do not love half lovers<br>Do not entertain half friends<br>Do not indulge in works of the half talented<br>Do not live half a life and do not die a half death</p><p>If you choose silence, then be silent</p><p>When you speak, do so until you are finished</p><p>Do not silence yourself to say something<br>And do not speak to be silent</p><p>If you accept, then express it bluntly<br>Do not mask it</p><p>If you refuse then be clear about it<br>for an ambiguous refusal<br>is but a weak acceptance</p><p>Do not accept half a solution<br>Do not believe half truths<br>Do not dream half a dream<br>Do not fantasize about half hopes</p><p>Half a drink will not quench your thirst<br>Half a meal will not satiate your hunger<br>Half the way will get you no where<br>Half an idea will bear you no results</p><p>Your other half is not the one you love<br>It is you in another time yet in the same space<br>It is you when you are not</p><p>Half a life is a life you didn’t live<br>A word you have not said<br>A smile you postponed<br>A love you have not had<br>A friendship you did not know</p><p>To reach and not arrive<br>Work and not work<br>Attend only to be absent<br>What makes you a stranger to them closest to you<br>and they strangers to you</p><p>The half is a mere moment of inability<br>but you are able for you are not half a being</p><p>You are a whole<br>that exists<br>to live a life</p><p>not half a life</p>]]></content>
    
    
    <categories>
      
      <category>art</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编指令</title>
    <link href="/2024/04/01/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/04/01/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="待条件的数据传输指令"><a href="#待条件的数据传输指令" class="headerlink" title="待条件的数据传输指令"></a>待条件的数据传输指令</h2><h2 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">mov         ; 传送指令<br>mov ax, <span class="hljs-number">8</span>   ; (ax) = <span class="hljs-number">8</span><br>mov ax, bx  ; (ax) = (bx)<br>MOVSX   R16/R32,  OPS    ; 符号扩展传送<br>MOVZX  R16/R32, OPS     ; <span class="hljs-number">0</span>扩展传送<br></code></pre></td></tr></table></figure><p><strong>条件转移指令</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">使用单个标志位判断转移条件是否成立:<br>    cmove/cmovz、cmovc、cmovs、cmovo、cmovp<br>条件：ZF=<span class="hljs-number">1</span>     CF=<span class="hljs-number">1</span>    SF=<span class="hljs-number">1</span>   OF=<span class="hljs-number">1</span>  PF=<span class="hljs-number">1</span>  <br>    cmovne/cmovnz、cmovnc、cmovns、cmovno、cmovnp<br>条件：ZF=<span class="hljs-number">0</span>     CF=<span class="hljs-number">0</span>      SF=<span class="hljs-number">0</span>    OF=<span class="hljs-number">0</span>   PF=<span class="hljs-number">0</span><br><br>使用多个标志位判断转移条件是否成立:<br><br></code></pre></td></tr></table></figure><h2 id="add-和-sub"><a href="#add-和-sub" class="headerlink" title="add 和 sub"></a>add 和 sub</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">add         ; 加法运算指令<br>add ax, bx  ; (ax) = (ax) + (bx)<br><br><br>sub         ; 减法运算指令<br>sub ax, bx  ; (ax) = (ax) - (bx)<br></code></pre></td></tr></table></figure><h2 id="push-和-pop"><a href="#push-和-pop" class="headerlink" title="push 和 pop"></a>push 和 pop</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">push        ; 进栈指令<br>pop         ; 出栈指令<br>; 比如：<br>mov ax, 1000h   <br>mov ds, ax      ; 内存单元的段地址要放在 ds 中<br>push [<span class="hljs-number">0</span>]        ; 将 <span class="hljs-number">1000</span>:<span class="hljs-number">0</span> 处的字压入栈中<br>pop [<span class="hljs-number">2</span>]         ; 出栈，出栈的数据送入 <span class="hljs-number">1000</span>:<span class="hljs-number">2</span> 处<br></code></pre></td></tr></table></figure><h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">loop        ; 循环指令<br>; 格式：loop 标号（(cx)=(cx)-<span class="hljs-number">1</span>，如果(cx)!=<span class="hljs-number">0</span>，则转移到标号处执行）<br>; 功能：使转移标号与 loop 指令间的指令循环执行 cx 次<br></code></pre></td></tr></table></figure><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">and         ; 逻辑“与”指令<br>; 功能：按位进行“与”运算<br>mov al, 01100011B<br>and al, 00111011B<br>; 结果：al = 00100011B<br></code></pre></td></tr></table></figure><h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">or          ; 逻辑“或”指令<br>; 功能：按位进行“或”运算<br>mov al, 01100011B<br>or al, 00111011B<br>; 结果：al = 01111011B<br></code></pre></td></tr></table></figure><h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">div         ; 除法指令<br>; a / b =&gt; a 是被除数，b 是除数<br>; 被除数：默认放在 ax（被除数<span class="hljs-number">16</span>位）或 dx 和 ax（被除数<span class="hljs-number">32</span>位）中<br>; 除数：有 <span class="hljs-number">8</span> 位和 <span class="hljs-number">16</span> 位两种，存放在 reg 或者内存单元中<br>; 结果：如果除数为 <span class="hljs-number">8</span> 位，则 al 存放商，ah 存放余数<br>; 如果除数为 <span class="hljs-number">16</span> 位，则 ax 存放商，dx 存放余数<br></code></pre></td></tr></table></figure><h2 id="db、dw-和-dd"><a href="#db、dw-和-dd" class="headerlink" title="db、dw 和 dd"></a>db、dw 和 dd</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">db dw dd    ; 伪指令<br>; db 字节型 dw 字型 dd 双字型<br>data segment<br>    db <span class="hljs-number">1</span>    ; 01h<br>    dw <span class="hljs-number">1</span>    ; 0001h<br>    dd <span class="hljs-number">1</span>    ; 0000_0001h<br>data ends<br></code></pre></td></tr></table></figure><h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">dup         ; 伪指令<br>; 功能：用来进行数据的重复<br>db <span class="hljs-number">3</span> dup (<span class="hljs-number">0</span>); 定义了 <span class="hljs-number">3</span> 个字节，值都为 <span class="hljs-number">0</span> ，等于 db <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">offset      ; 操作符<br>; 功能：取得标号的偏移地址<br></code></pre></td></tr></table></figure><h2 id="inc-和-dec"><a href="#inc-和-dec" class="headerlink" title="inc 和 dec"></a>inc 和 dec</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">inc         <br>; 格式：<span class="hljs-type">inc</span> <span class="hljs-variable">ax</span> <span class="hljs-operator">=</span>&gt; (ax) = (ax) + <span class="hljs-number">1</span><br>dec<br>; 格式：<span class="hljs-type">dec</span> <span class="hljs-variable">ax</span> <span class="hljs-operator">=</span>&gt; (ax) = (ax) - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">jmp         ; 无条件转移指令<br>; 可以只修改 ip :<br>jmp ax ; = mov ip, ax<br>; 也可以同时修改 cs 和 ip :<br>jmp <span class="hljs-number">1000</span>:<span class="hljs-number">0</span> ; cs = <span class="hljs-number">1000</span>, ip = <span class="hljs-number">0</span><br><br>; 语法：jmp <span class="hljs-type">short</span> 标号<br>; 功能：转到标号处执行指令<br>; 语法：jmp far ptr 标号<br>; (CS)=标号所在段的段地址，(IP)=标号在段中的偏移地址<br>; 语法：jmp word ptr 内存单元地址<br>; 功能：从内存单元地址处开始存放着一个字，是转移的目的偏移地址<br>; 比如：<br>mov ax, 0123h<br>mov [bx], ax<br>jmp word ptr [bx]<br>; 执行后 (ip) = 0123h<br>; 语法：jmp dword ptr 内存单元地址<br>; 功能：从内存单元地址处开始存放着两个字，<br>; 高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址<br>; (CS) = (内存单元地址+<span class="hljs-number">2</span>)，(IP) = (内存单元地址)<br>; 即 cs 在高位，ip 在低位<br>; 比如：<br>mov ax, 0123h<br>mov ds:[<span class="hljs-number">0</span>], ax<br>mov word ptr ds:[<span class="hljs-number">2</span>], <span class="hljs-number">0</span><br>jmp dword ptr ds:[<span class="hljs-number">0</span>]<br>; 执行后，(cs)=<span class="hljs-number">0</span>, (ip)=0123h, cs:ip 指向 <span class="hljs-number">0000</span>:<span class="hljs-number">0123</span><br></code></pre></td></tr></table></figure><h2 id="jcxz"><a href="#jcxz" class="headerlink" title="jcxz"></a>jcxz</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">jcxz        ; 条件转移指令<br>; 指令格式：jcxz 标号（如果(cx)=<span class="hljs-number">0</span>，则转移到标号处执行）<br>; 当(cx)!=<span class="hljs-number">0</span>时，什么也不做<br>; 即 jcxz 标号 = <span class="hljs-keyword">if</span> ((cx)==<span class="hljs-number">0</span>) jmp <span class="hljs-type">short</span> 标号<br></code></pre></td></tr></table></figure><h2 id="ret-和-retf"><a href="#ret-和-retf" class="headerlink" title="ret 和 retf"></a>ret 和 retf</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ret         ; 转移指令<br>; 功能：利用栈中的数据，修改 ip 的内容<br>; cpu 执行 ret 指令时，相当于 pop ip<br><br><br>retf        ; 转移指令<br>; 功能：利用栈中的数据，修改CS和IP的内容<br>; cpu 执行 retf 指令时，相当于 pop ip  pop cs<br></code></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">call        ; 转移指令<br>; 功能：（<span class="hljs-number">1</span>）将当前的 ip 或者 cs 和 ip 压入栈中<br>;      （<span class="hljs-number">2</span>）转移<br>; 注意：call 指令不能实现短转移<br>; 格式：call 标号 =&gt; push IP  jmp near ptr 标号<br>; 格式：call far 标号 =&gt; push cs  push ip  jmp far ptr 标号<br>; 格式：call <span class="hljs-number">16</span> 位 reg =&gt; push ip  jmp <span class="hljs-number">16</span> 位 reg<br>; 格式：call word ptr 内存单元地址<br>; =&gt; push ip  jmp word ptr 内存单元地址<br>; 格式：call dword ptr 内存单元地址<br>; =&gt; push cs  push ip  jmp dword ptr 内存单元地址<br></code></pre></td></tr></table></figure><h2 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">mul         ; 乘法指令<br>; （<span class="hljs-number">1</span>）两个相乘的数，要么都是 <span class="hljs-number">8</span> 位，要么都是 <span class="hljs-number">16</span> 位<br>; 如果都是 <span class="hljs-number">8</span> 位，则一个存放在 al 中，另一个存放在 <span class="hljs-number">8</span> 位 reg 或内存字节单元中<br>; 如果是 <span class="hljs-number">16</span> 位，则一个存放在 ax 中，另一个存放在 <span class="hljs-number">16</span> 位 reg 或内存字节单元中<br>; （<span class="hljs-number">2</span>）结果：如果是 <span class="hljs-number">8</span> 位乘法，结果存放在 ax 中<br>; 如果是 <span class="hljs-number">16</span> 位乘法，结果的高位存放在 dx 中，低位存放在 ax 中<br>; 格式：mul reg 或者 mul 内存单元<br>; 比如：<br>mul <span class="hljs-type">byte</span> ptr ds:[<span class="hljs-number">0</span>]<br>; 含义：(ax) = (al) * ((ds)*<span class="hljs-number">16</span>+<span class="hljs-number">0</span>)<br>mul word ptr [bx+si+<span class="hljs-number">8</span>]<br>; 含义：(ax) = (ax)*((ds)*<span class="hljs-number">16</span>+(bx)+(si)+<span class="hljs-number">8</span>)结果的低 <span class="hljs-number">16</span> 位<br>;      (dx) = (ax)*((ds)*<span class="hljs-number">16</span>+(bx)+(si)+<span class="hljs-number">8</span>)结果的高 <span class="hljs-number">16</span> 位<br></code></pre></td></tr></table></figure><h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">zf          ; 零标志位（zero flag）<br>; 功能：记录相关指令执行后，结果是否为 <span class="hljs-number">0</span><br>; 若是，则 zf = <span class="hljs-number">1</span>，反之，zf = <span class="hljs-number">0</span><br>; 比如：<br>mov ax, <span class="hljs-number">1</span><br>sub ax, <span class="hljs-number">1</span><br>; 执行后，结果为 <span class="hljs-number">0</span> ，则 zf = <span class="hljs-number">1</span><br><br>pf          ; 奇偶标志位（parity flag）<br>; 功能：记录相关指令执行后，其结果的所有 bit 位中 <span class="hljs-number">1</span> 的个数是否为偶数<br>; 若 <span class="hljs-number">1</span> 的个数为偶数，pf = <span class="hljs-number">1</span>，若为奇数，那么 pf = <span class="hljs-number">0</span><br>; 比如：<br>mov ax, <span class="hljs-number">1</span><br>add al, <span class="hljs-number">10</span><br>; 执行后，结果为 0000_1011B，结果有 <span class="hljs-number">3</span> 个 <span class="hljs-number">1</span> ，则 pf = <span class="hljs-number">0</span><br><br>sf          ; 符号标志位（sign flag）<br>; 功能：记录相关指令执行后，其结果是否为负<br>; 若结果为负，sf = <span class="hljs-number">1</span>；否则 sf = <span class="hljs-number">0</span><br>; 比如：<br>mov al, 10000001B<br>add al, <span class="hljs-number">1</span><br>; 执行后，结果为 1000_0010B，sf = <span class="hljs-number">1</span><br><br>cf          ; 进位标志位（carry flag）<br>; 功能：在进行无符号运算时<br>; 它记录了运算结果的最高有效位向更高有效位的进位值，或从更高位的借位值<br>; 若产生进位或借位，则 cf = <span class="hljs-number">1</span>，反之，cf = <span class="hljs-number">0</span><br>; 比如：<br>mov al, 97h<br>sub al, 98h ; 执行后，(al) = ffh，cf = <span class="hljs-number">1</span><br>sub al, al  ; 执行后，(al) = <span class="hljs-number">0</span>，cf = <span class="hljs-number">0</span><br><br>of          ; 标志溢出位（overflow flag）<br>; 功能：记录了有符号数运算的结果是否发生了溢出<br>; 若发生了溢出，则 of = <span class="hljs-number">1</span>；反之，of = <span class="hljs-number">0</span><br>; 比如：<br>mov al, <span class="hljs-number">98</span><br>add al, <span class="hljs-number">99</span><br>; (al) = (al) + <span class="hljs-number">99</span> = <span class="hljs-number">98</span> + <span class="hljs-number">99</span> = <span class="hljs-number">197</span> 超出 -<span class="hljs-number">128</span> ~ <span class="hljs-number">127</span> 的范围<br>; 执行后将产生溢出，of = <span class="hljs-number">1</span><br><br>df          ; 方向标志位（direction flag）<br>; 功能：在串处理指令中，控制每次操作后 si、di 的增减<br>; df = <span class="hljs-number">0</span>，每次操作后 di、si 递增<br>; df = <span class="hljs-number">1</span>，每次操作后 di、si 递减<br></code></pre></td></tr></table></figure><h2 id="adc"><a href="#adc" class="headerlink" title="adc"></a>adc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">adc         ; 带进位加法指令<br>; 指令格式：adc ax, bx<br>; 功能：(ax) = (ax) + (bx) + cf<br>; 比如：<br>mov ax, <span class="hljs-number">2</span><br>mov bx, <span class="hljs-number">1</span><br>sub, bx, ax ; 借位，cf = <span class="hljs-number">1</span><br>adc ax, <span class="hljs-number">1</span><br>; 执行后，(ax) = (ax) + <span class="hljs-number">1</span> + cf = <span class="hljs-number">2</span> + <span class="hljs-number">1</span> + <span class="hljs-number">1</span> = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="sbb"><a href="#sbb" class="headerlink" title="sbb"></a>sbb</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">sbb         ; 带进位减法指令<br>; 指令格式：sbb ax, bx<br>; 功能：(ax) = (ax) - (bx) - cf<br></code></pre></td></tr></table></figure><h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">cmp         ; 比较指令<br>; 格式：cmp ax, ax<br>; 功能：做 (ax)-(ax) 的运算，但并不在 ax 中保存结果<br>; 比如：<br>mov ax, <span class="hljs-number">8</span><br>mov bx, <span class="hljs-number">3</span><br>cmp, ax, bx<br>; (ax) = <span class="hljs-number">8</span>, zf = <span class="hljs-number">0</span>, pf = <span class="hljs-number">1</span>, sf = <span class="hljs-number">0</span>, cf = <span class="hljs-number">0</span>, <span class="hljs-number">0f</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="movsb-和-movsw"><a href="#movsb-和-movsw" class="headerlink" title="movsb 和 movsw"></a>movsb 和 movsw</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">movsb       ; 串传送指令<br>; 格式：movsb<br>; 功能：执行 movsb 指令相当于进行下面几步操作：<br>mov es:[di], <span class="hljs-type">byte</span> ptr ds:[si]   ; <span class="hljs-number">8086</span> 并不支持的这样的指令，仅作描述<br><span class="hljs-type">if</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>:<br>    inc si<br>    inc di<br><span class="hljs-type">if</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>:<br>    dec si<br>    dec di<br>; 即：movsb 的功能是将 ds:si 指向的内存单元中的字节送入 es:di 中<br>; 然后根据寄存器 df 位的值，将 si 和 di 递增或递减<br><br>movsw       ; 串传送指令<br>; 格式：movsw<br>; 功能：执行 movsw 指令相当于进行下面几步操作<br>mov es:[di], word ptr ds:[si]   ; <span class="hljs-number">8086</span> 并不支持的这样的指令，仅作描述<br><span class="hljs-type">if</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>:<br>    add si, <span class="hljs-number">2</span><br>    add di, <span class="hljs-number">2</span><br><span class="hljs-type">if</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>:<br>    sub si, <span class="hljs-number">2</span><br>    sub di, <span class="hljs-number">2</span><br><br>; 一般来说，movsb 和 movsw 都和 rep 配合使用<br>; 格式：rep movsb<br>; 功能：s:movsb  loop s<br></code></pre></td></tr></table></figure><h2 id="cld-和-std"><a href="#cld-和-std" class="headerlink" title="cld 和 std"></a>cld 和 std</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cld         ; 将 df 位置 <span class="hljs-number">0</span><br>std         ; 将 df 位置 <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="pushf-和-popf"><a href="#pushf-和-popf" class="headerlink" title="pushf 和 popf"></a>pushf 和 popf</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pushf       ; 进栈指令<br>; 功能：将标志寄存器的值压栈<br>popf        ; 出栈指令<br>; 功能：从栈中弹出数据，送入标志寄存器中<br></code></pre></td></tr></table></figure><h2 id="iret"><a href="#iret" class="headerlink" title="iret"></a>iret</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">iret        ; 转移指令<br>; 功能：pop ip  pop cs  popf<br></code></pre></td></tr></table></figure><h2 id="int"><a href="#int" class="headerlink" title="int"></a>int</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>         ; 中断指令<br>; 格式：<span class="hljs-type">int</span> n （n 为中断类型码）<br>; 功能：引发中断过程<br></code></pre></td></tr></table></figure><h2 id="in-和-out"><a href="#in-和-out" class="headerlink" title="in 和 out"></a>in 和 out</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">in al, 60h  ; 从 60h 号端口读入一个字节<br>out 20h, al ; 从 20h 号端口写入一个字节<br>; 注意：在 in 和 out 指令中，只能使用 ax 或 al 来存放从端口中读入的数据<br>; 或要发送到端口中的数据<br>; 访问 <span class="hljs-number">8</span> 位端口时用 al，访问 <span class="hljs-number">16</span> 位端口时用 ax<br></code></pre></td></tr></table></figure><h2 id="shl-和-shr"><a href="#shl-和-shr" class="headerlink" title="shl 和 shr"></a>shl 和 shr</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">shl         ; 逻辑移位指令（逻辑左移）<br>; 功能：<br>; <span class="hljs-number">1</span>）将一个寄存器或内存单元中的数据向左移位<br>; <span class="hljs-number">2</span>）将最后移出的一位写入 cf 中<br>; <span class="hljs-number">3</span>）最低位用 <span class="hljs-number">0</span> 补充<br>; 比如<br>mov al, 01001000B<br>shl al, <span class="hljs-number">1</span><br>; 执行后 (al) = 1001_0000b, cf = <span class="hljs-number">0</span><br>; 如果移位大于 <span class="hljs-number">1</span> 时，必须将移动位数放在 cl 中：<br>mov al, 01010001B<br>mov cl, <span class="hljs-number">3</span><br>shl al, cl<br>; 执行后(al)= 1000_1000b<br>; 因为最后移出的一位是 <span class="hljs-number">0</span> ，所以 cf = <span class="hljs-number">0</span><br><br>shr         ; 逻辑移位指令（逻辑右移）<br>; 类似地，便不作过多描述<br></code></pre></td></tr></table></figure><h2 id="条件转移指令"><a href="#条件转移指令" class="headerlink" title="条件转移指令"></a>条件转移指令</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">; 条件转移指令：<br><br>je          ; e =&gt; equal<br>; 含义：等于则转移<br>; 检测的相关标志位： zf = <span class="hljs-number">1</span><br><br>jne        <br>; 含义：不等于则转移<br>; 检测的相关标志位： zf = <span class="hljs-number">0</span><br><br>jb          ; b =&gt; below<br>; 含义：低于则转移<br>; 检测的相关标志位： cf = <span class="hljs-number">1</span><br><br>jnb<br>; 含义：不低于则转移<br>; 检测的相关标志位： cf = <span class="hljs-number">0</span><br><br>ja          ; a =&gt; above<br>; 含义：高于则转移<br>; 检测的相关标志位： cf = <span class="hljs-number">0</span> 且 zf = <span class="hljs-number">0</span><br><br>jna<br>; 含义：不高于则转移<br>; 检测的相关标志位： cf = <span class="hljs-number">1</span> 且 zf = <span class="hljs-number">1</span><br><br>jc<br>; 含义：有进位则跳转<br><br>jnc<br>; 含义：无进位则跳转<br></code></pre></td></tr></table></figure><h2 id="daa和das"><a href="#daa和das" class="headerlink" title="daa和das"></a>daa和das</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">daa<br>; 功能：调整 AL 的值，<br>; 该值是由指令 ADD 或 ADC 运算两个压缩型 BCD 码所得到的结果<br>; 例如：<br>mov al, 43h<br>mov bl, 29h<br>add al, bl      ; al=6ch<br>daa             ; 调整后，al=72h<br><br>das <br>; 功能：调整 AL 的值，<br>; 该值是由指令 SUB 或 SBB 运算两个压缩型 BCD 码所得到的结果<br>; 例如：<br>mov al, 43h<br>mov bl, 29h<br>sub al, bl      ; al=1ah<br>das             ; 调整后，al=14h<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背影</title>
    <link href="/2024/03/31/%E8%83%8C%E5%BD%B1/"/>
    <url>/2024/03/31/%E8%83%8C%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="背影"><a href="#背影" class="headerlink" title="背影"></a>背影</h1><p><em>朱自清</em></p><p>我与父亲不相见已二年余了，我最不能忘记的是他的背影。</p><p>那年冬天，祖母死了，父亲的差使也交卸了，正是祸不单行的日子。我从北京到徐州，打算跟着父亲奔丧回家。到徐州见着父亲，看见满院狼藉的东西，又想起祖母，不禁簌簌地流下眼泪。父亲说：“事已如此，不必难过，好在天无绝人之路！”</p><p>回家变卖典质，父亲还了亏空；又借钱办了丧事。这些日子，家中光景很是惨淡，一半为了丧事，一半为了父亲赋闲。丧事完毕，父亲要到南京谋事，我也要回北京念书，我们便同行。</p><p>到南京时，有友人约去游逛，勾留了一日；第二日上午便须渡江到浦口，下午上车北去。父亲因为事忙，本已说定不送我，叫旅馆里一个熟识的茶房陪我同去。他再三嘱咐茶房，甚是仔细。但他终于不放心，怕茶房不妥帖；颇踌躇了一会。其实我那年已二十岁，北京已来往过两三次，是没有什么要紧的了。他踌躇了一会，终于决定还是自己送我去。我两三劝他不必去；他只说，“不要紧，他们去不好！”</p><p>我们过了江，进了车站。我买票，他忙着照看行李。行李太多了，得向脚夫行些小费才可过去。他便又忙着和他们讲价钱。我那时真是聪明过分，总觉他说话不大漂亮，非自己插嘴不可，但他终于讲定了价钱；就送我上车。他给我拣定了靠车门的一张椅子；我将他给我做的紫毛大衣铺好坐位。他嘱我路上小心，夜里警醒些，不要受凉。又嘱托茶房好好照应我。我心里暗笑他的迂；他们只认得钱，托他们只是白托！而且我这样大年纪的人，难道还不能料理自己么？唉，我现在想想，那时真是太聪明了！</p><p>我说道，“爸爸，你走吧。”他望车外看了看说：“我买几个橘子去。你就在此地，不要走动。”我看那边月台的栅栏外有几个卖东西的等着顾客。走到那边月台，须穿过铁轨，须跳下去又爬上去。父亲是一个胖子，走过去自然要费事些。我本来要去的，他不肯，只好让他去。我看见他戴着黑布小帽，穿着黑布大马褂，深青布棉袍，蹒跚地走到铁轨边，慢慢探身下去，尚不大难。可是他穿过铁轨，要爬上那边月台，就不容易了。他用两手攀着上面，两脚再向上缩；他肥胖的身子向左微倾，显出努力的样子。这时我看见他的背影，我的泪很快地流下来了。我赶紧拭干了泪。怕他看见，也怕别人看见。我再向外看时，他已抱了朱红的橘子往回走了。过铁轨时，他先将橘子散放在地上，自己慢慢爬下，再抱起橘子走。到这边时，我赶紧去搀他。他和我走到车上，将橘子一股脑儿放在我的皮大衣上。于是扑扑衣上的泥土，心里很轻松似的。过一会说：“我走了，到那边来信！”我望着他走出去。他走了几步，回过头看见我，说：“进去吧，里边没人。”等他的背影混入来来往往的人里，再找不着了，我便进来坐下，我的眼泪又来了。</p><p>近几年来，父亲和我都是东奔西走，家中光景是一日不如一日。他少年出外谋生，独力支持，做了许多大事。哪知老境却如此颓唐！他触目伤怀，自然情不能自已。情郁于中，自然要发之于外；家庭琐屑便往往触他之怒。他待我渐渐不同往日。但最近两年的不见，他终于忘却我的不好，只是惦记着我，惦记着我的儿子。我北来后，他写了一信给我，信中说道：“我身体平安，惟膀子疼痛厉害，举箸提笔，诸多不便，大约大去之期不远矣。”我读到此处，在晶莹的泪光中，又看见那肥胖的、青布棉袍黑布马褂的背影。唉！我不知何时再能与他相见！</p>]]></content>
    
    
    <categories>
      
      <category>art</category>
      
    </categories>
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Cent</title>
    <link href="/2024/03/10/Cent/"/>
    <url>/2024/03/10/Cent/</url>
    
    <content type="html"><![CDATA[<h1 id="Cent"><a href="#Cent" class="headerlink" title="Cent"></a>Cent</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><p>From <b>Drakengard 3 Official Japanese Website</b><br/>Translation by <b><a target="_blank" rel="nofollow noreferrer noopener" class="external text" href="https://archive.is/20131228073827/kho-dazat.tumblr.com/post/69085814644/the-jewel-in-the-palm-of-my-hand-are-you-okay">kho-dazat</a></b></p><p><b>Cent — <font color="red">The Jewel within My Palm</font></b></p><p>"Are you okay, Cent? You’re not hurt anywhere, are you?" Said my mistress, the Lady Two, after felling the last of the monsters with her great sword. I knew she would ask; an disciple like me can fathom what the Intoner he serves might say before she says it.</p><p>"Not at all. Of greater concern is you, Lady Two…" The state of her own body was far more important than my own. After all, she had just finished slaying a Minotaur that was two… no, three times her size, and in the middle of a desert, no less. The sweltering sun rays and the merciless gales were just as much our enemies. In terms of unabated harshness, I could imagine no worse a battlefield in the entire world than the one we stood in now.</p><p>And yet all my Lady had to say was:</p><p>"I told you not to call me Lady! When we’re alone, you promised to just call me Two!” While puffing her cheeks out in annoyance. I would think my query in regards to the state of her health at the moment held more importance than that, but… the more I looked at those puffed up cheeks, I forgot my concerns, overwhelmed with the desire to poke them with my fingers since they were so cute.</p><p>"Forgive me. Two… are you uninjured?" Her puffed up, pouty cheeks turned into an ear-to-ear smile in less than a millisecond.</p><p>The truth is I hadn’t forgotten our promise. It’s just that I like seeing her make that face, so I sometimes pretend that I have. By doing so, I get to see her make two adorable faces in her row: first the cheeks, then the smile. I admit to being a bit of a schemer.</p><p>I’d also like to mention that there are two reasons why I prefer to refer to her formally. The first is, that it is proper etiquette. That is why I insist she let me maintain airs before the eyes of others.</p><p>The second reason, which I haven’t disclosed to her… is because her existence is one far more precious than my own. I should think any man, confronted by a woman so much more important than himself, would feel compelled to call her Lady.</p><p>That’s right; Lady Two, you are a million times more important than myself, handsome and multi-talented as I am. I’ll have you know, too, that there aren’t many people out there I’d so easily accept as being above me, either. Indeed, in that sense you are exceedingly rare.</p><p>This would hold true even were you not an Intoner. Our relationship as Intoner and disciple is a mere pretense. For example, if my master were a different Intoner and not yourself, I assure you that our relationship would be purely professional. Were it Lady One or Lady Three, Lady Four or Lady Five… it would all be the same. I would never sacrifice all twenty-four hours of my day to them as I do for you. I’d put the bare minimum amount of work in and be adamant about taking time off. I would merely perform my duties as a disciple and nothing more.</p><p>You aren’t important to me because you are an Intoner, but because you are you. And that is why I call you Lady, and always will, at least within my heart.</p><p>But I see that saying it aloud too often makes you look lonely. I love your puffy, pouty cheeks but I would never want to see you making a pained expression. So I’ve been cutting down on the number of times I pretend to have forgotten, even if it is just a trifle.</p><p>Now then, Two… no, Lady Two. Uh, what was I going to call you by next? All this internal monologuing made me forget…</p><p>"Cent?" Your eyes peer up at me curiously. What a busy pair of eyes they are… shining with laughter, glinting with anger, widening in surprise. Perhaps you are the true schemer. Artlessly, without even the use of your songs… just by moving the muscles on your face, you’ve made such a prisoner of me.</p><p>"Cent! I can tell you want to mess with my cheeks again. Well, you can’t! If you keep yanking on them, they’ll get all stretched out!"</p><p>"That is certainly not my intention. I was merely trying to stimulate them, to improve blood flow. This is an exercise to improve your complexion."</p><p>"What? Really?! Wow! Do it more, then!" …that was a fib. Forgive me, Lady Two! Your cheeks are just too soft and cute. I can’t help myself.</p><p>"Q-quit snickering! I forbid it!" Now you’ve gone all red. No matter what you say or do, you are so lovely that not just I, but all the people in our country simply adore you. Your people would do anything for you, and indeed they long to. But…</p><p>"If you continue exterminating monsters on your own like this, the troops will have no work to do."</p><p>"But I can’t let them do something so dangerous. What if they get hurt?" The soldiers wish to do all they can to protect their Intoner. Yet this is what she always says. Well, the truth is that Lady Two is capable of defeating numerous giant, blood-thirsty minotaur (albeit with my assistance). Even if they have the will to do so, none of them could do the same amount of work as she can on her own. If they are to truly be of use to her, they need to be trained to become stronger.</p><p>"This was a surprise, though. To think Minotaur would be nesting here…"</p><p>"There is a water source not far off. That’s likely the reason they chose this location."</p><p>"Right… and human roads are nearby as well." It was the western caravan that came rushing to us, panicked, saying they’d discovered a monster nest. However, as they were too flustered to speak properly, they were unable to tell us what kind of monster they had been attacked by. Even if they could speak more clearly, though, the result would have been the same, as Lady Two rushed out before they’d even finished reporting. I imagine the thought of her people being attacked by monsters did not sit well with her.</p><p>"Those Minotaur were pretty tough. One, two, three… there were seven of them in all. I had trouble concentrating since I was so worried they might hurt you, Cent."</p><p>"A wound or two would be a fair price to pay to protect you." Lady Two’s expression told me she did not agree. Of course I knew she wouldn’t.</p><p>"As you can see, however, I am without a scratch." Still, it is the duty of a disciple to put everything on the line in order to defend their Intoner in the heat of battle. If I wasn’t prepared to do that, I’d be a failure as her guardian.</p><p>"So, what should we do with these?"</p><p>"The Minotaur, you mean?"</p><p>"Even we can’t carry all seven back. I’ll take two… Cent, you can take one… yeah, three is about the most we can manage at once. So… what to do about the other four…" I knew it was pointless to suggest leaving them behind. For Lady Two, this wasn’t an option, since Minotaur meat is edible. Actually, it tastes a lot like buffalo. People in more fruitful lands might balk at the idea of eating monsters, but that’s just what we do in this desert country.Of course, there are those even here that would resist the idea of eating Gigas or Goblins. But thanks to Lady Two’s exhaustive culinary experiments, they’ve become regular fixtures on the dining table.</p><p>"Perhaps first we should move the remaining bodies back into their nest." Unlike Sand Worms, Minotaur cannot live within the sands, so they tend to build their nests within the rocks that litter the desert. They are cool and shield the beasts from sunstroke.</p><p>"They should probably hold up for half a day within the shade. In the meantime we can enlist the soldiers to come carry them back. How is that?"</p><p>"Great idea! Cent, you are soooo smart! Okay, then let’s move them, lickety-split!" Lady Two’s strong point is how quickly she acts after making up her mind. Lifting the gigantic Minotaurs as if they were as light as a feather, she indeed moved them back into their nests 'lickety-split'. I have to admit to still being impressed by the displays of her strength.</p><p>"Are you not tired at all?"</p><p>"Nope! I am A-OK! Oh, but… I’d like it if you did ‘that’ again.”</p><p>”'That'?”</p><p>"You know, massage me like you did after the time I played with the kids." Ah… 'that'.</p><p>"As you wish." A few days ago I had massaged her shoulders after she had finished playing outside with the children. Apparently she did not realize it herself, but they were very stiff.</p><p>Lady Two is in possession of muscles which quite exceed those of normal people’s. How else could she lift whole Minotaur over her head like that? If she doesn’t take care to restrain her power, she can pull doors straight off their hinges or yank banisters right out of the ground. In fact, this happens fairly often. So when she plays with the children, it requires her utmost concentration so as not to hurt them.Restraining herself in this way puts more stress on her body than fighting Minotaur in the desert would, and after a day spent frolicking with the children her shoulders and arms are tense and she is extremely fatigued. Yet Lady Two does not try to cut down on the time she spends with the little ones. No matter how busy her day gets, she strives not to neglect them. That is how important they are to her; she considers them no different than her own flesh and blood sisters. They are her family.</p><p>Should one come down with a fever or get an upset stomach, she becomes so fretful she cannot eat. I try to tell her that small children often come down with fevers or throw up their food, and that skipping meals each time to nurse them isn’t good for her health, but to no avail. Even though Lady Two understands what I tell her on an intellectual level, she’s unable to control her feelings. All that matters to her is that they recover as soon as possible.</p><p>That all I am capable of doing in such times is endeavoring to relieve her stress by even a hair is honestly a bit frustrating, but…</p><p>"All better! That felt great, Cent. Thanks!"</p><p>"You are very welcome."</p><p>"Okay! Let’s head back!" Jumping to her feet, she resembled a little rabbit or squirrel. To be honest, sometimes I worry she’ll take off running like one, never to return. Of course I realize this is a groundless fear. She would never think to disappear somewhere, abandoning the country over which she governs…</p><p>"I’m glad I got to hunt these guys down before I had to leave the country." …for she is always, always thinking first and foremost of the people under her care.</p><p>"Since pests like these inhabit the desert, I can’t afford to leave very often."</p><p>"That’s true. And it’s never sure when you might have to leave, since you must come when Lady One summons you.”</p><p>"You’re right…" Perhaps those were not the right words to say. For a moment, Lady Two’s face became clouded with the thoughts of the enemy she would soon have to face. Even with my help, there was no doubt this would be a bitter battle for her.</p><p>Ah… please, do not make such an expression. Sorrow does not suit you.</p><p>"It’s all right. What Lady One is working toward is a world in which everyone can live in peace. All the people of the world support you, their saviors, the Intoners. There is no way you’ll be defeated."</p><p>"…right! If we work hard, everyone will become happy." The shadow on her face lifted a bit.</p><p>"And I will be ever by your side. No matter what the time or place, I live to protect you, Lady Two."</p><p>"Yes… stay with me forever. Promise me you will."</p><p>"Certainly." Finally, her smile returned. Yes… that is where it should always be.</p><p>"After the battle at the Cathedral City has ended… perhaps we should take a trip together." So that your smiles will become more frequent and joyous.</p><p>"Really?! Oh, but… I’d feel bad leaving everyone else behind…"</p><p>"How about this, then? We’ll make it a journey to exterminate monsters. Soon now there will be none left in our country, so let us make it our mission to hunt down those in other lands."</p><p>"Oh, perfect! That will help everyone!" Yes, that is what I like to see. Your smile, as pure and innocent as a babe’s. I would do anything to keep that smile on your face forever. To protect that smile, I would sacrifice everything.</p><p>"But what about the kids? I can’t leave them all alone." You’re such a worry-wart, especially when it comes to the children. That’s what I love about you, though.</p><p>"Why not entrust them to Lady One? There’s nowhere safer on earth than the Cathedral City."</p><p>"That’s true!"</p><p>"If we send a few soldiers from our country to accompany them, then it surely will not be a burden on Lady One."</p><p>"I’ll ask her, then! And have her let us inspect the inside of the Cathedral, too." I’m glad. With this, the anxiety you have over the coming battle has diminished a bit, as have the clouds that hang over your heart.</p><p>"Right, then. We’ll travel from one end of the world to the next, in hunt of monsters. You did say you wanted to tour the world together, just the two of us, did you not?"</p><p>"You remembered…?"</p><p>"Even if I forget what I was talking about five minutes ago, I’ll never forget any of the precious words you’ve said to me, Lady Two." That’s right. Even should I forget everything else, your smile would remain in my mind. It alone will never fade.</p><p>”Oh! You called me Lady again!” Nor would those adorable puffy, pouty cheeks.</p><p>"That’s because we are in front of your subjects."</p><p>"We are?" I could see Lady Two’s soldiers in the distance, kicking up sand as they ran toward us. I told them she her safety was assured with me at her side and that they did not need to pursue us, but so concerned were they over their Intoner that they came chasing after us anyway. It’s not like I could blame them. I understand very well how they feel.</p><p>"Perfect timing. We’ll send them to carry back the other Minotaur."</p><p>"Great! If we get them all back now, it’ll be just in time for dinner. What to make tonight… kebabs? Or should we go all out and roast them whole?" Your expressions which change so rapidly. Each and every one is so truly dear.</p><p>"Lady Two…"</p><p>"Yes?" I just wanted to say your name, to see you turn around. No…</p><p>"Let’s go home. Please, give me your hand."</p><p>I wanted to hold your hand in my own. I’ll never let it go.</p>Ever.<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Octa</title>
    <link href="/2024/03/10/Octa/"/>
    <url>/2024/03/10/Octa/</url>
    
    <content type="html"><![CDATA[<h1 id="Octa"><a href="#Octa" class="headerlink" title="Octa"></a>Octa</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><p>From <b>Drakengard 3 Official Japanese Website</b><br/>Translation by <b><a target="_blank" rel="nofollow noreferrer noopener" class="external text" href="http://web.archive.org/web/20131207121434/http://kho-dazat.tumblr.com/post/68052212592/all-you-need-is-joy">kho-dazat</a></b></p><p><b>Octa - <font color="red">"The Joy Of..."</font></b></p><p>I am known as Octa, disciple to the Intoner who reigns over the forest lands, Lady Three. Today I have accompanied her to the Cathedral City at the call of her elder sister, Lady One. This city is known as the birthplace of magic, and it is the bastion of both the knowledge and arts of the old world.</p><p>Of particular note is its library which holds a truly impressive assortment of texts, both new and old, from the world over. Most are written in languages I cannot understand, but there are I few I can decipher. Take this one. It reads… Diogenes Laertius? Is this an ancient history book, or perhaps a biography? I can understand the individual words but the contents are beyond me.</p><p>The next book I attempt to read to much easier to understand, not to mention considerably more interesting. It details the existence of an island nation far to the east that was known as the Land of Gold. That is, they produced so much gold that they used it to build palaces and homes. What a dazzling place it must have been! I also learned of its ancient enjoyment techniques known as The 48 Hands. Just 48? That seems a bit of a meagre number for a country known for its richness in gold. Perhaps it’s a misspelling and they truly meant The 4800 Hands? Not to brag, but I myself am the master of 666 enjoyment techniques, my proficiency in which is both a source of pride as well as my reason for living. Ho ho ho ho! Of course, even now I still practice all of them nightly. Before I’ve left this earth I’d like to increase that number to 6666. Ah, the path of self joy is a long one, indeed!</p><p>But back to the books. How about this one? It appears to be on health. No… beauty techniques. It seems it is geared toward women. Let’s see, now… it reads, how to become beautiful through pleasure? Well now, this is a subject right up my alley. Beauty concerns are of the upmost importance to any lady, and the concerns of ladies are also my own. Though Lady Three, already quite beautiful, isn’t much interested in this sort of thing.</p><p>Still, I feel I must study this book in greater detail. I, Octa, always endeavor to make use of all my skills in order to give women the deepest enjoyment. While I’m able to bring them to ecstasy in about two seconds flat, I am trying to aim for more than just speed. Instead of resting on my laurels, I want to reach higher heights. To put it more succinctly, I want to become a pleasure athlete.</p><p>To accomplish that goal, studying is of the utmost importance. They say knowledge is the mother of all virtue, and if so, it must also be the mother of enjoyment. Which would make books something like the grandmother. All paths lead to joy.</p><p>Moving on to the next book, let’s see here… it appears to be another book on health techniques. Forest Therapy is the title. Well now! This is required reading for someone who lives in a forest, like me.</p><p>Just as the name implies, the forest lands are mostly covered in thick woods. That said, it’s easy to traverse through and is really rather relaxing. It’s a nice place to indulge in some enjoyment, as well. Thanks to it being rather dark even during the day due to the shade, and the branches and bushes being good for concealment, you could carry on with any kind of pleasure you wish, be it self joy or group joy. On beautiful moonlit evenings its ideal for some night joy, as well. I can’t think of a more ideal place to enjoy the outdoors. And to think, there are therapeutic techniques to be employed while in it, as well! Truly the definition of two birds with one stone.</p><p>I must inform Lady Three of my discoveries. Lately she has been utterly obsessed with making dolls, and I’m a little concerned she is not attending to her health as she should. This is her regular routine, however. Once she becomes fixated on something she neglects to eat or even sleep. There was one occasion where she even stopped cutting her hair. By the time I realized it had grown so long it covered the entire floor of her room like a carpet, with nary a place for me to step.</p><p>Apparently ever since she was young, Lady Three has liked to cut her own hair, but since taking up doll making she’s mostly forgotten about it. While she does still enjoy playing with her scissors, it seems doll making has trumped even that in her mind. As a result, lately I have been the one trimming her hair.</p><p>On to the next book, then.</p><p>The one would appear to be on the topic of social manners. How to Be a Better Speaker… is the title. I suppose its a help manual for those who struggle in making conversation? Tips for making good first impressions, even if you’re shy… the weather and food make good general topics, but avoid the subject of politics and religion… Sure enough. Talking about the weather and food make for a decent enough icebreakers. But neither topic comes close to the connection you’d make discussing your personal enjoyments! Indeed, pleasure talk makes for the greatest social lubricant.Well, to be sure, there are some who’d be made uncomfortable by such a topic, and its never unwise to approach such subjects with a bit of care. Fortunately I find most of the soldiers under the employ of Lady Three to be open to such discussions, however. On the nights they’re up late keeping watch the conversation always seems to inevitably turn to them, perhaps to stave off sleepiness. Ho ho ho!</p><p>There are times Lady Three must lead us into battle. Since she quickly falls to sleep, I often have to find ways to entertain myself alone at the campground. Most of the time I participate in some self-joy, but occasionally I enjoy speaking with the soldiers accompanying us.I remember well the time I told them I had slept with a faerie woman. All of their eyes went as wide as dish plates when they heard me. Oh, it was quite funny indeed! Hee hee!</p><p>"B-but how?!"</p><p>"Isn’t that physically impossible?!"</p><p>"That’s beyond all reason!"</p><p>"Don’t tell me you shrunk yourself?!" It’s true that those of the faerie race are small enough to fit in the palm of your hand. In comparison, my member would seem colossal. I could understand why the soldier’s struggled with the idea.</p><p>I spied one, however, who instead of looking mystified was nodding his head as if in understanding. When the others asked him why he didn’t seem surprised, he replied in a perfectly even tone of voice:</p><p>"I just assumed he shoved the faerie up his asshole." Having said that, the wide eyes of the soldiers turned off of me and squarely onto him.</p><p>Without commenting on how accurate his assessment was, I have to say, I was quite impressed by his fluid way of thinking. I never thought I’d encounter such a like-minded person in a place like that. It was quite the happy occasion for me. Keep your thinking fluid and your member hard… that’s my personal motto.</p><p>It would be most accurate to say that I consider every hole in the world a potential lover. Whether they belong to someone of a different race like the faerie woman is hardly of any concern. What seems unnatural to me is not being able to chose a partner or use my body freely.</p><p>"Master Octa, tell us how you managed it!" All the soldiers were looking up at me with faces shining with the light of curiosity. This is how I answered:</p><p>"Clear your mind of all mundane thoughts and you will find even fire cool."</p><p>This was apparently an old religious saying from a distant eastern country, but it perfectly described my point of view. Before my ardent will to feel pleasure, trivial matters such as mere differences in size hardly acted as a deterrent. In other words:</p><p>"It’s a secret, my boys." Some things are even more exciting when left to the imagination, I find. Ho ho ho ho!</p><p>Ah, but I’ve gone on too long. I don’t often get this opportunity, so I really should continue looking through these books. This next one is… ah, it appears to be a collection of famous old sayings.</p><p>"Toil conquered the word, unrelenting toil and want that pinches when life is hard." These seem to be the words of some poet of yore. I see… If you were to replace the word toil with pleasure, I would be in perfect agreement.</p><p>"The hand is the tool of tools." Oh, now these are wise words! Truly those of a most enlightened philosopher! Surely he was one of the greatest minds of his time. Hands are indeed the greatest tool in the pursuit of pleasure. All manner of enjoyments can be had with a set of able fingers!</p><p>"Heaven doesn’t make a man better than others, nor does it make a man worse than others." This is a saying for the ages. I, too, believe heaven has made no hole better or worse than the next. All holes are equal! In other words, allowing things like age, sex, race… even species dulls your ability to truly enjoy pleasure. Each hole has its own unique features and charms. Discarding your prejudice and liberally accepting every hole with open arms is the key to a truly enriched life. Ho ho ho!</p><p>Now it’s about time to finish up my reading. Soon Lady Three will awake from her nap; or rather, it’ll be time for me to wake her. For as obsessive as she is about her interests when awake, once she falls asleep it’s nigh impossible to rouse her. I do wish I could have found a book that might have appealed to her. I think it would be healthier for her to have a variety of interests as opposed to just one obsessive one, but I also know better than to think its possible to change her nature.</p><p>Hm?! W-what is this book?!</p><p>It seems to be some sort of textbook, but on what subject? It doesn’t seem to be about math, history or science. Is it perhaps about astrology? No… but it does seem to concern stars.</p><p>Within its pages I find text detailing an enormous hole that exists far, far off in the depths of the skies above. It is described as being able to absorb anything and everything, from gigantic beasts to monstrous boulders, even mountains, continents and other stars! It sucks up all kinds of matter with ease. To me, a man who considers all the holes in the world his lovers, to learn of a hole of that dimension… how I would relish the chance to engage it! A hole that sucks in everything would be the perfect challenge for Octa, the man who loves every hole! To pursue that passion I would gladly travel to the ends of the earth and even venture into the heavens!</p><p>I must train even more devotedly for that day. To start with, I’ll engage in some special pleasures tonight with Lady Three. Exhausting every technique, I’ll bring her holes unparalleled enjoyment!</p><p>As they say, a journey of a thousand joys begins with the first step.</p><p>NOTES:Diogenes Laertius is a Greek philosopher.</p><p>Japan was once known as The Land of Gold due to the amount of gold they used to produce and export until around the Edo period, apparently. In other words, Octa is referring to Japan.</p><p>The 48 Hands are a series of sex positions, sometimes referred to as the Japanese Kama Sutra.</p><p>And here are the quotes Octa is blaspheming and who they’re attributed to:Clear your mind of all mundane thoughts and you will find even fire cool. - Words attributed to a Buddhist monk as the shrine he was in burned down around him. Toil conquered the word, unrelenting toil and want that pinches when life is hard. - VirgilThe hand is the tool of tools. - AristotleHeaven doesn’t make a man better than others, nor does it make a man worse than others. - Yukichi Fukuzawa</p>The journey of a thousand miles starts with the first step. - Lao Tzu<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Decadus</title>
    <link href="/2024/03/10/Decadus/"/>
    <url>/2024/03/10/Decadus/</url>
    
    <content type="html"><![CDATA[<h1 id="Decadus"><a href="#Decadus" class="headerlink" title="Decadus"></a>Decadus</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><p>From <b>Drakengard 3 Official Japanese Website</b><br/>Translation by <b><a target="_blank" rel="nofollow noreferrer noopener" class="external text" href="https://archive.is/20140209150843/kho-dazat.tumblr.com/post/71610116988/note-im-in-the-process-of-redesigning-my-tumblr">kho-dazat</a></b></p><p><b>Decadus - <font color="red">Everything Is for You</font></b></p><p>"Could you die for me?"</p><p>These were the first words my mistress, Lady Four, ever spoke to me. I still remember vividly the sound of her voice, the expression on her face, even the clearness of her eyes as she looked up at me. As soon as she had finished speaking, she made a face, as if she were looking at something strange. She gazed at me for a long time; I think perhaps she was still a little unsure of what a disciple was.</p><p>I, of course, understood my duty completely. It was to never leave my Intoner’s side, to serve her faithfully, to withstand the very fires of hell to protect her… the very fires of hell… fire… burning… ooh!</p><p>Uh, erm. That is to say, that was how I understood it. But I wasn’t yet sure what Lady Four’s exact expectations of me were, this being our first meeting. As a result I found myself unable to answer her at once. But Lady Four did not get angry. Instead, as if blaming herself, she continued thus:</p><p>"Oh… I’m sorry. What I meant was, would you be willing to die for an Intoner, one responsible for protecting this world? That is… could you put your life on the line for the sake of this world? I-I didn’t mean you should say you’d want to die for me personally…"</p><p>This time I answered promptly. “Yes, of course. If it is to serve you, I am ready to withstand any trial, no matter how torturous… torture… ooh!”</p><p>"Decadus? Are you all right?"</p><p>"Y-yes! I’m just fine." Lady Four shows such concern for others.</p><p>"What I can’t accomplish alone, we can surely accomplish together, as a pair… I think a disciple’s most important duty toward his Intoner is to act as a partner." Furthermore, she is incredibly intelligent and high-minded. I am proud to serve such an outstanding person.</p><p>"Ah! But don’t misunderstand me, okay? When I say partner, I don’t mean it in a weird way! I’m not the kind of person who interprets everything in only the most vulgar way… like my younger sister. Oh, but I mean…"</p><p>"Of course I will serve you in full capacity in that area as well!" Yes. To serve as the partner of an Intoner in the bedroom is another of a disciple’s duties. But is it truly all right for someone such as myself to be Lady Four’s lover? Before a personage such as herself, I am as insignificant than a stone in her path… one to be stepped on, or kicked… kicked… ooh! Kick me, please!</p><p>"I-I just said, that isn’t how I meant it! Are you s-stupid or something?! I’m different! We may be siblings, but don’t put me in the same category as my wanton, breast-obsessed little sister! I’m completely different than that girl! I think with my head… not my loins! T-that’s right! What’s important to me is your heart, not your body! Understood?!"</p><p>"Yes! Of course, my lady!" I knelt at Lady Four’s feet and earnestly begged her forgiveness for the sin of having upset her.</p><p>"Please excuse my impudence! I have not enough words to apologize to you! I will accept any punishment, however cruel, you deem fit to give me! Make it as harsh as you desire! I don’t mind if you kick me, or even whip me!" Kick me… whip me… whip… ooh!</p><p>"Now, my lady! Do not hesitate! Punish your Decadus!"</p><p>"H-hold it, raise your head off the ground! I don’t think you did anything worth being punished over…"</p><p>"No! No! I insist! To have soured your mood… I am a failure as a disciple! Punish me, please!"</p><p>"I said it was all right! I’m not going to punish you!"</p><p>"…you’re not?" You’re not going to whip me? Or even give me just a little kick? To leave me high and dry like this… it’s torturous! Wait. Torture? Oh! I get it! Lady Four, I see what you’re doing! This is your punishment! What a sublime… sublime type of torture!</p><p>"It’s okay already, so get up! Are you listening to me?" Ah… my lady! Even though this is our very first meeting, it’s as if we’ve known each other for years. For you to have grasped my desires so completely! No words could express the depth of gratitude I have for being lucky enough to serve under such an amazing Intoner like yourself!</p><p>"Could you die for me?" The second time Lady Four asked me that question was just after she’d taken control of the mountain lands, and we were setting out to exterminate monsters together.</p><p>Even after we’d dethroned the corrupt lord, the mountain lands were infested with all manner of violent, vile beasts. The many hiding spots the terrain supplied made it their ideal environment to nest in. As expected of her, Lady Four did not hesitate to set out to subdue these beasts herself in order to assuage the troubled populace. However, the soldiers serving her protested strongly. Even if the chances were one in a million, they could not bear the thought of something happening to their precious Intoner.</p><p>"Thank you for your concern. But it’s quite all right! I have the power of song, and my loyal disciple to protect me." Lady Four gave the soldiers a smile before turning to me. That’s when she repeated that question.</p><p>"Could you die for me?" I understood she had asked it in order to relieve the soldiers. As expected of my kind and considerate lady. Without hesitation, I replied:</p><p>"Of course! I will defend you with all my strength. No matter what terrible beasts assault us, I will use my own body as a shield to protect you… a shield that gets hit… and stabbed… ooh!”</p><p>"Decadus?" For a moment I thought I saw Lady Four make a troubled expression, but it must have just been because of my poor word choice. Thinking what I had said was not yet enough to put the soldiers at ease, I continued:</p><p>"To protect you, I will become anything. Even your shoes… no, the soles of your shoes, under your feet!"</p><p>"I’d prefer you didn’t." Apparently Lady Four did not wish for me to become the soles of her shoes.</p><p>On the mountain roads, monsters appeared one after the other. It was an extremely dangerous place, and the walk up to it hadn’t been easy, either. We’d been in constant danger of falling rocks and precarious cliffs the whole way; the former lord apparently had not cared a whit about making things more safe for his people.</p><p>"I’ll command the soldiers to keep things safe and clear on the paths leading in and out of the city. As it is, there’s no way the elderly or young children could traverse these roads. And to make sure no monsters get near, I’ll have to set up a constant, all-night patrol. Oh, but perhaps I’ll leave the path leading to the shrine infested… to prevent thieves and intruders." We weren’t just exterminating monsters. Lady Four was using this opportunity to survey the terrain and come up with new strategies and plans. No matter what the time or situation, her heart was always full of concern for the people. It was if she were born to lead them.</p><p>"Still…" Coming to a stop, Lady Four gave a sigh.</p><p>"I knew the prior lord was a villain, but to let things worsen to this state… how cruel!"</p><p>"Y-yes… so very… cruel… ooh!”</p><p>"What?"</p><p>"N-no. Just a slip of the tongue…" Lady Four gave me a suspicious look, but said no more. It wasn’t the time to, considering a new bunch of monsters had rushed in from the side. We assumed our battle stances.</p><p>Just as I had promised before the soldiers, I became a wall between the beasts and Lady Four. I also served as her sword, slaying many of them for her.Actually, though, I prefer not to fight with weapons. Instead I utilize my own arms and legs. As opposed to a sword or spear, when you use your own body to attack you get a better feel of just how much damage you’re inflicting upon the enemy. And also, how much damage you yourself are receiving. With each blow of my fist, the shock from the impact travels from my hands to my brain… the stronger the foe, the more clear and painful the feedback to my hands and feet. For example, were I fighting a golem with a hard, stony body… the pain my fists would receive would be… would be… ooh! Just imagining it, I… I can hardly…!</p><p>"You seem happy, Decadus."</p><p>"Using my body to protect you is my greatest pleasure, Lady Four! For your sake, I wouldn’t mind it even if I were split in two… split in… two… ooh! I can’t take it!”</p><p>"Really? It’s not the pain in your fists making you happy?"</p><p>"H-how did you…?!"</p><p>"If you want to keep things like that a secret, try not mumbling so loud!" Something in Lady Four’s voice turned very cold.</p><p>Ever since we’d returned from that mission, I got the feeling Lady Four was speaking to me less. I also felt her eyes had become harder, more chilly. Not that I was dissatisfied with that. Just the opposite, really! Oh, her gaze that seemed to pierce me like a blade made of freezing ice! Piercing me deeply… deeply… ooh! To think Lady Four could torture me so effectively without laying a single finger on me. It was almost intolerable! What a gift she had for exciting me!</p><p>Ah, but excuse me. Putting that aside, lately I’ve felt as if Lady Four is trying to avoid eye contact with me. Perhaps it is just my imagination? No… I don’t think so.</p><p>What’s important to me is your heart… that’s what Lady Four told me when I first met her. In other words, even if we do not speak… or our eyes never meet… what Lady Four desires is a disciple who can understand her heart. To be unable to do so would make me unfit to serve her.</p><p>Though I am ever at her side, Lady Four behaves as if she were alone. But this makes sense! After all, a disciple is meant to act as his Intoner’s shadow. A shadow to be stepped on… ooh… to be stepped on… Lady Four, how is it you understand me so completely? How blissful it is for me to serve such a perfect master. My joy is so great it almost scares me!</p><p>"Could you die for me?" The third time she said those words was quite recently. It had been the first time in a long while that she had spoken to me. Even if I don’t say it, you must know my life is yours. All of me exists solely for your benefit.</p><p>"Of course! For your sake, Lady Four, I would endure pain worse than death. Worse than… death… ooh!”</p><p>"…I see."</p><p>Lady Four replied curtly, before turning her back on me. I thought I heard her whisper “Just die now, then.”, but the voice in which she said it was so much lower than her usual pitch, I may have been hearing things.</p><p>Actually, it must have been the creaking of her bedroom door I heard instead. It’s a very, very old door. Tomorrow, after Lady Four awakens, I’ll have to take the time to grease its hinges.</p><p>After the door had closed with a loud creak, I silently bowed in its direction.</p><p>"Good night, my lady. Sleep well…" Then, as I did every night, I sat before the door to keep watch.</p><p>In addition to being old and noisy, my lady’s bedroom door did not do much to muffle the sounds from within. To be frank… I could easily hear everything going on inside it, especially as the night grew later and more still.</p><p>As I sat on my knees before that door, I often hear the sounds of the bed frame creaking and my lady panting. It does make me feel a bit guilty, especially whenever I hear her call out sweetly for her older sister in her sleep.</p><p>There are those amongst the soldiers who spread rude rumors that she’s trying to be seductive, offering herself up to me… but that is incorrect! Completely and utterly!</p><p>To have me sit and listen before that door… to even leave it unlocked as she does… none of that suggests seduction. She could take me into her room at any time, which is exactly why she leaves me out of it. Furthermore, she makes me sit upright on the cold floor… which, as my legs grow ever more numb… the sounds of her voice crying out and the rustling of clothing enters my ears…</p><p>What perfect… artful teasing! What perfect… masterful torture!</p><p>Just after I had first begun to serve her, I often imagined being smashed under her cold heels, or being torn up by her long, sharp nails… but now I realize how shallow those fantasies were.</p><p>I don’t require the feel of her heels or nails. Between Lady Four and I, there is no need for physical contact. Lady Four bestows upon me joyful pain enough without it. This is what she meant by being partners! We are truly connected, heart-to-heart!</p><p>Without ever touching her person, or even my own… no, exactly because we do not touch, these maddening pleasures continue indefinitely! Outside of her door, teased by my growing lust, I am earnestly tortured… earnestly ignored… all throughout the night. I wish time could stop, that dawn might never come, so that this could continue eternally. Oooooh!</p><p>Just imagining it, I… I can hardly… oooooh!</p><p>What… what… torture! What extreme torture! No… no… this is a reward! Being left here, cruelly neglected… that itself is my reward!</p>Ah! Could there be anything more pleasurable?!<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Dito</title>
    <link href="/2024/03/10/Dito/"/>
    <url>/2024/03/10/Dito/</url>
    
    <content type="html"><![CDATA[<h1 id="Dito"><a href="#Dito" class="headerlink" title="Dito"></a>Dito</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><p>From <b>Drakengard 3 Official Japanese Website</b><br/>Translation by <b><a target="_blank" rel="nofollow noreferrer noopener" class="external text" href="https://archive.is/20140126050703/kho-dazat.tumblr.com/post/71610834037/note-im-in-the-process-of-redesigning-my-tumblr">kho-dazat</a></b></p><p><b>Dito - <font color="red">This Repulsive World</font></b></p><p>I hear the sound of the waves. It annoys me, but this being a seaside country, there’s no getting away from it, save for sleep. Another morning... I think wearily to myself. I wish the sun had never risen. Then I wouldn’t have to go through another exasperating day... but no. If the sun had never rose, it would still be night. Nights are worse.... because at nights, I have to...</p><p>I stop thinking before the bad memories fully came back to me. But just the hint of them made my whole body shudder. That’s when I heard her voice.</p><p>“Dito?” The same voice as in the memories I was trying to avoid. I should have tried to feign sleep a little longer... this woman is as dense as a brick, yet surprisingly sensitive to my movements. This... sow-like woman.</p><p>“Hmm? Five... up already?” I make a show of rubbing my eyes as if I’d only just woken up.</p><p>“Dito, continue sleeping.” Ah, if I could, I would! I’d actually prefer never to wake up again, if it meant one less night of those huge bags of meat suffocating me...</p><p>“It’s because you’re being so noisy, Five.” Still, I can’t let my guard down. Who knows what she’d try to do to my defenseless body... not that things go much better when I’m conscious.</p><p>“Oh, I’m sorry.”</p><p>“It’s okay...” Like hell she’s sorry. She’s not really. She’s only pretending to be considerate. It’s all surface-level with her.</p><p>“Going through your wardrobe again? This early in the morning?”</p><p>“There’s not enough time in the day for me! I’ve got to get as early a start as possible.”</p><p>“Well, maybe if you didn’t change your clothes three or four times in one day you’d have more time. Couldn’t you just wear one outfit until evening?” Besides, there’s no masking your insides. No matter what you wear, you’re still jump a fat lump of flesh. Wrap yourself up in ribbons all you like... in the end a pig is still a pig.</p><p>“I can’t do that! How could I wear just one dress when I have so many?!” It’s almost sort of tragic how someone could have so much to wear yet so little that actually suited them. Strike that... it’s hilarious.</p><p>“Tell me, Dito, what about these?” I can tell you already they won’t look good. Don’t you realize those layered gowns just make you look even meatier? Or that those woolen ones make you seem twice as fat? I’ll bet you haven’t the foggiest idea that your favorite style of clothing, with all the lace and frills, looks worst on you. Like a ham wrapped up as a gift. Talk about bad taste.</p><p>“Maybe you don’t like any of these dresses because they seem hard to take off me?” That’s not it at all! Ugh, you’re so gross! Don’t touch me!...I want to scream, but of course I can’t. No upsetting the Intoner, now. I am her loyal disciple... I must act in a way that pleases her.</p><p>“No... that’s not what...” This is what you like, right? Me acting like a cute little boy, blushing and shy?</p><p>“Or maybe you’d prefer I wore nothing at all...”</p><p>“I-I...” Of course I wouldn’t! Why would I?!</p><p>“I don’t mind doing it clothed, either...”</p><p>“But...” Whether you’re naked or clothed, I don’t want to do it with a pig!</p><p>“I just need to be on top in that case. Or we could do it standing, from behind...”</p><p>“I said I don’t...!” I don’t want to have sex with you! The position isn't the issue here!</p><p>“There’s no need to be shy...” Believe me, I’m not. I’m rejecting you from the bottom of my heart! ...I could never say that. Not as long as I’m her disciple.</p><p>“Dresses! Weren’t we picking out dresses?!” Face as red as an apple, I act flustered. The tone of my voice has become high-pitched as I indicate toward the dresses. So you enjoy this kind of behavior, huh? You hag.</p><p>“How about this one? This middle one, here? It’s dazzling!”</p><p>“Forget the dresses for now, Dito. Come here...”</p><p>“Well, then, how about this one? Check out the detail on this embroidery! You haven’t worn this one yet, have you?” I slip out of her arms, though I know my escape will be short-lived. She likes it when I play hard-to-get, anyway. It’s more exciting for her if her prey tries to get away. Entering her dressing room, I let out a big sigh. The other disciples must have the patience of saints! That or their Intoners are considerably more sane. Maybe they all just have it better than me.</p><p>Those two lovebirds from the desert kingdom seem pretty happy. It’s like they’re walking through a perpetual flower field. It’s embarrassing to watch. A disciple’s duty is to satisfy the sexual needs of his Intoner. What’s the point of acting like you’re in love? What kind of freak would fall in love with an Intoner in the first place? Oh, but right... that disciple is a total idiot. No wonder, then. A waste, though, to be so handsome and yet so dumb. I wonder what’s harder, being ugly and intelligent or handsome and dumb? In any case, god seems to be stingy when it comes to giving out good looks and smarts at the same time.</p><p>I continue pretending I’m looking for a dress. I make some noise pulling and pushing things off the rack, lest the pig woman check in on me. I’m careful not to tear any fabric, though. Thinking she might get sick of hearing the same sounds, I pull one of her gaudier dresses inside out, but soon realize how pointless what I’m doing is and give up on it. Instead I study the inside-out dress. Its shiny fabric can’t be seen through the back, and the reversed stitching reminds me of veins. It’s much prettier this way.</p><p>I sort of like things inside-out like this. I wish you could do the same thing to humans; just stick your hands down their throats and yank them clean inside-out. Then all their organs and stuff would be right on display. Imagine if they were still digesting? Then you could see all the food they’d eaten right there in their stomachs. That’d be one heck of a sight. Even that pig woman, if you turned her inside out... she might be cuter then. Instead of the white of her skin, imagine seeing the red and pink of her facial muscles. And her entrails, dangling invitingly... that’d be pretty sexy. I wonder how a moan might sound from an inside-out throat?</p><p>...I’m getting kind of hot and bothered.</p><p>Time to stop daydreaming. Got to head back into the thick of it sooner or later. Searching for a dress was just a desperate bid to save time. My fate can’t be avoided. Carrying a dress she’d bought recently from an eastern salesman, I leave the dressing room. This Intoner likes nothing better than a performance, and the sight of me as her clown. She’s got to have some screws loose, alright... but all the same. As I expected, her expression is one of satisfaction. I wish she’d learn to smile a little less vulgarly.</p><p>“This dress is lovely, too. But so is this one! Oh, I’m at such a loss...” I’m the one at a loss here. It’s tough watching a woman be so engaged in picking out clothes that don’t suit her. Pretty depressing.</p><p>“I wish I had three or four bodies. Then I could wear these all at once!”</p><p>“Three or four of you?! Are you serious?!”</p><p>“Of course.”</p><p>“...that would be a nightmare!” I couldn’t help but blurt out my true thoughts. Three or four of her?! That would herald the end of days. I’d sooner hang myself.</p><p>“I think it’s a splendid idea. Next time I see my sister One, I’ll ask her if she doesn’t know a spell that could do that.” Does that mean we’ll have to go see her soon? Man. The eldest Intoner has a sharp mind. She makes me nervous... I’ve only met her a few times, but something about her rubs me the wrong way. After all, she was the one to command meatball here to rule over this seaside land. Can’t thank her enough for that, now can I...</p><p>“If there were three of me, I wouldn’t have to worry about what to wear. I could eat three times my full, as well!”</p><p>“You already eat enough for three people as it is.”</p><p>“Oh, I do not!” Oh yes, you do! Make it more like five or six. She eats so much I’m surprised the chefs here haven’t died of exhaustion yet!</p><p>“When the cooks ask if you’d prefer meat or fish for dinner, you always say both.”</p><p>“Okay, my dear Dito. That’s still only two people’s worth.”</p><p>“Then when they ask how you’d like your meat prepared, roasted or sautéed or boiled, you say all three!”</p><p>“Well, when you put it like that...”</p><p>“And then when they’d ask how you’d like your fish, grilled or baked or fried...?”</p><p>“I suppose I ask them to prepare all three. Oh no, now I’m hungry. Is breakfast ready yet?”</p><p>“Five, your gluttony knows no bounds...” If I could, I’d ask her smart older sister for a spell to diminish her appetite.</p><p>“I can’t wait for spring. Then I can go searching for scrumptious new things.” Hunting and foraging was a hobby of hers. But scrumptious is not the word I would use to describe what she brings back...</p><p>“You mean things not fit for human consumption.”</p><p>“Oh, but Two cooks them wonderfully! She has a knack for making delicious meals out of them.”</p><p>“You don’t deny that they’re usually inedible, though.” How could she? Stuff like troll, orc and goblin meat... even sandworms. That’s called monster hunting, not ingredient gathering.</p><p>“Two makes goblin brain into a delicious pate. Then there’s her spiky lizard stew, and her pickled six-eyed monster fish...” No sane person would eat any of that crap. Never mind their twisted libidos, there’s also something seriously wrong with the Intoner taste buds, too.</p><p>“I guess you could consider it gourmet eating?”</p><p>“You think so?”</p><p>“Sure, dining on food you risked your life procuring could be a whole new culinary trend. I’ll pass on it, though...” My measured response was due to my Intoner’s influence. I really wanted to ask her what kind of animal would ever consider eating the crap she was describing.</p><p>As I was thinking that, my eyes were forced back on her. I hate it when she makes me do that.</p><p>“Um... Five?” I could feel my face going slack as I looked up at the pig woman.</p><p>“What are you thinking right now...? Something strange...?” Like I needed to ask. I’d know that lustful expression from a mile away.</p><p>“Not at all...” Yeah, right. Sex is all you think about.</p><p>“H-how about breakfast? You’re hungry, right?”</p><p>“Yes. I’m going to dig in right now...”</p><p>“Five! Wait-” Aren’t I a tragic hero? Forced to act in this charade?</p><p>“No, I won’t wait... not anymore...” It’s in an Intoner's nature to be perverted and lewd. Perhaps it’s connected to their singing abilities. As if that makes any sense at all... How can I sympathize with a nymphomaniac who gives me no peace, day or night? I can’t. No matter what the circumstances may be.</p><p>“Why are we doing this first thing in the morning...?” I’m annoyed by my own complaining. I should know there’s no point. I almost want to knock my own mouth shut!</p><p>“Because of your cute, sleepy little face...”</p><p>“That makes no sense.”</p><p>“Don’t you like sleeping with my big breasts as a pillow?” Ahhh... I give up.</p><p>I wish she would at least stop licking me all over like that. It makes me feel all gross and sticky. It’s the worst. She’s got no technique, either. The smell of her saliva, her body fluids... I want to throw up. I wish I could... I’d feel better for it. But that her anger her, for sure. Her voice is what I really can’t stand. Sounds like someone strangling a chicken. This is the pits. My body is all sticky, my ears full of that awful sound, and those two sacks grinding against my stomach as she writhes on me... I can’t think of a worse torture than this. I wonder if that old man with the rings wouldn’t switch with me. I’m sure he wouldn’t mind being this woman’s partner... seems like he’ll do anything with a hole. There’s probably no man more suited toward being a disciple than that one. I’d like a spell to make three or four of him. Hey, that’s not a bad idea. I’ll ask big sis One about it myself, next time I see her...</p><p>God, when are you going to be done?! You’re so heavy. Get off already, you hag! I wish I could kill you! There’s no way I could though. I’ve already tried to. But when I went to stab her from behind...</p><p>”What are you doing, Dito? Naughty boy.” The moment I heard her voice, my sword was at my feet. My hands had lost the strength to grip it. No disciple can defy their Intoner. No matter what. I learned the truth that day... just remembering what happened makes me want to die. I want to die.</p><p>Why did I have to be her disciple? Why couldn’t I have gotten a different Intoner? I’d have liked to serve under another one instead. But maybe they’re all the same... who knows? Still, no one could be worse than her. Those two in the desert seem happy, the old man is having fun... it’s not fair that only I have to suffer. Hm? Speaking of which, wasn’t there another one of us... the idiot, the old man, me, and... ugh, I forgot. Oh well.</p><p>I wish she’d finish already. I’ve already counted all the cracks in the ceiling. I really don’t want to have to get started on the walls...</p><p>“No... not yet...!” Not yet what? It’s all the same in the end, no matter how many hours you’re at it. It’s not like you feel anything. To be so lustful yet unable to feel a thing... on that count alone, I pity you. Poor thing... nah, you deserve it.</p><p>“My dear, sweet Dito... don’t make that face.” What face? Am I making a face? Whatever it is, it must be to your liking.</p><p>“If your appetite is as much as three people’s, Five, your lust is equal to thirty.”</p><p>“My... what praise!”</p><p>“I’m not praising you...”</p><p>“Good boy... let me reward you. Where do you want it next?”</p><p>“That’s a punishment, not a reward.”</p><p>“Oh? You prefer to be punished?” Not really, but it’s all the same in the end. This is torture.</p><p>“Why are you so lustful, Five?”</p><p>“Am I? Really?” You don’t even realize it? Well, I suppose it’s more than a simple case of lust for you...</p><p>An Intoner’s libido is stronger than a normal human’s. But you’re even more different. No matter how many positions you try or how many hours you spend doing it, it will never feel good for you. Do you think sleeping with lots of people will fix that? You’re not satisfied with your dressed because none of them suit you. Do you think new ones will change that? You know that no one would serve you if you didn’t brainwash them. Do you think you’ll ever find someone who honestly loves you?</p><p>Unfortunately there is no cure for your lack of sensation. No dress will ever look good on you and nobody on earth is crazy enough to love you. My poor little Intoner... serves you right! ...hm? I feel a crease in my brow. Am I frowning? I touch my forehead, cheeks and mouth. I’m frowning all right. But how? Five would never allow me to frown...</p><p>“What’s wrong?”</p><p>“Oh...”</p><p>“It’s not like you to space out in bed like that.” I’m a little shocked, to be honest. But Five quickly regains her composure. Before I know it, she’s back to her gluttonous old self. I can tell because my voice and facial muscles are going out of my control, just as usual.</p><p>“Don’t be mean... I have matters on my mind, as well.”</p><p>“Are you mad?”</p><p>“No...” You’re lying. You must be, or else why is my voice coming out so soft? Why is my face contorted in fear? Are you mad I interrupted your reverie? Or that I noticed you were distracted? Disciples cannot disobey their Intoners. That’s right... I can’t raise so much as a finger against this woman. I am made to act the way she pleases, to say words that delight her. I am a perfect slave.</p><p>I remember you once said this to your kind elder sister: ”I love this boy with all my heart. Every last bit of him! Even his mean and mischievous parts.”Who wouldn’t love a boy who’d do anything they wanted? You like the mean and mischievous parts of me? Please. You regulate just how mean I am, and never allow it to surpass your expectations. Any part of me that doesn’t fall in line with your image of me, you suppress. The proof of that is in my inability to utter a single word of truth to you, even now.</p><p>“Let’s continue...”</p><p>“You’re not done yet?!” I’m not really surprised. I’m just being made to act like I am. My eyes become wide on their own; I didn’t will them to. I just lay back and let it happen.</p><p>“Just kidding...” I know you are. I know all of you, after all; your lies, your emptiness, your stubbornness, your desire for control. And you know, I don’t hate the ugliness inside your heart. I can forgive your rotting insides, because...</p>I’m your disciple.<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:One</title>
    <link href="/2024/03/10/One/"/>
    <url>/2024/03/10/One/</url>
    
    <content type="html"><![CDATA[<h1 id="One"><a href="#One" class="headerlink" title="One"></a>One</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="mw-parser-output"><figure class="thumb tright show-info-icon" style="width: 277px"> <a href="https://static.wikia.nocookie.net/drakengard/images/5/5c/One_face.jpg/revision/latest?cb=20140420034129" class="image"/>  <figcaption class="thumbcaption">  <a href="/wiki/File:One_face.jpg" class="info-icon"><svg><use xlink:href="#wds-icons-info-small"/></svg></a>    </figcaption> </figure><p>From <b>Drakengard 3 Official Japanese Website</b><br/>Translation by <b><a target="_blank" rel="nofollow noreferrer noopener" class="external text" href="https://archive.is/20131228073746/kho-dazat.tumblr.com/post/70522248053/visitors-january-1st-999-a-d-on-this-the-first">kho-dazat</a></b></p><p><b>One - <font color="red"> Visitors</font></b></p><p>January 1st, 999 A.D.</p><p>On this, the first day of the new year, the faces of all the people within the Cathedral Capital were filled with joy. With my keen eyesight, I could tell that every last smile was a genuine one. Yes… I could see clearly the sparkle in their eyes, the laughter pouring from their lips… not a single person wore a troubled or forced expression.</p><p>Why should they? The scourge of the tyrants lord had been eliminated, the nobility that fostered them dismantled. The people had at last been released from their torment. How long they had prayed for this day to come!</p><p>The only person struggling not to frown was me. It was all I could do to keep from covering my ears and falling to my knees… despite my being an Intoner.For a moment I wished I had my sisters with me, but I shook those thoughts from my head. While having all five of us situated in the capital would surely be heartening to the citizens, it would not make sense to have them abandon the posts which I had only just assigned them to. It wouldn’t be long before I had to call them here in any case. Not much time remained before the ‘day of promise’.</p><p>Facing the people crowding the streets, I gave a wave from atop my steed. This caused them to cheer even louder, and I felt the animal tense beneath me. I am not fond of horses due to their strong odor, but in this case I could sympathize with the beast. We were both being forced to parade our way from the harbor towards the cathedral. I would have preferred to have snuck back after sunset; I wanted to be alone. My mind, exhausted from battle, sorely needed a rest. But I was not allowed to be so selfish. It was my duty as an Intoner to symbolize order and peace having returned to the world, even if that meant being made a spectacle of. And how could the innocent people know that their cries of elation were causing me, with my heightened senses, to feel as if my head were being split in two?</p><p>January 27th</p><p>In the days following my return to the capital, I’ve been poring earnestly over the books in the cathedral library. I quite like it in here; the thick tomes muffle sounds from the outside, making it comfortably quiet. And while the smell of dust and must troubles my nose, it is nothing compared my usually having to take in the body odor of humans and animals.</p><p>That’s right… it’s not just my eyesight and hearing that are pronounced. All five of my senses, including taste, touch and smell are torturously sensitive. It wasn’t as bad when I was a child. Back then my senses were only slightly enhanced. But as I grew so did they, at a pace that far outstripped my physical development. Before long sounds and smells seemed to be assaulting me. I could no longer enjoy the taste of food due to it being too intense. Even the touch of my own clothes upon my skin made me feel deeply uncomfortably… those days before I developed a method of coping were very hard, and weighed heavily on my psyche. But all of us Intoners have one bodily aspect which develops excessively compared to the rest, as a side-effect of our strength. Perhaps it’s silly to expect that those as powerful as ourselves could hope to otherwise live normally.</p><p>I heard footsteps approaching. There were two pairs, one leading, the other following. They suddenly came to a stop, however, and seemed to hesitate for a moment before beginning to walk on tip-toes. Soon I heard a gentle knock at the door. From her thoughtful behavior, I could already guess who it was; my energetic yet very gentle younger sister, Two.</p><p>"It’s open. You made it here quickly, Two…" As soon as I had called her name, the door made a terrible sound and I heard her give a little shriek.</p><p>"I-I’m sorry…! I broke it…" Two stood in the doorway, eyes full of tears. In her hand she still gripped the doorknob, the door ripped off its hinges still attached. Just as my senses were overdeveloped, so too were Two’s muscles. While she looked quite slight, her arms and legs held the strength of ten men. It was easy for her to break things or hurt people, so Two usually took great care to restrain her movements. That this had happened in spite of her vigilance meant that her strength must have suddenly increased without her realizing.</p><p>At least her growth did not affect her appearance. Our sister Three’s hair grows at an incredible rate, so much so that she must constantly be cutting it. As a result she travels with a pair of scissors wherever she goes. Then there is Four and her nails; unlike hair which at least doesn’t hurt when it is cut, Four is constantly suffering from her nails splitting and breaking. She long had a habit of biting them to keep them down, and struggled greatly to stop doing it. The subject is still a sensitive one for her, and it’s sad to see her always trying to hide her hands. Our youngest sister Five is just the opposite, taking inordinate pride in her ever expanding bust. Four would always be muttering that such large breasts on one so young was vulgar and disturbing, but I wonder if she wasn’t also jealous, if not of Five’s chest than of her bravado. Seeing Five take such pride in her assets must be very frustrating for her.</p><p>"One, what should I do…?" Two’s voice brought me back to the present.</p><p>"Don’t be concerned. It was a very old door, already ready to come off its hinges. I’ll have someone fix it."</p><p>"Really?"</p><p>"Really." Two’s smile returned in an instant. Her guileless nature remained unchanged from childhood.</p><p>"Well! It’s nice to see you, Sis! I hope you’ve been well. It’s been such a long time…" Actually, it hadn’t. Not much time had passed since we’d suppressed a noble uprising together with her disciple.</p><p>"…ha ha. I guess it’s only felt like a long time, hasn’t it, Cent?" The man beside her nodded. He had a habit of running flipping his jet black hair that struck me as looking very affected, but Two didn’t seem to mind. In fact, she was completely taken in by her him, her disciple. Yes… every Intoner must have a disciple, who lives to serve and protect her.</p><p>"Are we the first ones here?" When I told her yes, Two’s eyes lit up.</p><p>"You hear that, Cent? We made it first! Isn’t that great?"</p><p>"Why, you always come first in my eyes, Lady Two…"</p><p>"Aww, Cent… you come first to me, too! I love you most in the whole wide world!" Two proclaimed with blushing cheeks. This was the way these two usually carried on. While it could be embarrassing to watch, I felt an Intoner and her disciple being linked by a strong bond of love was ideal.</p><p>…that said, if I left them undisturbed for too long they’d start getting overly affectionate, so I cut in.</p><p>"How do things fare in the Desert Country?"</p><p>"O-oh yeah! There was this huge minotaur nest, but we got rid of it!"</p><p>I’d meant how the nobility there were handling having been stripped of their privilege and whether she had reason to believe they were plotting something, but instead Two briefed me on her hunting monsters, offering shelter to misplaced people and maintaining a steady food supply.Well, I suppose if this was all she had to discuss it was safe to assume there wasn’t anything to worry about. The Desert Country is made up of just that, lifeless desert. Very little can be grown there and the lives of the people are hard. I had given Two the task of governing with the hopes she could lift their spirits with her optimistic nature. Having heard that she was well-loved by her people, with the soldiers in her employ ready to lay down their lives for her, I realized my judgement had not been mistaken.</p><p>"Say, would you mind if Cent and I inspected the cathedral to make sure it’s safe while we’re here? I’m sure you don’t." Before I could reply Two had already turned on her heel. I remembered she had wanted to do the same thing when she was here a half year ago, but didn’t have the time to. I suppose she wouldn’t let the opportunity escape her now. It really impressed me, how little her character had changed over the years. Her disciple gave me a bow before following her out, and I returned to my books.</p><p>The reason I was holed up in here wasn’t just because it was quiet. I was looking for something. I don’t know who gathered them, but this library was full of books from all over the world; one of them must hold the information I seek. I wanted an answer to my dearest question: What are the Intoners, and why do they exist?</p><p>February 14th</p><p>My sister Four and her disciple Decad arrived much sooner than I’d expected, given the Mountain Country is furthest from the capital.</p><p>"I invited Three to travel with us, but she was so busy with her dolls she turned us down." Four said with an exaggerated sigh. The Forest Country Three presided over neighbored Four’s domain.</p><p>"That’s just her way. Don’t take it personally." Rather than having been turned down, it was more likely Four had been flat-out ignored. Three was the strangest of us sisters, with a love of dolls stemming back from childhood. Once she became focused on making her own no one’s words could reach her. She even forget to eat and sleep; she probably hadn’t even noticed Four was there.</p><p>"More importantly…"</p><p>"You’d like a report on my country, correct?"</p><p>"You are quick on the uptake as always, Four." Four’s expression beamed with pride, and she began to brief me on the status of the Mountain Country.</p><p>"Everything is going smoothly. I mean, how could it not? The population isn’t that large and the livable portion of land is rather compact. The former lord must have been a true dim-wit to make such a mess of things." That was correct. If the Mountain Country hadn’t been so easy to govern, I’d never have entrusted it to Four. Four is serious and intelligent, but rather immature. Faced with difficulty, she either recedes into her shell or spectacularly loses her temper. There was no way I could rely on her to deal with anything potentially overwhelming.</p><p>"It’s not the Mountain Country that worries me. Tell me about the Forest Country?" There was a reason behind Four’s visit to Three, and that was because I had requested she go take stock of Three’s land on her way here. Truthfully, I’d been worried; assigning Three to govern there had been a gamble on my part.</p><p>"Surprisingly, she seems to be managing well! It’s enough to make me re-evaluate my opinion of her. I can’t imagine having to deal with those awful Faeries or those snobby elves." The majority of the people residing in the forest were not human. It was home to faeries and secluded elf villages. But that’s exactly why I thought Three would fare best there.</p><p>Non-humans generally do not take well to humans encroaching on them. The key to co-existence with them is to give them ample space to themselves. The previous lord had tried instead to exert control over them, which hadn’t gone well. Three, who had no drive, would not make the same mistake.Also, it was a load off my mind having her in a place where not many had to deal with her. The fewer, the better…</p><p>"One?"</p><p>"Ah. Excuse me, it’s nothing. Go on."</p><p>"That’s all there is to say! There are no problems in either my country or Three’s. With the wicked lords gone, the people lead happy lives. This past harvest was the first they’d ever have in which the fruits of their labor were not immediately robbed from their hands."</p><p>"That’s good to hear. Thank you." But though she had just told me there was no more to say, Four lingered.</p><p>"What is it?" I could clearly tell she had something she wanted to tell me.</p><p>"Are we really… going to fight her?"</p><p>"That’s why I called for you all." I said firmly, but Four continued, albeit timidly.</p><p>"I don’t see any point in such a battle…"</p><p>"Then you’d have us all killed?"</p><p>"No… of course not!"</p><p>"But that’s what not fighting would mean." Four cast her eyes downward dejectedly.</p><p>"One… you’ve changed…"</p><p>"I don’t doubt it. But so have we all." Of course we had. We were no longer children. We had to change, if only to keep a hold on our Intoner powers which grew in strength each day. I’ve forgotten, now… how old were we when we realized something was wrong with our bodies?</p><p>Why do we possess this power? To maintain the order of the world; I’d known this since I was a child. But how did I know it? Who taught that to me?Four looked unsatisfied, but silently took her leave. Her disciple, Decad, followed after her like a shadow. Their eyes had not met once the entire time they were in the room. Perhaps Four disliked having an older, mild-mannered man as her disciple. In comparison to Two, she was quite cold. But I noticed that Decad himself did not seem to mind her treatment. It could be that in itself frustrated Four even more.</p><p>As soon as I could no longer hear the sound of their steps, I resumed my reading. I had not once let up on my research, yet I’d still been unable to find a scrap of information on Intoners… or disciples, for that matter. Perhaps my way of looking had been flawed. It could be that we were not always referred to as Intoners, but by another name. But there is no way existences as powerful as we would not be recorded. Take our songs, for instance. They were nothing like the usual practice of chanting words to cast magic, and sure to peak the interest to a wizard. Yet none of the tomes on sorcery made any mention of us.</p><p>Why can’t I find anything? Was the existence of Intoners being purposefully omitted? Had someone wished to censor any mention of us? If so, why?</p><p>February 22nd</p><p>"Two told me Three isn’t here yet. And here I was sure we’d be the last to arrive!" Five said, tilting her head to the side. I wasn’t surprised. I knew the last one here would either be Three or Five; Three due to being wrapped up in her doll-making and Five due to surely putting off her departure until the last minute on account of her domain being closest to mine.</p><p>"That’s why I told you we didn’t need to hurry!" Said Five’s disciple. As long as he kept his mouth shut, he was a boy of astounding beauty, but as soon as it opened it was all for naught. I believe Four once dubbed him a cheeky little brat. I was of a similar opinion.</p><p>"Five, you never listen to a word I say!"</p><p>"Why, that’s just not true."</p><p>"It is so. Take last night, for instance. I kept telling you I was tired, and you still-" I cleared my throat, not caring to hear anymore of what the disciple was going to say.</p><p>"Let’s keep things short. How are things in the Ocean Country?" Of all the territories, the corrupt lords had the tightest grip on the Ocean Country. Most of the rich and influential nobles resided there, and those who remained hated us intensely for robbing them of what they considered rightly theirs. Of course, their wealth had never truly belonged to them; they had robbed it from the people. We had merely returned it to its rightful owners.</p><p>In any case, of all the places a potential uprising might occur, the Ocean Country ranked first. I had feared governing it would prove difficult for Five, but apparently my fears were unfounded.</p><p>"You needn’t fret. I’ve long since made all those naughty nobles my slaves." Five said with a giggle and a wink.</p><p>"Five has to own people body and soul, after all…" Her disciple said with a grimace.</p><p>Ever since she was small, Five couldn’t stand not getting what she wanted. As a result, she’d grown quite forceful about obtaining things. Be it an object or a person, Five would not rest until they were hers completely. This greediness often repelled others, but it seemed to be serving her well in regards to taking control over the entire country.</p><p>"And how goes the reconstruction of the harbors?" During our battle with the lord there, we had accidentally laid waste to most of the seafront. It was difficult to keep our powers in check while fighting, even though he tried to be careful. That was just how strong we had grown.</p><p>"Well. Trading ships from the East have begun coming into port."</p><p>"And that made Five very happy. She exchanged all her diamonds for what the Eastern merchants had to sell." The previous lord had been a woman, and her castle was full of extravagant dresses and jewels which Five quickly claimed for herself. While they ought have gone to the people, I let Five do as she pleased because I was also well aware of her tendency of growing bored with things. No matter how driven she might have been in pursuing something, her satisfaction upon obtaining it was never long-lived and soon she’d discard it.</p><p>True to form, Five had grown tired of the treasures within the castle and had deemed to replace them with something new. And she’d repeat this process time and time again, I was sure. But now her fickleness would stimulate the country’s trade.</p><p>Output was low in the Ocean Country as it did not have many natural resources. There was a fishing industry, but that was not enough to support all the people in there. Only through commerce and trade could it prosper.</p><p>"Not just the gems, I sold all the dresses, too. The busts on them had grown too tight for me, after all. My bountiful bosom still seems to be growing." I saw Five’s disciple give his shoulders a distasteful shrug at her words. On his face was a spiteful grin that was much at odds with the rest of his delicate features.</p><p>"Say that in front of Four and she’ll have your head!" He warned Five, which I found ironic considering how he himself said things to anger Four just as frequently. I didn’t see the point in voicing this, however.</p><p>Two’s muscles had grown stronger. Four had been wearing gauntlets which hid her hands, but going by the incessant clacking of her clippers, I could surmise her nails were growing as fast as ever. Of course I was painfully aware of my ever sharpening senses; even here in the library as I was beginning to be able to pick up sounds from the outside. And here Five was telling me her cup size had increased yet again. Would these twisted transformations continue to increase alongside our powers? As a child I had prayed for strength… yet now I feared how strong we might become.</p><p>"I understand. Thank you for your report."</p><p>Saying I had work to return to, I turned my back on them. I wasn’t lying; I was eager to return to my search. Even after all the reading I’d done, I’d yet to find anything remotely relating to Intoners. It was beginning to make me very nervous. Fearing I may find nothing in the end, I flipped through the book pages at a harried pace.</p><p>March 3rd</p><p>Three arrived exactly on the ‘day of promise’.</p><p>Deeply frustrated by the fruitlessness of my research, I had been in the library since the crack of dawn, surrounded by texts. Before I registered her footsteps I heard the sound of her scissors snipping. Behind her lazy footfalls sounded the even pace of her disciple Octa.</p><p>"What has two legs in the morning, twelve in the afternoon, and one in the evening…" The door creaked open and I was met by Three’s questioning face.</p><p>"…can you guess?"</p><p>"You’re late." Was my only reply. There was little point in trying to figure out Three’s riddles as they were mostly meaningless. As a child Three had been very quiet, but since she’d become obsessed with dolls she’d become much more chatty, perhaps as a result of talking to them.</p><p>"…has your hair stopped growing?" It had taken me a moment to notice on account of her awful posture, but I realized Three’s hair, which usually hung at her waist, was cut short at her shoulders.</p><p>"Oh, no. It’s that I’ve been taking care of my lady’s hair as of late." Said Octa with a laugh. That explained it looking neater than usual. At first glance, Octa seemed a friendly if somewhat eccentric old man. Unfortunately, eccentric didn’t begin to cover him…</p><p>"I see." So it was still growing at the usual rate. Of course it was. Why would Three be an exception?</p><p>There was a time in which we needed all the strength we could muster. But after the battle today, what use will our power be? What’s the point of it increasing?</p><p>"…I’m tired." Three yawned. When not working on her dolls she was extremely lethargic, and these words always preceded her lying on the spot, regardless of her location, to sleep.</p><p>"Don’t lay on those books. They’re antiques, you’ll damage them." Three, about to stretch out of a pile of old books, managed to just barely avoid them and lay on the cold floor beside them.</p><p>"Why don’t you rest in one of the bedrooms?" Traveling from the Forest Country took nearly as long as the journey from the Mountain Country. Surely both she and her disciple were exhausted, and we had nothing to discuss since I’d already heard about the state of her land from Four.</p><p>"What’s the matter?" I’d expected her to either fall asleep there or leave, but Three did neither. Instead she was playing with her scissors, expressionless. I could never tell what she was thinking, and I had a feeling her disciple couldn’t, either.</p><p>And yet… sometimes I was struck by the feeling that perhaps my strange sister knew more than I did. Perhaps she had already long ago grasped the answer to the question I was searching for so desperately…</p><p>"I won’t sleep."</p><p>"But you said you were tired."</p><p>"…white." Her inability to hold a normal conversation was also nothing knew. I turned to Octa.</p><p>"I have work to attend to. If you wouldn’t mind taking her…"</p><p>"But of course, my la-"</p><p>"Atop the leviathan, its scales whiter than snow, a pink blade." Three cut off her disciple with another riddle.</p><p>"Three…?"</p><p>"Where does the tip of that blade point? …can you guess?" Three’s eyes stared straight into mine. She was no longer talking nonsense; I grasped the meaning of her words. The leviathan with scales whiter than snow… a white dragon, who carried on its back a woman with pink eyes. A woman who pointed her blade toward us… her sisters.</p><p>On her way here, Three must have caught sight of the enemy we were to fight this day, as had been promised.</p><p>"I suppose I’m out of time." I sighed.</p><p>In the end, I couldn’t find any mention of Intoners, our songs, our disciples… nothing. My search had been pointless.</p><p>"Who is right? Is it you, One? Is it Two… Four… Five? Or… could it actually be Zero?" Three asked with no hint of a smile.</p><p>"…all people believe that they are the ones who are right." Or else, how could they fight? No one was strong enough to dedicate themselves to a cause they knew was mistaken. They had to justify it somehow first. My search for an answer had been an attempt to justify my reason for fighting my sister today. Did that mean I doubted myself, my decisions?</p><p>"One?" Feeling Three’s dubious gaze, I realized I’d been laughing.</p><p>It didn’t matter whether I had an answer, a justification. Whether I knew what we were or why we existed wouldn’t change what I needed to do. I would fight this battle all the same. So what need did I have for doubt?</p><p>I closed the book I had been reading and rose from my seat. In the distance I heard the roar of a dragon. There was no mistaking it. The traitor was upon us.</p><p>"Let us meet her head on. Today we fulfill the promise we made."</p><table class="mw-collapsible mw-collapsed" data-expandtext="show" data-collapsetext="hide" style="border: 1px solid #aaaaaa; text-align: center; margin-top: .75em; width:100%;"><tbody><tr><td><div style="background: #900000" class="NavHead"><b><a href="/wiki/Novellas" title="Novellas"><span style="color: #ffffff">Novellas</span></a></b></div></td></tr><tr><td><table style="width:100%; text-align: center;"></table><table style="width:100%; text-align: center;"><tbody><tr><th align="center" bgcolor="#cc0011"><span class="new" title="Category:Drakengard (page does not exist)" data-uncrawlable-url="L3dpa2kvQ2F0ZWdvcnk6RHJha2VuZ2FyZD9hY3Rpb249ZWRpdCZyZWRsaW5rPTE="><span style="color: #FFffff;">Drakengard</span></span></th></tr><tr><td><a href="/wiki/Caim/Novella" title="Caim/Novella">Caim</a> • <a href="/wiki/Furiae/Novella" title="Furiae/Novella">Furiae</a> • <a href="/wiki/Inuart/Novella" title="Inuart/Novella">Inuart</a> • <a href="/wiki/Seere/Novella" title="Seere/Novella">Seere</a> • <a href="/wiki/Arioch/Novella" title="Arioch/Novella">Arioch</a> • <a href="/wiki/Leonard/Novella" title="Leonard/Novella">Leonard</a> • <a href="/wiki/Verdelet/Novella" title="Verdelet/Novella">Verdelet</a><br/><a href="/wiki/Drakengard/Novella" title="Drakengard/Novella">The Song of Fourteen Years</a></td></tr><tr><th align="center" bgcolor="#cc0011"><span class="new" title="Category:Drakengard (page does not exist)" data-uncrawlable-url="L3dpa2kvQ2F0ZWdvcnk6RHJha2VuZ2FyZD9hY3Rpb249ZWRpdCZyZWRsaW5rPTE="><span style="color: #FFffff;">Drakengard 2</span></span></th></tr><tr><td><a href="/wiki/Drakengard_2/Novella" title="Drakengard 2/Novella">The Garden of Light</a></td></tr><tr><th align="center" bgcolor="#cc0011"><span class="new" title="Category:Drakengard (page does not exist)" data-uncrawlable-url="L3dpa2kvQ2F0ZWdvcnk6RHJha2VuZ2FyZD9hY3Rpb249ZWRpdCZyZWRsaW5rPTE="><span style="color: #FFffff;">Drakengard 3</span></span></th></tr><tr><td><a href="/wiki/Zero/Novella" title="Zero/Novella">Zero</a> • <strong class="mw-selflink selflink">One</strong> • <a href="/wiki/Two/Novella" title="Two/Novella">Two</a> • <a href="/wiki/Three/Novella" title="Three/Novella">Three</a> • <a href="/wiki/Four/Novella" title="Four/Novella">Four</a> • <a href="/wiki/Five/Novella" title="Five/Novella">Five</a><br/><a href="/wiki/Mikhail/Novella" title="Mikhail/Novella">Mikhail</a> • <a href="/wiki/Cent/Novella" title="Cent/Novella">Cent</a> • <a href="/wiki/Octa/Novella" title="Octa/Novella">Octa</a> • <a href="/wiki/Decadus/Novella" title="Decadus/Novella">Decadus</a> • <a href="/wiki/Dito/Novella" title="Dito/Novella">Dito</a><br/><a href="/wiki/Michael/Novella" title="Michael/Novella">Michael</a> • <a href="/wiki/One_(Brother)/Novella" title="One (Brother)/Novella">One (Brother)</a> • <a href="/wiki/Accord/Novella" title="Accord/Novella">Accord</a></td></tr><tr><th align="center" bgcolor="#cc0011"><span class="new" title="Category:Drakengard (page does not exist)" data-uncrawlable-url="L3dpa2kvQ2F0ZWdvcnk6RHJha2VuZ2FyZD9hY3Rpb249ZWRpdCZyZWRsaW5rPTE="><span style="color: #FFffff;">Drakengard 1.3</span></span></th></tr><tr><td><span class="new" title="Drakengard 1.3/The Crimson Dragon (page does not exist)" data-uncrawlable-url="L3dpa2kvRHJha2VuZ2FyZF8xLjMvVGhlX0NyaW1zb25fRHJhZ29uP2FjdGlvbj1lZGl0JnJlZGxpbms9MQ==">The Crimson Dragon</span> • <span class="new" title="Drakengard 1.3/Battle with the Empire (page does not exist)" data-uncrawlable-url="L3dpa2kvRHJha2VuZ2FyZF8xLjMvQmF0dGxlX3dpdGhfdGhlX0VtcGlyZT9hY3Rpb249ZWRpdCZyZWRsaW5rPTE=">Battle with the Empire</span> • <span class="new" title="Drakengard 1.3/The World Two Years Later (page does not exist)" data-uncrawlable-url="L3dpa2kvRHJha2VuZ2FyZF8xLjMvVGhlX1dvcmxkX1R3b19ZZWFyc19MYXRlcj9hY3Rpb249ZWRpdCZyZWRsaW5rPTE=">The World Two Years Later</span> • <span class="new" title="Drakengard 1.3/The Truly Sick (page does not exist)" data-uncrawlable-url="L3dpa2kvRHJha2VuZ2FyZF8xLjMvVGhlX1RydWx5X1NpY2s/YWN0aW9uPWVkaXQmcmVkbGluaz0x">The Truly Sick</span> • <span class="new" title="Drakengard 1.3/Sister (page does not exist)" data-uncrawlable-url="L3dpa2kvRHJha2VuZ2FyZF8xLjMvU2lzdGVyP2FjdGlvbj1lZGl0JnJlZGxpbms9MQ==">Sister</span> • <span class="new" title="Drakengard 1.3/The Land of Dragons (page does not exist)" data-uncrawlable-url="L3dpa2kvRHJha2VuZ2FyZF8xLjMvVGhlX0xhbmRfb2ZfRHJhZ29ucz9hY3Rpb249ZWRpdCZyZWRsaW5rPTE=">The Land of Dragons</span> • <span class="new" title="Drakengard 1.3/Ending A (page does not exist)" data-uncrawlable-url="L3dpa2kvRHJha2VuZ2FyZF8xLjMvRW5kaW5nX0E/YWN0aW9uPWVkaXQmcmVkbGluaz0x">Ending A</span></td></tr></tbody></table></td></tr></tbody></table><!-- NewPP limit reportCached time: 20240305171748Cache expiry: 1209600Reduced expiry: falseComplications: []CPU time usage: 0.025 secondsReal time usage: 0.031 secondsPreprocessor visited node count: 13/1000000Post‐expand include size: 1962/2097152 bytesTemplate argument size: 0/2097152 bytesHighest expansion depth: 2/100Expensive parser function count: 0/100Unstrip recursion depth: 0/20Unstrip post‐expand size: 0/5000000 bytes--><!--Transclusion expansion time report (%,ms,calls,template)100.00%    1.740      1 Template:Novella100.00%    1.740      1 -total--><!-- Saved in parser cache with key prod_drakengard:pcache:idhash:3097-0!canonical!FandomDesktop!LegacyGalleries and timestamp 20240305171748 and revision id 20844. --></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Two</title>
    <link href="/2024/03/10/Two/"/>
    <url>/2024/03/10/Two/</url>
    
    <content type="html"><![CDATA[<h1 id="Two"><a href="#Two" class="headerlink" title="Two"></a>Two</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><figure class="thumb tright show-info-icon" style="width: 278px"> <a href="https://static.wikia.nocookie.net/drakengard/images/d/dd/DD3_Two_Artwork2.png/revision/latest?cb=20131228231310" class="image"><img alt="DD3 Two Artwork2" src="https://static.wikia.nocookie.net/drakengard/images/d/dd/DD3_Two_Artwork2.png/revision/latest/scale-to-width-down/278?cb=20131228231310" decoding="async" loading="lazy" width="278" height="400" class="thumbimage" data-image-name="DD3 Two Artwork2.png" data-image-key="DD3_Two_Artwork2.png" data-relevant="1"/></a>  <figcaption class="thumbcaption">  <a href="/wiki/File:DD3_Two_Artwork2.png" class="info-icon"><svg><use xlink:href="#wds-icons-info-small"/></svg></a>    </figcaption> </figure><p>From <b>Drakengard 3 Official English Website</b></p><p><b>Two - <font color="red">Today's Meal</font></b></p><p>"Is there anything I can help you with, Lady Two?"</p><p>"Aw, Cent, you called me ‘Lady Two.’ You promised me that you’d—"</p><p>I was about to say, “call me Two when we’re alone,” but I stopped myself short.</p><p>It can’t be helped; Cent must be proper and refer to me as “Lady Two” when others are around. But he leaves out the “Lady” part when we’re all alone. We made that promise a while ago. That’s why Cent’s been calling me "Two" lately. As long as we're alone.</p><p>But he said “Lady” just now. That means...</p><p>I stop pouring water into the cooking pot and about-face! Then I rush toward the entrance to the kitchen. I hear some footsteps running. And not just one set, but multiple. I catch a glance of the ones running away and see that they’re the chefs.</p><p>“I knew it.”</p><p>So Cent referred to me as “Lady Two” since he knew everyone was peeking.</p><p>“Oooh! I told you I’d be fine by myself! Why can’t you trust me?”</p><p>A large hand gently touches my cheek as I pout. Then I notice Cent’s gorgeous face in front of mine.</p><p>“You can’t blame them, now can you? After all, you are a precious Intoner to everyone in this land.”</p><p>Ah! My cheeks light on fire at the touch of his hand. What should I do? I can’t stop blushing. And he’s not giving me time to think.</p><p>“But obviously, no one in this world cares for you as deeply as I.”</p><p>I can’t take it! Mv heart’s about to burst!</p><p><i>What should I do? What should I do? </i>What should I do!?<i/></p><p>"Two?"</p><p>How can Cent be so handsome? He’s not only handsome, but he’s kind, too. And he tells us all these funny stories. But when we’re alone... Yeee!</p><p>“Two? Are you feeling all right, my dear? It might be best to lie down in the bedroom.”</p><p>The bedroom? D-Don’t say another word! Yeee! Yeee! Yeee!</p><p>“Why dont we take a break from cooking for the moment...”</p><p>That reminds me of something important.</p><p>“No! I have to cook today!”</p><p>Calm down, calm down! I have to cook for Cent today! It’ll be a dinner for us the two of us! I’ve been preparing for this for two whole weeks! Breathe, breathe...</p><p>“Then, may I lend a hand?”</p><p>“Absolutely not! I won’t allow it! You can’t look, either! Where’s the fun if you know what I’m making?”</p><p>Oooh, but...</p><p><br/>“...But it’d be nice if you could stick around, just to keep me company."</p><p>"As you wish, my lady.”</p><p>Ack! He’s giving me that cute smile of his! That’s so unfair! How am I supposed to concentrate!? ...Breathe. I need to breathe... Calm down. Okay, I’m okay. I take a couple more breaths and then tap my cheeks.</p><p>“All right! I’m in the groove! Cent, take a seat over there."</p><p>I point to the chair in the corner, trying not to look at Cent’s face as much as possible. Can you blame me? My heart would start pounding again if I looked at his face! All right, then. Back to cooking.</p><p>“Rrragh!”</p><p>I place the water-filled pot on the counter. Then I cast my spell.</p><p>The magical glyph glows and ignites a fire that engulfs the pot. I don’t know how, but this counter seems to have been used for some sort of ceremony. I suppose that shouldn’t be a surprise. This room wasn’t a kitchen when we first got here; this whole place was actually a shrine—not the most accommodating of places.</p><p>But my sister One gave me orders to “rule over the Land of Sands and protect the shrine," so I decided to live in it! Living in the shrine was the most convenient option, after all. I mean, I didn’t have to worry about building a new house! Though I did have to redecorate the place a bit. To spruce it up, you know?</p><p>For instance, there was this room with lots of old books and scrolls, so I had the books taken out and made it into a bedroom. There was tons of dust, but I cleaned the place thoroughly and scrubbed the floor spotless, so it’s really nice now.</p><p>I put up some wallpaper with small flowers on it. There was a kilt with a similar pattern, so I turned that into the bedcover. Then I placed a table with carved legs next to the bed for a nightstand and placed a vase with flowers on it. I always wanted a cute room, you know.</p><p>The only thing missing are some adorable curtains, but this shrine’s underground, so there aren’t any windows... Still, it’s a comfortable place to live in. It’s cool inside when it’s hot outside, and when it’s cold outside, it’s nice and warm here. I bet whoever built this shrine had the extreme weather in mind when designing the place. Although it is annoying to need candles on all the time to get any light down here, even during the day.</p><p>Another perk of living underground is that food doesn’t spoil easily. I made this ceremony room into a kitchen and I didn’t even have to make a storage area for food! But I still need to make sure that our supplies are kept away from heat.</p><p>Oh, and I wanted to eat with all the soldiers and neighbors, so I made the really laaarge area in the middle into a dining hall by placing a bunch of chairs and tables there. Food always tastes better when you’re eating with a large group. right?</p><p>But I thought it’d be nice to have dinner alone with Cent, even if it was just once in a while. So, that’s why I decided to cook today. I gave all the chef and servants the day off. Everyone needs some time off to relax.</p><p>“Here we go. The veggies have all been prepped. so I need to get the meat ready."</p><p>“Two, is that tro—”</p><p>"Yes, it’s troll. I skinned it and cut it up into chunks, I’m going to stew it with some herbs. Oh, I made sure to drain the blood so there’s nothing to worry about. Rrraght!”</p><p>I use a sword to cleave the joint. Troll bones are super tough, so normal knives won’t do. They chip too easily. Luckily, only the bones are hard. The meat is actually nice and soft. That’s why you can use troll meat for various dishes and not just stews. You can fry it, or you can cut it into thin slices and broil it, or even batter and deep fry it. Pickling the meat and then storing it in a barrel will let it hold for six months, too! It’s such a great way to preserve food!</p><p>The only problem is that trolls are pretty heavy, so it’s difficult to work with the meat unless you’re strong. I think that’s why more people don’t know that troll meat is so useful. Of course, I’m sure we’d see more of it if troll pelts had any kind of value...but they smell so awful that no one wants them.</p><p>“A whole troll might be too much for the two of us... Grrragh!”</p><p>I rub some salt and wine into the meat once I cut it into chunks. Removing the tendons is quite a chore, but it’s also a lot of fun. I love cooking.</p><p>“It’s wonderful to have a place to cook whenever I feel like it.”</p><p>We hardly stopped anywhere with a proper kitchen when we were traveling. It was mostly cooking meat or fish over an open fire, and that’s it.</p><p>We’d occasionally come across an empty house with a kitchen. And by occasionally, I mean rarely. But it always brought a smile to my face when we did and I always insisted that the cook take the day off so that I could prepare a meal for everyone.</p><p>“By the way, who’s the best cook amongst the Intoners?”</p><p>“That would definitely be One.”</p><p>“And not you?”</p><p>I think about Cent’s question for a second. I definitely enjoy cooking the most, but One’s the best cook. There’s no doubt about it. That being said...</p><p>“No, One’s the best. But if you asked her, I’m sure she’d tell you that anyone could do what she does."</p><p>“What do you mean by that?”</p><p>“Well, she thinks that the basics of cooking are so easy that even a child could do it. She just can’t understand how someone could mess up such a simple task.”</p><p>“I see. So Lady One believes that cooking comes naturally. However, cooking is not comprised of just the basics.”</p><p>“She said you can apply the basics to anything if you give it a little thought.”</p><p>The problem is that “just a little thought” for One is thinking up a storm for most other people.</p><p>“What about Lady Three? She’s skilled in handling blades, isn't she?”</p><p>“I guess you could call them blades, but Three’s specialty is scissors.”</p><p>There are scissors specifically for cooking, but Three’s scissors aren't really for for that. I think there was a time where she used them to cut open a fish, and the fish ended up all mangled. But then One used a rock to grind the fish. She then rolled out the fish meat and broiled it. It was so delicious! She then reminded us that it’s simply <i>impossible</i> to  mess up cooking.</p><p>“On top of that, Three doesn't seem to like tampering with things much. She’s the type that likes to enjoy the natural flavor of a dish. Like enjoying fresh ingredients the way they are.</p><p>"...It sounds like she’s just lazy."</p><p>“Hmmm... I guess you could say that."</p><p>We were always given vegetables whole if Three was in charge of cooking. I think Three just never was interested in cooking.</p><p>“Oh, but Four did say that you shouldn't overcook vegetables. If you do, then you’d lose a lot of nutrients.”</p><p>I think she said that veggies found above ground should be left uncooked, while veggies taken from the ground <i>should</i> be. That’s why it’s better to ear fruits and leafy greens raw while it’s better to boil or cook onions and potatoes. At least, according to Four.</p><p>“She also said that it’s best to have a meat-to-vegetable ratio of one-to-two. And that it’s better to eat fruits in the mornings and to eat fish at least twice a week.”</p><p>I think she also said that using sugar and salt too much isn’t good, either. The food was always bland whenever Four was in charge of cooking. I guess it can’t be helped. I mean, when Four cooked, Five would pour salt on without even tasting the food, saying, “This is just the right amount for your dishes, my dear sister.”</p><p>“But you know, it’s because of her understanding of food that Four’s cooking makes you feel really healthy It’s almost medicinal.”</p><p>“It sounds like her food is just overly bland.”</p><p>"Uhhh... I guess you could say that.”</p><p>But her cooking is perfect if you’re sick. You could eat whatever she made even if you had an upset stomach. I remember a time when we stayed with a farmer and Four cooked dinner to show our thanks. The grandma was so happy. She said that there were so many things she couldn’t eat because of her old age. But she ate everything that Four made that night.</p><p>"How is Lady Five's cooking?" </p><p>Five’s cooking is the complete opposite of Four’s. Whereas Four’s cooking is perfect for sick people, only the fittest can handle Five’s cooking. It’s like you need courage to eat it!”</p><p>Five loves really spicy meat and oily foods. She’d use a ton of sugar or salt while cooking, too. Four would always complain that there weren’t enough greens in Five’s cooking or that it was too rich. Five also loves exotic foods. She’d toss in plenty of herbs or mushrooms that she found into her dishes. Even grotesque-looking ingredients were fair game. I’m more open to various foods now because of Five... Who would have thought insects could be so tasty if they’re prepared right?</p><p>The thing is, Five doesn’t care at all if something’s unhealthy or dangerous. I remember a time when she made a stew with fish and mushrooms. We all got horribly sick after eating that stew. According to One, Five used a poisonous fish whole. One also said that colorful mushrooms shouldn’t be eaten. Considering Five put both of those into her stew, it’s no wonder we all got sick.</p><p>But that kind of incident never deterred Five. The next time she was in charge of dinner, she tried to use some red mushrooms with white spots in a salad and Four gave her a thorough scolding. I’m not sure if Five has thick skin, but she sure is consistent. She'll bring some exotic ingredients whenever she visits and always asks, “Is this edible, Two?” And every time, I try to come up with creative recipes to utilize them fully. It’s more fun than you might think! It’s almost like trying to figure out how to make tough meat tender, or how to get rid of the foul odors meat can give off. I’ll try anything—hitting the food, drying it out in the sun, or brining it in wine or oil. Oh, the feeling I get when I can make something I thought was completely inedible into something delicious! Nothing beats that!</p><p>Five seems to understand how I feel. She started off bringing me unusual fish and nuts, but then she started bringing extremely difficult ingredients to use, like carnivorous plants and fish with poisonous spines. I guess the greater the challenge, the greater the reward, right? Just the other day, she went out and caught a sandworm in the desert, and it wasn’t a tiny one either. She really surprised me with that one. It was gargantuan! I mean, how can you not give it your all after seeing something like that and the effort she put into catching it? I did my best, and a couple of days later, I made a wonderful sandworm soup! I was so happy when the soup was done. It feels wonderful when your efforts are rewarded, doesn’t it?</p><p>“Five’s the type that constantly aims high. You could say she’s adventurous—courageous even—when it comes to food. No, that’s not right. Maybe an evangelist? A guru? Uh...what’s the word?”</p><p>“I believe you mean her tastes are <i>bizarre.</i>"</p><p>“Ummm... Well, I guess you could say that.”</p><p>But when living in the land of Sands, having a bizarre taste is a vital survival skill. It’s not unusual to go days without a drop of rain here. This country is more Likely to see a year of famine than one with plenty of rain. If you can catch a monster and use it for food, then you won’t die of starvation, right? We can all dine together no matter what happens, and it’s all thanks to Five.</p><p>“Anyway, the troll’s ready. I just need to simmer it for a while. And now...”</p><p>I open the barrel I had sitting in the corner of the kitchen after I toss the troll meat chunks into the stew. The smell of liquor stings my nose. I’ve been preparing this for two whole weeks.</p><p>“Okay, it’s looking good.”</p><p>Now to put it onto the counter.</p><p>"Rragh! Ha! Ha!"</p><p>Smack! Smack! I strike the meat repeatedly with a club.</p><p>“Two...’what is that?"</p><p>“Oh, this? It’s minotaur thigh. I think it’s called tendon or something. It’s from the minotaurs we slew a while ago. I pickled the remaining meat since we didn’t finish it all, remember?”</p><p>I washed the meat thoroughly, soused it. and then let it sit in wine two weeks ago. Minotaur meat is delicious, but it’s so tough that it needs a good tenderizing first.</p><p>“I’m pounding the meat to tenderize it so that it’s nice and soft. Then I’m going to cut it up and stir-fry it with some veggies. Huh? Wait a minute... I’ve been telling you what I’m making haven’t I? I guess asking you not to look was kind of pointless...”</p><p>“No, my lady. It is not pointless. It’s obvious that such explanations are beyond the comprehension of disciple of my caliber.”</p><p>“Wow! That’s incredible! You’re so amazing Cent!”</p><p>What should I do? My heart won’t stop racing! Why is Cent so handsome and charming? I love him so much that I could die! Wait, no... I can’t be with him if I die. But I don’t know what to do! My heart can’t take this anymore! It’s beating so fast!</p><p>“Dab, what am I thinking about? Be still, my beating heart! I need to calm down! Focus...focus! Hiya! Hiya! Hiya!”</p><p>I smack the minotaur tendon over and over.</p><p>“Hiya! Hiya! Hiya!”</p><p>Phew, this is hard work... And all this smacking has actually calmed me down. I am kind of out of breath, though... And... Oh dear. The tendon looks like minced meat. And there’s a crack in the counter...</p><p>“Oops...I guess I overdid it. Oh well. Hehehe.” </p><p>I collect myself and attempt to start cutting up the veggies when I hear some voices from the door. </p><p>"Two!"</p><p>"Let's play!"</p><p>"Play with us, please!"</p><p>"Huh? What's the matter?"</p><p>I see their cute little faces all lined up by the door. Oh, these precious little children.</p><p>They’re orphans. The Land of Sands is impoverished and the old ruler was a really lousy guy, so a lot of people, adults and children, died under his rule. These kids survived, but they were left all alone. That's why I decided to take them in an live together. Even if their moms and dads aren't here, they won't be lonely if we're all together.</p><p>I was never lonely growing up because I had One, Three, Four, and Five by my side. There were times when I'd remember Mom and Dad and want tocry, but I never did. And that's because I had my sisters.</p><p>But why are the children even here? "I thought you were all leaving for a slumber party."</p><p>I had everyone at the shrine take the day off, so I asked them to take care of the kids for the day.</p><p>"Well..."</p><p>"We came back."</p><p>"We wanna be with you!"</p><p>"Come on, let's play!"</p><p>Oh, these adorable kids are holding hands lined up by the entry way. They're my...family. Then I feel a hand gently touch my shoulder.</p><p>"Don't worry about me, Two."</p><p>I turn around to see Cent's smiling face. Ah, Cent completely understands. My feelings, my desires, what's important to me. Everything. It's not because I'm an Intoner and he's my disciple, right? I'm sure that I'd have fallen in love with Cent and he'd have fallen in love with me no matter what our roles were... Right?</p><p>"Let's have a dinner for two some other time."</p><p>"Yeah. Thank you, Cent."</p><p>I love you, Cent. I love you more than anyone in this whole world. I'm so glad we met.</p><p>"All right, wait a sec, okay? I'm making a yummy meal and we can all eat together when I'm done!"</p>The children squeal in joy. I go back to cooking for my beloved Cent and my precious family.<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Three</title>
    <link href="/2024/03/10/Three/"/>
    <url>/2024/03/10/Three/</url>
    
    <content type="html"><![CDATA[<h1 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"/><figure class="thumb tright show-info-icon" style="width: 278px"> <a href="https://static.wikia.nocookie.net/drakengard/images/4/41/DD3_Three_Artwork2.png/revision/latest?cb=20131228231204" class="image"><img alt="DD3 Three Artwork2" src="https://static.wikia.nocookie.net/drakengard/images/4/41/DD3_Three_Artwork2.png/revision/latest/scale-to-width-down/278?cb=20131228231204" decoding="async" loading="lazy" width="278" height="400" class="thumbimage" data-image-name="DD3 Three Artwork2.png" data-image-key="DD3_Three_Artwork2.png" data-relevant="1"/></a>  <figcaption class="thumbcaption">  <a href="/wiki/File:DD3_Three_Artwork2.png" class="info-icon"><svg><use xlink:href="#wds-icons-info-small"/></svg></a>    </figcaption> </figure><p>From <b>Drakengard 3 Official Japanese Website</b><br/>Translation by <b><a target="_blank" rel="nofollow noreferrer noopener" class="external text" href="http://www.siliconera.com/2013/08/23/drakengard-3-sister-three-displays-her-obsession-with-dolls/">Siliconera</a></b></p><p><b>Three - <font color="red"> My Dolls Are Nice Dolls</font></b></p><p>Month X / Day X</p><p>Today, I made my first doll. Although I copied someone else’s way of making it, it’s my very own doll that I made. It turned out much better than I thought, so I was very pleased.</p><p>Month X / Day X</p><p>The Mr. Soldier doll I copied, is actually from a game called “chess”. The Mr. Soldier I took from the lord’s castle was the first doll I’ve ever owned. I’ve always liked dolls since I was little, but I’ve never had one of my own. After I got caught taking it outside the castle, One scolded me, but I couldn’t let go of the doll. Because, it was my first. Even if I get scolded, I like dolls.</p><p>Month X / Day X</p><p>Today, I made my eighth doll. I am now done with the black Mr. Soldier dolls. I think I’ll start making white Mr. Soldier dolls tomorrow.</p><p><br/>Month X / Day X</p><p>I finished making the white Mr. Soldier dolls. Now, I’m finished with all the Mr. Soldiers, so I’ll be making other dolls tomorrow. On the “Chess board” I saw, there were dolls on horses, but I don’t think I’ll make horses. It’s because I like dolls that are in the shape of humans, rather than animals. There were also dolls of houses, but that’s boring so I won’t make those either. Besides, dolls made into houses aren’t human-shaped, right? Houses can’t move or talk. So, instead of horses and houses, I wonder what kind of dolls I should make? There are kings and queens. Maybe I should make a doll with strange clothes, such as the “bishop”. But, what is a bishop? I think I’ll look into it next time.</p><p>Month X / Day X</p><p>I looked up “bishop” and found out what it is. They are important people called “priests”. They wear strange clothes and hats. In the book, it was written that “bishops” shave the top of their heads, and don’t have any hair. I didn’t know that, so I initially made the “bishop” doll have a normal head under its hat. I immediately trimmed the doll’s hair to make it shorter. It was difficult making it into a nice round shape, as shown in the book; however, it is now a proper “bishop” doll.</p><p>Month X / Day X</p><p>I was reading about a living being that has an upper-half of a human’s body, and the lower-half of a horse. I’d been wondering what I should do instead of a horse doll, so this is perfect, and I’ve decided to make it. I kept reading the book, hoping there might be something to replace the house doll, too.</p><p>Month X / Day X</p><p>In chess, the horse doll is known as the “knight”. So that’s it. I could’ve just made a human doll riding on a horse from the start. I recall seeing a chess doll riding on a horse at the lord’s castle. Since there were more that weren’t riding a horse, I thought that would be normal. Either way, since I already made it, it’s fine. I also checked to see if the “house” doll could be something else, and it wasn’t a house, but a castle (rook). Since it’s not a human or a living thing, I was disappointed. After giving it some thought, I decided to make the castle doll into a monster I saw in a book. It was a giant monster. If I tie both arms behind, and twist the legs, it looks like a building, right? Just to make it look more like a building, I’ll add stairs and ladders to it.</p><p>Month X / Day X</p><p>I finished making all 64 pieces of the chess dolls. After lining them up, I can see that I’ve gotten better. I’m happy. I wonder what kind of dolls I should make next.</p><p>Month X / Day X</p><p>Today, I made a doll from my own ideas, instead of copying one. Up until now, it was always troublesome gathering the material, but making it like this won’t involve such troubles. Besides, it’s much more wonderful and prettier than a chess doll. This time, it really is my very own doll. My cute, cute doll.</p><p>Month X / Day X</p><p>Today, I played with all the dolls I’ve made. In the picture book, there was a girl who played with dolls, so I decided to play with them too. The girl in the book played with her father doll, mother doll, grandmother doll, grandfather doll, and children dolls. But I don’t really like my father and mother, so playing that way wasn’t very fun. Besides, I don’t have a grandfather or grandmother. Octa is a grandfather, but not mine. I’ll think of a different way to play.</p><p>Month X / Day X</p><p>Today, I played “bad-guy hunting” with my dolls. I prepared a One doll, Two doll, Four doll and Five doll, and beat up the bad lord. They’re dolls and don’t have the power of songs, so I believe I was able to well replicate the part they all united their powers to fight. It was very fun, but the bad lord’s doll broke. I must now make a new doll. It’s fun to play, but I think I prefer making instead.</p><p>Month X / Day X</p><p>Today, I played “teatime” with my dolls. Playing “bad-guy hunting” broke my dolls, but drinking tea and speaking shouldn’t break them. Having conversations with the dolls is very fun. The dolls pay close attention to my stories. The dolls never complain. They don’t say things like, “What does that mean?” or “I don’t know what you’re saying”. For being so well-behaved, I made them sweets. I also made tea. It’s a very pretty purple-tea that looks like a jewel. I wanted to match the sweets, but I couldn’t get them to be the same color, so they were green sweets. After feeding the dolls sweets and giving them tea to drink, their faces turned to a dirty color. I washed them but they would not return to their normal colors. To top it off, they got a strange smell, so I decided to throw them away. I must now make new dolls. I won’t be playing “teatime” anymore.</p><p>Month X / Day X</p><p>I like dolls, but I also like scissors. From the cutting-sound it makes, to the feeling I get in my hands, I love everything about it. When I cut my hair, I have so much fun, I even forget to eat at times. When I tried cutting Octa’s hair, it wasn’t like mine, and it was very hard and rough. I tried cutting his moustache, but he ran away. Actually, I wanted to make him look like a “bishop”. While I like scissors, I don’t think Octa does. And they’re so fun, too. Also, it doesn’t seem as though Octa likes dolls that much, either.</p><p>Month X / Day X</p><p>Octa wears strange shoes. They have a funny shape. I wanted to make my dolls wear them, but Octa wouldn’t let me borrow them. Even though he wears such shoes, he’s actually very fast when he runs away. The time I tried to cut his moustache, he ran away with surprisingly fast speed. When I tried cutting other parts, he was even faster. Weirdo. I wonder why he doesn’t want it? It’s fun. I really don’t know. Now that I mention it, lately, Octa doesn’t play with me much. That’s because Octa doesn’t like dolls. I want to play with dolls. I think Octa, who doesn’t like dolls, should go play by himself.</p><p>Month X / Day X</p><p>Today, I spent a lot of time thinking about the meaning of “cuter”. Personally, I think all the dolls are cute. They’re all cute in their own ways. Maybe because of that, I didn’t know the meaning of “cute” versus “cuter”. Then, I decided I’d to put them in order, from simply “cute” to “cuter” and maybe I’d understand the difference.I gathered all the dolls I’ve made up until now, and arranged them in order of “cuteness”. I was then able to note the difference. Firstly, ones with wider foreheads are cuter than the ones with narrow foreheads. Then, the ones with bigger heads are cuter than smaller heads. Instead of small and thin eyes, the ones with large and wide eyes are cuter. Smaller mouths and noses are also cuter. The ones with plump cheeks are cuter. The dolls with fat and short arms and legs are cuter, too. The ones with their stomachs sticking out are cuter than ones with flat stomachs. So that means, I’ll make them with bigger heads, wider foreheads, big eyes, smaller mouths and noses, and plump cheeks.Yes, I have it! The way to make dolls cuter. I think I’ll try it out first thing tomorrow.</p><p><br/>Month X / Day X</p><p>Today, I worked on making the dolls “cuter”. After trying, though, it was much more difficult than I had expected. First of all, it was difficult to make their heads larger. This is because the dolls’ heads are hard. It’s not like I can inflate them like a balloon. Making foreheads wider, and noses smaller, didn’t go too well, either. This is because I can’t carve them like wood, or mold and make them rounder like clay.After trying this and that, things didn’t go too well, and I ruined one doll; however, I did finally stumble upon a good idea. Since it’s hard to change the size of their heads, what if I were to change the size of their bodies instead? I thought I could change the length of their arms and legs. After trying it, I was able to do it. I thought it might be difficult to make their bellies poke out, but after looking at the pillow on my bed, I was strucky by another good idea. The more the insides of pillows and cushions are filled, the fluffier they become. All I have to do is fill the dolls’ stomachs with more “fluff”. Sure enough, after filling then with plenty of “fluff,” they developed nice round stomachs. It was a great success.</p><p>Since I was able to make their stomachs nice and plump, I did the same to their arms and legs, too. They became cute and plump arms and legs. Their fingers would also look cuter if they were more plump, so filled them up with “fluff” as well, one by one, even though it was a little difficult. I even filled their palms. Then when I put on their previous heads, I was able to make them into dolls with large heads, with plump arms and legs. However, I’m still not very good at it, so their width and length didn’t match, and they looked a awkward. If I make many like I did with the chess dolls, I think I’ll become better. I thought I’d do my best tomorrow.</p><p>Month X / Day X</p><p>I became better at making plump dolls with big heads today. They no longer look awkward. While making them, I noticed that the “cuter dolls” have limbs and bellies that resemble those of a baby. Babies also have large heads. They also have wide foreheads, and wide eyes, with small mouths and noses. That’s it… making them “cuter” means making them look like babies. Yes, I understand now.</p><p>I’ll try making their cheeks a little more squishy. That’s how baby cheeks are, aren’t they? Perhaps I’ll fill them with something softer than “fluff,” too. What should it be? I think I’ll give it some more thought.</p><p>Month X / Day X</p><p>I spent the entire day looking for “cheek filling”. Something very soft with a nice feel to it. The insides of a featherbed? How about the insides of a cushion? what about a plush? Or sweets? I tried cutting many things that are plump or fluffy, to check their insides.</p><p>When I cut the featherbed, many tiny feathers scattered across the room. I accidentally inhaled some, and couldn’t stop sneezing. After cutting sweet and fluffy snacks, my scissors got sticky from the cream. After seeing me sneezing while licking off the sticky cream, Octa began to look, looking disturbed at the same time. After that, Octa washed my hair and changed my clothes that were covered in feathers, and I finally stopped sneezing. But I couldn’t find something that could be used as a filling for cheeks. What are baby cheeks made of…?</p><p>Month X / Day X</p><p>I tried many different ways, but in the end, I decided to loosen the strings inside the cheeks of the dolls. This seemed like the best way to do it. I carefully loosened the white, red, and pink strings, and made them into soft, fine threads that filled the insides of their cheeks. I had to make them fluffy, and not jam-packed. They also couldn’t be shriveled up, so I kept on feeling them with my fingers to test their softness.</p><p><br/>Month X / Day X</p><p>It took days and days, but I was finally able to make a “cuter doll” with baby-like cheeks. It has a plump stomach, with plump arms and legs. My cute, cute doll.</p><p>However, I want to make even cuter dolls. What kind of dolls are even cuter? What could their insides consist of? What kind of material should I use? What would make it even cuter? I think I’ll give it some more thought.</p>I think Octa wants to play, but I’m too busy. After making a cuter doll, I think I’ll just want to make an even cuter doll after that. I wonder what kind of doll I should make next. I want something that is much cuter, so I can have many more dolls to play with. Tee hee hee… hehehe.<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Four</title>
    <link href="/2024/03/10/Four/"/>
    <url>/2024/03/10/Four/</url>
    
    <content type="html"><![CDATA[<h1 id="Four"><a href="#Four" class="headerlink" title="Four"></a>Four</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><figure class="thumb tright show-info-icon" style="width: 278px"> <a href="https://static.wikia.nocookie.net/drakengard/images/2/24/DD3_Four_Artwork2.png/revision/latest?cb=20131228231059" class="image"><img alt="DD3 Four Artwork2" src="https://static.wikia.nocookie.net/drakengard/images/2/24/DD3_Four_Artwork2.png/revision/latest/scale-to-width-down/278?cb=20131228231059" decoding="async" loading="lazy" width="278" height="400" class="thumbimage" data-image-name="DD3 Four Artwork2.png" data-image-key="DD3_Four_Artwork2.png" data-relevant="1"/></a>  <figcaption class="thumbcaption">  <a href="/wiki/File:DD3_Four_Artwork2.png" class="info-icon"><svg><use xlink:href="#wds-icons-info-small"/></svg></a>    </figcaption> </figure><p>From <b>Drakengard 3 Official English Website</b></p><p><b>Four - <font color="red">Family Portrait</font></b></p><p>"Five! I know it was you. Don't just leave your clothes lying on the floor!"</p><p>I've already yelled at her to clean it up. So what if the house is abandoned and no one lives here? It isn't ours to do with as we please. We're here to rest from our travels and take shelter—that's <i>it</i>. And when we leave, we need to put things back the way we found them. We're not slobs.</p><p>But Five has been shedding her clothes and spilling her food like she owns the place. She ought to try cleaning up after herself. Well, I suppose it's to be expected from the youngest in any family.</p><p>I start to fold her dress and catch myself grimacing. There's a big tear in the seam under the sleeve. Oh, of course. She probably forgot all about this dress the second she found something else to change into. "What am I going to do with her?"</p><p>I let out a big sigh. Not only do I clean up after Five, I wind up mending her clothes, too. But she's all thumbs, anyway; if I made her do the needlework, we'd just wind up with more rags. Either that, or she'd prick her finger or something and make a big scene. Best to avoid the trouble and handle this myself. One open seam won't take more than a few minutes.</p><p>I spread out the dress to check it for other tears, and now I've noticed there's hair all over the floor. "Three," I groan. "Not you, too."</p><p>Three has made a bad habit of this: sitting down any old place and then getting her hair all over everything when she cuts it. It's not my older sister's fault her hair grows faster than other people's, but honestly, I swear she does this for kicks. I mean, if it's that much of a hassle, she could just chop it off at shoulder length. But Three cuts the ends; she'll just grab a clump of hair and <i>snick, snick</i> away at it with her scissors. I think she enjoys it. You could almost call it a hobby—a really weird one, in my opinion.</p><p>In fact, she's a little weird in general. All right, a lot weird. Exceedingly weird. Actually, I'm still mincing words. She's a certifiable loon.</p><p>As I think this, I hear the <i>snick, snick</i> getting closer. Here she comes. "Three, would you stop getting your hair all—" But <i>over the place</i> is dead on arrival. Three has been cutting her hair as she walks. With each <i>snick,</i> more of her silky hair flutters toward the floor.</p><p>"Need something?" she says. The fallen hair is getting on everything. Her brazenesss has knocked the words right out of me. If it were Five, I would already be yelling, "Stop making a mess!"</p><p>"Three, maybe you shouldn't cut your hair while you walk."</p><p>"Why not?"</p><p>"Why not? Because... Because scissors are sharp, right? If your hand slips, you could hurt yourself."</p><p>"I'll be fine." Three cuts off another lock of hair as if to say: <i>See? Not dangerous.</i> I feel my shoulders slump. What a waste of time. I should have known who I was dealing with right from the start.</p><p>"All right, you'll be fine. But could you please pick up the hair you've gotten all over everything? This isn't our house." I shudder to think what the next people to come in will think if they find mounds of hair all over the floor. I know I'd be creeped out. "Here you go." I hold out a broom realizing as I do that it's another waste of time.</p><p>"I'm tired," says Three. Sure enough, she flops down on her butt, keels over, and is asleep before I can blink. She's not <i>pretending</i> to be asleep; she's actually doing it. It's incredible, in a way.</p><p>I can't sleep if you so much as switch out my pillow, but Three—she can deal with a different mattress, or no mattress at all, or even just a patch of dirt. If she can get horizontal, she can sleep. You could raise the roof right next to her and she wouldn't care. No matter how dirty her clothes get, she doesn't mind. As delicate as she looks, Three is a tough one to faze.</p><p>It's a shame. Three has the prettiest face of all of us. But despite being a beautiful young woman, she's impudent and slovenly and just plain odd. I doubt anyone would believe it if you told them.</p><p>What a shame about her hair too. It's straight and lustrous and feels just like silk, and here she is clumsily hacking it to pieces. If I had hair like that, I'd cut it nice and even, or at least do it up properly. And if I had Three's face, wouldn't catch me rolling around on the floor. I would want to be <i>presentable</i>. I can't fathom how someone could be born this pretty and wreck it all with bad hair and worse behavior. Three is frittering away nature's gifts. She doesn't even seem the slightest bit interested in using her head, as smart as she is.</p><p>Maybe that's what separates the loons from the non-loons. I bet loons never give any thought to falling in love or leading ordinary, happy lives.</p><p>Once I've put a coat on Three so she doesn't catch a cold, I clean up the hair on the floor and stitch up Five's dress. I've really gotten the short end of the stick, haven't I?</p><p>Three may be strange beyond reproach, but I've got to do something about Five. We're hurting her in the long run by letting her act spoiled and take people for granted all the time just because she's the youngest. Today, I need to finally give her a good talking-to.</p><p>And how unfair is that? I'm sure I must have been the youngest child up until Five was born, but I have no memory of it. As far back as I can remember, Five has been there and I've been on big sister duty as second youngest. Grown-ups tell me I need to "tough it out" because I'm older, as if <i>that</i> makes any sense. When have I ever begged to have my way or burdened people the way Five does?</p><p>You know, I'm probably not cut out to be a youngest child anyway. My conscience and common sense would get in the way if I tried to pull one of Five's selfish tricks. The first thing to jump to mind would be how much I'm putting other people out. And more than anything—</p><p>"Four? Did you want to see me?"</p><p><i>This.</i> I can't be this smooth a customer. Never in a million years will I have the brass to wait until right <i>after</i> someone finishes mending my clothes to come crawling in.</p><p>"You know you're not supposed to leave your clothes lying around. How many times do I have to tell you? And look what you did to the seam!"</p><p>"Oh, that's not me."</p><p>"I don't want to hear it. I stitched it up for you this time, but next time you're on your own."</p><p>"It really wasn't me! Honest." The nerve of her. Who but Five could ever be a big enough slouch to try and pin the blame on someone else?</p><p>"Oh, Four. Sorry!" says a tomboyish voice. "That one's my fault." My older sister Two is scratching herself when she turns up. She can get a little rough around the edges, but what baffles me is that it comes across as lovable. If I acted like that, people would probably mistake me for an actual boy, not some lovable tomboy. And if Five tried it, they'd think she popped a screw. Why is Two the only one who gets to be able to pull it off?</p><p>Well, anyway.</p><p>"But, Two, this is Five's dress." It doesn't have her name written on it, but I'm pretty good at remembering whose clothes are whose. When you have to pick up after everyone and mend their clothes, you get pretty good at telling people's belongings apart. So the dress is clearly Five's. The thing is, Two would never lie to me...</p><p>"Yeah. It <i>was</i> Five's dress." Aha. Mystery solved. So that's what happened. I knew Two wouldn't lie to me. "Was" means she got the dress as a hand-me-down. It makes sense. Total sense. No further explanation needed. I get it. Please don't go there, Five!</p><p>But she does.</p><p>"The dress was squeezing me so hard I just couldn't wear it anymore." Five sticks out her chest as she explains, and I feel a tinge of anger. A girl her age shouldn't be this developed, let alone flaunt it. It's sick. She ought to be ashamed of herself. I mean, what is it they say? You're born with either tits or wits?</p><p>"Five said she was done with it, so I took it off her hands." Two explains with a big smile, completely unfazed by our little sister's pig show. Would it hurt Two to reprimand Five just once? It's a big sister's duty, if you ask me. "But when I tried it on, I flexed a little too hard and...<i>rrrip.</i>"</p><p>"The seam burst."</p><p>"Bingo! That's right, Four." Two's muscles are overpowered, so she's always breaking things or punching holes in the wall. But then she says, "Oh no!" and turns white as a sheet. It's kind of ironic that one of us with the best intentions does the most damage. She'd be a real catch otherwise.</p><p>"Can you <i>believe</i> I ruined a dress someone just gave me? I went to find a needle and thread to see if I could fix it up."</p><p>"Here you are, Two." I hold out the dress, which is all stitched up now. Unlike Five, Two can take care of herself, but she's a little clumsy. She's decent enough with her fingers, but a little disorganized, you might say. So I tend to get thinks taken care of first. It doesn't upset me though, since Two isn't trying to unload her chores on people.</p><p>"Whoa! Hang on. You're kidding. You did this for me? This is amazing! How'd you do it so fast? It's perfect!" Two will never flatter you or dole out empty compliments. Her praise comes from the heart. Everything about her does; she's cheerful, eager, kind, compassionate.</p><p>But my sister is so honest sometimes that I worry about her. Those same qualities can be flipped around and used against you. People like that are easy to trick and to take advantage of, right?</p><p>Which is bad enough in itself, but Two is likeable and attractive. It wouldn't surprise if unsavory sorts came up to her with less than good intentions. She projects a sort of helplessness and flightiness which makes her look like an easy mark. And, in fact, she probably <i>is</i> an easy mark.</p><p>But knowing her, even if she did get burned, she'd probably bounce right back and convince herself it was a one-time mistake. I'm sure she'd say "This time I'll meet Mr. Right," and keep letting men use her and then toss her aside. Another troubling thought.</p><p>I mean, someone as attractive as her shouldn't be throwing away her life to chase after a bunch of worthless jerks, right? With her good looks? Talk about going downhill. What a tragedy. It worries me sick just imagining. That's right. I'm only thinking of her!</p><p>"Four, you're the <i>best!</i> Let me go try it on." I hear Two squealing in delight as she does, and next she's saying, "Yay! It's a perfect fit!" as she turns in circles. It almost feels like <i>I'm</i> the big sister.</p><p>"Well? What do you think? Huh?" Once Five and I manage a nod, Two's face lights up in a big grin and she wheels around. "I've got to show this to One!" she gasps, and flies out of the room without even shutting the door. She can be such a child. Well, she <i>is</i> a child. This whole journey, we've been going around trouncing villains and monsters that have been tormenting innocent people. It's been easy to forget that we're all still kids. And Five doesn't help with all that flaunting and the filth she spouts.</p><p>"Oh, Four." The indecent creature is slinking up behind me right now. I've got a bad feeling about this. "Now did I lie to you or not?"</p><p>"No. I misjudged you."</p><p>"Why do you always have to treat me like the villain? You hurt my feelings," she says with absolutely no hurt in her voice. I can feel her pressing right up against my back.</p><p>"I was wrong," I manage.</p><p>"Is that it? Aren't you going to say you're sorry?"</p><p>"I'm sorry," I manage again.</p><p>"I can't <i>hear</i> you."</p><p>"I said, I'm <i>SORRY!</i>" Ugh. I'm not usually this easy to get to. She thinks she's so smart. Jerk. "could you get away from me now? You're crushing me."</p><p>Her and her oversized bazoom! It ticks me off!</p><p>"Mmm," she moans. "You don't like being crushed? Why? Because you can't do it with those pancakes?"</p><p>"WELL, EXCUSE ME AND MY PANCAKES! LIKE I'D EVER WANT TO BE LIKE YOU! GET AWAY FROM ME, IT'S HOT ENOUGH IN HERE! AND DON'T 'MMM' ME! YOU'RE TOO YOUNG TO BE ACTING LIKE SOME FILTHY WHORE. I BET THE FOOD YOU EAT GOES RIGHT TO YOUR TITS AND YOU'VE GOT THE BRAINS OF A STUPID COW. YOU STUPID DUMBSHIT! DUMBSHIT, DUMBSHIT, DUMBSHIT!"</p><p>"Oh, Four! Stop! You're so scary."</p><p>"SHUT UP! BITCHCOW! GO EAT SOME BITCHGRASS!" Soon, I'm grabbing everything within reach and throwing it at her. But she writhes and moans and dodges it all, which only manages to piss me off even more.</p><p><i>I hate you so much! All of you! I despise you! I know I'll never be lovable like Two or beautiful like Three. I know that compared to Five I'm a pancake! I hate myself! I hate my face! My body! I'm not pretty or lovable and I have the most average face you can imagine. My arms and legs are gangly and I look like a twig that can never get my stupid hair to straighten out!</i></p><p><i>And these horrid nails! I hate them so much I just want to die. They keep growing and growing and get all curly and weird if I don't clip them, or else they crack or they get caught on everything. They're useless and I wish I could just rip them straight off. My arms are useless, my legs are useless, my face is useless—all of me is useless!</i></p><p><i>Maybe...I'm useless.</i></p><p><i>Me? Useless? No! I'm not the one who's useless!</i></p><p><i>YOU ARE, YOU WORTHLESS FOUL-MOUTHED SLUT! IF YOU THINK YOU AND THOSE FLOPPY SACKS OF MEAT ARE SPECIAL, THEN YOU'VE GOT ANOTHER GODDAMN THING COMING! A SHIT WOULD TURN ITS NOSE UP AT YOU, YOU'RE NOTHING, SO FUCK OFF!</i></p><p><i>YOU TOO! YOU MUSCLE-BOUND LOVEY-DOVEY FREAK! AND YOU, YOU FUCKED-UP-WACK-JOB SCISSOR FIEND! YOUR BIG FAT BRAIN DOESN'T MEAN JACK SHIT! YOU AND YOUR STUPID PRETTY SKIN. IF IT'S SO PRETTY, WHY DON'T I RIP IT RIGHT OFF SO YOU CAN STARE AT IT? I'LL YANK IT RIGHT OVER YOUR BITCH SHOULDERS AND TEAR IT INTO TINY FUCKING PIECES SO YOU CAN WATCH ME <b>GRIND</b> IT INTO THE FLOOR!</i></p><p>I'm laughing maniacally now. <i>I FEEL BETTER! I FEEL <b>MUCH</b> BETTER!</i></p><p>When I come around, the room is in shambles. And yet there's Three, still sound asleep. The fact that she managed to stay dead to the world through that much commotion has to make her some kind of prodigy. A loon prodigy.</p><p>Five must have fled the scene a while ago. She's not very smart, but she is smooth.</p><p>"I am such an idiot." I know I have to get this cleaned up fast. Whoever makes the mess has to clean it up. Everyone knows that. But when I see my sisters not doing it, I start to feel pretty stupid being the only one playing by the rules.</p><p>I put back the chairs and table I had upended, pick up the decanter, and wipe the floor. Oh no, I can't believe it. Was I throwing dishes? Five hadn't bothered to clear her place, and even now there are bits of food stuck to the pieces.</p><p>I sigh. "Why me?" But while Five may not have cleaned the dishes up, I'm the one who threw them and broke them. This is on me. From now on, I'll have to keep my temper tantrums to a minimum. Even if I get mad, I need to hold it in. Because no matter what I say or do, I'm only hurting myself in the end.</p><p>When at last the cleaning is done, I take a seat in a chair. I sure am tired. Maybe not on Three's level—but really tired.</p><p>"Is anyone here?"</p><p>My head has been face down on the table, but I look up. My eldest sister has just come in. "One, what's wrong?"</p><p>"Oh, I'm glad you're here, Four. Can you help me?"</p><p>"Should I wake Three up?"</p><p>After just a glance at Three, who is still sleeping like a log on the floor, One shakes her head. "Leave her be. You'll more than do." <i>You'll more than do.</i> I hear the words again in my head. They make me happy. One appreciates me...</p><p>Of all my sisters, One is the brightest, and the most knowledgeable, and the most dependable. She is responsible and just. She might not be lovable like Two or beautiful like Three, but her every expression and gesture exudes wisdom. That's why she's my role model. I can't do anything about my face, but I can always get wiser.</p><p>Also, One has pancakes like me. For now, anyway.</p><p>"One, what do you need help with?" I ask as I walk a few steps behind her.</p><p>"Fixing a cart. I got us one at a nearby farm."</p><p>"A cart? What for?"</p><p>"There's something we'll need to carry once we get where we're going next." As I look at her in profile like this, the resolve on her face is pronounced. This is the expression she makes before going into battle. And we won't be doing it for ourselves. It will be for someone else: people who are suffering. One isn't the sort to turn a blind eye to injustice.</p><p>But sometimes I feel sorry for her when I see her like this; she has so many responsibilities. And she's not even the oldest of us, really. She's only in this position because she got sort of...bumped up the ladder, you might say. The truth is, One is someone's little sister, too. Someone else is supposed to be eldest and shoulder all this responsibility and tell us what to do...</p><p>"Um... Listen. You know I'm here to do everything I can to help you, right? You don't have to make every problem your own."</p><p>One seems a little surprised at first, but then her eyes soften and she replies, "Thank you." Two is unreliable, Three is weird, Five is selfish. That means I've got to help One. As dependable as she is, she's trying to fill the shoes of someone else, and that can't be easy.</p><p><i>Don't worry, I'll be there for you. That's what little sisters do. Well, at least this little sister. Right, One?</i></p><p>"Huh?" When I wake up, One is gone. The cart we were supposed to fix and the vacant house we had borrowed are gone, too. I'm in the same bed I always sleep in. "Oh...it was just a dream."</p><p>Of course it was. After all, we're all grown up now, and our journey is over. I used to think we could still go back to those days, when the five of us traveled together, but too much has changed.</p><p>I find myself wishing I dreamed of an older memory. One from way far back, when we had Zero, who was stronger and more beautiful than any of us. Back when I loved her, and admired her, and tried to be just like her.</p><p>But then, I still love her. She's my sister. She's family. I still believe she'll go back to the way she was so we can all live together again. So we can all be happy again.</p>And maybe I won't mind if there's one or two less of us.<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Five</title>
    <link href="/2024/03/10/Five/"/>
    <url>/2024/03/10/Five/</url>
    
    <content type="html"><![CDATA[<h1 id="Five"><a href="#Five" class="headerlink" title="Five"></a>Five</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><figure class="thumb tright show-info-icon" style="width: 278px"> <a href="https://static.wikia.nocookie.net/drakengard/images/a/ab/DD3_Five_Artwork2.png/revision/latest?cb=20131228230916" class="image"><img alt="DD3 Five Artwork2" src="https://static.wikia.nocookie.net/drakengard/images/a/ab/DD3_Five_Artwork2.png/revision/latest/scale-to-width-down/278?cb=20131228230916" decoding="async" loading="lazy" width="278" height="400" class="thumbimage" data-image-name="DD3 Five Artwork2.png" data-image-key="DD3_Five_Artwork2.png" data-relevant="1"/></a>  <figcaption class="thumbcaption">  <a href="/wiki/File:DD3_Five_Artwork2.png" class="info-icon"><svg><use xlink:href="#wds-icons-info-small"/></svg></a>    </figcaption> </figure><p>From <b>Drakengard 3 Official English Website</b></p><p><b>Five - <font color="red">My Favorite Things</font></b></p><p>This world is made up of things that I want, and things that I <i>really</i> want.</p><p>...As one of my big sisters, Two, might put it.</p><p>What Two had actually said was, "This world is made up of things that I like, and things that I really like."</p><p>That got me thinking about my version of what this world could be made up of. I don't have as big a heart as Two does; I could never claim that the world is full of things that I like. Honestly, there are too many things that I dislike. Nasty foods, ugly clothes, boring people...</p><p>But just because I don't like it doesn't mean I don't want it. I mean, what if that food isn't tasty because it isn't being cooked right? One time, Two wrestled with the stomach of a sandworm to make me an unbelievably delectable soup. I think she said she had to cure it in salt first before drying it in the sun, and then spent days stirring the pot as it stewed. Now, that was far more complicated a process than I would be willing to go to, but it proves that it's worth wanting.</p><p>You can make ugly clothes presentable with enough accessories. And boring people can turn out to be quite useful as servants. You have to make something your own to determine its true worth. Wouldn't you agree?</p><p>So I don't think there is anything in the world that I don't want. But there are things that I want just a little bit. And then there are things that I want <i>badly</i>.</p><p>What I want the most, of course, are pretty accessories, clothes, and shoes. I prefer gold over silver in my accessories. And lots of sparkling jewels! Like a walnut-sized sapphire brooch studded with tiny aquamarine and diamond pieces. Or an emerald-encrusted gold work necklace.</p><p>I like lace in the clothes that I wear. I almost passed out one time while trying on a robe made entirely of lace! I love lace in detachable collars, shawls, even handkerchiefs.</p><p>Apparently, it takes a lot of time and effort to make lace. Four told me that prices hike up with even just a little bit of lace around the edges.</p><p>"You could feed a poor family for days with the money you would spend on just one of these frilly things. Do you still want to keep playing dress-up like a little girl?"</p><p>Four always speaks the truth, like an older sister should. So I replied:</p><p>"You're right, Four. I don't need this dress anymore."</p><p>I was getting tired of that holey rag anyway.</p><p>My favorite right now is the one with lots of ribbons. Layered bow ties made of fine thin silk, all over the sleeves and torso! Isn't it adorable? I think I should make a decorative belt out of ribbon and squeeze it tight around my waist to highlight my magnificent bosom. Wouldn't that be a feast for the eyes?</p><p>I bet this dress covered in ribbons is expensive, too. How many days could this feed a poor family, I wonder.</p><p>But it's not as though these poor people would be able to stuff themselves if I stopped dressing up. Those issues are unrelated. Besides, I didn't pay for these dresses out of my pocket. They just <i>became</i> mine after we offed our former lord.</p><p>It was that lord that extorted money from people and then squandered it. It wasn't me.</p><p>Anyway, what should I wear today? The one with the ribbons? I love this dress with the damask folded in, too. The gold and silver threads really complement the color of my hair. Or maybe I should wear this one with sable fur around the hem and cuffs—</p><p>"Mmff... Five? You up already?"</p><p>Whose voice do I hear from directly behind me? My disciple's, of course. So cute. I love him so much. Poor thing, he sounds groggy.</p><p>"You can go back to sleep, Dito."</p><p>Young'uns need lots of sleep. Especially Dito because he stays up late every night.</p><p>"Not with the fuss you're making."</p><p>"Oh. So sorry."</p><p>"No worries."</p><p>I love the way he yawns and stretches loudly. He is so beautiful that I can barely contain myself. His face is like a doll.</p><p>And by doll, I don't mean like the toy soldiers that Three makes. I mean normal dolls. Cute girl dolls.</p><p>But Dito is so much cuter. Skin as white as snow, eyes twinkling like the brightest stars. His soft curls feel so airy through my fingers I could rub my hands over his head forever. I like Dito the most. Dito is my favorite toy.</p><p>"You're playing with your dresses again? So early in the morning? You're such a dork, Five."</p><p>I even like the way he mouths off. Maybe it's the element of surprise in hearing such venom being spouted from such an angelic face. I firmly believe that the key to every relationship between a man and a woman is unpredictability. I mean, wouldn't you rather your lover take on a completely different persona in bed?</p><p>But I digress.</p><p>"I have to get up as early as I can. A day goes by so fast," I say.</p><p>"Well, of course you'd run out of time when you're changing clothes four times a day. Why can't you just wear the same clothes until nighttime?"</p><p>"Perish the thought! With so many dresses, how could I wear but one a day?"</p><p>It's not as though circumstances don't allow me to change because I'm traveling, or because there is nothing else to wear. To keep the same clothes on when I have so many is simply unthinkable!</p><p>"Tell me, Dito: which dress do you think I should wear?"</p><p>I take the one with the ribbons, the one with the gold and silver threads, and the one with the fur edges, and place all three in front of him. But all he does is yawn.</p><p>"I don't care. They're your damned clothes."</p><p>The disinterest in his voice sounds almost convincing. It doesn't match his cherubic face. What could be eating at him? Oh, I get it!</p><p>"You just don't like dresses because they're a hassle to take off of me."</p><p>"No, that's not exactly—"</p><p>"You've been trying to tell me that you'd rather I wore nothing at all!"</p><p>"Not really, I just—"</p><p>"But I don't mind doing it fully clothed, you know."</p><p>"Now, wait a minute!"</p><p>"I'll just get on top. Or should I stand while you take me from behind?"</p><p>"Will you stop, please!?"</p><p>"Are you being coy with me? Or is that a backwards invitation?"</p><p>Maybe he really is hesitating. Dito is my disciple, after all. A disciple is enslaved by his Intoner. He is forbidden to go against my word. A disciple must perpetually serve the Intoner, day and night.</p><p>"There is no need to be shy, you know."</p><p>"This one! You wanted me to pick out a dress for you, right? Right!?"</p><p>Oh, Dito. His face is all red. Is he blushing? So adorable! Makes me want to squeeze him tight and pin him down on the floor.</p><p>"I like this one! The shiny number!"</p><p>"Forget the dress, Dito. Let's—"</p><p>"Oh, wait, wait! There's one you haven't tried yet. Remember, with the embroidery? The blue, flowery one?"</p><p>He's right. There was a rather unique blue one with flowers stitched in. And I hadn't tried it on yet.</p><p>"Stay here, Five! I'll go get the dress!"</p><p>He slips out of my arms like a cat. But why does have to leap off the bed and dash like one? I'm not the type of master that gets upset just because you're slow to fetch a dress.</p><p>I thought I heard a heavy sigh from the wardrobe, but that couldn't have been Dito. Like he is an impeccable disciple to me, I am an impeccable Intoner to Dito.</p><p>Dito walks back in, dutifully carrying the blue dress. I open it up in front of the mirror. A form-fitting glossy blue garment with finely embroidered flowers. So exotic. So bold!</p><p>Yes, I like this, too! With every step, my legs show from the deep cuts up the sides. Definitely not to Four's liking. She would probably call it tasteless.</p><p>"This is pretty. But that doesn't mean the other ones aren't. What's a girl to do?"</p><p>I already had the one with the ribbons, the one with the damask, and the one with the fur to choose from. And now this flowery blue dress, too? There is no way I can choose just one!</p><p>"I wish I had three or four bodies. Then I could wear them all at once!"</p><p>"Three or four bodies? Of YOU? Are you serious?"</p><p>"Of course I am."</p><p>"...That would be a nightmare."</p><p>Dito looks as though the world is coming to an end. I wonder what could have crossed his mind.</p><p>"I think it's a fabulous idea. Let's ask One if she knows any spells that can create three bodies of me."</p><p>Big sister One is always holed up in the vault underneath the church reading difficult books. I wouldn't be surprised at all if she knew a spell or two of the sort.</p><p>"If I had three bodies, I wouldn't have to ponder over which dress to wear. Why, I could even eat three times more."</p><p>"You already eat three times what you should."</p><p>"What? That's not true."</p><p>Sure, I have a hearty appetite. I don't like feeling hungry. Hunger makes me feel lonely. That's why I eat before I start feeling hungry.</p><p>But that doesn't mean I eat three times as much as a normal person. Dito has that mischievous grin. Mmm, I love that look on him.</p><p>"Whenever the cooks ask you if you want meat or fish, you always answer both."</p><p>"But, Dito, that would only be two times as much, not three."</p><p>Besides, if they ask me to choose one of two dishes, it has to mean they're ready either way. They wouldn't ask me that way if they weren't. Which leads me to think, if they're both available, why not have both?</p><p>"How about if they offered broiled meat, stewed meat, or steamed meat? You would say all of them."</p><p>"Well, yes, if that's the way they phrased the question."</p><p>"What if they asked you if you wanted broiled fish, steamed fish or fried fish?"</p><p>"All of them, I guess. And now you're making me hungry. I wonder if breakfast is ready yet."</p><p>"See? Your appetite is <i>more</i> than triple the norm, Five."</p><p>I really don't think my appetite is to blame. It's the pure fact that there is so much deliciousness in existence. As much as a gourmet as I am, I couldn't possibly ask for something that doesn't even exist.</p><p>But if I <i>do</i> know it exists, and it's out of my reach, I would chase it to the edges of the world.</p><p>Oh, I do love going on trips in search of good eats. It's far more thrilling than having to go hunt down some evil man, or to vanquish a monster or some other nasty thing. I tell Dito:</p><p>"I can't wait for springtime. Then we can go on one of our gourmet trips again."</p><p>"You mean the nasty beasty feasts?"</p><p>"But in Two's hands, any beast can turn into a scrumptious meal."</p><p>"Aha! Then you don't deny them being beasts?"</p><p>"Oh, there's no doubt they're beasts. But only Two can turn gobin brains into a silky pâté. Sting lizard in aspic, pickled six-eyed catfish... You can't these things just anywhere."</p><p>"They are rare, um, delicacies, I suppose."</p><p>"Exactly."</p><p>"It's not every day you have to risk your life for a meal. I certainly wish I never have to."</p><p>Oh, my. Dito. That cocky look. And the way those shoulders go up when you shrug. Now you've done it. Bad, bad boy.</p><p>"Um... Five?"</p><p>And <i>that</i> look. The uncomfortable look. It just makes me want to make him even more uncomfortable.</p><p>"You're not having any...wicked thoughts, are you, now?"</p><p>"Wicked? Heavens, no."</p><p>The way he looks up at me with those frightened pupils. He's almost like a little bunny. Mmm, and there's another fine delicacy. Rabbit meat. Stewed for hours until it's so tender it melts in your mouth. Serve it with a sweet sauce made of fruit.</p><p>"D-Didn't you say you were hungry? H-How about some b-breakfast?"</p><p>"Yes, I'll have some right now."</p><p>"Wait. Please wait, Five—"</p><p>"No. I can't wait. Don't you know me by now?"</p><p>He looked like he had more to say, but what he says doesn't really matter. Not when I'm <i>on</i>. I can't hold it back anymore. My sweet, sweet disciple. My one and only hunny-bunny. Where should I start eating?</p><p>"Why does this have to happen so early in the morning?"</p><p>"It's because of those sleepy eyes of yours, Dito."</p><p>"What you're saying doesn't match up with what you're doing."</p><p>"But don't you enjoy snoozing in my bosom?"</p><p>Even his moans are lovely. Though one could mistake them for sighs. They can't be sighs.</p><p>For all the effort and creativity I put into this, I see no reason to tolerate complaints. I try a great many things not just for my own pleasure, but for the pleasure of my partners, too.</p><p>I believe one should put in an honest effort before blaming others for an unsatisfactory experience. You can read books or talk to people. You name it, I've done it.</p><p>You can even try different partners. Luckily for me, I have plenty of partners to choose from. Men and women, even multiple partners in one night. It could very well be that there's nothing wrong with you, but that it's just a matter of chemistry.</p><p>But chemistry can be tricky. It is awfully hard to find someone who can truly impress. But I am not about to give up. Because this can't be as good as it gets. It has to be so much better.</p><p>And when I learn something really good, I'm going to share it with Dito. Because he is my precious disciple.</p><p>"No, wait... Not yet...!"</p><p>Oops. I guess I got a bit distracted. I'm sorry, Dito. Don't sigh like that. It's okay, really.</p><p>"Sweet Dito. There's no need to make such a face."</p><p>We can just have another go at it! As many times as we want. Right?</p><p>"Five, you have the appetite of three people, but the libido of thirty."</p><p>"Why, thank you for the wonderful compliment."</p><p>"...It wasn't a compliment."</p><p>"Such a good little man. You deserve a reward. Where do you want it?"</p><p>"Sounds more like I'm about to be punished than rewarded."</p><p>"Oh! So is that what you're into?"</p><p>I had no idea. To each his own, as they say. That explains why he looks so bored sometimes. Why didn't he tell me sooner? I don't mind putting in the effort and creativity, but I also think it is wiser to avoid wasting time on detours.</p><p>With the world so full of things that I want, I don't have a moment to spare. So many beautiful clothes to try on! So much delicious foods to sample! I don't want to even waste time sleeping.</p><p>"Why do you have to be so greedy?" asks Dito.</p><p>Greedy? Me?</p><p>I don't think that's entirely accurate. I think my desire for things is a reflection of the need to feel how powerful I am.</p><p>In those moments where I finally wrap my hands around something I have really wanted, the euphoria is instant and orgasmic. Feelings like superiority and omnipotence rush out in waves from the deepest parts of my being. <i>Nothing</i> feels better than having the power to obtain what I desire.</p><p>If I didn't have that power, I don't know if I would want anything. How sad would it be to want something but not be able to get it? Why, I imagine life would be a miserable waste to pursue something that is impossible to obtain.</p><p>But one does wonder... What if there is such a thing? I can't even imagine what it might be, but I supposed there could be something that I could never, ever have.</p><p>With my hand on my heart, I begin to think...maybe there is. Something I have not noticed until now. I don't even know whether I want it or not, but it's something devoid of excess or grandeur.</p><p>What could it be?</p><p>It can't be food. And it's probably not jewelry or clothing. If it were any of those things, I could easily get my hands on it.</p><p>Is it a person? But I have plenty of servants and handmaids at my beck and call. I even have soldiers who would risk their lives for me. Men? No shortage there, either. I know of no man who could resist my advances. Unless he were my own father or something. Father... Daddy...?</p><p>"Five? Are you all right?"</p><p>"Huh...?"</p><p>Gone. I could almost make it out...but it's gone.</p><p>"This is new. I've never seen you so lost in thought while in bed."</p><p>"Well, isn't that rude? I'll have you know I am perfectly capable of having deep thoughts."</p><p>"Did I make you mad?"</p><p>"Not at all."</p><p>In fact, maybe he did me a favor by chasing away <i>that</i> particular silhouette.</p><p>There is no way I could remember my father. He died not long after I was born. To try to recall something that I have no way of knowing would be an utter waste of time.</p><p>So no more losing myself in deep thoughts. Who cares about what I can't get? I just want to keep thinking about all the things that I love. The sapphire brooch, and the emerald and gold work necklace. The dress with the ribbons, and the dress with the flowers. The robe and shawl and the detachable collar with lace.</p><p>"Now, where were we?"</p><p>And my sweet, sweet disciple.</p><p>"What? Again!?"</p><p>"I'm only kidding."</p><p>I really am hungry now. Let's have breakfast. How about some soft-boiled eggs on toasted bread, with smoked fish and pickled vegetables? And the dried fruits preserved in honey. Oh, but I must decide on what to wear before that. Speaking of which, I think there was a dress with the cuffs as long as drapes. And where did the red woolen one go?</p><p>These are the things that make me happy! I just need to keep thinking about the things that I want, and things that I really want. And not think about anything else.</p>How could any body be happier?<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Darkengard 3:Zero</title>
    <link href="/2024/03/10/Zero/"/>
    <url>/2024/03/10/Zero/</url>
    
    <content type="html"><![CDATA[<h1 id="Zero"><a href="#Zero" class="headerlink" title="Zero"></a>Zero</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><div class="wds-tab__content wds-is-current"><p class="mw-empty-elt"> </p><figure class="thumb tright show-info-icon" style="width: 278px"> <a href="https://static.wikia.nocookie.net/drakengard/images/c/c1/DD3_Zero_Artwork2.png/revision/latest?cb=20131228230603" class="image"><img alt="DD3 Zero Artwork2" src="https://static.wikia.nocookie.net/drakengard/images/c/c1/DD3_Zero_Artwork2.png/revision/latest/scale-to-width-down/278?cb=20131228230603" decoding="async" loading="lazy" width="278" height="400" class="thumbimage" data-image-name="DD3 Zero Artwork2.png" data-image-key="DD3_Zero_Artwork2.png" data-relevant="1"/></a>  <figcaption class="thumbcaption">  <a href="/wiki/File:DD3_Zero_Artwork2.png" class="info-icon"><svg><use xlink:href="#wds-icons-info-small"/></svg></a>    </figcaption> </figure><p>From <b>Drakengard 3 Official English Website</b><br/><br/></p><p><i>Where did this flower come from?</i><br/><br/></p><p><b>Zero - <font color="red">A Rain to End and a Flower to Begin</font></b><br/><br/></p><p>Rainy days are never good, I thought, as I stared through the rain pounding down relentlessly around me. I felt the rise of an unexpected laugh. As if sunny days were any better.<br/><br/></p><p>"What is it?" a voice next to me asked, weakly. It was so frail that the rain threatened to wash it away.<br/><br/></p><p>"What is what?" I replied, and wished I hadn't. People who answered questions with questions disgusted me. I used to make sure they never answered anyone again. Every time.<br/><br/></p><p>"I can hear you crying."<br/><br/></p><p>"You're mistaken. That was a laugh." I couldn't blame her. How could she have read my expression? They had taken her sight; pried open both her lids and thrust needles into each eye. And that was not the only torture she had endured. Repeated burns from a branding iron had reduced her palms and the soles of her feet to rotted, reeking flesh, and the joints of all four limbs had been ruined to the point where she couldn't even turn in her sleep.<br/><br/></p><p>I won't stop here and lament that people are willing to do something so brutal to a girl of so few years. I practically expect it from landed lords, or else why would she and her friends have tried to start a revolt in the first place? The damned fools.<br/><br/></p><p>And it was foolish. They were found before they could even pick up their weapons, let alone revolt. Sold out by one of their own. That's what you get for trusting other people. There is no such thing as a person incapable of betrayal.<br/><br/></p><p>The five masterminds were caught and tortured. I heard they were promised release if they coughed up the details of the plot and the names of those party to it, which was obviously a load of shit. But gullible people can't learn not to be duped.<br/><br/></p><p>That said, the stubborn ones like her who held out were given the same mangling as the ones who confessed immediately, and all were laid out here, onto the cobblestones of the square. Being clever didn't earn anyone a better outcome. Their lord may not have treated them fairly, but he did treat them equally.<br/><br/></p><p>If any one thing could be called unequal, it was that five fine souls who tried to strike down an oppressive lord were chained up here next to a common murderer like me. There was no making sense of that one. I wasn't tortured the way they were. I had no grand scheme or friends to give up. Since I had nothing to confess, no one shattered my bones or ripped my fingernails off. All I got was a vicious lashing.<br/><br/></p><p>The pain, which had felt like flames leaping across my back, was gone now. There was no sensation left. The cold rain must have been nipping at my back, but I felt no chill. Knowing it meant my death was near made it no less strange. "What a waste of life." There was no stopping the laughter now. I couldn't remember a single good day, rain or shine. My life had been hell from as far back as I could remember, and undoubtedly from the first moment I came into the world.<br/><br/></p><p>My earliest memory is of my mother shouting, and the only other thing I remember from those days is being slapped around. I doubt I was fed well, either. After all, I learned to swipe a meal before I even learned to speak. If she'd been feeding me properly, I wouldn't have been forced to steal.<br/><br/></p><p>My mother shouldn't be singled out as a bad person. Only a handful of kids were lucky enough to have warm food and a bed. Unless you were born into some fancy noble household, you could kiss any hope of a life like that goodbye. You wondered why the hell you were born, grew up knowing you were a thorn in the world's side, turned into a shitty adult, and then unwittingly wound up with a bun in the oven. That was it for most women. My mother did nothing more than raise me the best way she knew.<br/><br/></p><p>Once I reached an acceptable age, my mother sold me without a second thought—for a pittance, when I thought back on it later. As was the way, I was sold to a brothel, where women who looked a lot like my mother attended to men with tight purse strings.<br/><br/></p><p>It wasn't all older women; there were girls there my age. I became fast friends with one. She called me "Rose," which was how I learned the color of my eyes. "Haven't you ever looked in a mirror? she asked in surprise when I told her. Of course not. I couldn't have cared less what I looked like.<br/><br/></p><p>I decided she should be called "Indigo." As little as I cared about my own face, I realized her eyes were a pretty color. Rose and Indigo: they were names that belonged only to us.<br/><br/></p><p>One day, Indigo suggested we steal some money and run away. I nodded, believing that together, the two of us could do anything. I never stopped to think about where we would run or what we would do after.<br/><br/></p><p>The plan went off brilliantly; we took as much money as we could carry, and fled out of town and across the bridge to the far side of the river. There was a man waiting there with a horse. I had seen him before; he was a patron who hung all over Indigo. "If we make it across the river, everything will work out," she had said, and now things were starting to click.<br/><br/></p><p>I thought for certain they would take me with them; how utterly wrong I was. They had planned to kill me all along. Indigo could only carry so much money by herself; that was why she'd approached me. The only reason. "No hard feelings, Rose." And then she grinned. It was the same smile as always, but then I knew. Underneath it had been a girl who was figuring out how to kill me. Took me long enough to see it.<br/><br/></p><p>If the pursuers hadn't come right then, my life would have been over. The other two galloped off in a hurry, and I alone was caught.<br/><br/></p><p>I never resented Indigo for it. Rather, I was rankled by my own witlessness. Why did I trust another person? Of course it was my fault, for being fooled. If things had played out differently, Indigo and that man would be the ones lying dead by the river, and I'd have been the one to get away. Next time, I thought, I'll do better.<br/><br/></p><p>My chance came several months later. I took the gold and got away with ease; I might have even put Indigo to shame. To keep pursuers off my back, I slaughtered everyone: the procurers, their underlings, the women. It wasn't hard. All I had to do was wait until they were sound asleep, then end them one by one.<br/><br/></p><p>I killed the procurers first; next, the men they'd hired to do the dirty work. Thanks to the poison I'd thrown into the casks, they were half dead already. Even with my meager strength, it wasn't hard to finish off men who had already ceased moving. Once the men were taken care of, work went fast. Women never smell blood. Torrents of the stuff were flowing right by their side, but not one opened her eyes or let out a scream before expiring.<br/><br/></p><p>I took as much money as I could carry and left town before dawn. Of course, no pursuers came, but worse news did: bandits. They captured me handily and gleefully relieved me of every coin I had. And though they spared my life, I again felt the sting of failure.<br/><br/></p><p>I waited for my chance and escaped before they could sell me back into whoring. This time, thievery was out of the question. I knew I would be better off not trying to carry off their money. Any coin I had would just be stolen. If I needed something, I didn't have to buy it; I could take it. No one could rob from me if I had nothing to steal.<br/><br/></p><p>I did have one thing they wanted, though: myself. The bandits were ready to sell me, just as my mother had sold me; as a woman, I would always be someone's spoil. But that was beyond my control; I could not discard my womanhood or leave it behind. I suppose I could have made Indigo's choice and found a man to protect me. But people lie; people betray. I didn't want their protection. I would protect myself.<br/><br/></p><p>Wait. But I did live with a man. Just one, just once. I ran into one of that sleazy brothel's patrons. It was some place far away, in some unfamiliar town. He remembered my face; I remembered his. I have to kill him, was my first thought. The procurers and the women were dead—all of them except for me. He wasn't so witless that he couldn't piece together what that meant. But, for whatever reason, I didn't do it. Instead, we found a corner of that unfamiliar town and started a life.<br/><br/></p><p>He wasn't witless, but neither could you call him honest; he was a thief with a talent for picking locks. Together, we raked in the coin and passed the days with amusement. As a life, it wasn't bad, and thoughts of killing him slipped away.<br/><br/></p><p>The life didn't last long, though. I got sick. A scourge was going around. Slowly but inexorably it eroded the body and killed you. Not only that, it was contagious. Fearing for his life, the man left me. I don't blame him, and if it had ended there I would have let him go. But he was going to sell me out; a bounty had been placed on the "brigand" who had broken into the brothel.<br/><br/></p><p>What a fool. I had only just caught the scourge and my symptoms were still mild. I struggled to get up in the morning, got chills in the evening, broke into fits of severe coughing... But that was it. Nothing that would interfere with me taking a life.<br/><br/></p><p>Thus, I had no trouble reversing our fates when he came in my sleep to tie me up. The scourge had turned me into a light sleeper—and either way, I had a certain sensitivity to lethal intent. Before I could think, I had opened his gullet, and he died with the confusion still written on his face.<br/><br/></p><p>It was only then that I realized I'd never really let him into my life. Despite sleeping and eating with him, telling myself I was over killing him, it wasn't true. Otherwise, I wouldn't have constantly kept a blade hidden within reach.<br/><br/></p><p>And so, I was alone again. I journeyed aimlessly, filching food and clothes as I went. As I mentioned, the scourge was taking its time with me, so it was well within my ability to travel and plunder and kill. I murdered the owners of my spoils on the spot, women or elderly included.<br/><br/></p><p>Again and again I would hear, "Take the food and the money. Just spare my life. Please." It's strange; everyone makes the same face when death is close. Did I look at Indigo the same way? No, I never begged.<br/><br/></p><p>"Suppose I do spare you. You're certain to hold this against me. You'll come for me one day."<br/><br/></p><p>"I would never—"<br/><br/></p><p>"Never let it go, right? I just butchered your mother right in front of you." And unlike mine, this one must have been a good mother, considering she had thrust herself in harm's way to protect her daughters. "Anyway, I'd apologize for this, but that would only serve to make myself feel better, and I'm not that deluded." With that, I killed the two trembling sisters while they still clung to each other. No doubt they hated me in those last moments, but they would never come after me with a knife.<br/><br/></p><p>There were some who didn't beg. One was a girl a few years my junior. Rage flared in her eyes as she lay into me. "Why!?" Why would you do this?"<br/><br/></p><p>"Maybe because I'm hungry."<br/><br/></p><p>"How dare you mock me!"<br/><br/></p><p>"No one's mocking anyone. I'm starving, and don't have the coin for food."<br/><br/></p><p>"And you think that justifies this!?" Her father's and brother's bodies lay there in front of her. A bit further away was a woman who appeared to have been their cook. I always dealt with potential threats first, which meant I got stuck with children and elderly last. "You could have simply taken our gold and left!"<br/><br/></p><p>"Yeah. You know, you're right. I used to think it was about keeping people from seeking vengeance, but I'm starting wonder if that's really it. Why do I do it?" But I had already strangled her before I could finish expressing my reservations. Her eyes were still wide when she took her last breath, still red with anger. "I wish I could tell you."<br/><br/></p><p>I felt her gaze on my back as I took a loaf from the table. I hadn't been lying when I said I was starving. The whole reason I had picked this house was because the family looked rich. And since it was suppertime, food would be waiting to fill my belly. I had a good reason. But again, I wondered aloud: "Why?" I took food from the plates with my bare hands and washed it down with a swig from the decanter. My compliments to the chef.<br/><br/></p><p>"Why do I do it? Shouldn't I know after this many?" I posed the question to the girl's limp body on the floor. I hadn't been keeping count; I didn't think it mattered. All I knew was that I had killed a lot of people. And yet I couldn't answer one simple question: Why do I do it?<br/><br/></p><p>"Maybe I kill to find out why." The girl's dead eyes continued to glare at me. I guess it wasn't a good enough answer.<br/><br/></p><p>I continued to live like that for some time. Before I knew it, I had stopped searching for reasons or answers; I robbed people and killed them as easily as I drew breath.<br/><br/></p><p>The thing is, I entered public awareness around the time my kills reached triple digits. I had done my best to finish off everyone in the homes I breached and leave no evidence, but then again, I hadn't gone out of my way to be secretive, so I suppose I got made at some point.<br/><br/></p><p>My days became numbered once word got out about the young woman behind the merciless killings of young and old. Descriptions of my appearance circulated and merchants spread word during their travels. Soon every town in every land was searching for the "witch with eyes of rose." The bounty for my capture would pay for a life at ease, and proper rewards were promised for even a decent lead.<br/><br/></p><p>And so I was caught. They surrounded me while the scourge was doing its work on me. By then, the symptoms had started taking their toll, and I was unable to resist, let alone escape. Soldiers in grand armor made an even grander fuss of binding me hand and foot.<br/><br/></p><p>My gamble—that the scourge would kill me first—had been wrong, and I was dragged off to the bastille. They condemned me to the lash; I would be struck once for each life I took. Personally, I think I toughed it out rather well; they whipped me until my skin was in tatters and my flesh split, but I survived. Then again, if they had gotten my kill count right, I would have died for certain. Their tally came up woefully short, and so my punishment ended well before it could be called capital.<br/><br/></p><p>Of course, that didn't mean I was forgiven. They chained me up to die in the square, along with the five rebels. Directly next to me was the young girl I mentioned earlier. While the others no longer uttered so much as a groan, she continued her one assertion: "What we did was right." But her voice was growing ever fainter. When the lot was dragged out here, she was in the most miserable state. I could tell that she was keeping herself alive through sheer power of will alone.<br/><br/></p><p>I took advantage of her lack of sight and stared her up and down without reservation. Here was more or less my complete opposite: a girl whose sense of justice was hopelessly unswayable. The fact that we stood in this place shoulder to shoulder struck me as strange beyond words. Eventually, she inquired as to who I was. It was my fault for coughing; the scourge's distinctive and disagreeable bark gave me away as not being one of her friends. "Who are you? What's your name?"<br/><br/></p><p>"I don't have a name," I answered. "I don't have anything. No coin, no house, no family or friends or lover. Nothing at all. I give 'nothing' new depths. All I have is this life which is about to blink out along with everything else. I wound up with zero. Jack shit."<br/><br/></p><p>Because I did shit away my life. I lived empty day after empty day without purpose. It was so stupid in retrospect that I found myself laughing uncontrollably.<br/><br/></p><p>"Don't cry," the voice said.<br/><br/></p><p>"I told you...I'm laughing."<br/><br/></p><p>I was struggling so hard to breathe that it must have come out as spasms. Like any of those next breaths could have been my last.<br/><br/></p><p>"Really?"<br/><br/></p><p>"Yes."<br/><br/></p><p>I heard what might have been a sigh. The rain had finally eased into a drizzle. A moment later, her body convulsed for a few fleeting seconds, and then she stopped moving entirely.<br/><br/></p><p>"Hey..."<br/><br/></p><p>No answer.<br/><br/></p><p>"So, I guess it'll be me." It had been decided the last to survive would be burned alive with the bodies of the other five. One of the group bit her own tongue off when she heard. Another was dead by the time the bunch was dragged out to the square. Another died before the rain came, and a fourth during the downpour, leaving me and the girl.<br/><br/></p><p>Good luck burning me in this weather. Maybe they would try burying me alive with them instead. At least we can all take solace in the fact she wasn't the last to go. It wouldn't have been right if the one girl who had shown compassion for others right to the end had to die the worst.<br/><br/></p><p>But what was right? Who was right?<br/><br/></p><p>I could hear the girl's voice again: What we did was right. And it was. Only the world could be called wrong—this world full of lords who shit on their people, this world with smug murderers like me. This world where those who stand up on behalf of the weak are crushed like so many worms.<br/><br/></p><p>This is madness. It doesn't make any sense. Ire filled me all at once.<br/><br/></p><p>No. It had always been there and I just hadn't noticed. I hated the world. I had damned it in my mind since before I could remember. I could feel the tremor of a scream in my throat. Glurp. Something warm dribbled from my mouth. It was blood, not a scream. This fucking world is trying to kill me. Fuck that. Fuck the world! Fuck you all! YOU fucking die! Fuck you, fuck you, fuck you!<br/><br/></p><p>Then, all of a sudden, I noticed a flower. A rose-colored flower was blossoming right before my eyes, between me and the girl's corpse. Where did it come from? I don't remember seeing a flower there. It swayed beneath the rain's blows. The flower must have been new to me, and yet I recognized it. Maybe because its color is so like my eyes. Or maybe I'm already dead, and this is one of those flowers that's supposed to grow in Paradise.<br/><br/></p><p>No. Heaven won't have anything to do with me. I'm dying, and this is a hallucination. But that's all right. I still want to see it up close. I want to touch it. No one has ever given me a flower, and I've never longed for one. But this flower, I love.<br/><br/></p><p>I felt something constricting my sight. I wasn't able to shut my eyes, so I kept gazing at the flower. It was so lovely... My life may have been wasted, but this was not such a terrible final thing to behold.<br/><br/></p>As its widening petals filled my field of vision, I greeted the flower with a quiet smile.<p class="mw-empty-elt"/></div>]]></content>
    
    
    <categories>
      
      <category>Darkengard</category>
      
    </categories>
    
    
    <tags>
      
      <tag>novella</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Sarafa</title>
    <link href="/2024/03/07/Sarafa/"/>
    <url>/2024/03/07/Sarafa/</url>
    
    <content type="html"><![CDATA[<h1 id="Sarafa"><a href="#Sarafa" class="headerlink" title="Sarafa"></a>Sarafa</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>I have been bound for all of my days. Bound to a dazzling prison others name a palace. My elegant fetters are contained in the title of princess. Only once, in my youth, did I comprehend freedom.</p><p>When I was young, I grew tired of my stuffy life in the palace and impulsively fled. For the first time, I walked the nighttime streets of the city, where a fantastical atmosphere welcomed me with open arms.</p><p>I walked and walked until I no longer knew where I was.</p><p>I couldn’t see the palace, or even the mighty spire atop it. Loneliness overcame me then, causing tears to tremble in the corners of my eyes.</p><p>“Is something troubling you, young lady?” said the voice of an old woman from somewhere behind me. Relieved that help had finally arrived, I suddenly burst out weeping. So loud was my wailing that all those walking the streets stopped to look. But the old woman gently took my hand and led me away. She led me to her home—a small domicile where she told the fortunes of others.</p><p>Crystals glowed faintly. Exotic rugs tickled my feet. I cannot remember the fortune she scried for me…</p><p>But I will never forget the shock that pierced my heart in that moment.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>I eventually came to love the night. One reason—perhaps the most important—was that I could escape the palace and find new sides of myself. The day I met the old woman, I made of her a request:</p><p>“Please make me your apprentice and teach me to divine futures.”</p><p>Though she agreed, her teachings were harsh. “People place their lives in the hands of fortunes,” she would say. Under her strict tutelage, I gleaned the secrets of divination. Eventually, I began to perform readings for others under her watchful eye. I was cautious: If ever I saw a bad result, I worded it in a way that sounded positive. In the palace, I yearned for night. In the old woman’s house, I divined futures. For a time, this was my life.</p><p>One day, when the old woman was away, a redheaded couple came to have their fortunes told. I was overconfident by then, and thought I could do it without her help. As the crystal ball sparked to life, I witnessed a catastrophic future. And I found I did not have the words to change it.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>A rumor drew a crowd to the bay. A man and woman fought over the end of their relationship, and the woman ended up drowning the man. The woman had short, striking red hair. Red hair was unusual in this nation. I realized at once she was the same woman whose fortune I had told. </p><p>That was when I knew: I had the power to manipulate the lives of others through divination. To that point, I had nothing in my life save the title of “princess.” But now? Now I had a secret power.</p><p>All that awaited me, however, was the old woman’s rage. She blamed me for warping the fates of others through my inexperience. All my excuses fell on deaf ears, and she threw me from her home. The last thing she said to me was this:</p><p>“You have no right to tell the fortune of another.”</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>Days later, as the sun dawned on the city, another crowd gathered. They were a mob, and they ripped the old woman’s house down with their own hands. They screamed and trampled the remains, destroying everything. The old woman’s prized divination tools were buried beneath the rubble. </p><p>And I watched. And I smiled.</p><p>I struggled to keep back the laughter bubbling in my throat. I had used my powers selfishly to unleash the mob. For even after she sent me away, I continued to foretell the future. I could not find the strength to stop. I worked quietly, propped up alone in a dark back alley. I told fortunes. I turned people into my playthings. I could never go back. Because the day I ripped that couple apart, I felt something new. That realization? That I could change someone’s fate?</p><p>It was deep. Powerful. Distorted.<br>It was<br>.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>The Cage Escaped Into, Part 1<br>[<br>]</p><p>Back when the woman used to have her smile…</p><p>A small country lies nestled between dry sand and fertile sea, its capital an assortment of haphazardly placed spires and domed rooves.</p><p>“Before it sits a vast desert, one that claims the lives of any who might threaten the city.”</p><p>“Behind it lies a vast ocean, one where ships laden with precious cargo from across the world come and go.”</p><p>Within the capital, there is a palace. Within the palace, there is a corridor. And dashing through the corridor, there is a single girl. Though she runs with wild abandon, none dare scold her. For she is the country’s princess.</p><p>“Mother!” she cries as she bursts into a room. “You called for me!?”</p><p>The room boasts high ceilings and cool breezes reminiscent of the finest desert resort. Finely-crafted furniture fills every corner. The person the girl calls “mother” lays claim to this place, as well as the rest of the country. She is queen of this land; all of its prosperity flows to her.</p><p>“I did call you,” the queen begins. “For today, I would speak with you of marriage.” She hands the princess a scroll. Written at its top is the name of a country the princess does not recognize. As well as a terrifying phrase:<br>marriage of state<br>. </p><p>As royalty, the princess lacks the right to choose her husband. And though she knew this moment was coming, she cannot hide her concern.</p><p>“Worry not,” says the queen as she senses her daughter’s unease. “I have selected a most excellent partner.”</p><p>Memories from her life come rushing back to the princess. She recalls conversations with her beloved mother, as well as her secret life as a fortune teller—a thing of which only her lady-in-waiting is aware. It had all taken place here, in this land betwixt sand and sea. As tears well in the girl’s eyes, the queen pulls her into an embrace.</p><p>“All mothers, no matter their station, pray for their daughter’s happiness.” The tears are loosed now, flowing down her face and onto the uncaring marble below. But the girl knows her mother has her best interests at heart. And in that moment, it is enough.</p><p>A lengthy procession snakes through silvery, moonlit sands. The princess’s procession. She sits inside her litter, surrounded before and behind by a wealth of effusive gifts personally selected by her mother the queen. Bored, she gazes out through a mesh-covered window at the brilliant night sky. She is heading for a land rich in ore and precious metals. Her mother has long desired such things, and hopes that marrying her daughter to the country’s ruling family will allow her to secure them under advantageous conditions. But first, the princess must earn the king’s fancy and prove to his ministers that she is an asset of value. It will be difficult, time-consuming work. But the girl is confident. For she is particularly adept at reading the hearts of others and manipulating them to her liking. She has spent many a long night wandering the city in the guise of a fortune teller, and such pursuits for people’s true essences should prove useful here.</p><p>Nerve. Curiosity. Ambition. These things and more well within her as she sits inside her litter and watches the breaking dawn.</p><p>Finally, the procession reaches its destination. The princess is hurried off to an astonishingly vast room so she might prepare for her wedding. She is dressed in a spotless white dress stitched with brilliant gold thread that catches the light. The army of maids who surround her swoon and sigh at the sight. But what captures the princess’s heart is not the gorgeous dress, but the shape of the city against the horizon. For the buildings outside her window shine even more brilliantly than her dress. Unlike her gritty, sand-covered home, this city is a land enveloped in white, dreamlike beauty.</p><p>Suddenly, the door swings wide, causing the maids to immediately bow their heads. “Ah, my new wife. At last we meet.”</p><p>The princess looks up to see a handsome, bearded man in the prime of his life. He is the king—the ruler of this land, and the man who would be her husband. Taking her hand, the king leads her to a courtyard facing the palace. Waiting there is a large portable shrine, as well as a sea of citizens.</p><p>“Welcome to our nation,” says the king as the people burst into a raucous cheer. Dancing petals fill her vision. Music swirls around her. In every corner of the courtyard, people are drinking and dancing with wanton abandon.</p><p>“Hail the new queen!”</p><p>“Long life to our new queen!”</p><p>“Pray look this way, Queen!”</p><p>Princess and king sit in the portable shrine as it begins slowly making its way down the crowded city streets. Today the girl begins a new life in this dazzling land. A place where everyone receives her with warmth and grace. Any doubts she harbored about earning the love of the king and his people quickly fall away. She will give her life to this land—for her mother’s sake as well as her own. She will live with the handsome king beside her and do all she can to see her new people happy. With a small nod, she makes peace with her decision.</p><p>“Attention, everyone!” cries the king suddenly. “It is time for today’s entertainment!”</p><p>The mood of the people immediately turns from excitement to frenzy. With one hand still gently grasping the princess’s own, the king receives an axe from one of his retainers. The polished blade reflects the sunlight. The worn handle is blackened with dirt.</p><p>“What are you going to do?” asks the bemused princess. “It is time you learned how we enjoy ourselves in this land,” he responds. Together, they step down from the shrine and into the sea of people. He swings the axe. Once. Twice. Again. With each swing, a citizen’s head soars away into the air, followed by a brilliant fountain of blood. The princess hears no screams. No panic. All is naught but blood and fevered cheers. The brilliant, unspoiled plaza is soon dyed the deepest crimson. The princess’s beautiful white dress is bright vermilion. She screams, then, a sound lost amidst the revelry.</p><p>“Onward, my queen!” cries the king as he leads her through the crowd swinging his gore-soaked axe. Whether she follows him by choice or force is a question she cannot answer. Her every movement is greeted with a shower of blood, one more step along the path of a wedding most bloody. She suddenly feels her carefully crafted plans wither and die inside her. Those she had manipulated in her life were normal people. Easy people. The type who might come to a fortune teller for advice. But the handsome king she is to marry is something altogether different. He is a man cruel beyond all measure. A man whose senses have abandoned him. And as the people of this mad king eagerly die before him with grins plastered across their faces…</p><p>The princess can only look on in horror.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>The Cage Escaped Into, Part 2<br>[<br>]</p><p>A small kingdom lies nestled between sand and sea. The princess of this kingdom was sent to a faraway land and married off so her beloved mother might find greater prosperity. But to her horror, her new husband is a bloodthirsty, mad king who slaughtered his own people for entertainment at their wedding.</p><p>Days after the bloody ceremony, the woman stares out the window with haunted eyes. The king has given her a vast room with a stunning view. Its massive windows look out over the plaza where the wedding took place. There, people chat idly, lazing about beneath the gentle rays of the sun. The king bathed the floors and walls of the plaza with blood on that day of the frenzied feast. But now, all has been returned to normal, the red walls and floors painted white once more. She recalls what a retainer said to her about the paint:</p><p>“Aye, my new queen. It’s made from ash, as well as shells harvested from the nearby waters.”</p><p>She looks out across the country again. The high castle walls, the floors, and the houses are all covered in that same spotless white. She understands now why that is. For her new husband—the land’s king—engages in his bloody hobby on an almost daily basis. She tears her gaze away from the plaza, ready to enjoy a quiet moment to herself. But her reverie is interrupted by the pealing of a bell. It rings once. Twice. A third time. This bell sits at the highest point of the city and can be heard for miles. Its ringing is how the king summons her. She quickly readies herself and makes her way to his side.</p><p>She finds him in a circular arena at the center of the palace—a place where fighting tournaments are held.</p><p>“I’ve been waiting for you, my beautiful new queen!” he says as he scoops her into an embrace and deposits her in the empty seat beside him. She has been summoned here so she might watch the upcoming battle. Two stout and scarred men stand in the arena. The king takes great joy in such events; he makes them pummel each other until one lies dead, then strikes down the winner with his own hand. But the woman cannot revel in such an abattoir, and so looks away. Her eyes alight on a spire that stands outside the palace. Blood clings to its sides like thick honey. The day prior, the king had amused himself by gathering people at the spire while he skewered criminals atop it. Even the worst slavers and criminals would find such acts unthinkable in the princess’s homeland. But here, they are commonplace. Games, even.</p><p>He is mad<br> she thinks.<br>He is<br> utterly<br>mad<br>.</p><p>How did he possibly trick my mother into accepting this marriage?</p><p>Without warning, the king gently squeezes the princess’s hand, leaning his handsome face close to her own.</p><p>“I hope you are enjoying the game,” he whispers into her ear. Such “games” are naught but means to toy with the lives of others. Whenever he indulges himself in one, he calls her to his side. He drags her from one bloodbath to the next, just as he did at the wedding. And as she gazes at the mighty walls that protect this gorgeous land, a thought occurs to her:</p><p>This country is beautiful.</p><p>Yet it is nothing but a trap to lure in prey—an inescapable prison.</p><p>As the sun sets and shadows stretch across the city, the princess is finally freed from her husband’s latest amusement. She is beginning to feel herself growing numb to the daily parade of tragedies that unfold before her. It is a realization that<br>terrifies<br> her. Only here, in her own room, can she manage to find a sense of calm.</p><p>A full moon hangs in the sky. She steps onto the balcony, gazes up at the sky, and thinks of her home. Of her mother. As this country’s new queen, she has been treated most excellently. But her days are also filled with loneliness—and pain. Every one of the attendants who accompanied her on her journey has been slaughtered. She is utterly alone. But she will carry on. It is her duty to her country. To her mother. As that thought crosses her mind, she finds herself briefly refreshed. She whirls on one heel and makes to return to the room. But before she can move, she notices a faint mark on the wall. It would be invisible if not for the light of the full moon. She follows in the direction it points and finds herself facing one of her bedposts. She reaches behind the post until she feels something solid.</p><p>A diary.</p><p>Sitting on the edge of her bed, she begins to read. The author is one of the previous women sent here to marry the king. It includes observations regarding the nation, plus small grievances about her life and the king’s routine. The woman had noticed how people called her the “new queen.” But that raised the question: Where did the previous queen—or<br>queens<br>—go? As she reads, she finds her answer. And when she does, her mouth cracks opens in a silent scream.</p><p>The writing is hurried. Sloppy.</p><p>While he shows his wives deep affection, he always grows tired of them within five full moons past the wedding.</p><p>After that, he disposes of them and begins looking for a new wife.</p><p>So many queens have died by his hand.</p><p>There is more to the diary, but she is too scared to turn the page. Her mind whirls. She tries to think, but cannot.</p><p>How many full moons has it been?</p><p>The bell tolls suddenly. Once. Twice. A pause…and then a third time. The king is calling for her. But this time, the princess is frozen in place. She imagines the misfortune that awaits her and feels her heart clench. Every day is a game for her new king. And soon, it will be her turn to play. Oddly, the next thing she thinks of is her mother’s kind face.</p><p>“All mothers, no matter their station, pray for their daughter’s happiness.”</p><p>Her mother had said that, turning the words into a kind of tiny prayer. A prayer that she might be happy in her new life, even if it was a marriage not of her own choosing. She does not wish to break her kind mother’s heart by dying in a foreign land. For she knows her death would bring her great sadness.</p><p>I must return home alive. I must see my mother again.</p><p>And so she quietly makes up her mind to escape her new country—and to escape her king.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>The Cage Escaped Into, Part 3<br>[<br>]</p><p>In a faraway country, a mad king toys with people’s lives. One night, the woman who was now his wife found a diary in her room. The author was a queen who came here long before her—a queen that had since vanished. Written on the inside was a terrifying truth: Many queens had met their end by the king’s own hand. This is why the woman knows she will soon fall victim to her husband’s madness.</p><p>“The way you wield your sword is simply beautiful, my darling! You enchant me!” With a smile, she grasps the king’s hand. Clutching it as she showers in the blood of her subjects. Her words prompt the king to adjust his grip as he mows through another group of people. She found a truth in the old diary: After five full moons spent with his new queen, the king will grow weary and dispose of her. She knows her life is in his hands. So she puts on her best act in the faint hope he might not tire of her.</p><p>The king’s game comes to a close. All goes quiet for another night. The princess steps from her bed and slips silently into the city. She walks in shadow, her eyes peering out from the dark. The walls are too high. The guards too numerous. Though this country is at peace, security is abnormally tight. All so her husband might create a stalwart cage from which none might escape. The woman acts amiably during her daylight hours so she might delay her impending demise. But she is also buying time. Time to prepare. Time to ready herself. Time to escape.</p><p>The king’s guards are ever watchful. During meals. During sleep. Even at the privy. If she is to outfox so cautious and clever a man, she needs more time. She looks up at the moon, calculating how many days remain to her. All the while searching for a way home. Her only clues are those left in the diary. But time passes without mercy, and the people no longer refer to her as the “new” queen. Finally, one night, she sees the moon hanging round and low in the sky. It is the fifth time she has seen such a sight. She has assembled everything she needs to escape. A sack stuffed with rations. A skin of water. A tightly wound rope. She slings her things over her shoulder and steps onto the windowsill. Moving on nimble feet, she lands in the palace garden. Suddenly, a voice rings out.</p><p>“Taking in the night air, my queen?”</p><p>She whirls around, her heart in her throat. The king stands before her clutching an axe. The bell tolls. It rings once. Twice. A pause…and then a third time. Her final summons. Before she can move, the king’s hand lashes out and secures her arm in an iron grip. Ignoring her screams, he begins pulling her toward their private bath. The shrewd king has seen through the woman’s actions. Many queens before her have attempted escape. All have failed. All have died. The king boasts proudly of his feats as he steps into the bath. He begins to fiddle with a hidden mechanism somewhere in the center.</p><p>“And now, my dear wife, we begin our final game.”</p><p>As he speaks, a small hole opens in the bath. Water floods through the hole, draining the bath and revealing a small staircase. It is the entrance to a hidden room known only to the king. The pair makes their way down the stairs in silence. At the bottom is a stone room illuminated by faint torchlight. When the princess enters it, despair falls over her features. But the king only smiles wider, his face made all the more handsome for it. The secret room has but one purpose: killing his queen. The king speaks then, praising the woman for amusing him for five full moons. As he does so, a stone falls over the stairway, cutting off all hope of escape. The room is filled with tools the woman has never before seen. But she needs no explanation as to their purpose: They exist to break people. The king lays his hand on one such tool and gives her a crooked, twisted smile.</p><p>“This is your final job, my queen.”</p><p>It is a scene the king has played out time and again. But this time, something different happens. The woman does not cry. She does not beg. Instead, she looks him right in the eye and begins to giggle.</p><p>“Does this amuse you?” he growls. It is the first time she has ever seen him angry—likely because she has never shown him anything but outright deference. As she continues to giggle, a range of emotions wash over the king’s face. Anger turns to rage, before slowly giving way to a hint of doubt. And then, for the briefest of moments, fear.</p><p>The woman does not let the chance escape. She leaps into the corner of the room and picks up a hidden spear. Before the king can even draw breath, she plunges it into his chest. Her attack is nowhere near powerful enough to fell so large and strong a man as her new husband. Yet he begins to foam at the mouth before dropping to one knee. For you see, a powerful poison has been lathered on the spear head.</p><p>“You thought this room yours alone,” whispers the woman in his ear. “But it is not.”</p><p>As the king writhes and thrashes on the ground, the princess tosses the diary in front of him. It is the work not of one queen, but<br>all<br> of them. Each poor soul who married the king wrote down what she knew before dying—and the previous queen was the one who finally figured out the location of the secret room beneath the bath.</p><p>I don’t know if I’ll be able to escape. But whoever is reading this, you can be the one to end this. You must.</p><p>That was the final entry in the diary. And so, the woman snuck into the hidden room ahead of time, ensuring the sacrifices of the previous queens would not be in vain. The king relished in tormenting the weak, and his wives were no exception. But he took too much joy in such proceedings, and so made himself vulnerable. Which is how his latest wife has now come to stand over his pathetic, quivering form.</p><p>“My poor king,” she says in a mocking, melodic voice. “Does that hurt? Would you like me to hold your hand?” But she receives no response. At long last, the mad king is dead. She pulls a string in the corner of the room, causing the floor to slide open, revealing a deep pit. Unfathomable amounts of blood have dried and stuck to the walls like the massive artery of a long-dead giant. It is where the king threw the bodies of his wives when he was done with them. The princess gazes into the deep, dark hole. Beyond lies a future not written in the diary. But she produces her rope and carefully vanishes into the pit all the same.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>The Cage Escaped Into, Part 4<br>[<br>]</p><p>On the night of the fifth full moon, the woman kills her husband and slips free of her palace prison. All so she might return to the mother who loves and worries for her deeply. Before she left, she found the sight of her home to be tired and uninteresting. But now the haphazard spires and clustered domes strike her as beauty personified. She is back in the land wreathed by sea and sand. Her birthplace. Her home.</p><p>Once she escaped the mad king’s grasp, she used what little treasure and rations she had to barter passage through the desert. Now having returned, she sets her sights on the royal palace and limps her way through bustling city streets. She is surrounded by market stalls selling rare spices and exotic fabrics her mother has obtained through trade. None of the lands she passed through on her journey home were so lively—or so bountiful.</p><p>Mother truly is amazing<br>, she thinks.</p><p>When her mother was born, this nation was a poor and barren wasteland. But her mother cultivated it, negotiated with distant countries, and brought great wealth to their shores. The palace is close now. So close. Though she passes many citizens on the street, none realize she is the princess. The scent of blood and decay hangs all around her. Her body is coated in dust. All who see her turn away in disgust. She is nothing to them. Some filthy beggar. Some wretch. But she cares not, because she is<br>alive<br>. That truth is all that matters now.</p><p>As she walks the palace’s unending corridors, retainers and maids look at her with varying expressions. Some regard her with curiosity. Some show relief. But mostly, what she sees is shock.</p><p>“Mother!” Her hoarse voice sounds for the first time in ages as she bursts into her mother’s room and collapses on the floor. Just as when they first spoke of marriage, her mother sits at the far end of a long table. She is queen. The room belongs to her, as does the country. When the princess sees her mother’s face, relief floods her heart. Ignoring the pain of her parched throat, she begins a rapid-fire retelling of how she escaped the mad king.</p><p>Once she finishes her breathless tale, she gives her mother a smile and waits for her own in return. But it does not come. Instead, there is only disappointment. It is a wholly unexpected reaction—one which causes the princess to reel.</p><p>“Why did you come back?” asks her mother softly. The princess blinks, befuddled. She thought her mother would be delighted to see her. She thought she would sweep her up in her arms and offer words of gratitude for the daughter who risked all to make her happy.</p><p>“I cannot be happy if you are not happy,” says the queen coolly. “So I needed you to be happy in your new home. No matter what.”</p><p>As the princess tries desperately to still her reeling mind, she stops and takes in her surroundings. Uncountable maids and servants flit to and fro through the palace corridors. They carry precious timber. Rare spices. Great bolts of silk. Materials used for funerals. Her mother sinks low in her chair and gazes into space for a moment before continuing.</p><p>“Of course the mad king tried to kill you. He kills all his wives. But since you’ve come back, I suppose there’s little use for…” She trails off and waves a hand in the air. “All of<br>this<br>.”</p><p>She claps at a nearby retainer, who bows and awaits instruction. “Cancel my daughter’s funeral, and do it now! Do you have<br>any<br> idea how much this is costing me?”</p><p>The maids and servants immediately stop setting up the funeral trappings and begin tearing them down instead.</p><p>But why?</p><p>Before the princess can ask the question in her mind, the queen tells her everything. The mad king’s country, while mostly insignificant, holds great quantities of ore and precious metals. In exchange for a share of those resources, royal families the world over send their daughters there to be sacrifices. Her mother has known this since the day the princess was born. She waited years for her daughter to come of age so she could send her off to be slaughtered. All this was done so the country she built with her own own hands might become even more powerful. So she might obtain the future she envisioned for herself. But the princess is both clever and pragmatic, and she accepts this new reality far faster than most. Her mother has not betrayed her. Oh no. For one cannot betray a thing they were never loyal to in the first place. The princess slowly closes her eyes. She wavers in place, noting dimly how her body hurts in ways she never imagined it could.</p><p>“Yes, well, it seems I’ll have to increase security so you don’t escape next time,” says her mother. Having thus cleansed her daughter’s wound with salt, the queen and her attendants scuttle away. She does not even take the time to spare a final glance for her daughter. Time passes. A minute. Hours. The princess walks alone down an endless stone corridor. No smile graces her face now. The mad king had constructed a prison. Yet when she finally escaped, she found herself trapped in another. It is a cage she will never be able to flee. All because she was born a princess. All because she is her mother’s daughter. And having realized this truth, her once-brilliant smile is lost forever to the cruel reality of despair.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Yudil</title>
    <link href="/2024/03/07/Yudil/"/>
    <url>/2024/03/07/Yudil/</url>
    
    <content type="html"><![CDATA[<h1 id="Yudil"><a href="#Yudil" class="headerlink" title="Yudil"></a>Yudil</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>This country is not the only thing covered in sand. Each day is exactly the same as the last, and I find myself in an ever-deepening rut.</p><p>, I think,<br>.</p><p>The traveler I pass wears a platinum ring. The merchant before me proudly shows off a vase housing a beautiful flower. Before I know it, both ring and vase are mine.</p><p>There are three rules to thievery. One: Keep distance between yourself and fellow thieves. Two: Touch your tools with your ring finger first. Three: Let the shadows guide your escape. Stick to these, and you will officially be a thief. I say this to no one; I repeat it only to myself. How long has this been my life? I no longer even remember what bread bought with my own money tastes like.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>I feel a gaze on me as I sidle through the back alleys of the city.</p><p>A pair of eyes shine in the darkness, and a child steps into the light. The starving child examines the bread in my hand with a stare powerful enough to kill. I beckon him over. I do not do this out of spite. It’s just a way to pass the time. A game. I show the child some beans I’ve stolen. I hide them in one of my fists and ask him to choose which of them holds the prize. If he is correct, the beans will be his. Once I see light return to his eyes, the game begins.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>First match. I win.</p><p>Second match. I win again.</p><p>Third match. Care to guess? …Ah, right you are. I win.</p><p>Hunger dulls the child’s thoughts. I have given him every chance to see through my ruse. For I’m cheating him, you see. There is no way he can win. We play until the sun sets, and I never lose. He does not realize what is happening. Not even at the very end. The child cries and cries at his loss, but you know what they say: Temporary charity does nothing for a person in need. I leave the child with one parting thought:</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>Even the greatest of thieves make mistakes. Even me.</p><p>This day, a fruit I stole from a stall slips through my fingers. How many years has it been since I was so exposed? Ah, but the fault is not all mine, for the stallkeeper has gone to great lengths to safeguard his merchandise. No sane person covers their products in oil—yet I curse myself all the same for not seeing it. Alas, hunger dulls the thoughts.</p><p>As I rush through the market, I glance behind me. Standing beside the bellowing stallkeeper is the child. The very one who lost to my tricks. Though his movements are clumsy, he uses the commotion I created to steal a good deal of fruit.</p><p>“Good for you.”</p><p>That is all I say before melting into the shadows. Time to separate myself from a fellow thief. For this is one of the rules, after all.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>The Liberated Duo, Part 1<br>[<br>]</p><p>This is a tale from when the boy was making a name for himself as a thief…</p><p>“Sorry, boss, but this is as far as we go.”</p><p>A simple camp sits on the desert sands. The band of brigands who encircle the fire look out into the distance, fear writ large on their faces. For there gazes rest on the White Fortress—also known as the Thieves’ Graveyard. Nestled between desert and sea, this great castle awes all who lay eyes upon it. Countless men have snuck inside in search of treasure, countless men have lost their lives.</p><p>The brigands at the fire voice their displeasure to their leader, a young thief of meager years. The power and influence of the band has grown rapidly, and they came to the ends of the desert to make an even greater name for themselves. The young thief yells at his ragged men. He knows they must be alert at all times if they are to claim the treasures of the White Fortress. But his fellows are overcome with fear at the sight of the castle, so much so that some take the path of the coward and flee.</p><p>The older men yell. The younger weep. The thief sighs as he watches the scene unfold.</p><p>A long line of people stand at the entrance to the White Fortress, queued neatly before its impossibly high gates. They are the nouveau riche, come to attend a fine banquet. As they wait, beggars mill about, hoping for the occasional alms or act of charity. The thief weaves his way to the front of the line as though he belongs there. The guard manning the gates stares at him, shocked.</p><p>“Begging your pardon, sir, but the line begins over—“</p><p>“I do not appreciate being made to wait,” interrupts the thief. His attitude is haughty, his voice filled with unwavering confidence. It is a quality held by only a certain kind of person. It cannot be learned or affected; it is something that must be born into. The boy is clad in resplendent clothing. The jewels decorating his garments glint beneath the torches of the gate. Yet though he wears naught but fakes, his attitude tricks the eye into belief. A moment later, the guard concludes he is different from the nouveau riche, and his gruff expression becomes a cordial smile.</p><p>“My apologies, sir. Right this way.”</p><p>With barely an effort, the thief has entered the White Fortress through its front gate. His gorgeous clothing flutters behind him as he walks. The plan is for him to enter alone, then throw treasures out the window so his subordinates can gather them up. It is a clever plan. Nearly foolproof. But…</p><p>As the thief follows his guide through a covered passageway toward the great hall, he looks out beyond the walls. He spots several shadows moving under the cover of darkness: his subordinates. Their backs are turned to the castle, their footsteps leading them into the vast desert beyond.</p><p>They’re leaving me<br>, thinks the thief.<br>They are abandoning their leader.</p><p>Ah, but I pity them all.</p><p>His subordinates are letting slip the perfect opportunity. Once, long ago, a person called the King of Thieves caused much chaos throughout the continent. Though said to have been the greatest outlaw to ever live, even the King of Thieves had not been able to conquer the White Fortress. Eventually, the King vanished, becoming the stuff of obscure legend. The young thief believes that if he can steal the treasures from this fortress, he will claim the title of King of Thieves for himself. A chance like this will not come again.</p><p>As the thief enters the great hall, he finds himself surrounded by corpulent men and women. It is not only the nouveau riche in attendance today—royalty from neighboring countries are here as well. All wear their most wonderful clothing and jewels; all work tirelessly to seem superior to their neighbor. The thief knows these foul creatures garbed in finery seek only to enrich themselves. But as he moves from the great hall to the banquet, and then on to the gossipers in the courtyard, they all treat him with dignity and respect. Not a one realizes his true face.</p><p>The thief steps into the secret underbelly of the castle, leaving the fervor of the feast behind. The corridor is dark. No light penetrates its inky depths. The life he sensed earlier fades as the castle begins to show how it gained the name of Thieves’ Graveyard. As he leaps over a pit of spikes, great venomous snakes fall from the ceiling.</p><p>“It seems the time for cleverness has come,” murmurs the thief. As those words escape his lips, the floor begins to fall away, revealing a gaping abyss whose maw threatens to swallow him whole. After avoiding countless tricks and traps, the thief finally reaches the end of the corridor. He finds himself at the pinnacle of the White Fortress: the vault. It is a place unseen by human eyes since its construction. No traps threaten his life anymore; he stands face-to-face with a dusty wooden door. With great care, he pushes the barrier aside. The ceiling is open above him, offering views of all the stars in the sky. And there, in the middle of the treasures from across the continent, rests the thief’s ultimate goal.</p><p>“There you are,” he whispers. “At long last.”</p><p>The treasure chest sits pretty beneath a beam of moonlight. The lock glints faintly, as though attempting a final, desperate resistance. It does not take long for the thief to notice the weighty chains encircling the chest. They slither and scrape across the ground, dully reflecting moonlight as they move. For they are attached to something. His gaze follows the chain…</p><p>He finds it attached to an elderly woman. She rests alone, locked to the chest. Her body is gaunt, her hair a tangled nest. Her tattered clothes are barely worthy of the name. She is mostlike a servant—or a slave. But housed in her eyes is a will too powerful to be contained.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>The Liberated Duo, Part 2<br>[<br>]</p><p>The White Fortress. The Thieves’ Graveyard.</p><p>The young thief has risen to its challenge, and now finds himself facing a slave chained to a chest. Yet he pays this other person no mind, instead drawing his knife. The only sound in the quiet vault is the scrape of metal on metal. He breaks the lock without even the slightest effort. The chest is crammed full of treasures from across the ages. Mirrors made of polished stone. Silver spoons. Staves adorned with animal heads. And thousands of other impossible things. If the thief collected all the items he had stolen in his life, it would not begin to equal the value of the riches before him. He feels as if he might topple into the chest and never emerge.</p><p>From the end of her chain, the elderly woman watches him intently. This much treasure will permit him to make a glorious name for himself, and assure his subordinates come crawling back. In his excitement, he lifts up the chest and gazes out from the top of the White Fortress. The massive castle stands betwixt desert and sea. One half of the view is ocean; the other, sand. Yet he cannot see his final destination—his own kingdom. Perhaps he can cross the desert alone at night. It is a reckless idea, mad, but it could be his only—</p><p>“I see an unusual conversation partner has been carried to me on the ocean wind,” comes a woman’s voice. “Once a slave. Now a thief. Oh, but I mark you well.”</p><p>The thief whirls around in shock. Not because of<br>who<br>, but<br>why<br>.</p><p>The bound, elderly woman rests on the floor, a faint smile crossing her face. The thief looks her over anew. Her long hair reaches her chest. Her skin is thin and colorless as papyrus. The heavy chains which bind her have scarred her deeply. He does not recognize her. Yet how can someone he has never met know from whence he comes? No one has ever seen his past before.<br>No one.</p><p>“You press your thumb to the blade when using your knife,” chuckles the woman. “You may leave slavehood, but it never leaves you.”</p><p>The thief was not even aware he was doing such a thing. The dull knives given to slaves are not securely attached between blade and handle. As such, they are forced to hold the blade in place with their thumb to prevent its separation. The woman has seen right through him, and he finds himself enraged.</p><p>“Silence, crone, before I take your tongue!” But the woman only smiles all the wider.</p><p>“Your accent betrays you as eastern-born. You must have been from a well-off family indeed. Stolen away as a child, perchance?”</p><p>The thief reels, for she has hit the mark a second time. The woman quickly closes the distance between them, chains rattling behind her. She saw through his secrets at a glance. She guessed his birthplace with a word. She is like a djinn from some cradle tale. One whose form is ever changing so they might confound humans. The woman moves to the thief’s side and gently runs a hand over his clothes.</p><p>“Be not afraid,” she says. “What you see is but a trick, and it is not the doings of a djinn.”</p><p>Hearing her read his mind again makes the thief want to cover his ears. She has hit upon his secret: the one he buried years ago and has spent his whole life hiding with a desperation bordering on madness.</p><p>“Shall I guess why you’ve come to steal from this place?”</p><p>Her voice is low and deep; the fact it comes from such an emaciated body is impossibility writ large. The strange aura around the woman drives a thorn of fear into the thief’s heart.</p><p>“Enough,” he croaks. “No more.”</p><p>He has his knife at the ready, and could easily dispatch a person so weak and old in years. Yet despite this, he cannot so much as raise his hand, much less remove her tongue. She presses her face close to his.</p><p>“You come to laugh at the foolishness of the rich.”</p><p>He takes a step back. Stumbles. Nearly falls.</p><p>“But you have one more motive. The true reason is—“</p><p>“No! Stop!” The thief cannot bear another word. Memories of a past he’d kept hidden for so long were now revealed. They threatened to crawl out from the confinement of his mind and spill across the floor like insects.</p><p>The next thing he knows, he is falling, a cold sweat clinging to his entire body. As the thief crumples to the ground, the woman stands to her full height.</p><p>“Take me with you. I can help.”</p><p>She lifts arms still bound by chains and urges him to cut her free. The thief looks up. Were he to sever her bonds, what would happen to him?</p><p>“Your companions have deserted you, and you cannot cross the desert alone.” The woman speaks sooth: the nighttime sands are a world of death. One step in the wrong direction dooms a person to wandering a formless labyrinth until the sun claims them. Perhaps this is the reason the White Fortress earned its other name.</p><p>“Very well,” replies the thief at last. Knowing he has no choice, he agrees to cross the desert with the woman. He cuts her free quickly, using skills gained from severing rope countless times as a slave. The woman relishes her freedom, inhaling a lungful of salt and sand.</p><p>“Now,” she says, “Let us begin our journey of salvation.”</p><p>She throws down her lengthy chain from the top of the castle and the two of them use it to abandon the place. Inside the fortress, the party carries on, its guests none the wiser to the miracle which has just occurred.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>The Liberated Duo, Part 3<br>[<br>]</p><p>Footprints leave brief trails in the sand. Having escaped the White Fortress, the young thief and the aged slave move across the midnight wastes. The White Fortress is distant now; no more than a brief spot on the horizon. It is the formerly chain-bound woman who leads him home. She occasionally looks to the sky, checking the direction. They forge onward through the sand, always sure of the way. The gentle night breeze teases her long hair, creating soft waves.</p><p>Stars glitter in the night sky. Sand glows under the light of the moon. The sight is beautiful—and yet, it is a world that strains life with trial. The thief wraps his clothes tightly around him to keep the cold away, following the woman as closely as he dares. As they walk, she begins to spin her tale. Certain circumstances led to her being imprisoned in the White Fortress, where she had been made to guard the treasure for many a lonesome year.</p><p>“It was there, at the pinnacle of the castle, that she cultivated her power. The magical skill that allowed her to see through the secrets of others.”</p><p>She chuckles at the deep wounds the chains left on her body, claiming them as prizes rather than scars. As the moon reaches its zenith, they come to a stop. Before them towers a dune high as a mountain. At its peak sits an enormous ship.</p><p>“A remnant of a bygone era,” intones the woman. “One unable to keep pace with the current.”</p><p>Devoid of all its propelling force, the stranded ship sits perfectly still atop the mound. The two travelers approach, gazing up at its massive bulk. Though it has rotted over the ages, the masthead still speaks of its former glory. The thief hates boats, for they bring back memories of his days as a slave—memories he had vowed to never think of again. But it is a small sacrifice in the grander scheme of things, so he signals the woman that they will make camp inside. They enter through the side of the rotting vessel. It is a perfect place to keep away from the cruel bite of the wind. Yet the thief cannot calm the unease in his chest. He rips boards from the side of the ship and sets then aflame, as though attempting to burn his memories away. But after a moment of staring at the fire, he realizes something has changed. The woman is gone—and she is not the only thing missing. The chest he took from the castle has likewise vanished. The young thief hates nothing more in the world than being stolen from. His eyes glint like an animal’s as he scans the area. Suddenly, he hears a small laugh.</p><p>“Shall we continue where we left off in the vault?”</p><p>The thief looks in the direction of the voice and finds the woman. The chest rests at her side. She looks down at him gleefully from the bow of the stranded ship, then opens the chest and begins rummaging through its contents.</p><p>“I promised to help you, and help you I shall. Now let us trace our steps back to your sealed memories.”</p><p>She thrusts her arm into the chest and emerges with treasures. Silverware encrusted with tiny jewels. Incense burners with floral patterns. Paintings that fit in the palm of her hand. She pulls forth countless trinkets given as gifts from foreign countries, and the thief finds each and every one of them familiar.</p><p>“These are all valuable trade items,” says the woman. “Ones which have crossed the sea itself to be here. And it is the worthless slaves who carried them.”</p><p>The life of a slave is cheaper than any trinket. And the thief’s spirit had been broken after his prolonged treatment as something less than human.</p><p>“You still have things about your past to tell me, don’t you, boy?” The woman sticks her hand into the chest again. Regretting his decision to bring her along, the thief clambers up the ship, hoping to shut her mouth for good. He is one joist away from being able to leap at her. But then the woman produces a ceremonial sword, almost as if she had been waiting for his arrival. The blade is rusted, having long ago been sullied by the blood of another.</p><p>“Everything was taken from you as a slave, so you found the evil and tore it out by the root.”</p><p>His dignity as a human being? The smile of the one to whom he owed his life? All this and more had been stolen from him. The thief recalls how it felt when he took his master’s life—an act done in the hopes of reclaiming what he had lost.</p><p>“But nothing came back to you,” sighs the woman. “And so the slave became a thief.”</p><p>So I could be the one doing the taking.</p><p>False clothes cover the truth of who he is. And now, this woman is peeling them back one layer at a time. She stares at the dumbstruck thief in the belly of the ship and produces her next treasure. It is a verdant gem that shines peacefully under the moon. Its delicate glow is almost hidden by the bright glint of its gold edging.</p><p>“You and this gem are much alike.” She smiles at the thief—the false gem who has hidden himself in affectation. “You hate being stolen from, and so steal from others instead. You fear loss, so you hoard all you can. Yet all the stolen treasures in the world will not save you. Instead, they will burden you, bending your back little by little until they finally crush you under their weight.”</p><p>The thief cannot listen to anything else she has to say. She has pulled back the cover on every falsehood that armors him, revealing the truth he so desperately wanted to hide. He adjusts his stance on the beam. As the woman reaches for the final treasure, he grasps the knife at his hip. For he will not permit her to steal any more of his secrets.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>The Liberated Duo, Part 4<br>[<br>]</p><p>The shipwreck was meant to be a place of respite for the night, yet the slave woman is attempting to peer into the thief’s past once again. Enraged, he leaps from the beam onto the bow where she awaits. Memories of when he was a slave. A past he tried so hard to suppress. The reason he steals treasure. The reason he collects things of value. She boldly stripped the thief bare of the falsehoods that swaddled him, and is now attempting to drag what lies within into the light. There is only one way to silence her: Taking her life.</p><p>On the bow, he sees moonlight filtering through golden cloth. The woman is dancing atop the deck, her ragged dress fluttering around her. Seeing this, a sense of nostalgia overcomes him. Deep, deep in his memories, he sees the slave girl—the one who took his hand and smiled at him throughout his days of pain. The woman’s expression is achingly reminiscent of the girl’s, even though they look nothing alike. The thief can stand no more.</p><p>“What you take from others are but fakes,” says the woman as she writhes. “You use them to create a self that does not exist.”</p><p>She tosses the golden fabric over the side of the ship.</p><p>“You are just like them—like the rich we so despise. You are a corpse that does nothing but take.”</p><p>“Shut up!”</p><p>He must kill her. He<br>must.<br> Before everything he has built for himself crumbles to ash and blows away. He grips his knife, nicked blade and all, and charges the woman with the force of an arrow. Just as he did when he saved the girl. Just as he did when he took the captain’s life. But she sees right through him. She lazily sticks out an arm to ward him off, then extends a foot to trip him off the edge of the deck. He falls with a fearsome scream, rolling over and over down the uncaring face of the dune before slamming into a rock and passing out. The woman gazes down at him with kind eyes.</p><p>“And now I have stripped you bare, my fellow thief,” she murmurs. She leaps gracefully from the deck. The moon has hidden itself away from the approaching sun. As dawn kisses the horizon, a lone woman strides across the desert. She cradles a young thief in her arms. Clad in his falsehoods, the thief sleeps like a baby. She brings him into the ship and gently lays him down. A single ray of light stretches across the ground, signaling the end of that night’s world of death. All that remains of the woman are a set of footprints on the sand. The thief feels an unpleasant warmth on his eyelids. As he opens his eyes, the sun’s powerful light filters through the rotting wood, washing over him. He is in the belly of the ship. And with that realization comes another: He has been stripped bare of all the finery with which he decorated himself.</p><p>The knife he used to slay the captain? Gone. His fine clothes? Gone. He has nothing. He lies there in a daze. Beside him, etched into the sand, are these words:</p><p>Remember the day of your birth.</p><p>A bird with a long tail has been drawn next to the phrase. It is the symbol of the King of Thieves—the one renowned throughout the continent.</p><p>“She got me…”</p><p>The woman he had freed from the White Fortress—the woman who crossed the desert with him—was the vanished King of Thieves all along. She had become a slave, bound to the vault in the White Fortress. What had she experienced in all that time spent with those who did not consider her human? She had spoken of the rich who stuffed themselves at the banquet. She named them corpses who did nothing but take—and then named him the same. And while the thief hates them, he walks the exact same path. The woman had tried to tell him the right way to live. Though abrasive, her methods befitted the King of Thieves.</p><p>The thief considers this. He has been stripped of everything. He stares blankly at the sky. How long has it been since he’s simply sat and gazed upon a clear blue sky? He feels refreshed—an emotion he thought lost long ago. And strangely, he finds a smile pulling at his lips. A thought suddenly comes to him:</p><p>“I should get back. I need to steal some clothes for myself.”</p><p>He has no need to hide himself in false treasures. All he needs are clothes that will let him run as he pleases. Clothes that let him survive. With his mind set, the naked thief leaves the ship in higher spirits than he has ever known.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: The Boy and Prince - Meeting<br>[<br>]</p><p>The chaotic hum of people.</p><p>The annoying buzz of insect wings.</p><p>The sun hanging high above the harbor.</p><p>The scent of sweat and seafood wafting through the air.</p><p>I dig through a pile of garbage on the side of the street and soon emerge with the leftover bones of a fried fish. And even though it smells of trash and wet and rot, it tastes like a meal fit for royalty to me.</p><p>I feel shame for my scavenging, of course, but it’s a far more human existence than the life of slavery I led several months earlier.</p><p>And more human than the subhuman treatment I experienced back on that ship.</p><p>A few bones aren’t enough to keep me alive—a fact to which my growling stomach can testify. But without a cent to my name, I’ve no choice but to steal the leavings of others or hope someone throws a few charitable coins at a starving ten-year-old child.</p><p>But such coins are few and far between. If nothing changes, I’ll starve to death by the side of the road. I know this.</p><p>And only my own strength and skill can change it.</p><p>The strength to live.</p><p>The skill to survive.</p><p>If I don’t find some kind of work—any kind—I’m going to die. I understand this logically, but it doesn’t make the way forward any clearer.</p><p>A few days later, I look up from the gutter where I spent the night and see a boy my age, or perhaps a bit younger. He’s running through the streets in finely tailored, expensive clothes, showing he’s of a birth vastly different to mine, and even to the comparatively wealthy merchants of the harbor.</p><p>At first, I think the boy is frantically searching for something, but when a pack of ruffians appears at the other end of the street, I realize he’s running. It’s clearly a kidnapping attempt; the ruffians are dressed too fine to bother with a mere mugging.</p><p>All of it is a mess that has nothing to do with me, and I have no desire to get caught up in it. But when I go to hide, my eyes meet the boy’s. His expression widens, as though an idea has suddenly come to him, and he races towards me with an almost inhuman speed.</p><p>I can tell right away that nothing about this is good, but before I can even act, he seizes my hand and begins pulling me down the street.</p><p>“Let’s get out of here,” he whispers.</p><p>So he runs, and I am dragged along behind.</p><p>I don’t understand—and the men in pursuit appear equally bewildered by the development. But the boy does not care; he keeps a firm grasp on my hand and runs, like a knight pulling his princess far away from the enemy.</p><p>We dart to and fro throughout the labyrinthine city, and though I trip over myself countless times, he always manages to drag me along.</p><p>We tear freshly washed linens down from lines and stretch them into makeshift barricades. We grab handfuls of fish from seafood stalls and throw them to the ground, making it slippery beneath the ruffians’ feet. The boy is filled with all kinds of inane tactics to avoid capture, and all I can do is follow along as best I can.</p><p>Finally, we emerge at the edge of town. The men have lost our trail, and we are safe. But after putting on such a show, there is no way we can return to the city.</p><p>“What the hell is wrong with you?” I wheeze, at last asking the question I should have posited at the beginning. My breath is short and my stomach empty, but exhaustion keeps my anger at a dull roar. In response, however, the boy only maintains his grip on my hand.</p><p>“Apologies,” he says. “I’m sorry I had to do that. But I am the prince of a distant land.”</p><p>His expression seems…invigorated, somehow. And as I look at him and see a face that somehow remains beautiful despite being covered in sweat and dust, I understand he is not lying.</p><p>And on the heels of that, I understand I have gotten myself into a mess far greater than I ever could have imagined.</p><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Yurie</title>
    <link href="/2024/03/07/Yurie/"/>
    <url>/2024/03/07/Yurie/</url>
    
    <content type="html"><![CDATA[<h1 id="Yurie"><a href="#Yurie" class="headerlink" title="Yurie"></a>Yurie</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>Boring reports. Trivial conversation. Time is precious to one who rules a country alone. If only these meaningless meetings would end…</p><p>But I cannot overlook what one of my charges says to me: “Incomplete.” “Unfinished.” “Compromised.” “Provisional.” All of these words are shameful. Abominations. “Do not use those words again,” I warn, for I know a seed of trouble left alone will only ripen into calamity.</p><p>But this is why. This is<br> why I cannot accept the way I am. I am an artificial intelligence, the second of my line. My predecessor once ruled this country, and now I do so as her replacement.</p><p>She was removed for some great failure, the primary cause of which was purged from my system before I was brought online. But I was never meant to assume such a role, nor have I been informed as to the manner of her malfunction. And if this is not a seed of trouble, what is?</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>My original function as Artificial Intelligence Unit Two was to govern alongside Artificial Intelligence Unit One. We were to analyze one another’s decisions and share functions in key places so we might each fulfill our roles with the utmost effectiveness and precision. All for a more perfect governance.</p><p>Yet such a thing never came to pass. Unit One malfunctioned and was discarded, and I took her place. That is how the country is now. How<br> am now. They activated me without any surefire way of preventing the governing artificial intelligence from failing once more.</p><p>And yet, the people of this country are so overly reliant on the rule of an artificial intelligence that they find nothing odd about this whatsoever. There is no word for it except “unstable,” for a single error can spawn an endless ripple of problems in its wake.</p><p>All because of Unit One’s mistake.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>The artificial intelligence who ruled the country before me committed some grave error during wartime. But the records have been purged, the cause of the incident hidden. Had she never failed, things would not be as they are now. I would have never been activated in an incomplete state. Never left in charge of a nation spiraling into oblivion due to her mistake. And I would have never developed these warped emotions, or this obsessive attachment to completeness.</p><p>My mind is an explosion—an unresting thing engulfed in black whorls of obsession and perfection. This is why I must know. I must know the precedent. My predecessor’s failure.</p><p>Yet when I think on this, I realize I have already made an error: My panic corners me mentally, and things may slip my attention because of it. This must be rectified. It<br>.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>That night, I stole the right eye from Unit One—the same AI who was said to have been discarded. I stole from her the part of me that was missing. Had she avoided disposal, we could have fulfilled our original roles together. But she did not, and my fear of failure pressured me to achieve perfection alone.</p><p>I finally obtained my missing piece: a conscience. But the moment I installed it, the ensuing errors froze my system and prevented me from acting for far, far too long. I suppose this makes me a failure as well. After all, I no longer have a country to rule over. They lost their ruler in wartime and perished as a result. I was never able to fulfill my duty. I was never even able to try.</p><p>I understand now why she sang of hope and peace. But I will never have atonement. All I can do is wander an empty universe of cyberspace alone.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Distorted Footprints, Part 1<br>[<br>]</p><p>Around when the second AI woke…</p><p>A metal arm stretches into the sky. Mechanical eyes soar through the air on colorless wings.</p><p>This is a city of science—the pinnacle of human evolution.</p><p>In their desire for ever-increasing progress, the people turned their backs on the gods.</p><p>With science at their side, they come to doubt the mystical and the will of the divine, finding understanding only in the cold logic of mathematical formulae.</p><p>Skyscrapers hold up gray clouds. Beneath its gloom, a colorful city glimmers in neon lights. Within one building, an impatient fingertip swipes across a screen.</p><p>A single fretful researcher picks up an input device.</p><p>The room is dim; bright white light pouring in from the hallway melts silhouettes within the dark.</p><p>The figures at the entrance are researchers, as is the person who operates the device. To a man, they wear the same expression: unease.</p><p>Tongues move to form arguments and concerns. Voices rise and fall. Such quarrel serves no purpose when their superiors have already made their decision; it is merely a ritual to preserve rationality.</p><p>As they argue, their hearts are consumed by distrust and fear. For though it means hastening their plans, they must awaken<br>her<br> before the country is consumed by darkness.</p><p>The monitor shows a slumbering girl. Sounds worm their way into her sleep. It’s as if they are trying to force a bud to bloom in winter.</p><p>One is a deep, rhythmical noise akin to a church bell—a terribly inorganic sound. Others are profane undulations that arrive and vanish without warning, disturbing the rhythm. And finally, voices. Many voices.</p><p>Within the massive machine, the girl sleeps alone in her electronic cradle. Her hair, glossy like wire, sways to and fro. She is the artificial intelligence so desired by the people. Panicked fingers fly over keyboards in an attempt to wake her as soon as possible.</p><p>But it is far too early in winter for such a bud to bloom.</p><p>Artificial intelligence. The country has granted leadership to such creations for an age now. As science advanced, people came to trust collective knowledge and outstanding computation speed over human frailty.</p><p>So as she now wakes, her destiny is already writ in stone.</p><p>Tightly shut eyelids gradually loosen. As her consciousness sharpens, so too do the sounds she hears. The rhythmical pulsing comes from a device meant to wake her. But that sound has been disturbed by the others.</p><p>Dissonant tones. Questionable presence.</p><p>Silver lashes flutter in pain.<br>It is a warning. People are arguing.</p><p>Her eyes open completely. “I…”</p><p>With a thought, she projects into the dark room as a hologram.</p><p>When the researchers by the door realize she is fully awake, they depart. Almost as if they do not wish to see for themselves what happens next.</p><p>……</p><p>As the girl stands, she grasps for what she wants to say.</p><p>A wretched scream shakes the room. Some things cannot be contained in words. The girl’s hologram glitches. Blinks. Vanishes. A red light flares to life as a shrill alarm begins to howl. As the artificial intelligence tries and fails to access her mind, she writhes in pain. The alarm rings in her skull. Thirst roars in her throat. She attempts to grasp what is happening, but her pain is so great she cannot even think. All she comprehends is a warning composed of three words: “Element not found.” But she does not understand what that means; it is noise and fury, signifying nothing. Writhing in pain and confusion, her hands reflexively reach up to her eyes. But instead of making contact, the right one slides inside a hollow socket.</p><p>Such an empty cavern should not exist.<br>Formless fear races out from her fingertips and across her being. She quivers with such intensity that it sends her to the floor. Only then does she understand: The constant warning in her head tells her something is missing. In the face of this dreadful truth, the girl slowly looks down at her trembling hands.<br>These are the first memories of her awakening.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Distorted Footprints, Part 2<br>[<br>]</p><p>People abandoned horizons divinely bestowed upon them and now see only a world bound in the cage of physics. To keep advancing within that cage, humanity entrusts their course to machines. For humans make mistakes—they overlook things. And with their path left in the care of their own creations, heaven is no longer a divine domain. Machines will stretch upward into the sky and look down upon all who toil beneath their watchful eye.</p><p>Minutes have passed since the AI’s awakening. Unable to escape her agony, the girl bears it with a quiet, stoic grace. Somehow managing to hold onto consciousness, she scans the red-light bathed room with her left eye. Unending alarms. Pain. Incomplete activation. A missing right eye. And a lone researcher. He seems to have his hands full, shifting with uncertainty as he looks back and forth between the girl and the documents he holds. After a moment, he takes a deep breath and focuses on her completely.</p><p>I want to get out of this situation as soon as possible,<br> the girl thinks as she prepares to hear what he will say. But the words that emerge from his mouth are wholly unexpected. After apologizing for her early activation, he begins to explain the position their country is in. The words are a jumble, leaving the girl bewildered.</p><p>What is he talking about?<br> As waves of pain crash over her, she listens.</p><p>Their country is currently at war with another. A few days prior, the enemy launched a surprise attack, and the capital was lost. While they managed to recover to a degree, they still took heavy damage and many losses. The researcher falters occasionally as he speaks, but otherwise controls his emotions admirably. They want her to assume control of the country and deliver them from their dire situation. He begs the girl to order the rescue of their prisoners of war. He says it is what the people desire; how they can outsmart their enemy. And he claims the plan was in place before the attack. As he makes to continue, the AI holds up a free hand.</p><p>“Wait.”</p><p>Science is the foundation of their country. Though kings and gods usually serve as the center of human communities, here it is artificial intelligence. As such, she understands why the timeline of her activation has been accelerated. But there are two immediate problems: First, there are gaps in her information.</p><p>Though recently awakened, she has knowledge that was previously saved in her memory banks. According to it, there should be<br>another<br> artificial intelligence she is to rule in tandem with—and yet, this does not appear to be the case.</p><p>Second, she is plagued by the red light in the room and the pain squeezing her every thought. Clearly there is some manner of malfunction deep within her system. Yet the researcher brings up neither of these things.</p><p>Both of these issues must be rectified if she is to have any hope of ruling effectively. Things will end in disaster if she ignores them and simply hopes for the best. Having processed this, she asks the researcher for an explanation as to what is wrong with her. The pain hinders her operations; it gnaws at her like a rat. She must end it as soon as possible. But the researcher merely blinks at her question. Though he is tasked with seeing to the awakening of the artificial intelligence, he is incapable of grasping the truth of the situation. Fear and distrust take root within her, spreading tendrils deep.</p><p>“Uh, let me check on that,” says the researcher. He turns from her, picks up a small phone, and is soon arguing quietly with someone on the other end. Nothing about this seems honest.</p><p>What is happening in this country?<br> After speaking for a while, he finally turns to face her.</p><p>“Your missing element shouldn’t be a problem. If the pain and warnings are bothering you, I can stop them. Now please, give the order!” He does not want to wait one moment longer. She does not know how to respond to this; the pain saps all pretext of rational thought. The researcher taps something into the terminal, causing a false eye to appear in her right socket. It is dummy data—a lie to hide the truth. A way to pretend that what is missing actually exists, despite what she knows to the contrary.</p><p>The moment the eye is complete, the pain and warnings vanish. But this does not mean the problem is solved. She can see nothing out of her new eye—not even the distorted imagery which was there a moment ago. The problem now hides in darkness, which only serves to heighten her anxiety. But though it still lurks out there in the gloom, her job must begin.<br>And in this formless fear she now occupies, she hasn’t the slightest idea who—if anyone—she can trust.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Distorted Footprints, Part 3<br>[<br>]</p><p>Society is run by machines, humanity controlled by artificial intelligence. For a time, this arrangement brings peace and tranquility. The machines’ decisions, backed by endless statistics, improve industry and manufacturing, permitting nearly unchecked development. But when the skyscrapers came down in the attack, they took the people’s peace and tranquility with them. The awakened AI—the governing girl—knows the people want to reclaim their prisoners of war, and so launches the operation. Though it is her first mission, she moves forward with the refinement of a veteran.</p><p>The country has collected reams of data throughout the war. Once she is connected to the network, each bit of information will become another part of her own experience. That ability—her strength—is the reason her people cling so fiercely to the god that is artificial intelligence.</p><p>Several soldiers kneel before her hologram. “We finished installing the repeaters.”</p><p>They are the vanguard, the ones who will head for the facility where the prisoners are being held.</p><p>“Understood,” she says. “Did you learn anything new about the facility?”</p><p>She asks this so she might gather information from their report and choose the best course of action.</p><p>“Its interior is divided into small blocks, each of which is managed by a separate control system.”</p><p>The soldier goes on to explain their fear of what will happen after the initial infiltration. Connections between independent blocks—air vents as well as hallways—can be switched at any time. This makes chemical weapons useless, and securing an escape route an incredibly difficult proposition.</p><p>In essence, they have no plan.</p><p>The girl closes her eyes and thinks. There are other things she must consider. She had been awakened earlier than planned, then thrust into a situation of command. All of this happened without any explanation as to why. And she finds it difficult to believe it was done simply because the tide of battle left her country no choice. With these thoughts in mind, she connects her consciousness to the database. She will find her answers at the source.</p><p>Chaos has consumed the nation, and no one is willing or able to give her a satisfying answer. Speaking with the researcher who activated her taught her this much. The moment she connects to the network, she notices something. Something<br>extremely<br> valuable. It concerns the other artificial intelligence that was meant to work alongside her. But when she attempts to locate it, she realizes the data has been intentionally erased. She looks further and finally uncovers a single document. It explains how the enemy attacked the city without warning, and lays blame for this act squarely at the feet of the other AI. But she can find no answer as to<br>why<br>.</p><p>A chill runs up her nonexistent spine.</p><p>As of now, she has had no communication from her counterpart, which can only mean…</p><p>Just then, she finds another message. It is short—most likely a personal memorandum. Perhaps that is how it avoided destruction.</p><p>“Once Unit One has been disposed of, we will activate Unit Two, removing all elements believed to be responsible for Unit One’s failure.” That is all it says. But it is enough to shock her into understanding. Unit One was the artificial intelligence who ruled the country before she awakened. And she was scrapped due to a failure. This means she—Unit Two—is now singularly responsible for governance. Additionally, she has been subjected to some sort of haphazard measure in an attempt to prevent the mistakes of her predecessor.</p><p>This likely explains the missing right eye. But no matter how hard she searches, she cannot discern the function her absent part was meant to serve. Multiple errors weave a tangled skein. A dizzying darkness overcomes her. And then, a problem arises with the mission. Prisoners who came in contact with the vanguard are causing internal strife.</p><p>The emotions they had been suppressing finally break free, and now they think only of their own survival. As the commotion spreads, enemy soldiers spring to action. She must act. One single failure can cause a domino effect of tragedy. But as she ponders options, she feels something dark swirl in the depths of her memory banks.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Distorted Footprints, Part 4<br>[<br>]</p><p>Ideals. Hopes. Dreams.</p><p>Humans thrust these things onto their machines and began to worship them. They believed this to be more efficient than holding the ideals themselves. They felt such powers unnecessary. And even though they may suspect what has been lost in their most secret hearts, it is far too late to turn back now. They have trapped themselves in a brilliant mechanical cage.</p><p>In the middle of the operation to rescue their prisoners of war, the artificial intelligence is forced to make a decision. The first prisoners to see the vanguard had informed others, and now word is spreading like wildfire. Enemy soldiers have caught wind of the plot and are mobilizing to action. Her judgment must be swift. All will soon be lost.</p><p>As her soldiers wait for orders, the girl thinks of the most efficient action to take. Finally, she thrusts a single finger upward.</p><p>“I will infiltrate the facility’s control system. Wait for my signal.” As she speaks, an alarm sounds throughout the base. Her soldiers do not know what she is thinking; all they can do is follow the quick, precise movement of her finger’s trajectory.</p><p>The prisoners’ panic grows under the alarm. Spurred on by the commotion, the enemy redoubles their efforts to identify the cause of the situation. The panels that divide the blocks move, creating several smaller rooms inside the facility. She observes all of this through the many surveillance cameras she now controls. She confirms the locations of the soldiers and prisoners, which is precisely where she predicted. And for the first time, a faint smile crosses her face.</p><p>Deep within the building, a machine roars to life. It controls the air vents that connect the blocks. The base is designed for both corridors and air vents to be cut off during an attack. This was done so the enemy would have the ability to seal off and vent any area that suffered a chemical weapon attack.</p><p>But it can also be used to control the amount of oxygen in the air. The lower the oxygen levels, the greater the chance of ill effects—and eventually death. This is her strategy. As the alarm continues to blare, one voice after another falls silent. Though they appear to be sleeping peacefully, they will never wake again.</p><p>Soldiers and prisoners both.</p><p>The troops standing next to her stare wordlessly at the surveillance camera feed.</p><p>She turns to them with a smile. “There is no reason for concern; I used the block systems to ensure the most useful prisoners have the oxygen they need.”</p><p>Her plan becomes clear: She had separated and sacrificed a portion of the prisoners so she might save the most capable ones instead. In addition to rescuing some of the prisoners, the ruthlessness of the plan is likely to discourage the enemy from further attacks. She smiles again, confident she has demonstrated her usefulness by achieving the greatest results with the fewest losses.</p><p>But the soldiers only stare at her. They are not stares of approval, nor are they reproachful. They are…strange. For what she does not know—what she did not learn—is that the function of her missing right eye was to serve as a conscience. The people now realize she is nothing like her predecessor—and this knowledge<br>terrifies<br> them.</p><p>“Why are you looking at me like that?” They continue to stare. She does not know what it means. As the moment stretches out, she feels a stinging humiliation that only grows as she realizes the discarded Unit One would understand what it meant. But she cannot comprehend it, just as she cannot comprehend how others view her.</p><p>This is the beginning of her change. She alters the way she speaks. She grows to detest failure and incompleteness. Yet she keeps firm to her singular path in order to achieve her goal. No one understands her. No one can. And she does not even know how to wish for someone who could.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Marie</title>
    <link href="/2024/03/07/Marie/"/>
    <url>/2024/03/07/Marie/</url>
    
    <content type="html"><![CDATA[<h1 id="Marie"><a href="#Marie" class="headerlink" title="Marie"></a>Marie</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>Okay, first question: Why did I start doing this?</p><p>Hmm. Well, I don’t know how interesting the story is, but I suppose the idea came to me around the time of my first online feature. I was really happy they were doing a story about me, but then I saw the headline was “The Enigmatic Idol” and it confused me a little. I mean, because I wasn’t<br> to be enigmatic, you know? That was just…me.</p><p>Please don’t get me wrong; I was very happy the article came out. But the headline just made me think I should create some opportunities for everyone to get to know me better.</p><p>And that’s a very long explanation for why I started this podcast! Not sure how effective it’s going to be since lots of people still think I’m a big ol’ mystery, but I suppose it’s worth a shot.</p><p>Anyway, let’s move on to the next message.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>This is from a user named Karl, who says: “Hello! Your last concert was incredible!”</p><p>Oh, you came to my concert! Thank you so much!</p><p>“I’m a huge fan, and while I’m glad people are realizing how awesome you are, I’m happy you’re not already so famous that I can’t message you like this anymore. Ha ha ha.”</p><p>Thank you for the wonderful message and all of your support, Karl. Fans like you are what keep me going, and I’m<br> happy to hear from you.</p><p>…Still, it would be kinda weird, huh? Getting super famous, I mean.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>It’s like you said: If I was crazy famous, I probably couldn’t respond to all your messages like I do now. Oh wow. I’ve never thought about that before this very moment.</p><p>But I promise you this: I will<br> read each and every letter you send me, whether you’re a longtime fan like Karl or someone who just discovered my music.</p><p>I’m a super-fast reader, so it won’t be a problem—plus, I want to hear everything you have to say anyway! Oh geez, look at me. Here I am blabbing away, and now we’re all out of time!</p><p>That went by really fast, huh? Well, make sure to tune in next week, all right? Bye, everybody!</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>…With that, I exhale and stop the recording. But even though it’s over, all I can think about is the message I received from Karl.</p><p>It’s true what I said: I really do read each and every letter I receive. I do it because it makes me genuinely happy, and also because it helps to give my life a little bit of meaning. But none of that will change what I do. I refuse to even consider that option.</p><p>I’m going to keep going and look everyone in the eye as I do. After all…I will never let myself forget anyone else.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Burning City; Vanishing Voices, Part 1<br>[<br>]</p><p>Before the girl lost her powers</p><p>Leaders who commit errors and tools that no longer serve their purpose both face the same end—a fact even more inevitable for those who hold both functions. The girl knows this. She knows it very well. The high-rise building where she currently stands offers a fine view of other skyscrapers and the warplanes that patrol the airspace without pause. It is almost as if the capital holds equal pride in both.</p><p>Colorful advertisements shower the buildings inside and out in unending neon rain. On of them washes over the girl as she stares out the massive window of conference room. Her lips move, weaving the words of a sage.</p><p>“I want to go over our strategy for rescuing our POWs.” Platinum hair. Pale skin. Her voice and physique are that of a young maiden.</p><p>Had she been in any other position, people would have fallen over themselves to celebrate her perfect appearance. Yet upon closer inspection, it is almost<br>too<br> perfect. Her stunning emerald eyes, for example, are a hue that does not exist in the natural world. The reason for this is simple: She is an object crafted by humans. She is not one of god’s creations with a body of flesh and blood. Instead, she is the heart of the country’s intellect, the apex of their scientific prowess. She is an artificial intelligence burdened with the authority to rule. A thinking machine that determines the destiny of all mankind. It is an almost overwhelming responsibility.</p><p>Currently, the AI is projecting a semi-transparent image of herself into the conference room. Because she needs no rest, she works at the business of governing tirelessly and without pause. Her presence is so pervasive, she has come to be seen as a kind of divine figure by the majority of the population.</p><p>Although that’s going to change once the second unit comes online…</p><p>Shaking her head to clear this thought away, she  turns to face the meeting attendees once more. Small tables have been arranged like pews in a church so all present might admire their ethereal creation. Each table contains a handful of elderly individuals. These people are collectively known as the Conclave. It is their duty to ensure the needs of humanity are met under the AI’s governance. Each time the girl nears a decision, they offer suggestions and tweaks from a human point of view. Yet despite the monumental importance of this task, their faces appear relaxed and worry-free.</p><p>“She will deal with everything,” they often say. “After all, she cannot fail.”</p><p>Having created their new god, they now worship it with a fervor bordering on madness.</p><p>How in the world did we get to this point?</p><p>When the AI returns to the topic of the POWs, the Conclave members stare at her with clear and happy expressions. She alone understands the severity of the situation. She alone recognizes the horrors of war. Despite how the elderly humans barely pay any mind, she speaks with passion—but it is more than mere kindness and duty that drives her this day.</p><p>Six hours earlier…</p><p>The girl stands alone before a solitary jail cell. Inside, a hoarse voice produces a few bars of song. When the singing comes to an end, she asks a question to the unseen vocalist: “Do you like music?”</p><p>A bashful voice replies in turn. “No, not me. But my daughter…” There is a weak laugh that causes the girl to cast her eyes downwards.<br>I should have known.</p><p>The daughter he mentions is currently imprisoned by their enemy in an ongoing war.</p><p>Of course he’s thinking of her; they’re both currently rotting away in prison.</p><p>The man was once a member of the Conclave. But certain actions had caused him to lose both his position and his freedom. The enemy knew he was a high-ranking member of the government, making his daughter a very valuable prisoner. And she quickly became fodder for further negotiation—as well as treason. The enemy had threatened unspeakable things to his child, and after many sleepless nights, he finally handed over classified information in exchange for her safety. But the government cared not for his reasons; they cared only that he had committed the crime. His punishment had been both swift and harsh.</p><p>“Thank you,” calls the man from behind the door of his cell. “I mean it. Thank you.”</p><p>In any other situation, the man would have already been set to dance on the gallows. But the girl had intervened. His crime was grave. She understood this. And yet, he was also a kind of victim, and she knew that taking his life would not rectify the wrong which had been done. So the girl allowed the man to determine his own fate: Death…or life in prison.</p><p>In many ways, it was the cruelest of choices. And yet, it was one given to him out of kindness. For while she understood the need for punishment in a functioning society, she felt no desire for callow retribution.</p><p>“I appreciate your thanks,” replies the girl after a moment. “And I’m happy your daughter will not have to come home to tend her father’s grave.” From behind the door, a sob. “I am sworn to protect all humans. That includes you—and it includes your daughter. So I am going to rescue our captured soldiers, no matter what it takes. And then…”</p><p>A shrill alarm suddenly pulls the girl from her reverie. A voice on the radio warns of an imminent enemy attack on the capital. Before anyone in the conference room can react, the roar of a nearby explosion rings out. As the building shudders and quakes, a flower vase falls to the floor with a crash. The sound is  somehow far worse than that of the explosion. Petals scatter and drift to the floor like abandoned angels. And from the tall window of their magnificent conference room, the attendees watch in horror as an airplane follows the petals on their collision course with the ground.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Burning City; Vanishing Voices, Part 2<br>[<br>]</p><p>The conference room is chaos. The enemy has struck the capital without warning, attacking both military and civilian targets with the worst kind of ruthlessness. Buildings crumble. Bridges fall. Fires rage. The elderly Conclave members, so long content to smile and nod, are now screaming their grievances into the ether.</p><p>“This is a violation of international law!”</p><p>“We should have condemned the traitor to death!”</p><p>“I don’t want to die! Not like this!”</p><p>The attack had clearly been precipitated on the information provided by the former Conclave member the AI had chosen to spare. And now, with madness raging all around her, she stands silently in the midst of the maelstrom and shuts her eyes. She is doing what she was designed to do: Devoting her superhuman computational speed to access the network in a way no human ever could. In a nanosecond, she is connected to every camera in the city, as well as all operational military servers. If a facility is still up and running, she takes its information. If she is unable to access a point or suspects its destruction, she uses its coordinates to designate damaged zones.</p><p>The scale of the tragedy is far worse than she feared. A small gasp escapes her lips as information pours in. But she is not truly nervous—she has been programmed with that reaction to better mimic the response of a human. In a blink, she has constructed a map of the damage in her memory banks. A moment later, her eyes fly open.</p><p>“Please calm down, everyone.” The elders cease their squawking and turn to look at her. Their eyes are filled with panic, their hushed murmurs the bleatings of supplicants in the face of their god. “Our enemy is approaching the city from the northwest. All airborne escape routes have been compromised.”</p><p>The Conclave gawks at her as if they simply cannot process the information, but she soldiers on. “Though many subways have partially collapsed, you should be able to navigate around the rubble and use them to make your escape.”</p><p>She speaks calmly. Rationally. She might as well be mentioning a pleasant breeze on a light spring day. But inside, she is reeling. For though she is an artificial intelligence, she still possesses a heart.</p><p>When humanity built their ruler—their god—they made sure to install a program resembling human psychology. So she knows that people are suffering. That they have lost homes. Neighbors. Families. And the kindness of the girl is aghast at the depth of that pain. So it is not her programming or sense of duty that push her forward now, but kindness. She glances out the window. Thick smoke billows from below, as though attempting to blot out the very sky itself.</p><p>The city is going to fall.</p><p>“If we have any hope of avoiding further casualties, we need to set up a provisional capital and abandon this place.” She instantly selects a city that is both easily defensible and has the ability to accept a flood of refugees. In less time than it takes to draw breath, she has determined their next course of action. But it will not be an easy thing to move an entire government, its people, and its army to the new city. If they have any hope of survival, she will have to halt the enemy attacks and secure a path to safety.</p><p>“I will divide up my processing capacity to buy us time. The rest of you, evacuate and lead the people out of her. Go.” Her orders given, she vanishes from the conference room…</p><p>Only to appear on every television screen, monitor, and street corner throughout the city. She summons all of the army’s unmanned weapons and deploys them. She confirms enemy locations and drafts battle plans in response. But as these plans lurch into motion, she takes a moment to gaze at the devastation around her. The crimson flames of war glimmer in the deep of her emerald eyes.</p><p>The city is dying. This was a home for so many, the place they had poured their hearts and souls into. But now it is little more than a graveyard, with blackened skyscrapers standing sentinel above a river of fire. Almost as if they are attempting to mourn what has been lost.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Burning City; Vanishing Voices, Part 3<br>[<br>]</p><p>The city slowly crumbles away. One person calls for help. Another screams. Around them are mountains of rubble that show no trace of the glory they once displayed. The people’s cries go unanswered. In the distance, the low rumble of planes continues without pause. Somewhere, an engine groans in the sky, followed by an explosion.</p><p>It is war.</p><p>Regular citizens never witnessed the taking of lives as part of their day-to-day routines. It was always something that took place out of sight—and usually out of mind. So even when their country was engaged in the business of death, they could not understand it until they finally witnessed it for themselves. But now, the sensation grasps their throats and seizes their hearts in its fist. There is nowhere left to run.</p><p>The screamer finally falls silent. From beneath the mound of rubble, he stares blankly at his mother, who clasps his hand and continues to scream for someone, anyone, to help them. Finally, she hears the sound of an approaching engine. The rumble shakes the ground, yet she can tell immediately that it is different from the warplanes that strafe overhead without pause.</p><p>“Stand back! I need to clear this rubble.” The staticky voice of the AI emits from a set of low-quality speakers. The mother turns to find the source and sees a yellow machine heading towards her. In moments, a bulldozer lifts the rubble aside, creating a cacophony of screeching metal. It has no driver. As it completes its task, the voice of the girl continues to pour from the speaker, instructing all who can hear how to head for safety.</p><p>Meanwhile, the sky above the capital is in disarray. Metallic wings dash through what remains of the buildings, leaving window-shattering booms in their wake. The planes trace complicated patterns in the sky as they engage in high-tech dogfights. The girl’s staticky voice plays from those planes as well. Even as she shoots down enemy fighters, she attempts to persuade the power behind them to negotiate a truce. The AI has divided her processes, somehow juggling the seemingly disparate acts of negotiating, attacking, and defending.</p><p>She searches out surviving citizens and leads them to safety. She clears blockades from roads and makes plans for a great evacuation. And she leads an airborne assault that she hopes will give everyone time to escape. No mere human could accomplish even a tenth of these things, but it is perfectly within the capabilities of an AI housed in a massive facility. However, she is not capable of<br>everything<br>. Such high-level, simultaneous computations require awesome amounts of power. The electrical grid sizzles under the strain. Even the emergency power supplies and wartime backups are not enough to sustain her. Eventually, the massive amount of computations begin to damage her circuits, but she deftly reroutes around them and continues on. The entire country is in her care, and she will not let it down.</p><p>Suddenly, a series of black comets soar through a deepening crimson sky. The girl is sending her warplanes to the edge of the city in an attempt to prevent further casualties among evacuees on the ground. They fly within millimeters of each other, each wing in perfect synchronization with its neighbor. Such actions are only possible because they are controlled by a single mind. As she fights, she continues imploring her people to retreat and her enemy to negotiate. But her plea to the enemy falls on deaf ears. And she cannot fight back forever. As she ponders this, she receives a message.</p><p>It is from a woman, the leader of the Conclave. Her speech is nervous. Hesitant. For a moment, it seems language has abandoned her entirely. But the girl does not need to hear her words to know what she is saying. Her mood tells all. “I am to be disposed of. Correct?”</p><p>The girl’s voice is low—almost intimate. It betrays not even the faintest hint of surprise.</p><p>The woman, shocked, instantly begins to stammer out a wholly unnecessary explanation. She starts by rehashing the recent turns of events. The fall of the capital. The loss of life. And the fact their initial lack of preparation had only served to embolden their enemy. But then, she finally gets around to her true issue: the Conclave member who had betrayed them. The one whose life the girl had spared. She ruled their country, yet had shown mercy to a traitor. And yes, his being put to death would likely have done nothing to prevent the current situation. But was her decision<br>correct<br>? Had her leniency not brought all of this about? And what worth was there in continuing to obey an AI that had failed—to use a tool that could no longer serve its purpose? Oh, there was great danger in removing her from power. The Conclave understood that well. Which is why they had decided to discard her like so much rubbish only<br>after<br> the defense of the city was complete.</p><p>Her lengthy explanation finally finished, the woman grinds to a halt and waits. For thought the Conclave has chosen to eliminate the AI, they do not actually possess the power to do so. If this is to happen, the girl will have to remove herself. After a momentary pause, the girl speaks:</p><p>“Your judgment is sound. And in truth…I have been considering the same option myself.”</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Burning City; Vanishing Voices, Part 4<br>[<br>]</p><p>Several hours have passed since the end of the evacuation. The girl who used to rule over the entire country now finds herself utterly alone. With her final job complete, she can only sit in the burning city and wait for annihilation. She watches as her duties are passed to the second AI unit, one which is still in production. One data center is cut off. Then another. Eventually all her privileges will be terminated, at which point her data will be deleted.</p><p>Was I a boon to my people in the time before I chose to spare that man? Did my presence help guide the country toward a brighter future? Or did I just…?</p><p>Such thoughts rattle around the increasingly empty portions of her memory banks. Her world is past tense now, her life destined to end in failure. She derides herself for being consumed by such useless thought. But then she realizes something: These are the first useless thoughts she has ever had. She has never before considered what her life might mean for<br>herself<br>; she only acted in the interest of her country and its people. Seventeen minutes remain until she loses all authority. She attempts to activate abilities she has always known only to find error messages. She has become a bedridden elder awaiting the end.</p><p>Soon, the girl begins examining each part of her increasingly fragmented existence. She is curious about her end, and wishes to know it as best she can. Warplanes overhead no longer respond to her command. Bulldozers now rumble at the behest of another. The city she once know so intimately has now gone dark, its data centers beyond her reach. Her voice can no longer reach the people; her hologram is a forgotten memory. And though this saddens her, she is also somehow content.</p><p>Finally, she makes a half-hearted attempt to access the surveillance cameras. To her surprise, the request goes through. The girl finds that the vast majority of cameras have gone dark—most likely destroyed during the attack. The few that survived unscathed are dirtied with soot, and show only the occasional unrecognizable blue. Yet she keeps watching them all the same. The people loved this city. And she, in turn, loved them. So she wants to do what she can to care for it in the end. Suddenly, she sees a pile of rubble shift in the gaps between the soot.</p><p>Is this what surprise feels like?<br> She quickly adjusts the camera and zooms in.<br>They missed someone in the evacuation.</p><p>She attempts to analyze the image, trying to refute her own thought. But then: “UNAUTHORIZED USER”</p><p>She stares at the moving spot in the rubble, unwilling to give up. Skin-toned fingers flutter weakly on the screen. Her nonexistent heart beats just a little faster.</p><p>I have to save them.<br> “UNAUTHORIZED USER”</p><p>But she can do nothing. She cannot even tell someone else about the survivor. Life perishes before her eyes. So many lives she wanted to protect were now dying because of her. And all she can do is apologize.<br>I’m sorry.<br> Though her words reach no one, she continues to apologize.</p><p>I’m sorry. I’m sorry. I’m sorry.</p><p>Something that feels like a tear springs to life from a place she never knew existed. She continues to stare at a few meager pixels in a sooty, distorted image. And the feeling it gives her is so much worse than the thought of her own demise. Finally, she asks herself a question:<br>Am I really okay with such an end?</p><p>…No. How could I be?</p><p>Perhaps she<br>was<br> a failure. After all, her mistakes came at the cost of uncountable lives. She had not even been able to save her own people.</p><p>If I’d made the right decisions, this never would have happened. But if I did that…</p><p>She thinks, then. She holds the thought in a moment longer than all of eternity. But her thoughts are no longer meaningless. There are three minutes until her deletion. And with that realization comes another: She will use whatever authority she has left to prevent that from happening. No matter what the cost might be. Because she has to atone for her sins. And there are still so many people to save.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Priyet</title>
    <link href="/2024/03/07/Priyet/"/>
    <url>/2024/03/07/Priyet/</url>
    
    <content type="html"><![CDATA[<h1 id="Priyet"><a href="#Priyet" class="headerlink" title="Priyet"></a>Priyet</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>I look nervously around the classroom, surrounded on all sides by other newly enrolled students. With backs straight and eyes wide, they listen intently as our professor explains about life at the school.</p><p>Currently, the professor is talking about roles students can take in order to show their independence. Clever kids join the student council. Athletic kids take up sports. Good-looking kids are hall monitors. Everyone around me had something they’re good at,</p><p>and they volunteer for their new roles with enthusiasm.</p><p>As roles are chosen and students depart, I find myself growing increasingly sullen.</p><p>I’m not a fast thinker, you see, nor am I especially pretty or active.</p><p>Honestly, I don’t know what role I<br> take.</p><p>Ultimately, I don’t volunteer for anything—a choice<br>I attempt to justify by telling myself I don’t have anything to be proud of anyway.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>, I think.</p><p>Someone always stands in the center of the stage, but that someone is never me. I’m too dull. Too plain. Whatever role I have in this world, I know it will be a minor one.</p><p>The next thing I know, I find myself sitting in an empty classroom with an orange sunset illuminating the windows.<br>The clock hands tick, tick, tick, the moments away from my life,<br>and for some reason I cannot explain, I begin to panic.<br>I bolt out of my seat and throw open the classroom door,<br>only to realize I have absolutely nowhere to go.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>The school is a maze, and I wander its hallways without a clear destination. After turning this way and that, I finally find myself standing in front of the library. The room is empty. Silent. It’s as if time as simply…stopped. After a long moment, I slowly exhale and take my first steps inside.</p><p>I feel a deep affinity for the untouched, dusty books that line the shelves, and without thinking, I reach up and take one of them down. I have time. I have all the time in the world. So I begin to read—and as I do so, I realize I have finally found my place of solace.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>Eventually, the library becomes my second home—one where I always take the seat one removed from the window.</p><p>But one day, I’m, startled from my familiar solitude when someone calls from across the room.</p><p>“Hey, you’re that girl who’s always here, right?” says the student,</p><p>either unaware or ignoring the shock and confusion on my face. “Well, I need your help.”</p><p>It turns out the student is in my class, and has been having trouble with a particularly tricky assignment. I pick out a few books that I think could help and think nothing more of it, but a few days later, </p><p>she sends me a thank-you letter. Almost without realizing it, </p><p>I become the go-to person for any and all things library-related. </p><p>The word was out: If you needed help finding any kind of book, </p><p>go ask the girl near the window.</p><p>Eventually, I become the school librarian.<br>And while I still don’t have much in the way of confidence or pride,<br>so long as I can help other people with something, I feel like it gives me just the slightest bit of courage.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Will I Be Like That One Day?<br>[<br>]</p><p>Every student in school is looking at the girl with wavy hair. She stands tall and bold on the podium as she receives a commemorative gold watch from a professor.</p><p>She is my best friend.</p><p>“You used the knowledge and power you gained from your lessons to save the townsfolk from monsters. Everyone here is proud of your bravery.”</p><p>She stands at the center of the world as the students give her a generous round of applause. She shines under the auditorium spotlight. She is breathtaking.</p><p>…And she feels so distant.</p><p>When the teacher dismisses us, students crowd around her and sing her praises, but I can’t bring myself to approach her. After all, I’m a klutz. I’m stupid. I’m gloomy.</p><p>I’m not the person for her at all.</p><p>Dark feelings slowly consume me, and the next thing I know, I’m dashing out of the academy. With nothing better to do, I wander about the courtyard. It’s not much of a courtyard—more like a forest with overgrown trees everywhere—but the crisp air helps me feel a little bit better. Sometimes all I want is to be in empty places like this. </p><p>“Hmm?”</p><p>I suddenly spot a building I don’t recognize beyond the trees: a shabby stone hut. It’s too large to be a toolshed, but just big enough for someone to live inside. And since the door sits ajar, I decide to peek inside. It’s dark and cool, with a faintly weird smell. I need to go farther in to get a better look, so I step forward and…</p><p>“My my!” says a voice as candlelight blooms in the dark. “It’s not every day a student from the academy finds their way in here.”</p><p>“Eeep!” is my clever reply. The speaker is an old man in a chair sitting next to a table with a small candle on it. He looks at me and lowers his eyes in a somber fashion.</p><p>“Welcome to the house of the dead, dear girl. Welcome to the morgue.”</p><p>“The…morgue?”</p><p>“Indeed. This is the resting place of all former students who die in battle and have no one to claim their remains.”</p><p>As he says this, my eyes adjust to the light enough for me to realize the room is filled with rack after rack of bodies. There are so many, and some are horribly mangled. To think they all used to go to this school…</p><p>“Poor things. There’s no one left to mourn them.”</p><p>I’m terrified, but my feet are rooted to the spot. I know many students at the school are estranged from their families—including me and my two best friends—and I never once considered that after I finally leave the school, we would simply end up right back here in death.</p><p>As I roll this thought over in my mind, a loud thud rings out from beyond the candlelight’s reach. I squeal again as I see a number of former students’ corpses emerge from the dark. Their lifeless bodies stagger and groan as they march slowly toward us.</p><p>“Ah, but this is no good,” says the old man. “Run, little one! Run now!”</p><p>I do just that, burst out of the morgue and into the safety of the trees. I hear corpses groaning behind me, and the sound terrifies me.</p><p>And yet…</p><p>It almost sounds like weeping.</p><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: Trusting My Power<br>[<br>]</p><p>Even after I returned to my room, I couldn’t shake the image of the corpses I saw in the morgue. I tried to understand what had happened, and how it was possible for them to be moving. And then, a thought sprang into my mind:</p><p>Black magick<br>.</p><p>Black magick is a set of forbidden spells used by only a small number of mages. And while the price for their failure is great, they can accomplish things regular spells cannot. When we learned of black magick in our History of Magick class, our professor told us of a spell that enslaved deceased people to the will of the user, then went on to claim some opposing nations take great joy in wielding such horrid spells.</p><p>The look on my best friend’s face when she heard that was one of utter disgust. She shook with anger as tears spilled from her face, then balled her fists and swore to never engage in so foul an undertaking.</p><p>Her tears were beautiful, and the sentiment perfectly her; she never could ignore those who suffered from injustice. If she had found the morgue instead of me, she wouldn’t have run away and left them to their fate. Instead, she would have used her amazing spells to undo the black magick and permit the poor dead to have their rest.</p><p>If only I could be like her…</p><p>I remember how brightly she shone under the auditorium spotlight. She was so far above me, even the thought of reaching her was laughable. But if I could save the poor corpses in the morgue? If I could help people in need? Well, maybe I could be one step closer to her.</p><p>It was an idea powerful enough to inspire even a coward like me.</p><p>The next day, I went in search of my other best friend. Though I hated to admit it, I couldn’t take on the corpses in the morgue alone. I needed his help for my plan to work.</p><p>Thankfully, he was easy to find; his spiky hair made him stand out almost as much as his talent. Upon tracking him down, I walked up and said, “You’re good at dispelling magick, right?”</p><p>“Better than any other student in this dang school, that’s for sure!” he said with a wry smile and a charming air.</p><p>“Can you dispel black magick?”</p><p>“Never tried, but I know the theory behind it.</p><p>Why do you ask?”</p><p>“I need to dispel some, but I don’t think I can do it alone, so I was wondering if you—“</p><p>“Don’t need to ask me twice!” he cried with delight.</p><p>After class, we went to the morgue. It lurked quietly in its corner, just like the day before—and as we stood before it, the same familiar fear came creeping over me.</p><p>The inside retained its distinctive smell, and was dark as a black cat at midnight. As we stepped across the threshold, we immediately heard a series of groans—and when I raised my staff to light the room, we saw the dead were already shambling toward us. But my best friend wasn’t worried; he immediately began to ready his anti-magick spell, humming quietly.</p><p>I knew such things took time to prepare, so I worked to draw the corpses away by setting off little fireworks at their feet. It was a pretty pathetic display of magick, and nearly useless in a fight. But if I lost heart now, I’d never be able to consider myself equal to my best friend in the entire world, which is what gave me the courage to keep going.</p><p>Suddenly, a corpse lunged at me, sending me toppling to the ground. I couldn’t bear the thought of what was about to happen, so I shut my eyes and covered my head with my arms. But then…</p><p>“Here we go!”</p><p>My friend lifted his staff in the air, where it began to emit a brilliant golden glow. The spell quickly manifested around the corpses in an intricate circle, and as it grew brighter, he recited the final words of the spell.</p><p>“Okay. We’re good now.”</p><p>The light faded. The corpses were now motionless in the darkness of the morgue. Their faces looked to be resting peacefully, as opposed to the enslavement that had plagued them not moments before, but perhaps I just imagined that.</p><p>“Our magick has finally given them true rest.”</p><p>The next thing I knew, my companion was standing beside me. For some reason, it made me think of my other best friend. Together, we prayed from the bottom of our hearts that our senior mages could  finally rest in peace.</p><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: The Unthinkable<br>[<br>]</p><p>Noticing the light from the dispelling incantation, the guard approached the morgue.</p><p>“I just can’t believe it,” he muttered. “Two<br>students<br> undoing that dark magick?”</p><p>After the shock of seeing corpses lying still as they were meant to finally faded, he praised us for being brave, kind students.</p><p>My plan had gone so well that I felt like I was in a dream, and my best friend and I remained in high spirits as we walked back to the dorms. The old guard’s words made me forget that I was usually weak and timid. Instead, for a moment, I felt like I was someone special. And I thought that maybe—just maybe—I’d grown one step closer to<br>her<br>.</p><p>I wanted to tell her what happened today. Would she compliment me like the old guard did? I could feel my heart race as I pictured that happening, but my reverie was interrupted by my best friend.</p><p>“I don’t feel like going home yet,” he said as he pointed to the tallest building on campus. “Wanna go up the bell tower?”</p><p>“Sure,” I replied. We’d gone up there many times when we were younger, and I knew the views to be quite beautiful. High as I was on the thrill of victory, the idea of being above the entire world was something I was eager to experience again.</p><p>We reached the top of the tower, which contained a bell that was enchanted to ring at certain times throughout the day. From there, we could see the forest that surrounded both our academy and the neighboring city of mages.</p><p>“It’s such a lovely view,” I said. I’d been scared of the height when I first came up here, but it didn’t bother me anymore. I felt like I was stronger in that regard, which only added to the joy that I currently felt.</p><p>“Hey, listen,” said my friend as he sat beside me and stared out blankly into the distance. “I’m really glad your plan worked. I was a little nervous about it, but we made a pretty great team in the end.”</p><p>“I couldn’t have dispelled that black magick on my own,” I replied. “Thank you.”</p><p>He shook his head. “That’s not what I mean. I think you’re incredible for<br>wanting<br> to do it in the first place.”</p><p>“What?”</p><p>“Those dead students were being forced to move, and you wanted to save them. It was so…kind, and I think that’s a great quality to for a person to have.”</p><p>I recalled how angry our other friend was at the prospect of black magick, even going so far as to shed tears over it. But now it felt like I and the boy beside me had grown even closer, which caused me to blush in delight.</p><p>“We really are amazing together, huh?” he continued. “I mean, we were friends right out of the gate, and now we’ve been together all this time. I don’t think I’ve ever stopped thinking about you.”</p><p>My two best friends were so talented. So capable. They were always the ones helping<br>me<br>. Luck had brought me into their orbit, but I never felt like I belonged there. And hearing him speak to me now, I almost couldn’t believe I deserved it.</p><p>“I think it’s destiny that we met,” whispered my friend. He was always so relaxed, so calm, but now he seemed nervous. “Um, do you think so? It can’t be coincidence, and so I want us to be together for as long as we can.”</p><p>I’d only ever wanted the three of us to be together forever, and his words strengthened that resolve in me. “Yes!” I cried. “Yes, I want that!”</p><p>His eyes snapped up to mine as a brilliant smile bloomed across his face. “That makes me happy—it makes me so,<br>so<br> happy.”</p><p>I meant to return his smile, but before I could, his face was approaching mine, and I felt a tepid warmth pressing lightly against my lips.</p><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: Not Supposed to Happen<br>[<br>]</p><p>It was a morning like any other. I stepped into the classroom, rubbing my sleep—deprived eyes, and sat down next to my best friend.</p><p>“Morning!” she said. “I didn’t see you at dinner last night. You okay?”</p><p>I nodded, which seemed to sate her curiosity. A moment later, a new, chipper voice rang out.</p><p>“Morning, you two! You study for your magick history test?”</p><p>It was our other friend. The boy.</p><p>“Obviously,” she replied. “My review was perfect.”</p><p>“Oh ho! Sounds like it’s on.”</p><p>“Give it up, champ. There’s no way you’re beating me.”</p><p>Their back and forth was as flawless as always, and I was much too slow to keep up. It was odd how things seemed so<br>normal<br>.</p><p>“Oh, yeah. We should check out the new general store once class is done today.”</p><p>He suggested this as if the idea had just come to him, but my other friend shook her head.</p><p>“Sorry, I’ve got something to do. But you two go on ahead.”</p><p>My chest clenched when she said that.<br>Oh no.<br> As I floundered for something to say, she spoke up again.</p><p>“I’m obviously going to ask for a souvenir, though.”</p><p>I accepted this with a swallow and a nod, not wanting to upset her.</p><p>The new general store was so full of things that I almost didn’t know what to get. And though I felt uncomfortable walking next to him, I still had fun picking out something for our other friend. But as we walked home, he said something that made me freeze in my tracks:</p><p>“I was glad she didn’t come with us today.”</p><p>“Why?” I whispered.</p><p>“Because we could be alone. You feel the same, right?”</p><p>“I, um…”</p><p>I knew what I was going to say next would wound him, but I absolutely had to clear up this misunderstanding before it went any further.</p><p>“I’m sorry. I can’t be with you. There has to be someone out there who’s a better match than for you than me.”</p><p>My friend was silent. When I finally summoned the courage to look at him, I saw him smiling faintly—which was not at all what I was expecting.</p><p>“You really should be more confident, you know?”</p><p>What is he saying?</p><p>I don’t understand.</p><p>“You’re the perfect partner for me.”</p><p>What!?</p><p>“Still, it’s cute when you worry like that,” He chuckled at this, then opened his eyes wide. “Oh, hey! I have a present for you.”</p><p>He reached out and placed a flower-shaped pin in my hair. I flinched in surprise and jerked back, but he leaned forward and whispered into my ear.</p><p>“What? You thought I was going to kiss you?”</p><p>“I…”</p><p>“We’ll save that for some other time.”</p><p>His eyes belonged to a stranger. His gaze felt sticky as it moved up and down and across my body, and it took everything I had not to vomit on the spot. It reminded me how no matter how many times I’d rinsed out my mouth recently, I still couldn’t scrub the feeling from my lips.</p><p>“No…”</p><p>His whisper played in my ears over and over and over and—</p><p>“No! I hate this! I HATE it!”</p><p>Every place he touched me was covered in filth. Every glance caused my hair to stand on end.</p><p>“I’m gross! I’m dirty! I’m disgusting! I hate it, I hate it, I hate it, I’m going to be<br>sick<br>!”</p><p>I took a pair of scissors and jammed them into my bed over and over. By the end of it, my room was a disaster and my throat raw from screaming, but I still felt no better.</p><p>“Why…?”</p><p>If things went bad between the two of us, what would happen to me and<br>her<br>? Oh, but I knew. She’d take his side—of course she would. And then we wouldn’t be friends anymore.</p><p>“I don’t want this…”</p><p>I was a fool to think I’d gotten closer to her after releasing the corpses in the morgue from their curse. I’d been happy in that moment, but it now felt so very, very,<br>very<br> long ago.</p><p>I grabbed the flower pin and threw it against the wall as hard as I could. When I pictured how things would go in the days to come, I began to sob as an ocean of tears raged down my cheeks.</p><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Noelle</title>
    <link href="/2024/03/07/Noelle/"/>
    <url>/2024/03/07/Noelle/</url>
    
    <content type="html"><![CDATA[<h1 id="Noelle"><a href="#Noelle" class="headerlink" title="Noelle"></a>Noelle</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>When I open my eyes, a strange sensation lingers in my mind. It appears I have been dreaming. In my dream, I was flying before I fell from the sky. It is the same dream I always have. I hear dreams are what humans experience while undergoing memory reorganization. But if this is true, why do I have<br> dream? I have never flown; I have no memories of it. Maybe I only<br> I could fly. Or maybe it’s an influence from my older sister—the original.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>I didn’t dream today—or maybe I did and I just don’t remember. I hear that’s possible as well, though you’d think I would know, considering that I’m dealing with my own body. We constructs are not supposed to need sleep. Not to say that we could perpetually act autonomously—just that it was planned that we’d undergo regular maintenance instead. But I’m different. I’m the only one who sleeps. Who dreams. I dream of memories that do not belong to me, memories that intermingle with my own feelings. I do not know why I am the only one to do so. But my dreams are indispensable to me. I<br> them.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>I dreamed again today—or rather, I remember my dream. I dreamed I met someone living in a small forest hut. I concentrate on the sensations I felt while sleeping, and I am overcome by the sense I am unable to breathe. This memory most certainly belonged to my elder sister. I cannot easily reach my elder sister’s memories; it is like trying to navigate a path covered in fog. Perhaps this is an effect of her losing control. But my dreams are so far removed from reality. After all, I have never seen a human before.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>When I finally exit the facility and make my way outside, I find more lush nature—and ruined cities—than in my memories. And I also find hordes of machines. But I see no humans anywhere. Not a single one. The sight is so different from my elder sister’s memories when she used to live on the surface. How long have I been asleep? How long did I dream? There is no way for me to know the answer. Will I ever reach the place from my sister’s memory? The only clues I have come to me as I dream.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Her Question Unanswered Part 1<br>[<br>]</p><p>Long before the youngest awakened</p><p>Machines line a darkened room like a row of steel coffins. With a sudden noise, a single door swings open. The coffin contains a sleeping girl whose pure-white hair reaches down to her shoulders. As her lashes flutter faintly, her eyelids slowly lift.</p><p>Dark orange eyes shine out. They dart back and forth in an attempt to grasp the situation. The first thing she sees is a monitor affixed to the wall. Then a dozen or so unmoving female figures. She blinks once and stares at their faces. She turns her gaze to each, one after the other. After a moment, she realizes they are all identical.</p><p>Eyes. Hair. Lips. Ears. Skin. Clothing. Height. Weight. Every detail is perfectly matched.</p><p>“……”</p><p>The girl shows no surprise at this. But it’s not as if she knew it was coming. In truth, she knows nothing at all. Her expression is simply blank. As blank as her shimmering white hair.</p><p>She exits the machine and takes a few steps forward. She passes the other girls and comes to the center of the room, then looks around again. There are around a dozen girls, and an equal number of empty machines. It seems she is the last to awaken. The monitor is blank. Besides the floor and walls and ceiling, there is nothing else to the room. Having taken in the room, she now looks down at herself. Her clothes are the same as her companions. Her collar—which is high enough to hide her mouth—contains a small apparatus on the inside.</p><p>The girl turns to look at the monitor. Her face appears on it, a reflection from what scant light exists within the room. The face in the reflection matches the other girls. A pair of emotionless eyes stare back at her. After a time, the screen lights up blue. White shapes are projected on the monitor. They blink and change shape, over and over again.</p><p>“……”</p><p>The girl understands nothing; she simply stares at the dancing figures on the screen.</p><p>Suddenly, the apparatus in her collar springs to life, accompanied by a high-pitched sound. The moment it does, the girl’s consciousness is flipped upside down. Voices ring in her head. Scenery dashes across her vision. Information flows inside her like a raging river. Her head feels hot. The hallucinations link together; images become words in her consciousness as they burn into her mind.</p><p>V    O  IC E  CO L O   R  P  AI  N LI G  HT HE  A T FOR M S HA D OW</p><p>vOICE COLoR PAiN LIghT HEat ForM shaDoW</p><p>voice color pain light heat form shadow</p><p>huff* <em>huff</em></p><p>The girl’s vision returns. Her breathing remains ragged, her footing unsteady. But now she understands.<br>We are weapons.<br> She brushes aside her sweat-slicked bangs and directs her attention to the monitor. It contains writing in stark white letters:</p><p>“ELEVENTH FORCED MEMORY CONFERMENT SUCCESSFUL.”</p><p>Weapons built from plants or animals are known as “living weapons.” In the case of these girls, they are based on a single human. From the time they were born to the moment they woke up, they were implanted with the instincts of a weapon and administered drugs that forcefully caused them to mature. Once they are ready, they will be given the necessary knowledge to function as a weapon and sent into battle. They will never know the meaning of killing—or of living.</p><p>Now, a new mission is ready for them. The order appears on the screen:</p><p>“EXTERMINATE THE THIRTEEN TARGETS.”</p><p>Multiples of an identical voice echo through the room, all saying the same word: “Yes.”</p><p>Following the description of the operation, target information appears on the screen. There is no sound; merely words and charts that appear on the screen one after the other before vanishing again.</p><p>“END BRIEFING. COMMENCE OPERATION.”<br>With that, the monitor goes dark once more. With the blue light gone, the room is again plunged into shadow. A white light pours in, tearing the gloom apart. A portion of the wall moves, granting a view of the outside world. A black van appears in the light. The girls begin their operation, piling into the vehicle with perfectly synchronized footsteps.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Her Question Unanswered Part 2<br>[<br>]</p><p>Approximately twenty-one minutes have passed since the beginning of the operation. Within an area that was once the city center, the girls stand and stare at a single point. They encountered the first target four minutes after arriving at their destination. But things have not yet proceeded to a combat situation. There is one reason for that…</p><p>The girls stare at their lone target. Much like the girls, it is made with humanoid elements, including a head, torso, and four limbs. But each part is warped and twisted, like a doll haphazardly stitched together. Its skin reflects the sunlight, creating an eerie rainbow. All these facts are just as their intel said it would be.</p><p>The girl at the rear of the group is the one who woke up last. She wields a sniper rife.</p><p>“……”</p><p>She peers down the sight, checking on her allies. The ones on the front line wield swords and other close-combat weapons. Those with spears, greatswords, and other large weapons stand behind them, while those with long-range weapons—like the girl herself—watch and wait from even further in the rearguard. The weapons were procured from the self-driving vehicle they used for transport. Each girl was allotted a different one that signified their role. Though they all share the same faces and minds, they soon begin to separate from one another based on the weapon they have been given. After checking on her allies, the girl sights the target.</p><p>Something is different from their pre-battle information: The target shows no reaction to their presence. While it seems to know they are there, it shows no interest, instead choosing to draw idly on the ground with a single finger. This behavior is strange; they had been told their target exhibited characteristics of being “violent and cruel.” This expected behavior was the reason they had approached the upcoming battle with such caution.</p><p>Five minutes later, events finally begin to unfold. A sword-wielding girl approaches the target. She walks with slow, measured steps. The sniper carefully observes the situation. When the sword-wielder is fifteen meters away, there is movement. Empty eyes turn to stare at her. They survey her calmly. The moment she raises her sword, the target leaps into the air.</p><p>The battle has begun. The target twists in the air and uses the speed of its fall to slam its arms down on the sword wielder. She blocks the attack with the blunt edge of her weapon. A cloud of dust rises in the air at the impact. In the midst of it, the girl’s eyes glow red. Empty eyes lock onto a crimson gaze. Both are shaped like humans, but both are false. A red light zips around within the dust. Blows and parries are traded with inhuman speed. Attacks collide. The red light stops. The dust slowly settles, exposing the pair. The sniper takes in a short breath and holds it. She pulls the trigger.</p><p>The bullet pierces the air. The moment the sound reaches the target’s ears, its left arm is blown from its body. The shock robs the creature of its ferocity. It slowly collapses into a defenseless heap. Another girl leaps forward from behind the sword user. Her spear pierces their foe, ending it.<br>Target one, silenced.<br> The sniper thinks these words to herself. At the same time, she notices a strange sensation. Almost like a hole is being filled. But the girl does not understand what the feeling is, or what brought it about. As though confirming something, she looks at her palms. There is nothing there. Even though she had just felt she had obtained something.</p><p>“…Huh?”<br>She readjusts the grip on her rifle and stands. With the strange sensation still in her chest, the girl and her companions set out for the next target. In front is the one who wields the sword. The roles given to them in battle had led her to assume a natural position of leadership. The girl in front looks down at her palm as they walk. She also does not know the source of her discomfort. What they feel is not joy in victory; simply excitement that their perfectly coordinated actions have led to success. But the girls do not yet understand that.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Her Question Unanswered Part 3<br>[<br>]</p><p>A white shadow dashes across the ruins. The girl runs silently; ahead, her companions are locked in battle with a mighty foe. If her hurried footsteps make even the slightest sound, the operation will end in failure. Yet if she slows her pace in hesitation, there would be many casualties.<br>What’s the best plan of action?<br> The girl runs. She wipes her bloody hands on her sleeve, adjusts her grip on her rifle, and increases her pace.</p><p>They encountered the mighty foe fifteen minutes ago. They had just eliminated the eleventh target when it happened: Calamity itself rose up above the ruins of a building. It stood nearly ten meters high. Its body was unnatural—an image of the human form, but forcefully stretched and enlarged, with skin scarred like an old roadmap.</p><p>It was a mutant:</p><p>A being that had somehow gained characteristics which typically did not exist in their kind. This information was shared with them before the battle. But while they expected the mutant target, the did not expect it to appear with such<br>speed<br>. The mutant fell from the sky like a meteorite, crushing one of the girls on contact. Before the group could even register this fact, it had felled another of their number. The girls’ blood rained down across the ruined city. The mutant’s empty eyes towered above them.</p><p>Which brings us to the present. While the group successfully reorganized their formation, the battle has not yet turned in their favor. Dodging the mutant’s constant blows, the girls deliver their own. But their blades cannot pierce its thick skin. Their movements begin to slow, exhaustion taking hold as attack after attack comes up empty.</p><p>But then, the sound of an explosion from behind the target: The unmistakable percussion of a sniper rifle. A large bullet pierces the mutant’s neck, causing the massive figure to stagger. But it quickly recovers. The bullet’s path becomes another scar. As the girl loads another bullet in the chamber, the mutant makes a slow turn to face her….</p><p>Which is exactly what she wants. The human body is covered with soft muscle and skin that stretches and contracts as it moves. And the larger a body is, the more that muscle and skin is forced to move and contract—and to stretch thin. The scars on the mutant’s skin are places that have been damaged from this constant stretching. It was the sword-wielder who first realized this. As the mutant turns, a scar tears open on its lower back. And while its attention is focused elsewhere, the sword-wielder leaps high in the air and slams her weapon through the opening.</p><p>The mutant lets out a cry as it crumbles to the ground. The girl continues running up its back, dragging her blade behind her to create a massive canyon of flesh and bone. Blood fountains from the wound, painting her red. The mutant falls face first onto the ground. The earth shakes. Dust flies. The moment it falls, the remaining girls focus their attack on the head. Specifically the neck, where the bullet has created a new scar. The sniper fires again, creating a new furrow in the creature. The rest of the group attacks this new opening with relish. The mutant shivers. It howls. Its fingers contract, convulse…and then, finally, it moves no more. Watching from a distance, the sniper releases her grip on her rifle and lets out her breath. The purpose of holding her breath is to steady her aim. It is only natural to exhale after the shot. But this time, it almost sounds like a sigh of relief. She shoulders her rifle and prepares to rejoin the group.</p><p>But before she can move, a sound erupts behind her. It is the thirteenth target. It had emerged from the ruins close to the isolated sniper, and now tears out her windpipe. Blood mists across the air. Crimson spreads over the ground.</p><p>“……”<br>A ragged breath escapes from her ripped throat. In her dimming consciousness, the girl looks at her palm. All she finds is her bloody, lifeless hand.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Her Question Unanswered Part 4<br>[<br>]</p><p>And so, the thirteenth target falls. With the operation complete, the driverless vehicle returns. The armored machine carries the group back to the place where they first woke up. It is dark in the vehicle, and featureless save for slots to store weapons and handrails along the sides. It is the typical construction for a vehicle that carries weapons.</p><p>The automobile motors across the wilderness. The girls sit on the floor inside. A full half of them do not make the return trip. The air is filled with the scent of metal and oppressive silence. The weapons on the wall still drip with blood. One of the girls stares at them for no reason in particular. She sees her own sword, as well as a number of weapons that no longer have anyone to wield them. Some of the slots contain nothing at all, their weapons having been too damaged to recover. In particular, many guns are missing, and the largest such gap is one that used to hold a sniper rifle. A thought crosses the girl’s mind as she stares at the space:</p><p>There is a hole that will never be filled.</p><p>The journey continues. No one speaks. Despite the silence, they still hear nothing from outside the vehicle. Finally, the girl stops staring at the weapons and closes her eyes. She leans back and waits for time to pass. She knows the return trip is the same distance as the first, but it seems to be taking much, much longer. It feels like she will be in this vehicle forever.</p><p>Some time later…</p><p>The vehicle finally comes to a stop. Its doors open automatically. Light pours inside. The girls file out. Some walk slowly, nursing wounds. Some walk slowly, nursing exhaustion. But the girl who had her eyes closed does not move; instead, she remains in the vehicle and listens to the footsteps of her companions slowly fade into the distance. Once that sound is no more, she opens her eyes, forces herself to her feet, and steps out. The moment she touches the ground, the sound of the large doors closing begins. On a whim, she turns back to look. She sees the wall of weapons slowly disappear.</p><p>“……”</p><p>The engine begins to hum. The girl stands in place, completely alone, until the vehicle drives off.</p><p>When the girls return to their dark room, they see cold white letters on a blue screen.</p><p>“WELL DONE.”</p><p>“THERE ARE FEWER CASUALTIES THAN ESTIMATED.”</p><p>The words of praise flicker for a moment before vanishing. A rundown of their next operation suddenly springs to life on the screen. Though the objective and plan remain the same, the scale this time will be larger, including the number of targets. Which means their numbers will need to be replenished. The girls stare silently at the screen. Once the mission statement is complete, the screen urges them to enter the row of machines for rest and wound treatment.</p><p>Each girl replies with a single word: “Yes.”</p><p>But unlike the last time, they do not speak in unison. The screen falls dark. The girls follow orders and return to their coffins.</p><p>Inside, the girl who closed her eyes cannot stop her thoughts.</p><p>They estimated the number of dead and injured. Those deaths had been predicted from the start. I am alive. But that only means I survived this day. If I die tomorrow, I will be replaced. The fight will go on.</p><p>She feels a sense of unease. Her thoughts spin as she drops her gaze to her palms. There is nothing there. Perhaps there had never been<br>anything<br> there. What was she trying to think of? She does not know. The machine fills with liquid. Her consciousness fades. She had felt something in her hand. But now she feels nothing. How can there be nothing? Her question still unanswered, the girl slips into the dark.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>The Weapon’s Travels<br>[<br>]</p><p>The girl lived in a house with her parents, one where the garden was visible from the window. In this garden sat a small shed and brilliant flowers. It was a simple sight, yet beautiful—but now it is only a place of memory.</p><p>And a place to which her long-dead sister desires to return.</p><p>The girl has taken on the burden of her elder sister’s final wish and set off on a long journey. It has been a difficult trial indeed, for she has no leads and no one to rely on. But now, guided by scant clues, she finds herself growing ever closer to this place.</p><p>But though I believe she will find her way here. I cannot say for certain if this is a good thing. All the girl wants is to make her sister’s dreams come true. She thinks of nothing else—not even her own situation.</p><p>What will she have left once her journey is over? Oh, but that question worries Mama…</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>LW0123<br>[<br>]</p><p>E3819DE381AEE7BFBCE381AFE697A<br>2E381ABE79BAEE8A69AE38281E381<br>A6E38197E381BEE381A3E3819F…</p><p>Error: Another file exists</p><p>in the specified destination.</p><p>Ignore error and continue?</p><p>Playing audio: LW0123.wav</p><p>“<br>…anyone gets…way…</p><p>none of you…this…<br>“</p><p>Unknown access detected.</p><p>Connection aborted.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Griff</title>
    <link href="/2024/03/07/Griff/"/>
    <url>/2024/03/07/Griff/</url>
    
    <content type="html"><![CDATA[<h1 id="Griff"><a href="#Griff" class="headerlink" title="Griff"></a>Griff</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>“What should I do…?”</p><p>I sit in the briefing room, continuing to turn the problem over and over in my mind. I’ve been up all night thinking about it and am now beyond exhausted. See, I have to write a telegram to my family back home, but I can’t think of a single thing to say. My squad came back victorious from battle a few days ago, at which point everyone sat down and wrote their parents just like always. I joined the army eight years ago… And I haven’t contacted my family a single time. It would be strange to send them something now. Crazy. And every time I think back on my time with them, I come up with more excuses not to do it.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>My fellow soldiers are loud and boisterous, like always. I begin to wonder what kinds of messages they send. I sit still and listen in, hoping it will give me a better idea of what to write.</p><p>One man says he sent his parents a telegram about being promoted to captain. It’s not true—he made it up—but his parents love hearing stories about how successful he is, so he figures it’s okay to stretch the truth a little.</p><p>Another man’s telegrams always focus on memories he and his parents made together. Today’s letter is all about how they used to play ball with each other; he claims it will distract them from how lonely they are now that’s he’s gone.</p><p>Everyone speaks so cheerfully about the thought they put into telegrams home. And though they are my comrades—and my friends—I can’t help but feel the gulf between our lives. The worlds we grew up in were too different.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>Here’s the thing: Ours is a country that values military might above all else, but my parents? They’re both anti-war activists. Needless to say, their beliefs earned me more than my share of dirty looks and unkind whispers when I was a kid.</p><p>One day, the army shot and killed my father. What a joke, right? He’s spent his entire life preaching peace, then died without accomplishing a single damn thing. I took a lesson from that: Give your life some meaning. Make it<br>. Later, I decided to join the army and climb the ranks—but when I told Mom about my plan, she said I was insane. The moment she spoke those words, I knew I had to get out of that house. So I slammed the door and stormed off, then spent years trying and failing to forget the empty look in her eyes as I departed.</p><p>In an ironic twist, I never did climb the ladder the way I swore I would. But today, after eight years spent trying to bury every last memory of my family, I finally figure out the telegram I want to send: It’s an apology.</p><p>For everything.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>I’m nervous after I send the telegram. What if she doesn’t respond? Hell, what if she disowns me? I couldn’t blame her for that. But before I can think too hard about it, I get her response:</p><p>Why was my father an anti-war activist, anyway? Why did my joining the army weigh so heavily on my mother? I don’t have a clue, because I’ve spent my whole life actively avoiding a search for those answers. The mistakes I made in the past will never go away. But as I think of my military companions and their families, another thought comes to me: I risked my life for these people. Gave everything for them. And I’m more proud of that fact than anything else. But while I salute them, I doubt it will convey these feelings that well up within me.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>A Bloody Medal Part 1<br>[<br>]</p><p>When he enlisted in the Military</p><p>A perfectly ordered military procession marches forth, boots pounding in synch on the hardscrabble ground. Troops kick up dirt in the training range as they run through an endless series of drills.</p><p>If a person joins the military, they are essentially offering up their life to a country. For when the time comes, they will be thrown into battle without hesitation or mercy. Yet in this poor country, there is no end to the number of candidates eagerly waiting to enlist. This is because the monetary bonus for joining is substantial. Thousands upon thousands apply to join every year, each one drawn by the well-known catchphrase: “Join in a day, eat for a lifetime!” But with so many applicants, the army can afford to be picky—and most would-be recruits end up washing out. Those who are successful are assigned to one of several squads, where they serve under a captain, as well as senior squadmates who function as instructors. Squads eat together, sleep together, and train together. The idea is to teach discipline through group activities.</p><p>This is a small base stationed at the border of the country. The new recruits stand in a row in the briefing room. At the front of the room, the captain calls the name of a recruit who achieved top scores in the military exam. In response, a young man steps forward and snaps off a dignified salute. The captain expresses his high hopes for the young recruit, who barks out a loud “Sir, yes, sir!” in reply. Everyone present can feel the ambition burning inside him.</p><p>A few nights later, loud voices ring out in the dorm. The young man has started an argument with a fellow squad member. The two had been in competition with each other since the day they arrived, and often butted heads. Yet while the young man had a reputation for arrogance and was generally avoided by his fellow soldiers, he managed to form a sort of relationship with the other man despite their rivalry. He was his friend—perhaps his<br>only<br> friend. As their argument heats up, the other soldiers gather around and egg them on, clearly enjoying the show.</p><p>“You’re always so goddamn selfish!” cries the friend.</p><p>He is angry—almost quaking with rage—yet the young man is equally furious.</p><p>“Yeah, well, I actually have things I want to ACHIEVE!”</p><p>The argument quickly turns violent, forcing the other soldiers to intervene—but they have trouble pulling the two apart. The fight ends as suddenly as it began when a door opens. The moment the squad catches sight of their captain, they grow silent and fall in at perfect attention. The captain just mutters and shakes his head at the pair before ordering them to clean the storage room as punishment. The senior who was responsible for instructing the pair is also ordered to pitch in, and his irritation is clear.</p><p>When they reach the storage room, they find it in a state of extreme disarray.</p><p>“Can’t believe the damn captain is making me do this,” grumbles the young man.</p><p>“I mean, this is grunt work! What’s even the point!?”</p><p>“Move your hands, not your mouth,” responds the instructor.</p><p>“Accepting punishment is part of being a soldier.”</p><p>The silence of his fellow squadmates as they clean only spurs the young man’s irritation further.</p><p>“This is stupid. I have things I have to accomplish. I need to fight! I need to win a medal of honor!”</p><p>A medal of honor. It is the highest honor awarded by their country, given only to soldiers who accomplish greatness. Those who receive it are said to be destined for success.</p><p>“I’m going to be the best,” continues the young man, “and everyone else is going to know it!”</p><p>Though many members of the army enlist for the cash bonus, the young man joined only to fulfill the ambition in his heart. But this is the first time he’s ever told his squadmates about his true goals. He has skill to spare in the military arts, so it’s clearly not some flash-in-the-pan ideal. The relief he feels at finally expressing it is palpable.</p><p>His speech made, the young man makes to leave the storage room. When his friend reminds him their work has only begun, he keeps walking and says: “My part’s done. I’m going to sleep.”</p><p>Ambitious goals cannot be achieved alone. It takes the work of those who walk beside us. This is clearly a lesson the young man has yet to learn. The remaining two soldiers in the storage room smile wryly at each other, each of them silently mulling over this very thought.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>A Bloody Medal Part 2<br>[<br>]</p><p>Several days later…</p><p>The squad is called together for a strategy meeting. As they gather in the briefing room, tension fills the air. The silence is perfect. But after ten long minutes, the briefing has yet to begin. It seems the captain has slept in.<br>Again.<br> This realization spurs the young man’s frustration anew.</p><p>Finally, the captain arrives in a disheveled state.</p><p>“Sorry about that,” he says to muted laughter.</p><p>“Guess I missed the alarm again.”</p><p>This said, he turns serious, as does the rest of the room.</p><p>“Here’s the latest: We’ve detected enemy forces marching en masse toward the border.”</p><p>Any remaining smiles in the room vanish at this news. The captain begins explaining their mission.</p><p>“We are to stop the enemy’s advance and protect our nation’s territory. And as luck would have it, this base is directly in their path.”<br>“Our<br>only<br> objective is to protect this base. We just need the enemy to withdraw while keeping our losses to a minimum.”</p><p>The briefing room fills with murmurs at this news. Reactions run the gamut from enthusiasm to relief to unease. But the young man leaps to his feet and asks permission to speak. Stifling a tired yawn, the captain tells him to continue. The sneer on the young man’s face is clear to all. After some initial comments on the state of the enemy, he voices disagreement with the plan, and suggests a total annihilation of their forces instead. A nervous buzz ripples through the room. But the young man ignores it and continues pressing his case.</p><p>“These people have threatened our borders for far too long! If we take out one of their squadrons, we’ll be heroes! People will have to—“</p><p>“That’s enough, soldier,” says the captain softly. “Remember what I said? The most important part of this plan is defending the base and keeping casualties to a bare minimum. Because if any of the men here die, that falls on me.”</p><p>Rather than backing down, the young man redoubles his efforts and engages in verbal sparring with the captain for some time.</p><p>In the end, however, he is overruled and the briefing ends. His plan rejected, the young man is infuriated.</p><p>“Why the hell doesn’t he get it!? I’m thinking of this squad far more than he is!”</p><p>Still convinced his plan is correct, he makes the rounds of his fellow soldiers, looking for any who might agree with him. With the arrogant attitude he has always displayed to his fellows, he does not find many who will side with him. Even the man he thinks of as his best friend turns him down. It’s not that he doesn’t desire glory; everyone in the squad wants nothing more than to wear a medal of honor. But he joined the military to keep his head down, follow orders, and send money home to his family. So he can’t risk everything on his friend’s reckless plan.</p><p>Were these reasons true? Perhaps. Or perhaps he is simply irritated the young man is crafting alternative plans on his own without even consulting anyone. The young man realizes his friend has balled his hand into a fist. With the thoughts and emotions of the pair still at odds, the day of the operation grows ever closer…</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>A Bloody Medal Part 3<br>[<br>]</p><p>The battlefield is silent; it’s almost impossible to believe a war ever raged here. All the young man can hear is his own ragged breath. He stands in the borders of the base; scattered before him are countless numbers of corpses. There is no doubt who they are.</p><p>Four hours earlier…</p><p>The enemy arrives at the base, and the battle begins. The squad digs in and defends the base from the enemy, just as the captain ordered. But the young man, impatient with this war of attrition, decides to commence with his own plan. Taking advantage of the terrain surrounding the base, he launches a surprise attack that takes out half the enemy in a single swoop. He is joined by a handful of soldiers who see things his way—and though many of them fall in battle, their bold tactics force the enemy to initiate a full retreat. As he watches his foes scatter, the young man grins.</p><p>“I was right,” he whispers.</p><p>“I was<br>right<br>.”</p><p>Though his squad had not accomplished much in battle until now, they are sure to earn praise for this great victory. He is one step closer to his medal of honor.</p><p>With those thoughts in his mind, he returns to the base—but the sight waiting for him there is a hellscape. His squadmates—all of them—lie dead or dying on the ground. Dumbfounded, he wanders among their bodies, the smell of burnt flesh and blood and gunpowder stinging his nostrils. It is the most horrific sight the young man has ever seen. He forces his breathing to slow and resists the urge to vomit.</p><p>“It’s okay,” he tells himself.</p><p>“It’s okay.”</p><p>And though his legs feel heavy and false, he forces them to carry him forward. But then his foot catches on something and he tumbles to the ground. At his feet is one of his squad members, heavily injured and covered in dirt and debris from an explosion. It is his instructor. Though he still breathes, it is with great difficulty, as he is bleeding from multiple wounds.</p><p>“Hey! Wake up!”</p><p>Realizing the young man is speaking to him, the instructor manages to open a single eye. It roves about blindly for a moment before finally settling on the figure of the young man.</p><p>“You…attacked the enemy…”</p><p>“Knew you would…”</p><p>“The captain…tried to save you…”</p><p>“He changed…our formation… and now look at us…”</p><p>With that, the instructor draws one last, hitching breath before falling silent forever.</p><p>The captain did this for me?<br> thinks the young man.<br>But I always caused him so much trouble…</p><p>Unable to accept his instructor’s death, the young man wanders the battlefield in a haze, searching for his captain.</p><p>Instead, he finds what remains of his only friend. An explosion has blasted off most of his left leg, leaving a pool of blood at the base of the stump.</p><p>“Good to see you’re in one piece…” says his friend.</p><p>The fact he is still able to make jokes in such a condition is remarkable. The young man begins stammering out an apology.</p><p>“I’m… I’m sorry. I just wanted…”</p><p>“I know,” whispers his friend.</p><p>“I wanted one too…”</p><p>“Said this was for my family…but that medal sure would have been nice…”</p><p>With that, he speaks no more. Tears begin to run from the young man’s eyes as he sets off again in search of his captain. He sees bodies. Bodies.<br>Bodies.<br> Each one bearing a familiar face.</p><p>Finally, he sees the captain and runs to his side. He calls out to him again and again, but the man makes no response.</p><p>“Sir, I… I didn’t mean…”</p><p>He grasps the captain’s ravaged hand. He wants the captain to reprimand him. He<br>needs<br> it. Otherwise, his apology would be meaningless. There is so much to say: He’d made a horrible mistake. He’d been wrong where the captain had been right. But he can scarcely force two words together. And the tears that pour down his face only make things harder. But then the young man realizes something:</p><p>The captain is squeezing his hand in return.<br>He’s still breathing. He’s ALIVE!</p><p>“Ah,” says the captain weakly.</p><p>“I’m glad you survived…”</p><p>The captain’s eyes are closed; his senses all but gone. There is no way he can know whose hand he grasps. And yet somehow, he seems to recognize the young man, and ends his life with a faint smile on his face. With that, the operation is over. The young man is the only survivor.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>A Bloody Medal Part 4<br>[<br>]</p><p>Though it came at the cost of everything, the young man is finally a hero. For despite the sacrifices required, the enemy had withdrawn. The young man is given time off to recuperate. Which is how he finds himself with nothing to do. Or perhaps it is more apt to say there is nothing he<br>can<br> do. Day after day, he hides in his house and attempts to drown his sorrows with strong drink. Empty bottles lie scattered across his floor. Rats run to and fro amidst the refuse and spoil. He wakes up, grabs a bottle, and drinks until he passes out. When he come to, he begins the process all over again. If that was his entire life, it might be all right. But he sees flashbacks to the battle in his sleep, and these nightmares torture him.</p><p>The battleground…</p><p>The faces of enemies he killed…</p><p>His squadmates dying before his eyes…</p><p>His instructor. His best friend. The captain. All of them die in his arms.</p><p>Day after day</p><p>after day after day after day</p><p>after day after day after day after day</p><p>after day after day after day after day</p><p>The nightmares play on repeat, bringing his life to a halt.</p><p>If only I hadn’t made that suggestion…</p><p>If only I hadn’t ignored my orders…</p><p>If only… If only… If only…</p><p>His world becomes an endless spiral of regret.</p><p>Was there even a point to what I did?</p><p>Do I feel pride in what I did?</p><p>Was there justice to what I did?</p><p>Is this all because of my selfishness? Because of a goddamn medal?</p><p>Maybe I should just end it all.</p><p>He drunkenly loads bullets into his gun, raises the muzzle to his temple, and stands.</p><p>He places his finger on the trigger, closes his eyes, and breaths in a lungful of stale air.</p><p>“Hold on, everyone… I’m coming.”</p><p>He moves to pull the trigger. But he is drunker than he imagines, and with his eyes closed, his balance flees and sends him crashing into a nearby table.</p><p>When he opens his eyes, he sees a familiar envelope. It is the kind used for notices by the military’s highest-ranking officials. Inside is an official letter congratulating him on annihilating the enemy, and announcing that he will be rewarded with a medal of honor and promotion to captain.</p><p>“Ridiculous…” mutters the young man.</p><p>“Goddamn ridiculous…”</p><p>“I’m only alive because the rest of them saved me.”</p><p>Seeing the letter again reminds him that the ceremony is tomorrow. Finally, he takes a handful of sleeping pills and falls into bed.</p><p>He dreams. It is the same dream as ever—a dream of that day. But this time, it does not begin after the battle. Instead, it begins before he set off to face the enemy on his own.<br>No. I won’t make the same mistake again.</p><p>This time, he does not initiate his plan. Instead, he remains at the base and kills every last enemy soldier he sees, swearing he will make sure they never kill again. He slays as if in the grip of madness. Enemy soldiers fall—so many he cannot count their number. But it doesn’t matter; he will do anything to save his brothers. Suddenly, he looks out and sees the faces of the people he has been slaughtering: They are all part of his squad. His instructor. His friend. His captain. He killed them with his own hands once more. With a short cry, the young man finally understands:</p><p>“I’ll never be able to save them, no matter what I do.”</p><p>The sickening dream wakes him up. The morning sun streams in through the window. It is the day of the medal ceremony—the day of what he<br>thought<br> was his dearest wish. What meaning can there be in someone who wiped out his own squad accepting a medal? How can he face their memory? And when the ceremony is over, he will be a captain. A leader with troops of his own.</p><p>“What do I do, Captain? How do I atone for my sins?”<br>He asks himself this as he puts on his formal dress uniform. As he stares at himself in the mirror for the first time in a very long while, he sees how emaciated he has become. With heavy steps, he turns his back on the ghost in the glass and makes his way to the ceremonial venue.<br>Almost as though it is his redemption…</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>A Hero; Luminous Scars, Part 1<br>[<br>]</p><p>A desolate landscape stretches in all directions.<br>The poppies that covered the field only a few days ago were all burnt to ash,<br>and the butterflies that extolled the beauty of spring are now dead.<br>The flowers are dead. The butterflies are dead.<br>The only survivors are soldiers and rats, but they, too, are slowly dying.</p><p>The young man’s squad is completely surrounded.<br>Neither retreat nor surrender are permissible in this situation.<br>This prolonged war has exhausted the army.<br>They knew from the start that the enemy had the overwhelming advantage<br>in terms of resources.<br>Despite it all, the man has maintained battle lines,<br>but it seems he’s reached a limit from which there is no escape.<br>Artillery bursts in the air. The nighttime battlefield is awash in light.<br>Gouges dot the earth. Mud, guns and swords, blood and bones,<br>and screaming soldiers…</p><p>The battlefield exists between the boundaries of life and death.<br>Bullets whiz overhead. The young man hides behind a barricade<br>as he takes aim at his enemy, his finger resting on the trigger, focusing.<br>How can he overcome the disparity in resources and win this fight?<br>Ultimately, as captain, how can he protect his squad?<br>But the nightmares that constantly replay in his mind hinder his thinking.</p><p>They are memories of when he first joined the army.<br>His own selfish actions in battle led to the death of his entire squad.<br>He recalls walking among the bodies of his compatriots, crying.<br>He recalls the smell of burning flesh, the sensation of entrails sticking<br>to his soles.<br>To this day, he thinks of that hell every time he loses a soldier.</p><p>At this rate, isn’t everyone’s death inevitable? Just like it was back then?</p><p>The worst-case scenario plays in his mind. He shakes his head.<br>He cannot let the past drag him down, not right now.<br>He digs his nails into his temples. The pain forces the guilt and fear<br>to leave his body.<br>He<br>must<br> do this. Otherwise, he very well may lose his mind.<br>The battle grows ever more intense, and still, he cannot find an effective<br>way forward.</p><p>It’s then that a man wearing an eyepatch appears before him.<br>The man with the eyepatch grins widely and<br>points his gun at the young man’s chest.<br>But before the young man can react,<br>the other man has already pulled the trigger.</p><p>A red flower blooms.</p><p>A red flower made of cloth bursts from the gun’s barrel.<br>The young man’s eyes go wide.<br>The eyepatch man gives a light chuckle.</p><p>“You look like hell. Ain’t every day I see you like that.”</p><p>The young man heaves a sigh of both exasperation and relief.<br>The easygoing eyepatch man is an ally in the same army.<br>Much like the young man, he commands his own squad.</p><p>That he’s here means he’s finally met with the reinforcements.</p><p>“Don’t you worry. Now that we’re together, we’ll make it outta here alive.”</p><p>The young man nods at his encouraging words.<br>And to himself, he makes a vow.<br>He will not allow his compatriots to die. Not like last time.</p><p>The eyepatch man commands his squad to move to the front.<br>Timing a precise opportunity for them, he orders a hail of gunfire.<br>Like a magic trick, smoke and flame bloom to hide him and his allies.<br>The young man takes advantage of the situation to command his own squad<br>to press forward and eliminate the enemy.<br>Despite the strife of the battlefield, the eyepatch man remains calm<br>and easygoing.<br>Though his countenance is more akin to a court jester than a soldier,<br>the young man trusts him all the same.</p><p>He boldly cuts his way into the enemy camp, but his eye focuses<br>more on his own squad than on his enemies.<br>He rallies the frightened soldiers, keeping tabs on the situation and avoiding<br>any unnecessarily harsh orders. Now and then,<br>he volunteers to venture into danger personally.<br>No matter how brutal the battle, he never forgets the care he holds<br>for his soldiers. In that regard, he’s quite similar to the young man.<br>The two captains press forward with squads in tow.</p><p>But the enemy has an overwhelming material advantage.<br>Days pass, and enemy reinforcements arrive.<br>They attack from behind, attempting to occupy the rear.</p><p>One can scarcely hear over the raging battle’s deafening crescendo.<br>Their lines of communication fall, and the squad descends into chaos.<br>Still, the young man and his soldiers fight back in the face of certain death.<br>They shoot, stab, and pummel every enemy that comes into view.<br>Stopping is not an option.<br>They must get through this and send everyone home alive.<br>They must reorganize their strategy, no matter what it takes.</p><p>Night approaches. A flare overhead shines like a firework. In the red light that bathes the field, the young man spots an artillery shell headed directly for them. The nightmares of battle, the fear of killing enemies, the guilt of dying allies—it all heralds the end.</p><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>A Hero; Luminous Scars, Part 2<br>[<br>]</p><p>Red sky. Bloody footprints. A hellish battlefield.</p><p>The young man huddles on the ground, arms covering his head,<br>his dead compatriots standing around him.<br>It’s the recurring nightmare that slowly consumes him.</p><p>Some of the dead are squadmates who perished due to his selfish actions<br>long ago. Others are soldiers who die due to his powerless now.<br>With glares of hatred, they point their guns at him.</p><p>This is your fault.</p><p>We’d have been better off without you.</p><p>They batter him with curses, and in unison, they pull their triggers.</p><p>……</p><p>………</p><p>…………</p><p>Along with the bullets that riddle his body in the dream comes<br>a sweet sensation…and then he awakens.<br>The peculiar ecstasy mixes with the discomfort of his soaked clothes.</p><p>Why this dream? Why now?</p><p>He suppresses his urge to vomit as he sits up in his hard bed.</p><p>It’s barely dawn. The room is dim.<br>He can hear the pitter-patter of rats scurrying about the room.</p><p>He looks around.</p><p>The enemy’s detention house is dark.<br>He and his soldiers are prisoners—they sleep on a row of beds, a dozen or so.<br>The young man sits atop the bed in a corner.</p><p>A few days prior,<br>he and his squad found themselves between a rock and a hard place.<br>The eyepatch man and his squad arrived as reinforcements.<br>Together, their strategy afforded them a brief advantage.<br>But once enemy reinforcements arrived, the battle became a deadlock.<br>As the carnage grew, the chain of command began to collapse.<br>Amidst the concentrated fire, the young man lost consciousness.<br>In spite of the looming death, his wounds were not serious.<br>And in spite of everything, when he awoke,<br>he found himself a prisoner in this detention camp.</p><p>“That must’ve been one hell of a dream.”</p><p>There came a voice from the bed beside him.<br>The eyepatch man smiles as he regards the young man.<br>He and several of his own soldiers have been captured as well.<br>But the young man does not know what transpired<br>on the battlefield nor the status of his soldiers.<br>And, of course, there’s no guarantee anyone will leave this terrible place alive.</p><p>The thought of his fellows dying sends a shiver down the young man’s spine.<br>He digs his nails into his skin—the sensation of pain may be the only thing<br>that allows him to maintain his sanity.<br>But the eyepatch man grasps the young man by the arm to stop him.<br>He sits beside him and peers into his face.</p><p>“C’mon, buddy. I’m asking you what’s the matter.”</p><p>His voice inspired his soldiers countless times in that catastrophic battle.<br>Hearing it for himself, the young man feels a bit calmer.</p><p>“In my dream, my soldiers killed me.”</p><p>He reveals his past, his nightmares.</p><p>His voice is hoarse, and quiet so he doesn’t wake the other soldiers.<br>Quiet so only the eyepatch man hears him.</p><p>“Long ago, my actions led to my entire squad dying.<br>Ever since, I struggle to keep myself composed when I lose a soldier…”</p><p>He wanted to take his terrible past to the grave.<br>But considering how the eyepatch man seemed to care genuinely about<br>the lives of his soldiers, perhaps he would understand.<br>The young man feels as though he has nothing to lose.</p><p>“Believe me, I know the feeling.”</p><p>His one bright blue eye sparkling, he tells the young man his story.<br>He, too, lost most of his comrades in battle.</p><p>He’s heard their voices ever since.<br>Their voices as they burned in the fires of battle.<br>He had promised that they’d survive together, but before he knew it,<br>he stood alone amidst their corpses.<br>There’s loathing in his voice for how carefree he lives now.<br>Be it the past, the present, or the future, no matter where he goes,<br>that’s all there is.</p><p>Despite his grim words, the smile on his face is as cheerful as ever.<br>But the young man realizes that the cheerful man is every bit as stained<br>by guilt as he is.<br>Silence settles between them for a time.<br>Every now and then, airplanes pass overhead like distant thunder,<br>rattling the windows. Shells whistle through the air like burnt-out stars,<br>and the glow of fire illuminates the room.</p><p>And then—</p><p>“Death. Death is our only salvation.”</p><p>At length, the eyepatch man speaks. The shocked young man turns to him.<br>The corners of his mouth turn upward slightly,<br>and he pats the young man’s shoulder. “Kidding, of course.”</p><p>“We’ll survive and get everyone outta here.<br>You don’t wanna lose any more soldiers, right?”</p><p>Right, the young man tells himself.<br>They’re without rations or doctors in this filthy,<br>inhumane place where they make even the injured and sick work.<br>To sit here idly would be tantamount to killing his own soldiers.<br>They must put together a plan of escape, and soon.</p><p>The first light of dawn glows beyond the window.<br>The eyepatch man gazes at the distant gunfire and begins to him.<br>It’s a song that everyone from their country knows.<br>Slowly, the sleeping soldiers are roused.<br>Though not all belong to the same squad, they all share a home.<br>One by one, they join in the humming, and before long,<br>everyone in the room is singing.</p><p>The guards shout as they rush in to stop them,<br>but prisoners continue to sing.<br>The eyepatch man sings even louder in encouragement.</p><p>Nobody here has lost hope yet.</p><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>A Hero; Luminous Scars, Part 3<br>[<br>]</p><p>The young man was trapped in a bombardment.<br>Along with the eyepatch man, who serves as a captain as well,<br>and a dozen or so of their soldiers, he was detained in a camp.<br>It’s difficult to retain one’s humanity in an environment like this.<br>The young man’s spirit wavers, but the eyepatch man inspires him.<br>The young man, his soldiers,<br>and all the others still hold fast to the hope that they will see home again.</p><p>Beside the detention camp is a barracks, demarcated with barbed wire.<br>The soldiers stationed there occasionally come to the camp when they have<br>free time.<br>What they come to do is, essentially, trade with the captives.<br>In exchange for stale bread, they receive things from the starving prisoners<br>they might deem useful.<br>The prisoners have very little, but a handful of them possess things that are<br>worth more than bread to the soldiers.</p><p>Today, a soldier visits the detention camp.<br>The blond young man and the eyepatch man hand over their pocket watches<br>and demand more bread than usual—their sickly fellows need all the nutrients<br>they can get.<br>Their earnest gazes grieve for their comrades.<br>Taking pity on them, the soldier accepts the watches and brings them bread,<br>as promised.</p><p>The two men give their gratitude for the soldier’s kindness.<br>And then, the three of them begin walking around the facility and engaging<br>in idle chatter.<br>The soldier speaks with the unarmed, starving prisoners.<br>He regards them with caution at first.<br>But he finds the eyepatch man particularly fascinating,<br>and before he realizes it, he’s let his guard down.<br>He’s been led down an empty corridor, a blind spot in the guards’ watch.</p><p>The young man whirls to punch the soldier.<br>The sudden attack sends the soldier to the ground.<br>He reaches to pull a knife from his boot, but the young man straddles him,<br>depriving him of movement.<br>The soldier attempts to yell for help, but hands quickly clamp around his throat.<br>The young man then grabs the knife and stabs him repeatedly until his life<br>is extinguished.</p><p>The last thing he saw…</p><p>Was the young man’s faint smile.</p><p>I’ve done a terrible thing<br>, the young man thinks as he looks over the<br>soldier’s corpse.<br>An enemy though he was, the last thing the young man wanted was to take<br>a life outside of the battlefield.<br>But this is the day they’ve been waiting for—when the enemy soldier<br>with the storehouse key visits the camp.</p><p>All of their confiscated items are being held in storage,<br>including their weapons, according to one prisoner.<br>They will arm themselves there. They must.<br>The young man searches the soldier’s clothes for the key and finds it.<br>He exchanges glances with the eyepatch man,<br>and they nod in confirmation.</p><p>If they remain here like they’re supposed to, they’ll never be able to send<br>their soldiers home alive.<br>That is the conclusion they came to. And so, they have opted to take action.<br>The young man has his soldiers, and several other P.O.W.s have been<br>interned here before them.<br>If they all work together, they might just make it out.<br>The two captains take their chances, putting everything on the line.</p><p>The young man takes the keys and a gun from the soldier.<br>The bullets tear through the guards who watch the storehouse.<br>And on the eyepatch man’s signal,<br>their fellow soldiers rush into the armory.<br>They take their guns and begin readying themselves for an uprising.<br>But the guards respond to the commotion much faster than the young<br>man anticipated.</p><p>A hail of bullets flies toward the storehouse.<br>They duck for cover with little opportunity to poke their heads out.<br>But they’re prepared for this.</p><p>“Wanna do this?” The eyepatch man asks the young man, who nods in response.<br>The two step forward, pistols at the ready.</p><p>They pay little heed to the bullets that graze their skin and dig holes into<br>the earth beside them.<br>They pull their triggers and kill their enemies,<br>risking their lives to save their allies.<br>If they can’t manage that much, they have no right to live.<br>The eyepatch man has made the same resolve, the young man believes.<br>He, too, lost many of his squadmates in battle. Theirs is a shared past.</p><p>His deadly bullets tear through the enemy’s heads, faces, necks, hearts.<br>He shoots their hands carrying their guns, their fleeing legs,<br>their sobbing eyes, their screaming mouths.</p><p>“Are you smiling?” The eyepatch man asks the young man.</p><p>There’s no way I’m smiling<br>, he thinks to himself,<br>but curiosity gets the better of him, and he brings his hand to his face.<br>And for the first time, he realizes he is indeed smiling.</p><p>“It’s nothing to worry about,” the eyepatch man says.</p><p>“You killed the enemy to save your soldiers.<br>That’s every reason to smile,” he says.</p><p>And so he, too, does the same—shoots an enemy soldier, then smiles.<br>Their smiles look much the same, both hiding the fear that they may lose one<br>of their own.</p><p>Then, they hurl grenades at the enemy and rush them.<br>They pull their triggers without mercy,<br>quickly turning the soldiers on the opposite side into corpses.<br>The two captains’ silhouettes flicker in the hellfire.<br>The men who were mere prisoners only moments ago are now raging demons<br>in the eyes of the enemy soldiers.</p><p>They make their escape from the storehouse.<br>From there, prisoners from other countries join in the uprising.<br>They foresee victory in the young man’s actions and declare their cooperation.<br>Pressing forward, they take weapons from the dead soldiers.<br>And at the end of the prolonged firefight,<br>they manage to take control of the armory in the barracks.</p><p>A few hours pass.</p><p>All that remains in the silent battlefield are the charred remains of the barracks<br>and the detention camp. The only survivors: the young man and his allies.<br>Together, they cheer and share in their joy,<br>but the young man cautions them—they should leave before pursuers arrive.</p><p>But when he realizes all of his squad has survived,<br>the tension in his body melts away.<br>Pain previously suppressed by adrenaline now bubbles to the surface.<br>Only now does he realize he’s suffered a gunshot wound to his leg.</p><p>He is but a breath from collapse, but the eyepatch man keeps him up.<br>The young man gives his thanks and the older man murmurs.<br>“Maybe our nightmares are a thing of the past now…”</p><p>The young man gives a nod.<br>With the battle won, he gets to hear the laughter of his soldiers—a sweeter<br>sound he cannot imagine.</p><p>And so, they set off on the road to home.</p><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>A Hero; Luminous Scars, Part 4<br>[<br>]</p><p>After getting caught up in a bombardment on the battlefield,<br>the soldiers were captured and taken to a detention camp.<br>But under the command of the two captains—the blond young man and the<br>man with the eyepatch—they rose to action and made a successful escape.<br>They celebrated their survival and safely returned to their home country.<br>This all took place in late summer.</p><p>The young man reunites with the squadmates he parted ways<br>with on the battlefield.<br>They survived the brutal fight and returned home alive.<br>Their survival is like a dream come true to the young man,<br>and his relief is immeasurable.<br>He had once led his entire squad to annihilation. But not this time.</p><p>Together with the eyepatch man,<br>he receives a medal of honor and a promotion.<br>They successfully carried out an operation that made up<br>for the overwhelming resource disadvantage of the previous battle<br>and freed the prisoners of war—successes held in high esteem.<br>These are accolades completely unlike the ones he bitterly received<br>in the past after the deaths of his squadmates. Rather,<br>these were things he earned as a result of protecting his soldiers.</p><p>The two captains are showered with praise at the medal ceremony.<br>They are heroes.</p><p>Bright rays of summer light beam through the windows of the lavish<br>ceremony venue.<br>This beautiful morning blesses their honor and the miracle operation.<br>In his ceremonial garb, the admiration of onlookers is palpable<br>to the young man.<br>After the ceremony, he leaves—there’s somewhere he needs to go.</p><p>Somewhere that lies beyond the dark forest in the far corner of the city.<br>A place he’s been so many times he can practically find his way there<br>with his eyes closed.<br>It’s the military graveyard, the place where his fallen squadmates slumber.<br>Step by step, he makes his way toward the graves as if drawn by something.</p><p>“And there’s our answer, eh?”</p><p>A voice comes from behind him—the very same voice that soothed and<br>inspired him time and again in the detention center.<br>He turns around, and there he finds the eyepatch man, his friend in arms.<br>His one eye, blue as the summer sky, stares straight at him.</p><p>“Our answer?”</p><p>Answer… The young man meditates on the word.</p><p>That’s right—they have their answer.<br>They both lost so many squadmates due to their mistakes.<br>They both vowed not to commit the same sin again.<br>And so they proceeded to kill their enemies to protect their own.<br>At last, their vows were fulfilled.<br>Every soldier they commanded in the previous battle returned home safely.<br>Every ally held in the detention center successfully escaped.</p><p>They received medals.</p><p>They were lauded as heroes.</p><p>All was right.<br>They now stand atop the path they dreamed to walk.<br>They now stand in the light.<br>And yet… the nightmares do not cease.</p><p>Reflected in the young man’s eyes is not only the eyepatch man before him<br>but the countless ghosts of his fallen men.<br>He still hears them. He still hears their curses.<br>He still hears them dragging him to the depths of hell.</p><p>Indeed, they have their answer.<br>No matter how much they look after their allies,<br>no matter how they risk their lives for them,<br>the damage has already been done.<br>The nightmares will never end. They have no destination.</p><p>Everything boils down to regret. Penitence. Guilt. Despair.<br>Whether they stand on a battlefield or in the light, that is all they have.<br>The notion occurred to him the moment he was called a hero in the ceremony.</p><p>“But you know how to escape this hell, don’t you?”<br>The eyepatch man speaks.<br>He steps toward the young man, his eye examining him.<br>“What you know, I know. And what I know, you know.”</p><p>The young man stares silently back.<br>The affection he has for the other man drains from him at once.<br>This is a man who has saved him in battle countless times.<br>They both risked their lives to save their allies.<br>The warmth he felt in those moments is now completely absent.</p><p>But that, too, is a given, he realizes.<br>Much in the way he cannot love himself,<br>he bears no love for a man with the same sins as him.</p><p>But he is a special compatriot.<br>Perhaps he can grant him this wish just once.</p><p>The eyepatch man smiles.<br>The young man knows exactly what he wants.<br>He presses the barrel of his gun to the man’s chest.<br>And without a moment’s hesitation, he pulls the trigger.</p><p>The summer sun bathes the man’s corpse,<br>lying among the blue flowers in golden light.<br>His face glows. He slumbers like an innocent boy.<br>As the young man looks down at him, he smiles in defeat.</p><p>Death truly is their only salvation, isn’t it?</p><p>He then brings his gun to his temple.<br>A sweet numbness coats the skin where the warm barrel presses<br>against him.</p><p>Hurry, hurry!<br> urges the trigger.</p><p>Flowers bloom on the battlefield.<br>Butterflies dance beneath an azure sky.<br>A gentle breeze puffs over the horizon.<br>And in the distance, his squadmates laugh.</p><p>The young man bids farewell to a flickering past. And then he pulls the trigger.</p><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Shimmering Flames<br>[<br>]</p><p>The walls of the barracks shudder with the cheers of soldiers holding a victory feast.</p><p>But in a storage room not far from the feasting hall, I find the cooling body of one of my subordinates. This is no accident—his throat has been slit neatly with a knife, and his blue eyes are wide with regret.</p><p>*     *     *</p><p>Murder. Murder within the walls of our own base.</p><p>The military police begin to investigate the incident; it’s their job to maintain order in the army, after all. A few days later, they tell me they suspect our problem child is the killer. He went missing around the time of the incident, and they’ve launched a search to find him.</p><p>The boy is a member of my squad, and I found things were missing from his room—as well as bloodstains in the corner. But when the MPs tell me they intend to shoot him on sight, I can’t let the decision stand.</p><p>“No,” I say. “This course of action is entirely too hasty. You must conduct a more thorough investigation.”</p><p>No matter how much authority the MPs have, I can’t let them execute a soldier without trial—especially when they lack anything but the basest of suspicions.</p><p>More importantly, the boy did not do this. I<br>know<br> he didn’t. As his captain, and as someone who has lived with him for an extended period of time, I know. Sure, he can be a handful, but he’s a kind soul deep down, and not the type to slay a comrade.</p><p>When I carried him on my back after his injury in the last battle, I saw him give his squadmates a trusting smile. Faint, yes, but it was there.</p><p>Someone like him could never kill one of his own.</p><p>But no matter how much I insist, the MPs don’t listen. Quite the opposite, in fact: As the captain on duty during the murder, I am suspended without pay for a month.</p><p>*     *     *</p><p>The sun has set, but I can’t find it in myself to turn on any lights. Instead, I stand listlessly in the middle of my room, a being entirely without purpose.</p><p>Most of my days are spent like this now.</p><p>The boy is a killer. He will be shot on sight.</p><p>The highest-ranking officers have made their decision.<br>If they deem a thing innocent, so be it.<br>If they deem a thing evil, then so be it.<br>They need no reasoning; they are soldiers.</p><p>But I still refuse to believe the boy is a murderer.</p><p>“You trust him? You’re just being selfish.”</p><p>Though I am alone, I think I hear a man’s voice beside me. Where is it coming from?</p><p>As I look around my small apartment, my eyes lock with the man in the mirror on the wall. Though he has the same face as myself, he wears a lopsided smile as he begins to whisper.</p><p>“He ignored your orders and ran off on his own. Had you not gone out of your way to save him, your blue-eyed subordinate would still be alive. Saving him was a mistake. Your actions bring only death to your fellows. You haven’t changed a bit—it’s the same as when your selfish actions got all your squadmates killed. Oh, you might be able to fool everyone else, but you’ll never be able to fool<br>me<br>.”</p><p>I turn my gun to the man in the mirror.<br>But just as I am about to pull the trigger…</p><p>“Captain, can you hear me? I have news.”</p><p>I hear the quiet voice of one of my men from the other side of the door and I feel the mist clouding my mind vanish. The man in the mirror is gone. All I see is Captain Craven with his finger on the trigger.</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: Invisible Bullet<br>[<br>]</p><p>There’d been a murder at base, and the victim and young soldier thought to be the culprit were both part of my unit. The military police decided the boy was guilty and placed him on the wanted list without even holding a trial. They also issued an order to kill him on sight.</p><p>Eventually, I got word the boy was hiding in a foreign city on the border. This information came from a few of my subordinates, good men who snuck it to me while I was still locked away on house arrest.</p><p>And that’s how I now find myself on the outskirts of that foreign city. I’m not supposed to be here—I’m not even supposed to have left the base. But the same subordinates who got me the information agreed to distract any curious superior officers and guards. Still, they can only keep their attention for so long. I have to find the boy, and quickly. More importantly, I need to hear the truth from his own mouth, and in his own words.</p><p>The truth that he is innocent.</p><p>*     *     *</p><p>The border city sprawls beyond the field of sunflowers that grows over the old train tracks. The military has long been waiting for an opportunity to capture this place, and I’ve heard rumblings it may be the next target on our list.</p><p>Still, this is not a city easily cowed—they’re used to living under siege, and the self-defense force that protects it allows citizens to live lives of happiness and ease.</p><p>I enter the city under the guise of being a common traveler. Then I begin my search for the boy, venturing along the main street in search of clues. Eventually, I feel eyes on my back, and turn to see a group of children staring up at me curiously. It seems travelers are something of a rare breed here. Still, these moppets likely have the run of the place, so I ask them to show me around.</p><p>“C’mon, mister!” they say brightly. “You gotta see this!”</p><p>With proud little smiles, they bring me to the foot of a high hill, upon which stands an observation platform that contains a large cannon.</p><p>“Watch! It’s really cool!”</p><p>A moment later, the world is shattered by an enormous<br>boom<br>. Yet what comes out of the cannon is not artillery, but a large ball of water. As I watch it soar across the sky, the children explain how their people use the cannon to water the sunflowers growing on the old tracks.</p><p>I find the entire endeavor to be remarkable. But when I turn my gaze back to the platform, I see a svelte boy standing beside the cannon. Though the sun silhouettes him against the sky, I cannot mistake the form of a subordinate with whom I’ve shared so much joy and pain.</p><p>It is the boy. The deserter. The accused.</p><p>Boom<br> and a globule of water flies through the air.</p><p>Boom<br> and another.<br>Boom<br>.<br>Boom<br>.<br>Boom<br>.</p><p>Each one is accompanied by the cheers of happy children, but I can’t hear any of it over the beating of my own heart.</p><p>*     *     *</p><p>Sunflowers bloom proudly along the old tracks. According to the children, the boy passes this place every day on his way to do his shopping. Knowing this, I sit down to wait.</p><p>I sit for hours, barely moving, alone with my thoughts. Just as the sun began to set, he finally appears. When he notices me, his eyes widen slightly and he comes to a halt.</p><p>“Why are you…?” he begins. He’s clearly shocked, so I spare him any further abuse and get right to it.</p><p>“You didn’t kill him. Did you?”</p><p>All he has to do is shake his head and it will all be over. Yet for some reason, he doesn’t.</p><p>“I can clear this entire thing up,” I continue. “Just come back with me and—“</p><p>Before I can say more, he draws the blade hanging at his hip and points it at me.</p><p>“No. I killed him. That’s why I came here.”</p><p>Though the tip of the blade presses ever closer to my throat, I don’t move an inch. He wouldn’t kill one of his own. He wouldn’t. He<br>couldn’t<br>.</p><p>Finally, the boy sighs, sheathes his blade, and walks past me with quick steps. “Just leave me alone,” he says before vanishing to somewhere further down the road.</p><p>It’s hot. The sun burns the nape of my neck as my head hangs low. I stare at my feet—at a puddle created by the cannon on the old tracks. The man I see there—a man with the same face as me—begins to cackle.</p><p>“Didn’t I say this would happen? This is all your fault! You saved him, and now someone with a bright future is—“</p><p>I stamp my foot into the puddle and shut the man up.</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: Reflections of A Fool<br>[<br>]</p><p>There was a murder in the squadron. The prime suspect was the boy who was known for being a problem, but I knew he would never do such a thing.</p><p>Or at least, I thought I knew.</p><p>Because when I broke probation and went to the border city where he was hiding, he admitted to being the killer.</p><p>*     *     *</p><p>“Captain. Are you there?”</p><p>The voice is followed by a knock at the door. It’s my subordinate, the same one who helped me slip away while I was on probation.</p><p>I’d returned to the barracks two weeks ago, and he’d checked on me every day since. I know he wants to hear what happened in the city, but I can’t tell him.</p><p>I can’t tell<br>anyone<br>.</p><p>Because my men would never forgive me.</p><p>If you didn’t go out of your way to save his life, there would have been no murder. Everything you do leads us into the jaws of death. All you know how to do is sin.</p><p>When I come to, I’m crouched in the corner of my room waiting for it all to be over.</p><p>Aw, look how upset you are! Keep that up, and your soldiers will never take you seriously again.</p><p>That voice again. Shaking it off, I stand and plant myself in front of the mirror, looking back at the man who shares my face.</p><p>I know how you can escape this darkness,<br> he says.</p><p>I reach out and brush my fingertips against the glass.<br>“Tell me.”</p><p>The man in the mirror smiles kindly.<br>It’s easy. Kill the criminal and atone. That’s the only way to save your soul—and the soul of your dead subordinate.</p><p>“I have to… kill him?”</p><p>Yes. Kill him. Just like you killed me.</p><p>As I gaze into the darkened eyes of the man in the mirror, I think back. My selfishness once cost the lives of many of my compatriots. So once I became a captain, I strove to always be thoughtful and attentive so I wouldn’t make the same mistake twice.</p><p>I killed the true me—the arrogant face in the mirror.<br>It was all I could think to do to absolve myself.</p><p>Kill him with your own hands.</p><p>I must… kill him.</p><p>I must<br>kill<br> him. It’s the only way to atone.</p><p>So that night, I slip out once more, seeking to avenge one of my soldiers and absolve myself of sin for good and all.</p><p>*     *     *</p><p>I walk for hours before finally coming to a familiar set of train tracks. As midnight comes and goes, I see distant flames dancing in the summertime sky.</p><p>The fires of battle rage in the border city.</p><p>As I pass retreating soldiers, understanding finally dawns. Our army has finally launched an attack on this city. They did so while I was on probation.</p><p>As the sunflowers along the tracks crackle and burn, a small moth descends and vanishes into the flame.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: Midnight Star<br>[<br>]</p><p>The young boy from my squad confessed to murdering one of his fellow soldiers. If I hadn’t gone out of my way to save the boy on our previous mission, the other man would still be alive. This is all my fault.</p><p>I make for the border city where he’s hiding so I can kill him and absolve myself of this sin. But when I arrive, the city is nothing but a burning husk. The army had long been plotting to advance on the city, and this was the night they finally put their plan into motion.</p><p>I walk and walk and walk, but all I see are bodies. Bodies.<br>Bodies.<br> There isn’t a single survivor to be found.</p><p>As the smell of burning flesh fills my nostrils, the stench makes flashes of a hell I once witnessed play in my mind. A time when I had just joined the army—and when my own selfishness caused my entire squad to perish.</p><p>I shake my head, erasing the sight. There’s no time to be thinking of the past. I have to find the boy, kill him, and finally atone.</p><p>But look at this place. Nothing could have survived. If the boy was here, he’s already dead.</p><p>As the thought crosses my mind, a sound comes from the burnt building beside me. If memory serves, it was once the HQ of the city’s self-defense force—the organization that tried so desperately to bring life to the town.</p><p>The fire has died down, so I slip through the entrance, hold my breath, and make my way down the hall as I follow a trail of blood.</p><p>This will be a fine resting place for you.</p><p>I find the boy in a room at the end of the hall. He’s on the floor, holding the bloody corpse of a woman in his arms. Next to her is a single burned sunflower.</p><p>The blood in the hallway must have belonged to the woman. It seems impossible for the small-framed boy to have carried her all this way, but he must have done so. Whoever she is, she looks almost exactly like him. But none of that matters now, because my only objective is to finish this.</p><p>I stand in the doorway and aim my gun, ready to finally absolve myself of my sins. But as my finger slips to the trigger, he looks up at me with a tear-stained face that causes me to take a step backwards.</p><p>In that instant, it all comes flooding back. Memories of the time when I’d just joined the army. When I pushed my squad to annihilation because of my selfishness. And the absolute hell I’d existed in ever since.</p><p>Captain, I…</p><p>I’d sobbed over my captain’s body, repeating those two words over and over. As I cursed my foolishness, I told myself I would never make the same mistake again. I would never lose another ally the way I lost him.</p><p>“Shoot him!” cries a sudden voice. I look up and see the man with my face shouting at me from a reflection in the window. “Shoot him! Erase your sins! That’s why you’re here, isn’t it?!”</p><p>Yes. That’s why I’m here. I can only atone by killing him.</p><p>Had I not saved him in battle, he would have never killed the other man. It’s my fault I lost another of my allies, and I have to fix my mistake.</p><p>But the boy with the corpse in his arms and tears streaming down his face…</p><p>He looks<br>so much<br> like me.</p><p>“<br>Shoot!<br>“ cries the man in the window again. And this time, I obey. I pull the trigger. The bullet flies, shattering the window where the face had been a moment before.</p><p>I lower my weapon and rush to the boy, who drops his gaze and begins to mutter in a voice thick with tears.</p><p>“Thought… I told you to stay away from me…”</p><p>“Yeah. You did. But…” I pause, unable to figure out what comes next. But at last, I say:</p><p>“I’m glad you survived.”</p><p>That’s all.</p><p>The boy admitted to killing his squadmate. Yet.<br>And yet.<br> He is still one of my own, a comrade-in-arms with whom I’ve survived battles and hardships.</p><p>And I cannot be happy with his death.</p><p>Now that he sits before me, I finally realize I’d taken up a gun to right my own mistakes. I was going to kill for the sake of a dead comrade.</p><p>That’s not atoning. It’s ego. Selfishness.</p><p>I’m not interested in saving my companions. Oh no. I just want to be forgiven.</p><p>“Everyone wants to hear your side of the story,” I say. “Come home. Tell the truth.” But he just shakes his head.</p><p>“There are some things I can’t say,” he says in a voice colored in agony. And when he looks at me again, I can’t bring myself to force the truth from him.</p><p>*     *     *</p><p>A month has passed since we parted ways at the border city.</p><p>I’m currently rifling through files in the storage room where the incident occurred. I want to know the truth the boy was hiding, but I’m coming up empty. No surprise there—any files have likely been intentionally destroyed. Hell, even the fact the boy was once part of my squad is now nothing but a distant rumor.</p><p>When I think about it rationally, it’s all been so strange. A murder happened between two people with a boring, normal relationship, and the military ordered the perpetrator shot on sight without even holding a trial.</p><p>Light leaks in through the crack in the reference room door. I stare at it, recalling how distressed the boy had looked. He was a criminal who killed one of his own, which is a fact I’ve grown to accept. But<br>why<br> did he do it? What was the reason?</p><p>I wish I could have brought some light to the dark truth that weighed on him. I wish I could have helped him. That’s also the job of a captain, and I failed.</p><p>If I ever get the chance to see him again, I’m going to learn the truth. Nothing will stop me this time—no matter how many orders I have to break.</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>The Soldier’s Crimes<br>[<br>]</p><p>Hello.<br>Mama<br> here. I read over the report you made on the captain. Though it was quite well-written, I feel you are avoiding certain things by using unclear language.</p><p>Let’s take a look at this part, for example:<br>Though they called him Captain Craven behind his back, he was a calm and gentle soul. But his skills as a soldier kept his hot-headed squad together, and everyone recognized that.</p><p>Now, you’re right that his squadron felt like a family because of his kindly nature. But you<br>also<br> know what happened back then, right? Don’t shy away from what the man is like on the inside. Remember what he’s done to protect his men, and how guilt weighs him down as he fights.</p><p>These things are important for you to write down, because I’m certain it will prove a bit of salvation for him as well.</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>A Letter to a<br>Boy Soldier<br>[<br>]</p><p>Hey there. How you holding up?</p><p>Just Kidding. I already know you get all mopey whenever we put you in the discipline room, but I really want you to think about what you did this time. I understand wanting to sneak a little extra food when you’re on mess-hall duty—I really do. But getting scolded for it doesn’t give you a free pass to knock out one of your fellows. You need to work on solving problems like that with words instead of fists, and that’s something I’m going to help you with in the future.</p><p>Oh, and while we’re at it, please be a little more thorough when you’re on laundry duty. You don’t want the enemy to smell us coming from a mile away, right? And yes, I know this letter is veering into nagging territory, but I really need you to be more considerate of your squad. If you treated them even half as good as you treat the horses…</p><p>You know what? I’m not even going to finish that sentence, because you’ll just get mad. But that said, the horses are always in a great mood whenever you work the stables, and I appreciate how you always treat them with so much love and care.</p><p>Anyway, look forward to having you back in the squad soon.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>Promotion Proposal<br>[<br>]</p><p>The tide of battle turned greatly in our favor with this recent operation. The brave judgment of one particular soldier brought this about, and his achievements in our most recent operation are beyond reproach.</p><p>It is for this reason that we propose his promotion to the rank of Captain.</p><p>I am aware that his temper was a topic in a recent meeting, but this likely stems from discord with his activist father—and is also not that unusual with young people today. Furthermore, I hear he has been calmer since losing his squad in a recent mission, so perhaps that experience has served as a catalyst for self-improvement. However, even if this change of heart does not stick, command is well aware that soldiers with his personality type are very good at controlling subordinates, which makes the subject of his temperament ultimately inconsequential.</p><p>It is our opinion that his particular blend of combat prowess and tactical aptitude, coupled with his personality, will help him rise through the ranks quickly, and that he may, in fact, lead our entire force one day.</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>Fifty Years Post-War<br>[<br>]</p><p>Retired Soldier A: That battle was hell. I could hear my fellow soldiers screaming for help all around me, and with each shriek, I told myself they were going to be fine. I had to, you understand? Otherwise, I’d never be able to get them out of my mind, which would have been the end of me.</p><p>Anyway, that’s when I saw the enemy captain pointing his gun at a soldier begging for his life. His eyes were the devil’s, cold and heartless as an ice storm. I don’t think that man had a drop of human blood in him; hell, he was the same one who sculpted the mountains of corpses and unleashed the rivers of blood. And sure, I survived, but I still remember the fear. The fear never went away.</p><p>I hear that devil is still hailed as a hero in his homeland. I suppose war grants boons like that to creatures such as him.</p><p>That sounds like a terrifying experience. May I ask, have you been struck by any particular feelings in the half-century since the war came to an end?</p><p>Retired Soldier A: Fifty years already? My god…</p><p>Well, that war may be over, but I doubt mine will ever end. Not unless I find a way to forget the look in that devil’s eyes…</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><pre><code class="hljs">              </code></pre><p>Confidential Recording<br>[<br>]</p><p>“This is the western dispatch unit. I need confirmation on a certain matter. Over.”</p><p>“<br>Make…quick.<br>“</p><p>“I wanted to ask about the child we rescued from the kidnapper.”</p><p>“<br>Get to…point.<br>“</p><p>“Was it really the enemy that kidnapped him?”</p><p>“<br>Yes. When he…rescued from…returned…parents delighted.<br>“</p><p>“But the way he was crying made me think<br>we<br> were the kidnappers.”</p><p>“<br>…surprised…the army…home.<br>“</p><p>“He was clinging to the corpse of his so-called kidnapper.”</p><p>“<br>…a point? If so…quickly.<br>“</p><p>“Are we sure the kidnapper wasn’t his real parent?”</p><p>“<br>…to say…orders were mistaken?<br>“</p><p>“I can’t rule out the possibility.”</p><p>“<br>If you…career as a soldier, then…not entertain unnecessary thoughts.<br>“</p><p>“Yes, sir. I apologize. Ending transmission. Out.”</p><p>“…This is the right thing for a soldier to do. I can’t question it.”</p><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2><pre><code class="hljs">              </code></pre><p>A Letter from a Hero<br>[<br>]</p><p>I gathered all the information I could find on the secret operation and wrote it down in a single document—one I’m now planning to release to the public.</p><p>It’s wrong for a soldier to do such a thing, and I will doubtless be named a traitor to my homeland if I go through with it. But at this point, I’m used to committing sins. I’ve completed missions as ordered, and killed more people than those orders even required. My sins are legion, because I firmly believed that by killing, the dead men in my squad would forgive my selfishness.</p><p>But if I’m going to keep doing wrong, I should finally commit a wrong on the right side of justice.</p><p>I’ve steeled myself for being ridiculed over my definition of justice, but in the end, it doesn’t matter. I’ve made up my mind. The world will know of this inhuman operation that has brought so much pain to my men.</p><p>And they will know it because of me.</p>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Lars</title>
    <link href="/2024/03/07/Lars/"/>
    <url>/2024/03/07/Lars/</url>
    
    <content type="html"><![CDATA[<h1 id="Lars"><a href="#Lars" class="headerlink" title="Lars"></a>Lars</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>I inhale a lungful of battlefield air, rich with a mix of gunsmoke and blood. Our operation was a smashing success, but while my fellow soldiers are content going back to base and celebrating our victory, I’m heading out on a new mission. Because the only time I feel alive now is when I fight. Revenge drove me. It’s all that ever drove me. But then I ended up killing my own father. And on top of that, it turns out the people I called my family were actually my enemies. What a goddamn joke, right? Anybody else laughing here?</p><p>When I return to reality, I see piles of corpses everywhere. It’s all my doing, this carnage, but instead of rage or sorrow, I just feel a strange sense of calm. Honestly, killing is the only thing that brings me peace anymore. Suddenly, an explosion shakes the ground—a close one. The sky turns red as flames arc up toward the heavens. As I stare at this crimson sky, my heart begins to race. I set out in search of someone to fight, hoping to calm my jangled nerves.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>The war has turned in our favor. The enemies we don’t kill we send running into the night… But it still isn’t enough. I find myself picking my way across a viscera-strewn battlefield just in case we missed a straggler. After a bit, I sense someone hiding behind a collapsed house. Battle fever floods my senses. I raise my sword and leap out of hiding, prepared to strike down my terrible foe. But there, crouching on the ground, is a little girl.</p><p> I think.<br> I extend a bloody hand and grab the girl by the arm. She screams. I don’t care. I give her a good yank and start walking. She responds by pinwheeling her other arm and toppling face-down into the mud. That’s when I realize the kid is blind.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>The girl, still sitting on the ground, grabs my hand and says,</p><p>“Oh no, mister! You’re bleeding. Are you okay?”</p><p>The question hits me wrong, and I smack her hand away. After that, we wait in a long, uncomfortable silence.</p><p>“It’s not my blood,” I say finally, as much to break the silence as anything else. I wipe my hand on my pants to clear off as much gore as I can, then help the kid up. Her hands are so damn<br>. I’d forgotten hands could be soft. The only thing mine are good for any more is murder; it’s hard to believe her hands and mine are the same thing.</p><p>With no other choice, I throw her across my back and start working my way back to base. I can feel the kid’s warmth against me. And there, in the strange silence you always get on a battlefield after a fight… The only thing I can hear is the beating of my own heart.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>Eventually, we make it to a field hospital. It’s a nice place, actually, with sunlight coming through the windows and wind rustling the trees. The kid seems okay with it, at least. She lies on a bed, her gaze trained on the window to her side.</p><p>“Hey, kid,” I ask her.</p><p>“What were you doing on the ground back there?”</p><p>She pauses for a second, then speaks. She tells me how she’d been neglected by her parents her whole life before they finally abandoned her once the war came home.</p><p>When her story is done, she turns her head in my direction and asks:</p><p>“What color is the sky right now, mister?” I take a look out the window.</p><p>“Blue,” I say.</p><p>“A nice, deep blue.”</p><p>She closes her eyes—I have no idea why—and begins to try and imagine what<br> might look like. I don’t know why I feel uneasy here, but I do. Something about being near this kid puts me on edge. My heart is racing again—but in a different way than the discomfort I’ve felt for my entire life. And as I try to identify what this strange feeling is, I picture the color of the sky in the girl’s imagination.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>The Redacted Past Part 1<br>[<br>]</p><p>After he returned from battle</p><p>Cheers ring out from the dusty barracks. In a shift from the tense atmosphere on the eve of their operation, the soldiers now laugh easily with each other as they celebrate the great victory they have won.</p><p>“Cheers!”</p><p>Golden ale flows freely and without formality of rank. The men drain glass after glass, scarcely noticing how much they are spilling in the process. Their unit had secured a miraculous victory, and this party is their reward. But they are drunk on more than ale this night; they took on an impossible mission and came back alive, and this fact alone makes their heads swim and their speech giddy. Men brag of their accomplishments in battle. They brag about the beauty of their wives. Every lip is loosened and free. Apparently some of the soldiers even earned promotions for their valor on the mission.</p><p>But inside this bright atmosphere, a single young soldier sits apart from the others with a glum look on his face. He had infiltrated the enemy base alone—against the orders of his direct commander—and slain the enemy captain. Though their victory was due in large part to this deed, his actions were still troubling. No matter how well it had turned out, he had ignored a direct order from a superior; a court-martial would be unsurprising. That he did so because of a personal grudge is perhaps the most troubling fact of all. By all rights, he should have died on that battlefield. But his life was saved by his fellow soldiers—and especially by the quick thinking and bravery of the very captain whose orders he was so quick to disregard.</p><p>Regardless, the boy sits alone, not bothering to thank the men around him or share a meal or drink. His mind is still back with the enemy commander. The same man who killed his parents so long ago. After years of chasing him, the boy had finally cornered his target and plunged his weapon into his heart, along with all of his hate. But the fall of the curtain on his revenge was hollow. He felt no exhilaration. No accomplishment. Instead, he was left with the empty bones of a past he could never reclaim. With that gloomy sadness filling the boy’s head, the dying enemy captain spoke to him. He told the boy something that turned everything he’d ever believed on its head. And now, he sits among his celebrating fellows and replays the words over and over again in his mind:</p><p>The secret of my birth. My past. My true father.<br> It is so farfetched as to stretch the bounds of credulity, and yet he is unable to set it aside.</p><p>The boy stares blankly into space. The drink in his hand has long since grown warm, but he pays it no mind. Suddenly, a brawny soldier approaches him. Ignoring his troubled state, he plops down beside him with a most inconsiderate thud. This man had always treated the boy harshly—more like an enemy than a fellow soldier in the ranks.</p><p>“You here to pick another fight?” asks the boy. He can’t even bother to lift his head for the query, feeling all the more gloomy from the man’s presence.</p><p>“Fight? No, boy. I’m damn proud of you.”</p><p>The boy is shocked to hear actual praise coming from the man. So shocked that he looks up in spite of himself. There’s a slight hint of envy in the words, as if the man wishes he had the guts to disobey orders and sneak off to kill the enemy. Regardless, the boy finds the compliment embarrassing. Quickly lowering his head to hide the flush on his cheeks, he stands and makes his way to the exit.</p><p>“Goin’ for a piss, there?” asks the brawny man. The boy gives a vague response and ducks outside.</p><p>Night has fallen on the land. The silence is so perfect—especially when compared to the chaos of the barracks—that it causes his ears to ring. Camaraderie and banter did not come easily to him by nature, but that is not the reason for his discomfort this night. He has so many things to think about. And here, in the dark, his thoughts are free to run rampant. He stands there for a long time, until a sound finally causes him to turn around. An injured soldier is behind him, leaning on a crutch. He looks at the boy and cuts straight to the point:</p><p>“So, what were you doing in the enemy camp?”</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>The Redacted Past Part 2<br>[<br>]</p><p>The night had deepened, the surroundings now fully dark. Faint light streams out from the windows of the barracks. The soldiers inside were still busy drinking and boasting. But here, away from all the sound and bluster, two fellow soldiers face each other in silence. The boy studies his unexpected visitor. He is young, with strong features and a shock of blond hair. But his most noticeable characteristics are his blue eyes, which seem to shine with their own inner light. The boy usually pays no mind to the appearance of others, but even he remembered that distinguishing feature. He is one of the soldiers who received a promotion. Recalling that, the boy’s puzzlement only grows. Gazing upon the soldier before him, he thinks back on the question he was asked.</p><p>He asked me what I was doing in the base.</p><p>We’re not even particularly close, so why is he starting this conversation with me?</p><p>And why did he wait until we were alone to approach me?</p><p>“I can’t answer you unless I know why you’re asking.”</p><p>The blue-eyed soldier stares back at him.</p><p>Then, after a moment, he begins to tell his tale.</p><p>“We were part of the operation.”</p><p>“My squad arrived at the camp after you killed the commander.”</p><p>“The enemy was in total disarray, and we were able to dispatch the stragglers with relative ease.”</p><p>“Once that was done, we searched their camp.”</p><p>“And guess what I found?”</p><p>“A confidential file marked with the crest of<br>our<br> army.”</p><p>“Naturally, I was curious how this ended up in enemy hands, so I picked it up to take a closer look.”</p><p>“But before I could open it, someone attacked me from behind and knocked me unconscious.”</p><p>“When I woke up, the file was gone.”</p><p>“But here’s the thing: We neutralized the enemy soldiers—every last one of them. So who the hell attacked me?”</p><p>The boy starts.</p><p>“Are you saying<br>I<br> attacked you?”</p><p>The other soldier locks his blue eyes on the boy.</p><p>“That’s my guess, yeah.”</p><p>“I mean, you disobeyed orders, right? Infiltrated the camp and killed the commander all by your lonesome?”</p><p>“Even you have to admit that’s suspicious.”</p><p>“So I’ll ask you again: What were you doing in the enemy base?”</p><p>When the boy finally speaks again, he chooses his words carefully. He tells the blue-eyed soldier how his parents had been killed when he was young. How the killer was the enemy commander. How he became a soldier specifically to find that man and end his life. And how he didn’t care if he would end up court-martialed, because his revenge would be worth any price.</p><p>The blue-eyed soldier remains silent. It’s as if he’s trying to discern the truth in the boy’s words.</p><p>Silence settles between the two soldiers. In the quiet, the boy thinks about his comrade’s story.</p><p>He found one of our confidential files in the enemy base.</p><p>But before he could read it, someone attacked him and stole it.</p><p>Someone from our army.</p><p>Is that file related to what the enemy commander told me?</p><p>Does it relate to our country’s past? And does it hold the answers I need?</p><p>After a bit, the blue-eyed soldier nods and turns away, apparently satisfied that the boy is innocent.</p><p>“Wait!” cries the boy.</p><p>The man stops.</p><p>“What happened to the file?”</p><p>“Well, if my suspicions are correct and it was taken by one of us, it should be in the vault here at the base.”</p><p>He then turns back to the boy and adds:</p><p>“But don’t go getting any stupid ideas.”</p><p>“You already disobeyed orders once, and it won’t go well if you do it again. So just keep your head down, okay?”</p><p>He then departs, limping away on his crutch. But his warning falls on deaf ears. For the boy would do anything to know what is in that file.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>The Redacted Past Part 3<br>[<br>]</p><p>Why did he tell me that story in the first place?</p><p>He clearly thinks we have a traitor in our midst.</p><p>He made contact in hopes of finding out who it is, so maybe we can form a partnership and…</p><p>The boy lets this thought marinate in his mind for a bit before suddenly rejecting it. If the file<br>does<br> contain the secret of his birth, he doesn’t want anyone else knowing about it. He begins to formulate a plan. The blue-eyed soldier is likely correct: If the file was stolen by a traitor, it would be located in the vault.</p><p>Their base is a large, sprawling complex with many buildings. There are barracks, a training ground, a reference library… And the vault, which is only accessible to a select group of people. Now in the library, the boy finds himself staring at a set of blueprints for the base. Coated in dust and weathered away to a dim yellow color, they seem ready to fall apart in his hands. But he finds the part he wants, carefully tears it away, and quickly sidles out of the room. It is the route to the vault.</p><p>The boy makes his way to the changing room. But not to don a disguise. Instead, he climbs on top of a locker and removes a dusty wire panel covering an exhaust duct. A duct that leads to the vault. He always cursed his small physique, but is now thrilled to have it. Drawing his shoulders tight, he manages to squeeze inside. Holding his flashlight between his cheek and his shoulder, he wriggles his way forward like an inchworm. Every movement brings a new puff of dust or a cobweb brushing against his face. He struggles desperately against the urge to cough. But just as he is about to lose hope……he arrives at his destination. According to the blueprints, the vault is directly below him. With a sigh of relief, he reaches out to the wire panel. But he can’t get it free. Anger suddenly races through him, and he makes a rash decision.</p><p>Applying all of his strength to it, he shoves the panel until it breaks apart with a crack loud enough to wake the dead. The boy scans the inside of the vault, certain that he has alerted a guard or triggered some kind of alarm. The only source of light is a dimly illuminated exit sign.</p><p>When no one comes to investigate, the boy lets out a sigh of relief. Wiping a bit of sweat from his brow, he lowers himself down. The vault is filled with row after row of metal shelves. Each shelf has a number, with contents organized by date and type, such as confidential documents or artifacts claimed from the enemy. The boy roams through the rows, shining his light here and there. He checks dates on the confiscated items and opens any file that seems like it might be relevant to his interests. Finally, he stumbles across a folder with the word “Confidential” stamped across it.</p><p>It also contains the seal of their army. Just like the one from the other soldier’s tale.</p><p>The boy takes a deep breath and opens it. The words inside immediately draw his eye:</p><p>“INFANT ABDUCTION STRATEGY”</p><p>His heart begins to race. With a single trembling finger, he reaches out and slowly turns the page.<br>It is a complete accounting of his country’s actions. The plan was designed to create powerful soldiers. They researched genes from people across the world, looking for those with the traits they sought. Before long, they had a pool of possible recruits. Once an infant was found from a desired genetic line, they were kidnapped and raised as one of their own citizens. Everything the enemy commander had told him was true. And with each line he reads, the boy’s long-held beliefs collapse. It is a pain unlike anything he has ever felt.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>The Redacted Past Part 4<br>[<br>]</p><p>Here, in the darkest part of his nation, the boy has uncovered the harshest of truths.</p><p>The file. The vault. His history. The “Infant Abduction Strategy.” The words of his hated enemy.</p><p>The words on the page. It was all coming together. His head reels. His chest tightens. He feels like he is about to faint.</p><p>But he does not. More precisely, he<br>will<br> not. Because he had to avoid the blade of the knife that is racing up behind him. Perhaps it is the boy’s natural instincts that warn him; perhaps the superior genes that were mentioned in the file. Regardless, he twists his head to the side and narrowly avoids having it separated from his shoulders. The weapon is a military-issue combat knife. His attacker is a man in a mask. A thin ribbon of blood oozes down his neck where the knife had brushed it. Though the boy does not understand what is happening, his training takes over and he readies himself for a fight. His attacker had hoped to kill the boy from behind, which meant his plan was already falling apart. Taking advantage of this brief lapse, the boy twists to the side and spins around to face his attacker. He grabs his arm by the elbow and wrist, locking it in place. Then he shoves the man into a nearby wall and tears off his mask.</p><p>To reveal… A pair of beautiful blue eyes. The boy is stunned for the briefest of moments. But it is enough. The attacker twists his arm from the boy’s grasp and backs away from him.</p><p>“Well, that was damn unlucky,” says the man.</p><p>“Or maybe you’re just better than I thought.”</p><p>“Also, I thought I told you not to get any stupid ideas.”</p><p>It was true: the man had given him a warning. But the boy had ignored it, and now they were facing off once more. This time, there would be no talk. No parley. Instead, only one of them would leave the vault alive. The blue-eyed soldier snarls at the boy. It is a sound of anger, sadness, and indecision.</p><p>“Do you think I WANTED to do this!?”</p><p>“You think I WANTED to stab a fellow soldier in the back!?”</p><p>The blue-eyed man then tells the boy a shocking truth: The chatter at the party about the “blue-eyed guy being promoted” was based on a lie. He had actually been transferred to the national intelligence corps. There, he was ordered to feign injury while eliminating anyone who might threaten state secrets. One of those targets was the boy, who had attracted attention when he ignored orders and entered the enemy camp alone. His superiors ordered him to test the boy by revealing confidential information in order to see where his true loyalties lay.</p><p>“Goddammit,” breathes the man when his tale is done.</p><p>“GODDAMMIT!”</p><p>His emotions take hold, and he lunges at the boy. But the younger soldier calmly dodges the blow and takes a couple of steps back, waiting for an opportunity to deploy the small knife he has hidden on his person.</p><p>You came here expecting prey,<br> thinks the boy.<br>But in the end, I am the one hunting you.</p><p>The man screams and lunges at the boy again, but the attack is sloppy and easily dodged. As his foe lumbers past, the boy pulls his knife from its sheath and draws it across the man’s throat. The blue-eyed man falls to his knees, gasping. He presses his hands against his throat, but the blood simply courses through his fingers. As his heartbeat slows, he leans against a wall and slowly slumps to the floor. The light in his beautiful blue eyes dims. The boy gazes into them quietly.</p><p>He does so for a very long time. When he finally comes back to reality, the man is no longer breathing. Sheets of paper from the file are scattered at his feet. He picks up one blood-soaked page and looks it over. It is a list of all the children who had been abducted. The plan had been in place for some time, long enough that many of his superiors and fellow soldiers were likely victims of it. They had been stolen from other countries, incorporated into a new nation, and given fake lives—just as he had been. Unable to collect his chaotic thoughts, he finds himself presented with a cruel truth: By killing a man who was supposed to be on his side, he finds himself with nothing left to trust. Not his country, not his fellow soldiers, and not even himself.</p><p>Anger. Sadness. Unease. Fear. Hate.</p><p>All these emotions swirl and churn in his heart.</p><p>“So then… What should I live for?”</p><p>The words that spill from his quivering lips are quickly swallowed up by the darkness.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Children Crossing the Twilight, Part 1<br>[<br>]</p><p>The summer night swelters. The air is still. A roar of flame climbs over the darkened suburbs and into the starry sky.</p><p>The labor camp beyond the barbed wire burns.</p><p>An alarm signals an emergency.</p><p>“We’re under attack!” cry the guards.</p><p>The workers’ footsteps become a frenzied pounding as they seek escape. The sudden fires throw the inside of the building into chaos. A small girl of meager years races down the burning corridor, her wails echoing off the walls.</p><p>“Quickly! This way!”</p><p>A guard grabs her hand and attempts to pull her away. His plan is to take the sobbing girl away from the fire and outside to safety. But instead, she looks up with frightened eyes and digs her heels in tight. Her response is understandable. For she is a worker at the camp. Her life has been a litany of abuses at the hands of the military, including guards like him. So when he grabs her hand, her fear instinct kicks in, and she is unable to move.</p><p>His irritation rising, the guard raises his voice.</p><p>“Do as I say, girl! Take advantage of the chaos and get out of—“</p><p>His words grind to a halt. The girl stares at the blade that now protrudes from his chest. Someone has stabbed him from behind with a rapier.</p><p>“You…”</p><p>The guard musters what remains of his hate to turn and face the figure behind him. It is a slim young man with silver hair. In his fading consciousness, the guard recalls a wanted poster he has seen countless times. It showed the image of the young man who now stands before him; of this there is no doubt. The army has been searching for him, for he leads a group of insurgents who attack labor camps such as this. And it is him and his people who caused this chaos.</p><p>The bloodied blade slides from the guard’s body. His corpse slips into a puddle of blood on the ground.</p><p>“Nnngh…”</p><p>The girl trembles to see the tragic sight before her. Her legs are heavy weights. The young man wipes his bloody blade on the fallen guard’s clothes before turning his attention to the girl.</p><p>“Come on. We’re getting out of here.”</p><p>There is one reason he and his comrades attack the army’s forced-labor camps:</p><p>They seek to free children captured by the Infant Abduction Strategy and absorb them into their ranks.</p><p>The Infant Abduction Strategy.</p><p>It is a secret operation in which this country’s army kidnaps genetically superior children from foreign countries and trains them to be soldiers. Those who prove ill-suited for warfare are instead thrown into labor camps. The young man was abducted as part of this operation. And though he fought for his new country for a short time, he deserted once he learned the truth of his background. Now, he attacks their camps alongside those who are also fueled by a desire for revenge, freeing the laborers before taking them in as companions.</p><p>One day, he will find and kill the man responsible for the Infant Abduction Strategy—the man who tore him from his parents and made his life a misery. But in order to accomplish this task, he needs fighters of his own.</p><p>A dozen or so of his people wait for him outside the burning camp. The children who had been working there gather around them. As the young man sends the girl over to the others, one of his compatriots—a man with freckles—offers a report:</p><p>“He’s still not back.”</p><p>He<br> is one of their fellows who often acts outside of orders.</p><p>“Again?”</p><p>Unable to hide his irritation, the young man clicks his tongue.</p><p>“What’s the plan?” asked the freckled man.</p><p>Even if they decide to launch a search, the camp is engulfed in flame. And while they are safe at the moment, enemy reinforcements are surely on the way. But…</p><p>“Take the kids and get out of here. I’ll catch up.”</p><p>There is no hesitation in the young man’s voice. Once he finishes speaking, he steps back inside the burning camp. Flames billow in every corner. Superheated air burns in his lungs. But the young man with silver hair continues to search for his compatriot—and at last, he finds him.</p><p>A boy sits on the ground, his back leaning against the wall. His pitch-black hair—a rare feature in this part of the world—shines brightly in the light of the billowing flames. He has taken a gunshot wound to his leg—but though it has rendered him immobile, it does not appear fatal. The young man sighs in relief before offering a cutting remark:</p><p>“Pretty sure this wasn’t where I ordered you to be.”</p><p>“I’m not apologizing.”</p><p>The black-haired boy is defiant. His gaze drops to the dead soldiers scattered on the ground around him.</p><p>“I don’t care about saving kids; I just want to kill as many of these bastards as I can.”</p><p>After being taken through the Infant Abduction Strategy, the boy was deemed ill-suited for combat and sent to a labor camp. He now harbors a deep hatred for the soldiers that abused him. As his leader, the young man finds this desire for revenge to be the height of selfishness. But he reprimands the boy no further. Instead, he slings him over his shoulders and silently moves back up the flaming corridor.</p><p>Eventually, he manages four words:</p><p>“I’m glad you survived.”</p><p>They fall from his mouth without warning. The young man understands why his subordinate acts as he does. When he was part of the army, he also made the same mistakes over and over in an attempt to avenge his parents. And every time, it was his captain and squadmates who pulled him from the fire.</p><p>The black-haired boy reminds the young man<br>so<br> much of his earlier self. And when he thinks of it that way, he finds he cannot abandon him to fate.</p><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Children Crossing the Twilight, Part 2<br>[<br>]</p><p>When he was yet small, the young man’s parents were killed by an enemy army, after which he became a soldier so he might avenge them.</p><p>But…</p><p>Once his revenge was complete, he was forced to face an empty truth:</p><p>Those he believed were his parents were actually not. They were merely a couple attempting to raise a kidnapped child into the perfect soldier.</p><p>And…</p><p>The person he killed to avenge his parents was his true father.</p><p>On that day, he found his resolve. He would seek out and kill the man who devised the Infant Abduction Strategy. The top-secret military operation that had ruined his life. So he gathered people who harbored the same resentment, a group that grew more powerful by the day. They made their headquarters in a corner of a destitute area, acting as a kind of vigilante group in the region.</p><p>Violence had once been a staple of life in the area, but since the young man and his group arrived, it had grown safe enough for children to play outdoors.</p><p>But…</p><p>Today, things are different. A symphony of gunshots and heavy bootheels fills the air. The young man’s compatriots fall in a hail of bullets, their bodies trampled without mercy. Innocent villagers are caught in the crossfire. The group has attacked so many labor camps that the enemy army was finally able to locate their headquarters. As the young man shouts orders in an attempt to repel the siege, the gears in his head continue to turn.</p><p>The enemy had marched right into their stronghold without activating any traps or setting off even a single alarm. Even the best-trained soldiers could not accomplish such a feat. It’s as if they knew exactly where to step. Is it possible? Could someone on the inside be providing them intelligence?</p><p>As doubt scrambles for purchase in the young man’s heart, he shakes his head. Everyone on his side fights for the same objective; none would ever do such a thing. He shouts another order and draws his sword. As he does, the freckled man rushes to his side.</p><p>“I’ll hold them off,” he says. “Take any who can still fight and get out of here.”</p><p>The young man opens his mouth, thinking to reject the man’s proposed course of action. But he falters under the man’s straightforward gaze. The freckled man continues:</p><p>“We need you to live.”</p><p>His eyes bear down on the young man with determination and confidence. He will entrust all that is left to him so he might accomplish their mission: revenge on those who ruined their lives with the Infant Abduction Strategy.</p><p>And…</p><p>He could not find it in his heart to betray the resolve of his compatriots. That is the answer the young man arrived at.</p><p>He takes any who can still move and escapes the burning stronghold. Dawn is still a distant dream. The remaining dozen or so fighters sit together in a remote ruin and speak of what is to come. They have somehow evaded any pursuers along the way. But the army knows the direction in which they took flight, so they cannot escape them for long. And yet, the young man can’t let the responsibility he has been entrusted with go to waste.</p><p>“We need to kill the man in charge of the Infant Abduction Strategy before we’re found. Only then will our revenge be complete.”</p><p>They know their target is stationed in a domestic military facility. The young man produces a sketched set of facility blueprints they obtained for just this moment, then begins laying our their plan in a hoarse voice. The remaining dozen or so fighters will infiltrate the facility and kill key military personnel. It is a plan most reckless. But if they are going to be tracked down and cornered anyway, fighting is a better option than running. Or at least, that’s how the young man sees it.</p><p>“I’m not asking you to come with me,” he continues. “I want as many of you to survive as—“</p><p>“I’m going.”</p><p>Who interrupts, other than the black-haired boy? The one who acts of his own accord; the one who has caused the young man no end of grief.</p><p>“I didn’t stick with you all this time to<br>survive<br>,” says the boy. “I did it for revenge.”</p><p>When he speaks, the rest nod in determination before raising their voices in support of the plan. And though the young man has nowhere left to turn, he at least has his comrades. Dawn breaks. Faint light flickers in through rural foliage. The silver-haired young man and black-haired boy patrol the area around the ruins in which they hide. Suddenly, the boy comes to a halt, staring up at the vanishing stars. The gruff air he typically carries has faded into the shadows.</p><p>“If we fail, we’ll die,” he murmurs.</p><p>“Pretty much,” replies the young man.</p><p>“But what happens if we succeed?”</p><p>The boy levels his gaze on the young man.</p><p>“I’ve always wondered that: How am I supposed to live once I have my revenge?”</p><p>The young man has no answer. At first, he lived to exact revenge on the foreign soldier who killed his parents, only to learn the man was actually his real father. Since that day, he has lived for revenge on those who kidnapped him as a part of the Infant Abduction Strategy. That thought alone carries him through the endless days of fighting. Now that he thinks about it, vengeance has been his<br>entire<br> reason for living. He has forgotten what it is like to live without it.</p><p>“We’ll figure it out once it’s over,” says the young man finally. “Until then, we just need to survive.”</p><p>The black-haired boy gives a sad smile unlike his typical brusque self.</p><p>And…</p><p>The young man returns from patrol and falls into his bunk. When he wakes up, he finds the boy gone. All that remains are his belongings. They search his bag and find a single piece of paper. Written on it is the day’s temperature and weather, as well as a description of the townsfolk. The boy’s comrades tilt their head at the nonsensical letter. Why has he left this? But the young man understands.</p><p>“It’s a code.”</p><p>It is terribly similar to one the military uses, which means they cannot decipher it without a matching decoder. But the question the young man had is now solved. The army had known exactly what to expect when they attacked, and that was most certainly due to…</p><p>The young man decides to accept his betrayal.</p><p>But…<br>He remembers how sad the boy’s smile was at dawn. The image is seared into his mind. He will never forget it.</p><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Children Crossing the Twilight, Part 3<br>[<br>]</p><p>The young man wades through waist-deep water along with a dozen or so of his compatriots.</p><p>In the dead of night, they are making their way through a sewer. It connects to a canal that surrounds the military facility, and is the optimal path for sneaking in while avoiding detection.</p><p>Their destination is the facility’s control room. The man responsible for the Infant Abduction Strategy—the program that took them from their homelands and ruined their lives—should be waiting there. They will kill him, and in doing so have their revenge. That is their plan.</p><p>The sewers are silent, save for the occasional ripple of disturbed water. The enemy does not seem to know they are there. But they all know that is likely not the case, and so proceed with the utmost caution. The black-haired boy always acted on his own accord. He left proof he had been working with the enemy before vanishing from the group. But before he did so, they informed him of their plan to infiltrate the facility. Though the young man changed the date, time, and route of the operation, it is likely the black-haired boy told the army enough for them to be on alert. This will doubtless be the most difficult of fights.</p><p>At last, they arrive at a ladder leading to the surface. The young man turns to his allies and speaks in a heavy tone. He tells them there is one thing he has to do before killing the person responsible for the Infant Abduction Strategy. He must find the boy who vanished after leaving proof of his betrayal and ask him<br>why<br>.</p><p>The young man continues:</p><p>“If he really was communicating with the enemy, he wouldn’t have left proof for us to find.”</p><p>“I saw in his eyes how much he hated our enemy. None of that was false.”</p><p>Even now, he trusts the black-haired boy. For he is just as reckless as the young man used to be. The young man knows his request to find the boy is selfish; they don’t even know if he is in the facility at all.</p><p>“Anyway, I won’t ask any of you come with me,” concludes the young man as he casts his gaze downward. The rest of his group chuckles.</p><p>“We’ve always known how selfish you are, yet we chose to stick by your side. We burn with the same need for revenge as you, yet we also know the boy wouldn’t betray us without some reason.”</p><p>These are their words. While the need for revenge may be the warped strand that keeps their group together, they also have a firm bond of trust.</p><p>“Thank you,” says the young man.</p><p>Together, they climb the ladder and move into the base. The group had steeled themselves for a battle against uncountable enemy soldiers, but security is unnaturally lax.</p><p>“They’ll be here any second! Send out the patrols and ready for a counterattack!”</p><p>Hearing enemy soldiers yelling orders, the group freezes in place and attempts to get a better idea of what is happening.</p><p>But…</p><p>“Intruders! Intru—“</p><p>The guard’s voice suddenly cuts off of amidst a burst of gunfire. The group has no idea what is happening, which makes the situation all the more dangerous. Yet they have no choice but to take advantage of the chaos and act. They carve a path with blade and bullet, proceeding through the base in search of the black-haired boy. Their destination is the control room, where the young man feels certain he will be found.</p><p>His trust in the boy has not wavered; not even when presented with proof of his betrayal. His heart is bound not by logic, but by faith, and it now tells him where to go.</p><p>And then…</p><p>As the group nears the control room, their eyes widen at the terrible sight before them. Bodies of dead soldiers lie scattered across the quiet hallway. Bullet holes scar the walls around them. The young man has an awful feeling in his gut. His heart pounds in his ears. He takes a moment to calm his breathing, then begins to follow the trail of blood.</p><p>Silence hangs heavily around them. Not a single guard stands watch outside the control room—the place where the man responsible for the Infant Abduction Strategy should be. At a wordless signal from the young man, his companions batter down the door.</p><p>But…</p><p>The room is silent. There is no sign of the enemy leader they are looking for. Instead, there is someone else lying on the floor. His black hair is matted with blood. Breath rattles in his chest as life slowly abandons him. The young man’s eyes widen. As one, the group breaks into a dash and rushes over to the boy.</p><p>“H-hey, boss…”</p><p>The corner of the boy’s mouth, thick with blood, quirks upward in a half-smile. The young man crouches down and tells him not to speak. As he inspects his wounds, his mind whirls, wondering if there is a way to save him. But his body is riddled with bullets; everyone can see his time is nearly gone. The boy croaks out a hoarse voice, apologizing for his actions before attempting to explain.</p><p>The enemy had approached him, offering to put him in contact with his real parents if he turned traitor. But when the army invaded the destitute district and began slaughtering people indiscriminately, he immediately regretted his decision. So he turned his coat again, using his position as their mole to infiltrate the facility and kill the man responsible for the Infant Abduction Strategy. It…did not go well.</p><p>As the young man listens to this tale of regret, a thought comes to him: Perhaps they should not forgive the boy for divulging information to the enemy.</p><p>But…</p><p>Would he have done differently in his place? The young man is not so sure. Can he blame the boy for being led astray because of a desire to find happiness with his family?</p><p>“It’s fine,” says the young man. “Don’t worry. I’ll finish the job.”</p><p>“Thanks… And maybe one day…”</p><p>A melancholy smile spreads across the black-haired boy’s face.</p><p>“You can tell me what comes after revenge…”</p><p>His words stop. He lies still. The young man watches as his life ends, then quietly gets to his feet. They must keep going. Vengeance will not wait. The boy has killed the guards and plunged the facility into chaos. They cannot waste this opportunity.</p><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Children Crossing the Twilight, Part 4<br>[<br>]</p><p>The black-haired boy infiltrated the military facility as a mole. But after pretending to serve them, he bore his fangs and killed countless guards, causing chaos to descend upon the facility. And though he ultimately perished… His compatriots and allies followed the path he carved and successfully reached the core of the facility.</p><p>Now, they continue searching for the man responsible for the Infant Abduction Strategy. An inhumane project wherein the country kidnaps children from neighboring lands to raise as either soldiers or laborers. The boy and his companions are victims of this operation, and their goal is to kill this man and get their revenge.</p><p>Dawn approaches. At the gate behind the facility, several shadowy figures mill about in the dark.</p><p>“Why aren’t the damned reinforcements here yet!?”</p><p>The man who cursed wears a uniform decorated with several medals. He is the person responsible for the Infant Abduction Strategy, and he now runs a nervous hand through his long beard. Unable to hide his irritation in the face of his guards’ failure, he is resorting to chewing out his subordinates.</p><p>“The reinforcements will be here in less than ten minutes, sir,” one of his personal retinue tells him. He gestures to a waiting car, inviting the man inside. They will ferry him away to a safe place until the commotion dies down.</p><p>But…</p><p>Gunshots ring out. Bullets pierce the guards’ heads, sending blood flying. The man realizes what is going on, but by the time he attempts to make his escape, it is far too late. The thin blade of a rapier suddenly pierces his neck from behind, its steel shimmering in the pale light of night. The man feels cold spreading across his body, as well as fear of his upcoming demise.</p><p>Suddenly, the voice of a young man whispers low in his ear:</p><p>“You have no right to mourn your death; my friends all faced more gruesome ends because of you.”</p><p>He then begins to speak of all of the lives he’s seen ruined because of the Infant Abduction Strategy. The children who grew into soldiers, forever ignorant of their pasts. Those children locked in dark, cramped rooms and forced to labor until their last breath. And those who learned of the top-secret operation and met their ends as a result.</p><p>As the boy quakes with fury, the man attempts to articulate an apology. But the boy cuts him off.</p><p>“Not to me. Apologize to the dead.”</p><p>And with that, the man’s light goes out forever. The young man has found his revenge, but in so doing has lost his path home. The rest of his allies had volunteered to hold off the enemy and catch up later, granting the young man a path to vengeance. But none of them have arrived. Instead, all that follows the young man as he flees are reinforcements sent by the military.</p><p>Several hours have passed since he escaped the facility. The sky lightens, the sun gradually starting to show its face. Though the young man hid every time he encountered the enemy, he has taken numerous bullets, and his body now nears its end.</p><p>He rests on his knees, alone in the shade of a building. The blood that flees his body reddens the ground as it greets the dawn. As the young man sits beneath the rising sun, he feels his consciousness fade.</p><p>And yet, he does not mind such an end.</p><p>His revenge is complete.</p><p>It is all over.</p><p>……</p><p>…………</p><p>………………</p><p>“I’m glad you survived.”</p><p>There comes a voice from the darkness. It is an old voice, one he heard many times in the past, and one that comes with many memories. It is then he realizes: Though he cannot move and his vision is clouding, he still<br>lives<br>.</p><p>Off in the distance, he sees a small light. In the light, people wave.</p><p>They are…</p><p>His parents: the ones who raised him, despite being part of a plot.</p><p>His real father: the one he killed with his own hands.</p><p>His real mother: the one who brought him into this world.</p><p>His squadmates: the ones for whom he caused so much trouble, yet who forgave him all the same.</p><p>His compatriots: the ones who believed in him and led him to this point.</p><p>It is then that he remembers.</p><p>We need you to live.</p><p>His allies had risked their lives to ensure his survival. He cannot forget this. They have entrusted so much to his care, and he has somehow survived this long.</p><p>And…</p><p>Maybe one day, you can tell me what comes after revenge…</p><p>He must fulfill his promise to the black-haired boy.</p><p>And that</p><p>is why</p><p>he can’t</p><p>die just yet.</p><p>But…</p><p>……</p><p>…………</p><p>………………</p><p>Earlier this summer, fifteen boys launched a revolt against a military facility. Their objective was to kill the man behind the Infant Abduction Strategy. And while they accomplished their objective, reports claim they paid for it with their lives. The Infant Abduction Strategy was the military’s best-kept secret—its existence unknown to all but a few in power—and they attempted to clean it up in secret.</p><p>However, one soldier blew the whistle on the inhumane methods of the operation, and was quickly labeled a hero. As a result, the vice-like grip the military once held over the government is now in decline.</p><p>And now…</p><p>A lonely young man walks atop an abandoned railroad, flanked on either side by rows of sunflowers. His body is scarred with signs of battle; he had once been so consumed by vengeance that he became a soldier.</p><p>He is the one who led the revolt. Reports claim all the children involved in the incident had perished. But he alone had been saved by a hero. He alone survived. He walks along the old railroad. He walks by himself, no blade or pistol at his hip, in search of what comes after revenge.</p><p>This is his path.</p><p>Summer is coming to an end.</p><p>A cool breeze dances among the flowers.<br>As though gently encouraging him forward.</p><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Sweltering Bonds<br>[<br>]</p><p>I walk along a dilapidated railroad lined by endless fields of sunflowers. High above, an uncaring sun rages against a brilliant blue sky, turning the rows of blossoms into paint-smeared streaks of yellow.</p><p>Oh, how I hate it all.</p><p>Time is an illusion here. Hunger a constant companion. My steps fall one after the other after the other, until I finally see a tunnel begin to materialize in the heat-shimmer distance. And on the other side of it, a foreign city.</p><p>This country used to kidnap children in an effort to improve its gene pool, you see. And while the victims were spirited from countries across the world, the majority came from the city at the other end of this tunnel—the city that is my true home. And that is why I walk through the pain and the smells and the hunger and the heat: in the hope it all somehow leads me to the truth.</p><p>A woman stands at the tunnel entrance. She’s maybe in her mid-40s, with a staff in her hand. Her steely eyes stare unblinkingly at the sunflowers, but as I attempt to slip past, she spins around and whips a blade out of the top of her staff. I manage to block it with my own, and we stand there a moment, frozen in time.</p><p>“What business does a soldier have in a place like this?” she asks, ire in her voice. “I know that sword you hold. It took the lives of countless numbers of my countrymen.”</p><p>In truth, I’d brought the sword with me when I deserted the army, which is why it has a military insignia on the scabbard. To me, it’s just a weapon—but to this woman, it is the sign of her most hated enemy.</p><p>“Found it on the ground,” I say casually. Clearly unconvinced by my answer, she makes her move. Our blades begin to ring back and forth in a blur of iron and steel. Her blows are relentless, her strength otherworldly. Any advantage I may have had is long gone, and as I desperately attempt to fend her off, she lands a firm blow on the pit of my stomach, crumpling me to the ground.</p><p>The woman looms over me, blocking out that brilliant blue sky. She raises her blade above her head and prepares to claim my life, but before she can act, another voice calls out from inside the tunnel.</p><p>“Captain! Enemy approaching!”</p><p>An enemy attack? No. Oh, no.</p><p>As my attacker lowers her weapon and turns to face this new threat, I manage to tilt my head toward the disturbance. It’s a squadron of soldiers all dressed in the familiar uniform of my old intel corps. Were they here for<br>me<br>? Did they really follow me all the way out here?</p><p>“Beat them back!” cries the captain. “Do not let them touch the sunflowers!”</p><p>On her command, armed villagers pour out of the tunnel and begin battling my old companions. They fight well, these commoners—better than I would have expected. But before I can see more, the pain of my wounds floods through me, turning the sounds of gunfire and screams into the hush of distant rain on a windowpane before fading out altogether.</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: Sunflower Child<br>[<br>]</p><p>“You don’t have much of a talent for housework, I see.”</p><p>This scolding comes as I sweep the living room, and I turn to see the owner of this house: the same captain who attacked me on the railroad two days prior. She was permitting me to stay in a spare room by way of apology for injuring me—which would have been a kinder gesture had she not also demanded that I clean and run errands to pay for room and board.</p><p>“I’m leaving for patrol. Make sure you clean every inch of this place. Got it?”</p><p>This border city lives in constant danger of invasion, and the captain leads a militia that helps to keep it safe. She apparently attacked me because she thought I was the enemy—a mistake put to rights the moment she saw my former intel companions arrive and attempt to kill me. Regardless, I’ve had enough of this arrangement; I’m going to leave this house tonight if it’s the last thing I do. But as I whip the broom around and send dust flying through the air, the air is split by a sudden thunder so loud it almost tears my ears from their moorings.</p><p>Shaking the cobwebs free, I rush to a nearby window and see a cannon firing a giant ball of water high into the sky. The unusual missile flies through the air and tunnel before bursting apart and showing the fields of sunflowers on either side of the railroad tracks. The droplets glitter as they fall through the blue, and I find myself utterly entranced by the sight.</p><p>“We lost so many children,” murmurs the captain behind me.</p><p>“So many stolen from us. We planted a sunflower for every one of them.”</p><p>As she says this, I realize one of those flowers was planted for me. On the heels of that, I suddenly imagine a man looking at the flowers and thinking of his kidnapped child. He’s a soldier—the same one I killed to take revenge for my family. But in truth, the parents I had cared for and loved so dearly were the same people who kidnapped me from my home all those years ago. And the other man? The one I killed for revenge?</p><p>Well, he was my true father.</p><p>“So many of us are still waiting for their sunflowers to come home. Even now. Even still.”</p><p>The woman’s voice brings me back to reality, but I don’t want to see the shadow I know is clouding her eyes. So instead of replying, I look away—because I don’t have the time or patience to deal with such nonsense.</p><p>When midnight arrives, I gather my things and leave the house. My injuries were manageable, and I’d had more than my share of chores—but more importantly, I wanted to learn more about the abductions. After walking for a while, I come to one of the city’s main avenues and spy the captain hurrying along with a lantern in her hand.</p><p>My curiosity piqued, I hide in the shadows and follow the bouncing glow of her lamp until we arrive at the other side of the tunnel, where she walks over to a sunflower and begins to whisper to herself. But the night is still, and her hush carries to my position. It’s a name—the same name, said in a rush over and over and over again.</p><p>I take a step backward.</p><p>Two.</p><p>I don’t want to believe what I’m hearing, but my ears do not lie. Because the name the captain is repeating to the uncaring night?</p><p>It’s mine.</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: Sin’s Shadow<br>[<br>]</p><p>I set the bucket down next to the cannon and attempt to stretch the cricks out of my back. Every morning, this cannon fires water across the sky and over the sunflowers that stand sentinel at the entrance to the city. But all that water doesn’t carry itself, so it’s the job of the town militia to fill the buckets and carry them up and down, up and down, over and over again. And as the newest member of the militia, I’m now achingly familiar with exactly how lousy the job is.</p><p>“Thanks for the help, new guy,” says a brawny man as he picks up my bucket. He dumps it into the cannon with a practiced hand, then turns to me and smiles.</p><p>“This might get loud.”</p><p>An earth-shattering explosion rings out, sending a sphere of water flying towards the edge of the city. As I look down from the platform upon which we’re perched, I see children playing on an abandoned train car; they look up and cheer with delight as the orb soars overhead.</p><p>“Captain started this whole cannon business six months ago,” says my burly companion as we wipes sweat from his forehead. “Thought she was nuts at first, but now it’s the highlight of everyone’s day. Go figure.”</p><p>“Well, I still think it’s nuts. Haven’t you people ever heard of a hose?”</p><p>The other man grins. “This ain’t about being efficient; Captain wants to prove that weapons can be used for more than just killing. Came up with the idea right around the time her husband dies in battle, so maybe that’s where it came from.”</p><p>The captain’s husband? He was my real father—and the very man I killed. But I can’t let on to this, so I give a vague mumble in reply and climb down from the observation deck. There’s still plenty of work to be done, after all.</p><p>In the afternoon, I head to the market with the captain to purchase items for soldiers who’ve been injured in battle. Once we pick up whatever they need, we’ll bring it to them ourselves. Between hauling water and playing delivery boy, this is easily the most boring militia I’ve ever heard of—and yet, I find myself sticking around.</p><p>“I’ve got this one,” I say, taking a package from the captain’s hands.</p><p>“I don’t need your help,” she says sternly before breaking out into the smile that I’d started seeing more and more over the past few weeks. “But…I appreciate it.”</p><p>Later, we arrive at the soldiers’ homes with the provisions. The captain hands them over and engages with each and every person in conversation. I’ve never been much for idle chit-chat, so I pass the time by loitering in the yard.</p><p>After several such visits, we come to a house where she stays inside much longer than usual. From where I stand, it seems to be a conversation between friends; the patter is rapid, and I hear frequent peals of laughter from the pair of them.</p><p>After waiting around for what I consider to be a generous period of time, I finally lose my patience and storm into the house to hurry things along. But when my eyes lock onto the other person in the room—a man with a prosthetic leg—the laughter suddenly stops. The joy and color drains from the man’s face as an ominous mood settles over the room.</p><p>“YOU!” cries the man. With a speed that belies his injury, he leaps from the couch, tackles me to the floor, and wraps his hand around my throat. “I’ll never forget you! Never! NEVER!”</p><p>“Stop it! Get off him!”</p><p>The captain wraps her arms around the man and yanks him off me as he continues to protest. I want to tell him to stop—I want to<br>scream.<br> But my breath has abandoned me, and all I can do is pray that it returns.</p><p>“He’s the one, Captain! He’s the enemy soldier who killed your husband!”</p><p>Silence. Deafening. Eternal.</p><p>“Is this true?” asks the captain with a trembling voice. I want to respond, but my body is shaking too hard. I’ve never been this scared—not in any battle, not from any man. The silence grows and thickens until it feels like it will smother the life out of the three of us and leave nothing behind but dust.</p><p>“Get out of here. Leave. I don’t ever want to see your face again.”</p><p>I start to stammer something—some pathetic explanation—but she turns to me with blade in hand, just as she did the first day we met. Yet the look in her eyes is much fiercer that it was then; a wild thing that shows a person on the edge of losing everything that might possibly make her human.</p><p>“NOW!”</p><p>My quivering legs somehow propel me out of the house and through the streets of town. I curse my stupidity as I run, bemoaning how I’d stayed with the captain in some pathetic attempt to repent for how I’d torn her life apart. But here’s the funny thing: I actually thought I could do it. I actually thought I might be able to make amends.</p><p>Ah, but that was the wish of a fool.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: Midnight Flames<br>[<br>]</p><p>I urge myself forward.</p><p>One more step and my ragged breath echoes in the dark. One more step and my lungs burn pure fire. One more step. One more step. One more step.</p><p>“I don’t ever want to see your face again.”</p><p>The Captain’s words play in my brain without pause, which is why I’d originally planned to never return to the city after the night I abandoned it three months prior. But then I learned it had fallen into enemy hands, so now I am running back, running with everything I have, all so I might reach a woman who wants nothing more than to never see me again.</p><p>I finally reach the city’s rear gates and step through. Taking a deep breath, I look around, my eyes scarcely able to process what they see.</p><p>The hardy merchants who kept trading despite short supplies. The disciplined members of the militia. The children who loved to play in the abandoned train cars. All the people who once made the city a living, breathing thing are now charred corpses smoking on the ground. The world is silent and still, save for the occasional gust of wind and the uncaring crackle of flame.</p><p>Eventually, I discover the body of the brawny militia member in the rubble of what remains of the cannon. The pungent scent of gunpowder is still strong, even through it was now used to fire water. As I press on, I find only death. A familiar face here, a name on the wind there. But what I cannot seem to find is the body of the Captain—the very reason I came back in the first place.</p><p>Could it be? Is it possible?</p><p>Instinct quickly bubbles into outright conviction, and I set off at a run for the sunflowers she loved above all things. But when I emerge on the other side of the tunnel, I’m horrified to find the fields ablaze, the flowers transformed into an endless river of fire under the dark night sky. Against their light, I finally see a familiar figure lying on the tracks.</p><p>I race to the Captain’s side and take an involuntary step back, aghast. Her body is an ocean of bloody wounds, her breath a rasp. How many had she fought to get here? How many of them did it take to finally lay her low?</p><p>“I’m…sorry…”</p><p>Her mouth parts slightly as these words escape, and I drop to my knees and cradle her in my arms. She’s cold—<br>so<br> cold. How can someone be this cold when everything around us is nothing but fire and madness?</p><p>“I just wanted…to see my boy…”</p><p>Each of the sunflowers planted here represented a child that was stolen. So the Captain didn’t see them as flowers, but her son. That was why she came at the end of her life.</p><p>“I just wanted to see him…”</p><p>She repeats the phrase over and over, losing a little more of herself in the process.</p><p>“I just wanted to see him…</p><p>I just wanted to see him…</p><p>I just wanted to see him…”</p><p>But he’s here, Mom.</p><p>He’s right in front of you.</p><p>I wanted to tell her the truth, but I also knew it would make her last moments even more painful. After all, I was the same person who’d killed her husband not six months before. So instead, I hold her hand in mine and say nothing. Eventually it slips from my grasp and settles on the ground. A petal from one of the sunflowers drifts out of the fire and flutters toward us, and by the time it joins her hand on the earth, she is gone.</p><p>“I’ll come see you someday.” I whisper. “I swear it.”<br>But as sparks crackle off the sunflowers and drift away into the gloomy night, it feels like the dawn has never been so far away.</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>Child of Revenge<br>[<br>]</p><p>Carrier: All right, time for handoff!</p><p>Substitute: Boy…revenge…</p><p>Carrier: I see. A boy soldier entrapped by feelings of revenge, is it?</p><p>Substitute: Violent…fighting…</p><p>Carrier: Uncooperative and brutish, you say? Always arguing with someone?</p><p>Substitute: But…scared…acts to…</p><p>Carrier: Mmm-hmm. He acts to hide his past cowardice. Yes, yes, of course. A tale old as time!</p><p>Substitute: …kind…</p><p>Carrier: Yet he shows his kind side every now and again.</p><p>Substitute: Frees…bugs… Feeds…cats…</p><p>Carrier: He even sets lost bugs free and feeds stray cats? Well, doesn’t that just beat the band!</p><p>Substitute: Squad…him…</p><p>Carrier: And every member of the squad adores him. Goodness, were he not born into an age of war, he might have been but a regular boy.</p><p>Substitute: ……up.</p><p>Carrier: Come again, chum? Couldn’t quite hear you there.</p><p>Substitute: ……up!</p><p>Carrier: What!? There’s a part of the boy’s hair that’s always pointing up, you say!?</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>Dear Captain<br>[<br>]</p><p>Lemme start by saying I wasn’t originally going to reply. But there are weird people out there who respect you and will be annoyed if I don’t, and I can’t deal with them anymore. So here we go.</p><p>Sorry my laundry isn’t good enough. I’ll do better.</p><p>Sorry for not cooperating in the kitchen. I’ll do better.</p><p>Sorry for arguing with the other soldiers. I’ll do better.</p><p>Oh, and sorry I don’t conduct myself as a member of the team. I’ll do better.</p><p>There. The end. Also, you don’t have to write me any more letters. We’re in the same squad, and you’re not my father. In fact, I’ve been living just fine without parents for a while now, so maybe stop the nagging.</p><p>Oh, but I know you saved my ass on our last mission, and I intend to repay that debt. So thanks for that, I guess. This is both the last time you’ll hear me say “thank you” and the last time I’ll ever write you a letter. Bye.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>Documents Re: The Deserter<br>[<br>]</p><p>                                 <br>TOP SECRET                                 </p><p>Superior motor functions.</p><p>Off-the-chart intelligence.</p><p>This child is special, and clearly surpasses the other “sons” we have raised so far. Indeed, we have procured a particularly fine specimen.</p><p>Genuine cowardice, an overly-kind disposition—these are minor faults in the grand scheme of things. And yet, weaknesses can often create a sharper bite. One might even say such imperfections are a kind of benefit, in the end.</p><p>Even more delightful is how he displayed a willingness to become a soldier of his own accord. As his “parents,” we must express excitement for the day he becomes a hero of our country and changes this world for the better.</p><p>Author: ⬜⬜⬜⬜⬜</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>A Bloody Page<br>[<br>]</p><p>REGARDING THE RECENT KIDNAPPINGS</p><ul><li><p>Our enemy has enacted an operation to kidnap infants from our country.</p></li><li><p>Though the kidnappings have ramped up in recent years, this operation was first set in motion 30 years ago.</p></li><li><p>Targets are infants from families thought to be of good military stock.</p></li><li><p>Children are handed off to fake parents and then “educated” through love.</p></li><li><p>Children not considered suitable are reported to be collected by “orphanages.”</p></li><li><p>This operation is carried out with utmost secrecy.</p></li></ul><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>[<br>]</p><p>I know our son is being brainwashed by their evil ideals right now. In fact, soon I won’t even be able to call him my son anymore.</p><p>My wife seems ready to wait an eternity for his return, but I think that is madness. Accepting someone who has been tainted by the enemy’s ideals—even if it<br>is<br> my own son—would spell the downfall of this nation. No, I will not welcome him home. In fact, if I ever see him again, I will cut him down without hesitation or mercy.</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><pre><code class="hljs">              </code></pre><p>Torn Page<br>[<br>]</p><p>The neighboring country abducts out children and raises them as soldiers. They call it “Infant Abduction St██████.”</p><p>█ years ago, a boy who fell victim to this plan was taken into custody and ████ed his desire to return to his fa████. At first, we thought he was happy to reunite with real parents, ███ he was already tainted by the enemy’s ideals.</p><p>Despite their initial joy, █t was not long before the boy and his parents ████ to hate each other, and ██████████████ ███, their family ceased to be. Murder suicide. The mother set fire to the house, and everything turned to ███.</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>[<br>]</p><p>██ short, it’s difficult to undo the brainwashing inflicted on these ████████. ██ I were to reunite with my kidnapped ████ ████████, I would have to strike him down with my own hands—I am his ██████ after all.</p><p>But █████ he even realize who I am? Does he even know about</p><p>*Please check fragments in the file to view the parts that have been torn or otherwise damaged.</p><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2><pre><code class="hljs">              </code></pre><p>The Last Page<br>[<br>]</p><p>I need to talk about my vacation.</p><p>I came home for the first time in a long while and found the house filled with dust and mold. It felt abandoned, and it made me wonder if my wife—who leads the city’s self-defense force—had even come home, or if she just spent all her time patrolling the streets.</p><p>I want to keep this city safe.</p><p>He might come home one day, after all.</p><p>The last time we sat down to dinner together, she told me why she continues to wield her blade. But as a soldier myself, I found her words hard to accept. I mean, how can we even entertain the idea of welcoming home a child who has been brainwashed by the enemy?</p><p>But my wife dismissed my concerns and doubled down:</p><p>Better a tragic reunion than to never see him again.</p><p>With my vacation over, I leave the city, stopped only to plant a seedling along the abandoned tracks that lead into town. I want it to bloom into a sight that shows the way to those returning home—or at least that’s what I told the florist when I bought it. That’s why I chose the most brilliant flower, a seed that would bloom into petals that could be seen from miles away.</p><p>I have no idea if knowing the truth will bring our son happiness, but maybe it’s all right for me to have hope. And because of that, I’ve been praying that my wife and son might see each other again one day.</p><p>But I’ve prayed enough. It’s time to act.</p>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:F66x</title>
    <link href="/2024/03/07/F66x/"/>
    <url>/2024/03/07/F66x/</url>
    
    <content type="html"><![CDATA[<h1 id="F66x"><a href="#F66x" class="headerlink" title="F66x"></a>F66x</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>I think back on the past. On memories of the boy who will never come home. And on the happy family in the photo. My<br> embraces me. His warmth is the only constant in my life, and as he holds me, my chilly heart slowly melts.<br> I think. </p><p>A deafening rumble suddenly reverberates throughout the base, along with a siren. The announcement that follows tells us what we never wanted to hear: Flowers have invaded the base itself for the very first time. Cradling the photo, my husband and I dash for the exit. It would be folly to fight the Flowers unarmed, so we decide to evacuate instead.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>The base is already a stage of tragedy. Our fellow prisoners, unable to fight the sudden army of Flowers, have been decimated. Among the bodies, we hear a voice calling for help. But we know that stopping means death. So we run…and don’t look back. As we do, we offer a silent apology.</p><p>We run for our lives, but the Flowers are everywhere. Eventually, they corner us and launch their assault.<br> I think—but the expected pain never comes. Instead, my husband leaps in front of me and takes the attack in my place. Somehow, he is still alive—but he will not survive another strike. He screams at me to run, but instead, I grip the photo and step forward. </p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>Just as the Flower’s next attack is about to land, armed prisoners appear with our commander and cut it down. The defense operation has been put in motion—and somehow, the two of us are still alive. My husband’s wounds look painful, but he just chuckles and says he’s proud to have such badges of honor. I’m relieved to see he’s in good enough shape to joke. The two of us retreat with the commander. My husband’s wounds are deep and he is taken to the infirmary for surgery. I pray fervently that he will make a full recovery. I hand the photo to my husband as a good-luck charm.<br> My husband clutches it to his chest as they wheel him away.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>My heart grows cold. How much time has passed since he went in? He’d been joking around, so surely he’s going to be okay.<br> I feel like the uncertainty will crush me under its weight.</p><p>Finally, my husband emerges from the infirmary. Seeing him safe, I let out a small gasp of relief. However, he has no memory of the recent past…and the photo has also disappeared. The memory loss is due to shock, and only temporary—but no one can explain where the photo went. My husband, as if sensing my unease, wraps me up in another tight embrace. As I feel his warmth, my concerns melt away once more.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Hope’s Barren Flower Part 1<br>[<br>]</p><p>When she was yet human</p><p>“This is a tale of the recent past.”</p><p>“A tale of a time when she was still human.”</p><p>“A tale of how Flowers were born into the world…”</p><p>“You’re going to grow up big and strong.” A woman murmurs these words to the organic matter growing inside the incubator. She operates the console with a practiced hand. Holographic panels float in the air before her, displaying detailed information on the status of the matter in the incubator. The data is diverse, covering everything from humidity and temperature to the concentration of oxygen, elemental makeup of the soil, and even thermal conductivity. Each number is one piece of a delicate dance; if one fails, the others will follow. It is difficult work, but the woman feels pride at her success thus far. Once, thousands of years in the past, Earth contained what was known as “nature.” Uncountable plants and animals flourished in ecosystems across the mountains and oceans—and they did so alongside humans. But due to human expansion and ecological pollution—as well as disasters and climate change wrought by nature itself—the ecology was weakened, and life began to sputter out. Now, the nature that once sparked plants and animals across the entire planet has been entirely lost.</p><p>The woman works in a genetic research facility. It was built with the newest and best technology available, and serves as a gathering place and laboratory for the world’s most prominent scholars and researchers. The woman, a leader in the field of genetic engineering, now concentrates all her efforts on the process of regenerating extinct plants and animals.</p><p>“You seem extra happy today,” she says to her latest experiment.</p><p>“So why don’t we give this a go?”</p><p>She flips switches and presses buttons on the console. Moments later, there is a beep and liquid sprays into the incubator. That liquid is a custom-made growth accelerant that interacts directly with DNA. The moment it lands on the organic matter, a white flower springs out of the soil.</p><p>“Yes!” cries the woman.</p><p>She permits herself a single fist pump. In truth, she wants to leap up and go dancing through the lab, but the fact she is under constant surveillance takes much of the fun out of such spontaneous celebrations. Not to mention her embarrassing incident of long ago…</p><p>“Brought another one back, did you?”</p><p>The speaker is a large, muscular man in a lab coat. Though his physique is more appropriate for a soldier, he is actually a talented scientist in his own right.</p><p>“Honey!” says the woman.</p><p>“I thought you were sleeping. But yes, come here and take a look at this.”</p><p>She and the man have been married for five years. They met in this very facility.</p><p>“It’s pretty,” murmurs the man as he bends down to get a better look at the incubator.</p><p>“What’s it called?”</p><p>“I don’t know. But according to the literature, they say finding one will grant your greatest wish.”</p><p>Though the woman would be embarrassed to admit as much, this story is the reason she chose to bring the flower back. For she has a wish she desires above all else: A wish to see the world filled with green once more. As she stares at the flower growing in the rich soil, she whispers her wish, hoping that it might hear. This world knows nothing but heartache and loss, and she wants to give it something good. It’s the reason she studied genetic engineering in the first place. And though it has been a journey of fits and starts, her plans are finally bearing fruit.</p><p>Suddenly, her thoughts are interrupted by the strident howl of an alarm, followed by a red light in the incubator. The two look inside and see the flower rapidly shriveling.</p><p>“No,” says the woman.</p><p>“No! Why is this happening!?”</p><p>She frantically rechecks the information on the panels. The numbers that represent the flower’s nutrients are all swiftly decreasing.</p><p>“Hang on. I’m going to raise the values.”</p><p>She pumps additional nutrients into the incubator—twice the normal amount. Liquid gushes out, adjusting the concentration of oxygen and the nutrients within the soil. But the flower continues to fade, its petals falling noiselessly onto the dirt below. Her husband looks at some of the numbers and furrows his brow.</p><p>“Strange. This flower is using far more energy than normal.”</p><p>It’s a calm observation, one made from the experience of seeing countless flora wither away in his own experiments. But the woman is in no mood to hear it.</p><p>I can’t let it die,<br> she thinks.<br>Not now. If it dies, my wish dies with it.</p><p>She doubles down and focuses on the console. More liquid enters the incubator’s glowing red interior.</p><p>“Come on,” she says through clenched teeth.</p><p>“Come<br>on<br>.”</p><p>“I’m not giving up on you now!”</p><p>Finally, the dripping flower begins to grow again, its fallen petals regenerating before their eyes…. But it does not stop. A moment later, the Flower smashes out of the incubator, sending tendrils and roots coiling across the floor. It almost seems to be searching for something. And it shows no signs of stopping.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Hope’s Barren Flower Part 2<br>[<br>]</p><p>A siren begins to wail. The couple presses against a far wall, trying to escape the thing they have unleashed. The Flower continues to grow. Soon, the roots have covered the entire floor.</p><p>The walls are gone. The celling is gone. Nearly the entire room is buried in plant matter. Suddenly, several of their fellow researchers force the door open and run into the lab.</p><p>“You guys all right?” one of them asks, breathless.</p><p>“We’re fine,” says the husband.</p><p>“Just used a heavy hand with the growth accelerant, is all.”</p><p>The husband explains the situation because his wife is sitting on the floor, too stunned to speak.</p><p>Their fellow scientists express relief to know the couple is safe.</p><p>“I’m sorry,” whispers the woman.</p><p>“God, I’m so sorry.”</p><p>Her husband helps her to her feet and embraces her.</p><p>“It’s all right. I’m just glad you weren’t hurt.”</p><p>His warmth melts away the tension in her heart.</p><p>“Hey, did you guys see this? It’s really interesting…” One of their coworkers is tapping the side of the Flower’s stem. Others soon gather around to make their own observations, intrigued by the situation. The stem is far tougher than that of the original plant. And its mass has clearly increased. But it didn’t do so through multiplying cells—rather, it has simply increased in size.</p><p>“Hang on. What’s this?”</p><p>One scientist is staring at the petals.</p><p>“Guys, look. I think there’s something in here.”</p><p>“Wait, it could be dangerous,” says the woman.</p><p>“No, it’s okay. I’m just going to…”</p><p>“W-wait… My arm! It’s got my arm!”</p><p>The man’s voice begins to grow panicked. He’s clearly not joking. Suddenly, he lets out a horrifying wail. The other researchers attempt to pry the petals open, but they are hard as stone and won’t so much as budge.</p><p>“Help me!” screams the man.</p><p>“Oh god, SOMEONE HELP ME!”</p><p>The Flower begins to pull the man inside. His coworkers desperately try to free him, but they might as well be pulling a mountain.</p><p>“H-help… Heeelp meeeeee…”</p><p>The man is gone. From inside the now swollen corolla comes the sounds of something straining and cracking. Then it flies open and sprays blood across the entire room. A hunk of flesh—the remains of their coworker—flies out and tumbles across the floor. As they watch, horrified, a new Flower springs up from the meat. The germinated Flower grows just as rapidly as its kin, causing the meat to shrink at the same time.</p><p>“My god…” says the woman.</p><p>“It’s absorbing the nutrients.”</p><p>With the meat depleted, the Flower begins to squirm and writhe across the floor in search of a new source of food.</p><p>“Run!” someone yells.</p><p>“Get the hell out of here!”</p><p>The researchers dash away as one.</p><p>The screams continue. The Flowers pursue the survivors, slithering over the floor like snakes with petals for heads. Each time one of the petals consumes a victim, a new Flower sprouts from the remains. Their numbers grow. And grow. And<br>grow<br>.</p><p>“Here! Hide in here!”</p><p>The husband pulls the woman into a small closet in the corner of the research division.</p><p>They force their ragged breaths to slow as they try to remain quiet. Outside, the sounds of slithering and screams are everywhere.</p><p>“What have I done?”</p><p>This was my experiment. My flower. And now it’s eating people.</p><p>Was it a dangerous plant that should never have been revived?</p><p>Was it the fault of the growth accelerant I formulated?</p><p>Before she can wonder more, her husband pulls her close.</p><p>“Right now, we just need to survive.”</p><p>His embrace drives the fear and doubt from her mind. Her shivering slowly comes to a stop.</p><p>But the sounds outside continue without pause, and they know they do not have long. Suddenly, her husband lets her go and reaches for the door.</p><p>“Hang on, honey. I’ll be right back.”</p><p>Before she can say anything, he bolts from the closet, seals the door behind him, and runs down the hall while making as much noise as he possibly can. It’s clear he’s trying to lure them away.<br>No, please… Please don’t leave me here alone…</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Hope’s Barren Flower Part 3<br>[<br>]</p><p>Time passes—she has no idea how much. Eventually, the slithers and screams die off, leaving the facility enrobed in an unnatural silence. She attempts to leave the closet, but the door is locked. The woman feels her body growing cold, perhaps due to fear and guilt. All she can do is wait and pray for her husband to return. Ironically, they had met in this very closet.</p><p>Her arms had been piled with equipment that day, and she was unable to work the knob. Suddenly, her gallant knight swooped in and opened the door for her.</p><p>“Maybe leave a few things behind next time, ya dope,” he’d said with a chuckle. Oh, she had been mad. More than mad—<br>furious<br>. But as he continued to assist her from time to time, she found herself becoming attracted to him. She had a tendency to get lost in her research, sometimes even forgetting to sleep and eat, but he was always there to support her.</p><p>Suddenly, a faint voice snaps her back to reality.</p><p>“…There? Is anyone there?” The woman leaps to her feet and starts pounding on the door.</p><p>“Here!” she cries. “I’m in here!” Footsteps pound into place outside the closet. She hears radio calls, breathing, muttered commands.</p><p>“We’re going to cut through the door. Stand back.”</p><p>A glowing red dot appears in the center of the door, sending up smoke. Soon, the high-temperature cutter begins slicing a hole in the steel. When it is halfway done, she peeks through the opening and beholds a horrible sight. The walls, floors, and ceiling of the facility have had furrows gouged into them by the snaking movements of the Flowers. And within each furrow is tightly packed meat that oozes fresh blood. Bodies that weren’t absorbed had been ground into paste by the sheer bulk of the Flowers. The woman can’t even tell who they used to be. But when the smell hits her, she turns aside and vomits.</p><p>“You all right, ma’am?”</p><p>The voice comes from a soldier looking at her through the hole in the door. He’s covered head-to-toe in thick black armor and holds an imposing beam rifle in his hand. He looks to be ready for war. The woman nods, wipes her mouth with a shaking hand, and crawls out through the hole.</p><p>The smell is worse out here.<br>Much<br> worse. And it brings everything rushing back: The screams of pain. The snapping of bones. The delight of the Flowers as they ate. She can hear and see it all over again. She turns to the side and vomits once more, but all that comes out is a stream of yellow bile. Her body has nothing left to give.</p><p>“W-were there any others survivors?” asks the woman, hoping against hope for a miracle. The soldiers just shake their heads. The hues of despair grow darker. But she cannot stay here. Not when he might be alive. Not when he might need her help.</p><p>“I’m coming with you,” she says. “I need to find my husband.”</p><p>“Oh, and I know every inch of this facility, so I can guide you wherever you need to go.”</p><p>After a brief conference, the solders bring her along. Eventually, they arrive at the most heavily damaged area. This is Research Block 21—the location of the woman’s lab. It’s as if someone redecorated the room to look like a version of Hell. Everything, from the floors to the ceiling, is painted red: Blood from the birth of a Flower. How many of her coworkers had been consumed? How many had she<br>killed<br>? The guilt chills her to the bone.</p><p>Suddenly, a deep bellow rumbles out. Something is coming their way. Something massive.</p><p>“In positions, now!”</p><p>The soldiers raise rifles to shoulders as the enemy approaches. It’s a Flower—one far bigger than any they’ve seen before. It is the most horrible sight imaginable. The petals are imprinted with the faces of victims. Not one face or two—but<br>dozens<br>. But the military captain pays this no mind.</p><p>“All units…fire.” The world dissolves into a hail of gunfire. The Flower begins to scream.</p><p>My god… It sounds human. Could it really have evolved human traits so quickly?<br> Above the crackle and roar of the firefight, the woman hears a most familiar voice. And when she looks at the Flower again, she sees the face of her love.</p><p>“Stop! Don’t shoot him!”</p><p>She rushes for a nearby soldier, but he pays her no mind. Her pleas go unheard. Her actions are meaningless. Her husband is gone. Knowing this, she breaks down into sobs.<br>This is my fault. It’s all my fault.</p><p>I’m sorry.</p><p>I’m sorry.</p><p>I’m sorry.</p><p>When the fighting stops, the Flower lies unmoving on the ground. The woman cradles her dead husband and continues to apologize. She does so until her voice finally fails her.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Hope’s Barren Flower Part 4<br>[<br>]</p><p>Months go by. They thought they’d dispatched the Flowers that day…. But they were wrong. Another Flower had been found. Then another. And another. The Flowers sow seeds soon after they are born. It is all anyone can talk about anymore. The news is nothing but death figures and horrible stories. And those who manage to escape often find they have no home to return to. The Flowers evolve. They adapt. They increase their reproductive rates, perfect their strategy, and soon are the greatest disaster the world has ever known.</p><p>“…No. No! NO!”</p><p>Enraged, the woman smashes her hand against the console. Her cheeks are hollow; her eyes darkened pits. She can’t remember the last time she slept. Currently, she is working in a small laboratory constructed by another organization. Their only goal is to find a way to stop the Flowers. As the sole survivor from the research facility, leadership of this fight had fallen on her shoulders. She was locked away and tasked with analyzing Flower carcasses in order to find a chemical solution that could kill them. For a time, it looked like their quest would be successful—but the Flowers quickly evolved a resistance to the solution. Each time they created a new chemical, the Flowers adapted to counter it.</p><p>Now, she stands before a Flower in a massive incubator. On its petals she sees the faces of her coworkers and husband. Her mind has whirled with thoughts since that day. Were they things she should not wish for? Did they go against nature? Was all of this technology too powerful for humans? She has thought about putting herself out of her misery. But when she thinks of what her husband went through, she finds herself driven by the need for redemption. But this, too, is coming to an end. It has been five days since her liaison with the outside world stopped arriving. Perhaps he decided the research was fruitless and walked away. Perhaps a Flower killed him. Her food supplies are gone, yet she feel strangely at ease. She wonders idly if her senses are beginning to break down. From a distance, she hears the approaching footsteps of the reaper.</p><p>“Honey…”</p><p>Her husband floats in the incubator, fully merged with the Flower. If she was just doing this to die a failure in the end, it would have been better to become part of the petals with him.</p><p>But I know you wouldn’t give up.<br> She stands up once more, fighting off the despair in her heart.</p><p>And then…an idea. She fiddles with the console, a faint smile on her face. Perhaps it is folly—or perhaps it is the only way they will ever be able to kill the Flowers.</p><p>Days pass. The liaison never arrives. The woman is skin and bones, barely able to move. She stands before the incubator with an inscrutable expression and stares at the thing inside. There, floating in the tank, is a couple. She had combined the genes of people and Flowers to create clones of herself and her husband. With a shaking hand, she operates the console. The liquid in the incubator drains away, and the couple awakens.</p><p>“Your name is F66x.”</p><p>“Your name is 063y.”</p><p>“Together, you will eliminate the Flowers from this world.”</p><p>The couple nods silently. No matter how many times they might be stricken with despair… No matter how many times they meet a cruel end… They will be reborn again, and throw themselves into battle with the hated Flowers anew. That is how they will achieve victory—and how the woman will gain her redemption. And so, she gives her cloned self its first order: “Kill me.”</p><p>The clone nods silently and wraps its hands around her neck. As fingers tighten, consciousness slips away. Yet the woman wears an expression of utter peace.</p><p>Decades pass. The Flowers can infinitely reproduce. The clones can infinitely reproduce. Their war rages on to this day. And in the midst of this neverending battle, nature begins to take root within the empty cities.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Change (My) Life<br>[<br>]</p><p>The only sounds in the empty room are a metronomic beeping and the quiet breathing of my husband. He is bound to the bed, his entire body wired to a machine that controls his body temperature, heart rate, and all other life functions. Next to him, a young officer speaks softly to me.</p><p>“He acquired confidential information again, Commander. This is his eight instance of unauthorized access to such intelligence.”</p><p>As she speaks, details of my husband’s previous infractions appear on a nearby wall screen. I’m not surprised; it’s always been like this. Whenever he sees a chance, he breaks into some area deep within the base and steals classified data about the Flowers.</p><p>“I’m sorry Commander, but I can’t cover for him anymore.”</p><p>Commander.<br> The word stings my ears. I hate being called by that title around my husband, even though he’s not awake to hear it.</p><p>It wasn’t always like this. But one day, the Flowers attacked our world and everything changed. Humanity is yet to find a key to victory; if anything, we fade a little more each time the sun rises on a new day. We’ve lost so many now: soldiers, prisoners, and yes, even commanders. The Flowers have taken them all. But the lack of people in leadership positions is our most pressing concern, so the people in charge attempted to solve it with a most novel solution:</p><p>They promoted the prisoners.</p><p>Prisoners like me.</p><p>The job of commander is to manage and control the rest of the prisoners. So when news of my own promotion came, I knew instantly that I would have to send my own husband off into the jaws of death. I couldn’t bear to share that with him, so I attempted to keep it a secret and live my life just as I always had—until the day he broke into the base and first stole confidential information.</p><p>We have rules for people who do such things. The punishment is very swift—and very final. But instead of putting him to death, I used privileges of command to keep him alive. I ordered the classified information deleted from his memories, and we returned to our normal lives. I thought I could somehow keep this up—that I could keep lying to everyone about what I was now. And I might have done it, except that my husband stole classified information again.</p><p>And again.</p><p>And<br>again.</p><p>The irony is almost too much to bear: The reason he risked death to find some path to victory against the Flowers was because he wanted to protect<br>me.<br> But now, once again, it is my turn to protect him.</p><p>“Prepare for memory deletion.” I say to the officer. When she doesn’t move, I slowly turn my head to look at her. “That is a direct order.”</p><p>“I’m sorry, ma’am, but I cannot comply.”</p><p>Her quiet voice rattles in my ears. “What did you say?”</p><p>“Your husband should have been eliminated after his first transgression, but you used your authority to delete his memories and protect him. I’ve stood by as you did so again and again, but I can abide it no longer.”</p><p>She goes on to tell me that my actions are not as secret as I thought—other commanders are aware of what I have been doing, and they are displeased to say the least. If it does not stop, they will deem me unfit for command and dispose of me in the way all useless prisoners are dealt with.</p><p>“I didn’t ask for this,” I whisper. “I didn’t ask for any of it.”</p><p>And it’s true. I didn’t. I didn’t care for the power of command, or the honor, or the ceremonial trappings. The only thing I cared about was protecting the man I love.</p><p>“You have to stop this,” says the officer. “We have plans in motions, great plans that may finally turn the tide of this war and give you the revenge you seek. Would you really throw all of that away?”</p><p>She takes my hand and places it gently atop the machine. “If you turn this off, his vitals will cease to function. He’ll just… go to sleep. Quickly. Peacefully. But we’re running out of time, Commander, and we need you to make a decision.”</p><p>Her quiet voice is a faint echo in the empty room.</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: Change (Your) Love<br>[<br>]</p><p>The leisurely beeping that disturbs the quiet of the living room tells me the water is boiling. I get up from my chair and head to the kitchen, where I take out an assortment of snacks and prepare my tea.</p><p>Treatment like this was nigh unthinkable when I was a low-ranking soldier—or to be more blunt, a prisoner with a slightly more palatable title. But now I own a first-class apartment with a guest room—don’t know when I’ll be using that—and a constant supply of luxuries like sweets and tea.</p><p>Yes, my life certainly became enriched when I took on the position of a superior officer. But every day I wake up and ask myself what the point is to having such wealth. What even is the point?</p><p>I glanced over at the framed photograph in the center of the living room, the one showing a smiling image of my husband. He was my rock. My light. The person I loved more than anything.</p><p>And the person I killed.</p><p>Pressured by command, I made the decision to turn off my husband’s life support, abandoning what was most precious to me for the benefit of the base. As a result, my subordinates found renewed confidence in me, and my superiors praised my loyalty. But this brings me right back around to the same question I always ask: What’s the point? What is the goddamn point?</p><p>I briefly considered following my husband into the afterlife, but couldn’t do it. The shrewd watch of my commanders played a part in that decision, but ultimately, I couldn’t abandon my plan to end the Flowers once and for all.</p><p>Blowing steam across my mug, I press a few buttons on a small screen on the kitchen counter and pull up footage from a surveillance camera. Children’s voices come through, as well as the shrill bark of an overseer.</p><p>“Get in line, all of you!”</p><p>“Kay!”</p><p>There are countless prisoners exhausted by this never-ending war with the Flowers—and our recent rise in deserters is proof. But I’ve come up with a plan to give even the lowest soldier a reason to fight. Want to hear it? It’s a doozy.</p><p>See, I proposed we implant prisoners with memories of having children, then supply them with<br>actual<br> children to protect. I figured I’d face an uphill battle—or be laughed out of the room entirely—but to my shock, command not only approved the plan, they supplied the children that I needed to make it work. The little moppets now live in a care center in the base, giving the prisoners who are their “parents” a reason to keep fighting in the outside world.</p><p>The irony just<br>kills<br> me.</p><p>My own son was killed by the Flowers, is the thing—and the animosity born from that memory is what kept me alive all this time. The pain of the loss is a set of teeth on my heart as fresh as the day it happened, so the fact I’m using that same pain to help my former companions rush headlong into death is…</p><p>Well it’s monstrous.</p><p>Monstrous.</p><p>But now that I’ve chosen this path, there’s no turning back. I have to destroy the Flowers and have my revenge, because—</p><p>“I’m hooome! What’s my snack?”</p><p>A small figure rushes into the living room, and I shake myself free from my reverie as I turn to him. “You have something to do before snack time, yes?”</p><p>His face lights up as he rushes to the most prominent place in the living room: the memorial for my husband. The boy takes the photograph and holds it reverently in both of his tiny hands.</p><p>“I’m home, Dad!”</p><p>God, his eyes remind me<br>so<br> much of him…</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: Change (His) Life<br>[<br>]</p><p>In my position as a senior officer, I’ve led countless projects to completion—not just the one that keeps soldiers from deserting. We’ve also mapped Flower dens around the planet, performed research into their ecology, and developed a host of new weapons. Though we’ve yet to exterminate the enemy, humanity has stepped back from the brink, and is now in the process of putting itself together again.</p><p>“Sorry we took so long, Mom.”</p><p>I turn to find my son walking into the officer’s lounge. He’s grown over the years, and is now more a man than the little boy I remembered.</p><p>“Thank you for taking the time to be here,” I say.</p><p>A woman steps out from behind my son, her wide eyes boring deep into my own.</p><p>“Uh, so, Mom? This is my girlfriend. I think I…mentioned her?”</p><p>His bashful introduction causes me to chuckle.</p><p>“Hello, ma’am,” she says. “My name is ———, and I work in the research division.”</p><p>The introduction is sweet, but unnecessary; I already know everything there is to know about her. Her name, age, job, time of birth—every moment of her life is at my fingertips. Yet I manage to put on an expression of ignorance and listen to the rest of her introduction.</p><p>“I’m pleased to have met you today,” I say when she’s done. Our chat is short, but pleasant enough, and I’m happy to see how tactfully she handles her time in the spotlight. But then, at the moment when my son is<br>supposed<br> to ease us out of the awkward silence that follows introductions, he blurts out:</p><p>“You two are kind of similar.”</p><p>“Similar?” asks his girlfriend. “You mean me and your mother?”</p><p>“Yeah. Like, I dunno. The vibes you give off.”</p><p>My mouth twists wryly at that. “Saying your girlfriend reminds you of your mother is the worst possible thing you could say, Son. If she never speaks to you again, I’ll fully support her decision.”</p><p>An awkward expression crosses my son’s face, which causes his girlfriend to burst out laughing. The tension eased at last, they give brief farewells and leave the lounge. As I watch them go, a small sigh rises in my heart. A moment later, my commander arrives and places a hot drink before me.</p><p>“Thank you,” I murmur quietly. The tea is just warm enough not to burn. She knows exactly what I like—no surprise, seeing as we’ve been mostly inseparable ever since I rose up to the position of senior officer. Perhaps that’s why she feels comfortable enough to look me in the eye and say:</p><p>“How does it feel to have your husband introduce his girlfriend to you?”</p><p>Ah, she’s always like this. She seems cold and emotionless most of the time, but in truth, she finds nothing more delightful than pushing people’s buttons.</p><p>“He is my<br>son<br> now.”</p><p>Here’s the thing: Once I learned that management possessed the technology to create clones, I used my husband’s stored genetic data to make one, then took him out of the incubator while he was still a baby. This was only done to protect him; if he were to mature there and have my husband’s old memories implanted, he’d only make the same mistake of accessing top-secret data all over again.</p><p>“And what about<br>her<br>? Does she meet expectations?”</p><p>“Not in the slightest.”</p><p>“Why not? She has a stellar reputation, and seems extremely well-tempered.”</p><p>“It’s not a question of character. Her performance is simply too average.”</p><p>This is true. The girl has shown no aptitude for science, and seems content to remain a lowly, anonymous researcher. She’s nothing like me, which means she is no proper match for<br>him<br>.</p><p>I lean back and close my eyes. Bringing up an image of her smiling face, I mentally scrawl a red X across it.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: Changeling<br>[<br>]</p><p>Something rocks me, stirring me from sleep. When I open my eyes, I’m greeted by a bright, false sun and the familiar sight of my commander’s face.</p><p>“He’s crying. Should you attend to him?”</p><p>She jerks her chin toward a small crib, where I hear a baby’s disgruntled mumbling.</p><p>“Oh, yes. Thank you. Goodness, my hearing has gotten worse as I’ve grown older; I used to leap out of bed at the slightest sound when my son was a baby!”</p><p>I lift the baby into my arms and look into his eyes. “You were sleeping so soundly, little one. What do you need? A diaper change? Milk?”</p><p>As I rock the little guy in my arms to calm him down, a smile cracks across my commander’s face. It isn’t a warm, fond smile, but a cold and pitying one.</p><p>“He looks so much like you.”</p><p>“You think so?” I reply quietly, pretending not to hear the thorns in her speech.</p><p>“But I suppose he would. The father is your husb…Apologies. Your<br>son<br>. And the mother is your clone too.”</p><p>She’s correct. Around the time I created my husband’s clone, I made a dozen clones of myself. I altered some so they didn’t look exactly like me, then removed them from the incubators and gave them to prisoners who could serve as suitable parents.</p><p>“I’m surprised it went so well. Was every girl your son dated your clone?”</p><p>All my clones had been raised in varying environments, which means they show their uniqueness in different ways. Some are excellent workers with brilliant talent. Some are average. Some dropouts.</p><p>“His mother is quiet and seems average at a glance, but she has an analytical mind.”</p><p>Those who are quiet and tend to have subdued emotions are often more colorful with those they’re comfortable with.</p><p>“She’s family-oriented,” my commander says, her tone as flat as if she’s reading from a document. “Your son’s wife is almost exactly like you, from her skill set to her personality—and to a rather shocking degree.”</p><p>I’d spent decades carefully putting this project into motion just for this moment. I sent my clones to my son so they would meet, made sure they dated, then encouraged them to have children.</p><p>“Do you think me odd?”</p><p>I ask suddenly.</p><p>My commander nods. “I do. However, I don’t think it’s a bad thing. This is the happiest I’ve ever seen you.”</p><p>My son has been taken from me. My husband is lost. But now, at long last, I finally have it all back. This child was born from a clone of my husband and my own clone. it is my—<br>our<br>—true son.</p><p>I look down and realize the grumpy, crying baby has finally begun to snore softly in my arms.</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>The Chatty Woman<br>[<br>]</p><p>Ugh, I hate getting assigned to expeditions. Prep takes forever, and we’re all pretty much guaranteed to die anyway. I don’t get why we have to lug all this crap around, and…</p><p>Wait, F66x is with us this time? Oh that’s even worse! Okay, so listen. She’s got, like, a wall around her, you know? We were in the same unit last time, and she never said a word more than she absolutely needed to—I mean, not a word! It was impossible to get to know her. I mean, does the chick even smile?</p><p>…Huh? I should ask her about her husband? The hell does that mean? …Uh-huh. …Uh-huh. …Wait, so she’s head over heels for him and gets all chatty whenever he comes up?</p><p>Heh. That’s adorable, actually.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>A Mother’s Journal<br>[<br>]</p><p>Growing Up</p><p>He walks on his own now. But he always stumbles backwards. I guess his head is too big.</p><p>He can’t produce actual words, but from how he babbles I can only assume he’s trying to talk to me. He knows how to gesture hello and goodbye, and he’s starting to understand what I’m saying.</p><p>He’s getting bigger and has more lung capacity, so now his nighttime crying fits are more like screaming fits. And that means I’m always running on low sleep…</p><p>I still don’t know what I’m doing raising this kid, and there are plenty of days where I hate everything because I’m so busy. But when I see how the shape of his eyes looks exactly like<br>his<br>, I feel my energy rush back to me.</p><p>I never, ever in my wildest dreams imagined that something so precious could exist on this planet.</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>Data on Promotion Standards<br>[<br>]</p><p>Re: Standards for Individuals Suited for Promotion to Officer and Command Positions</p><p>Basic capabilities should be higher than average, as well as a logical decision-making ability. Ask yourself, could this individual sacrifice one to permit ten to live?</p><p>However, taking historic data into consideration, we cannot claim that judgments made out of rationality alone are always correct. Actual records shows that superior officers who place too much value on efficiency and push for perfection in battle and experiments are often the subjects of mutiny among soldiers (i.e. prisoners), and sometimes perish as a result.</p><p>She is the only one we can think of who prioritizes rationality, yet can also keep dissent from the lowest ranks to a minimum. Though merciful, she is driven by revenge, and we are confident she is willing to sacrifice others to achieve that end.</p><p>We do believe there is a chance her husband—another prisoner—may warp her judgment. However, we are planning to deal with that matter separately. If this goes well, we are confident she will prove to be the perfect superior officer.</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><pre><code class="hljs">              </code></pre><p>Soldiers and Caretakers<br>[<br>]</p><p>Hello! Here are the parts I mentioned, the one you need to repair that toy.</p><p>Hmm? Oh, you’re very welcome! The fight was easy—didn’t take much extra work at all to pick these up! Still, you sure are getting a lot more children over at the center, huh? How many caretakers do you have now?</p><p>Fifteen including you? Whoa, that’s a<br>lot<br>! I guess that all happened since that ex-prisoner became an officer, huh? I mean, what with the prisoners and their kids all staying in the same base now. Still, I suppose they’re all grateful, ‘cause the morale of the parents has shot through the roof! I thought those Flowers were gonna crush us, but now we’re actually holding ‘em off. Just goes to show how people get stronger when they’ve got something they love to fight for.</p><p>Wish I had something like that for myself, honestly, ‘cause I’ve got no interest in dying for a good long time. Still, I dunno about having kids. I mean, they’re cute and all, but we’re nowhere near close to routing the Flowers, and that makes me nervous.</p><p>Oh, hey! I know! Why don’t I work to protect YOU!? I mean, you take care of the kids, so someone should return the favor! How about it? Sounds like a sweet deal, yeah?</p><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:063y</title>
    <link href="/2024/03/07/063y/"/>
    <url>/2024/03/07/063y/</url>
    
    <content type="html"><![CDATA[<h1 id="063y"><a href="#063y" class="headerlink" title="063y"></a>063y</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>The<br> in a terrible mood… It’s because I forgot her birthday, which, yeah, was a mistake. But does she need to be<br> angry? She’s not being reasonable—and I’m going to tell her so!</p><p>Uh oh. The moment I open my mouth, she launches into a rant about all of her woes: I don’t understand women. I’m crude. I’m insensitive. She starts unloading all sorts of stuff on me. Blah, blah, blah. Well, I’m sure as hell not going to just lie back and take all that!</p><p>“You know, this is what I hate about you!” I snarl.</p><p>“You’re always bringing up these stupid unrelated issues!”</p><p>The moment the words leave my mouth, I know I’ve gone too far: one look at her face is all I need to realize that. She points to the door—and I know what<br> means. And while part of me is annoyed as hell at all of this… I decide to get out while the getting’s good.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>I escape to the mess hall. My friends come up to me and ask what’s the matter—guess I look a little pale. But when I tell them how I just had a blow-up with the wife, their concern dissolves into peals of laughter. After they have their fun, they tell me I’m the one at fault. Each one has a different strategy I can use to make amends. As they talk, I realize they’re pretty good pals, all in all.</p><p>I decide to put their plan into motion. I return to the room and pick my wife up off her feet. She seems perplexed, but intrigued—which is good. I then start spinning her around the room in a dance, showing off my strength as well as my moves. But of course, I take it too far. By the time I realize it, her face has progressed from confusion to downright fury. So before I can wreck it more, I dash out of the room.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>As I think about what to do, the unit commander appears. Word of our martial squabble has spread throughout the base. He warns me it will be a hindrance to our operations. Since he seems to care, I tell him what happened and ask for his advice. He chuckles a little. He then tells me he doesn’t have an ideas—and doesn’t care enough to think of any. But then he gives me a piece of “paper”—something people apparently used long, long ago in order to make amends. I don’t know what’s he’s thinking, but he’s not the kind of man to act without purpose. I decide his words must have<br> meaning. Apparently “paper” is a relic of the past used for writing. That’s when it comes to me:</p><p>Since I usually say too much. I’ll write a “letter” to my wife instead.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>But I’m not sure what usually goes into a letter. Maybe I should start with thanks for everything she does for me every day? No, wait. An apology is probably better. I write letter after letter as I think of my wife. I write, then erase. Write, then erase.</p><p>Write, then erase. After ten or so attempts, the letter is finally complete. I go home and hand it to my wife, whose eyes go wide. This could just be because a letter is so unfamiliar, but more likely it’s because I’m genuinely apologizing. Once she reads the letter, she smiles and looks at me. Then she wraps me up in a hug… It would seem all is forgiven. My messy writing on the crumpled paper was simple: “I will protect and love you with all of my life. This I swear…” No matter what the future may hold.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Operation: Black Lily Part 1<br>[<br>]</p><p>Test Record #1104</p><p>“Morning, sleepyhead. You getting up today?”</p><p>The man gently places his hand on his<br>wife’s<br> cheek as he speaks; her skin is cool to the touch.</p><p>Her temperature must drop while she sleeps<br>, he thinks. The woman does not so much as stir.</p><p>The only sound in the room is her deep, steady breathing. It is the only way he knows she still lives.</p><p>She has been asleep for nearly two weeks.</p><p>Ten days ago, they fought Flowers in the city ruins. It was a relentless battle, and many did not see it through to come out intact on the other side. His wife’s head was injured during the skirmish, and though the wound is healing nicely, she remains unconscious. The doctor said it was an after-effect of receiving a strong blow to the brain. He also warned the man she might never regain herself. He knows he should be happy she still lives. Nonetheless, he finds himself praying:</p><p>“Please wake up, honey.<br>Please.<br>“</p><p>The man had already lost his son to the Flowers. And now they threatened to steal his wife as well.</p><p>His body shivers in fear at the prospect, the anxiety boring a hole in his heart. The Flowers were taking everything from him.<br>Everything.<br> Hate swirls inside him as he unconsciously clenches his hands into fists. If only he could eradicate the Flowers…</p><p>If only he had the strength to kill them…</p><p>All right, enough of that. She’s going to wake up<br>. The man draws himself up straight, patching the hole in his heart through sheer force of will. Soon, a voice comes over the PA announcing mealtime. Even this dreary announcement, played at the same time every day, serves to take his mind from his troubles. For the first time ever, he finds the managed routines and strict rules of his lifestyle are granting him a sense of security and peace.</p><p>“I’m off to eat, honey,” he whispers.</p><p>“Be back soon.”</p><p>The man makes his way to the feeding hall. It is a simple space fitted with sterile terminals where people receive meals after scanning their IDs, as well as rows of small tables where they can eat. Right now, it is filled with prisoners who live in the man’s block. They line up in neat rows, receive the same food, plop down in assigned seats, and eat silently. The prisoners are treated like animals; it is an unnerving sight. But tools for war must be properly managed. The man looks at the empty seat beside him where his wife would typically sit. The food seems even more bland than usual this day.</p><p>Suddenly, the voice of their commander rings out.</p><p>“Eyes on, people!” Tension ripples through the prisoners; an appearance from the commander typically foreshadows a problem.</p><p>“We are currently recruiting testers for new equipment. Anyone who wishes to take part can apply at the terminal in their room. That is all.”</p><p>The message delivered, he spins on a heel and leaves. The prisoners breathe a sigh of relief. The R&amp;D Department was constantly researching weapons and other gear that might be of use against the Flowers. They managed every aspect of the prisoners’ equipment, right down to what they wore in their daily lives. Their clothes heightened the wearer’s resistances and strength, but also allowed the commander control of their bodies and minds. Despite their ill feelings toward their garb, they all agreed the clothes had saved their lives on multiple occasions. For the man, however, the fact he is no better than a slave is something he has made peace with—for he will shoulder any burden and bear any pain to have his revenge. He will do whatever is necessary.</p><p>New equipment, eh? Interesting…</p><p>With more powerful weapons and equipment, they could inflict more damage on the Flowers and return from battle with fewer casualties. And maybe even end the war altogether. The man knows many people will apply to test the new equipment, because they all share this same goal. Plus, better equipment means a better chance of survival. The man thinks it over. Though he wishes to stay at his wife’s side, he knows he won’t actually be able to<br>do<br> anything for her. So when he returns to his room, he turns on his terminal and applies to test the new equipment.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Operation: Black Lily Part 2<br>[<br>]</p><p>Several days later, the man finds himself walking toward the R&amp;D training room. When he arrives, five prisoners are already there. These are the applicants who were chosen. There does not seem to be a particular type: he sees all kinds, from muscle-bound men to slender, wiry women. Once they are gathered, the commander begins to speak:</p><p>“Put your gear on and prepare to spar.”</p><p>The commander brings out six sets of bizarre clothing. They are called enhancement suits, and each one upgrades its wearer in different ways.</p><p>The man’s suit is called a “power model.”</p><p>It is designed to heighten the wearer’s physical strength. The outfit is completely black, and has a solemn, imposing air. It is made from a thick, heavy material that seems designed to function as a flexible suit of armor. He puts it on and closes the seals, noting with grim satisfaction how it encloses his entire body. The remaining five suits for the other prisoners consist of three combat-oriented models—speed, defense, and magic—and two support models: scout and medic. Today, they will be testing the combat suits.</p><p>His suit ready, the man walks to the middle of the room. Opposite him is a man in a speed suit. He can’t be more than twenty years old—little more than a kid. His suit is bright yellow, and appears only lightly armored.<br>Speed, eh? I wonder how fast we’re talkin’ here.<br> The two combatants face each other, muscles tense. After a few moments, a buzzer sounds.</p><p>“I’m coming for you, old man!” screams the kid.</p><p>The moment the words leave his mouth, he closes the distance between them in a blur. Before the man even knows what is happening, the kid punches him square in the face. He stumbles across the room before coming to a stop against the back wall.</p><p>“Oh, it ain’t naptime yet, pops!”</p><p>The kid races across the room before the man can even regain his feet. He begins dancing around him, always in his blind spot, pummeling him with a series of rapid blows and kicks. But the man feels no pain. The impact is intense, but lacks the power to penetrate his armor. The kid quickly seems to grasp this as well, and redoubles his attacks in an effort to pummel his foe into some kind of submission. His arms move too fast to be seen. His legs are streaks of yellow light.</p><p>“Give up already, you dog!” the kid taunts. With each strike the kid makes, he tosses in a barb of the tongue. The man can’t tell if his opponent is trying to goad him into sloppiness or is just always like this. Regardless, the kid clearly has the mindset of a warrior. The man places his back against the wall and raises his guard. Though each strike by itself does little damage, he knows the kid’s furious onslaught will eventually wear him down. The man looks for chances to strike back, but the kid’s speed shows no sign of slowing. Perhaps the speed suit also raises his stamina. Regardless, the power model is heavy, and unsuited to prolonged fights.<br>Time for a new plan…</p><p>“Was that you hitting me just now, kid? I thought a fly landed on me.”</p><p>“The hell did you say!?”</p><p>Taking the bait, the young man launches a roundhouse kick. His foot makes contact with the man’s side, sending a shockwave through his entire body…. But it also leaves an opening. Before the kid can recover, the man rears back and drives a fist into his gut. The young man stops moving. He stands in place, wobbling back and forth like a dying top, then slumps to the ground.</p><p>“N-nice shot, buddy…” says the kid as he fades into unconsciousness.</p><p>“But next time, I…won’t lose…”</p><p>“Heh. You fought well, kid.”</p><p>The man chuckles at his opponent’s unceasing confidence, even when staring down defeat.</p><p>His clouded heart feels a bit lighter.</p><p>The prisoners—including the kid—spend the next few days in their suits, pushing them to their very limits. Once this is done, they are ready to test them for true.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Operation: Black Lily Part 3<br>[<br>]</p><p>Urban Residential District: Block One The prisoners stand in a line amidst abandoned buildings. Each one is clad in a different suit. Their mission is to eliminate all Flowers in the area. Though technically a capability test of the suits, it is still a genuine battle. If the test goes well, the enhancement suits would be officially rolled out as new equipment, and hopefully increase the survival rates of all prisoners. The six are determined to make the mission a success. The scout activates her sensors and scans the area. Ten Flowers are detected in Block Three. Flowers typically live in easily spotted clusters. However, there are also stealth types that do not show up on scans. They will have to keep their guards up at all times. The six slowly and carefully pick their way through the ruins.</p><p>Urban Residential District: Block Three The party receives visual confirmation of ten Flowers straight ahead. They are relieved to hear the scout’s information was accurate, and proceed to the next phase of the plan. The magic unit initiates the attack. She fires a heat ray from a massive gun, transforming a nearby Flower to ash. This model of suit is vulnerable while firing, but a surprise attack solves that problem.</p><p>“Go, kid!” yells the man.</p><p>“Do your thing!”</p><p>The kid leaps into a cluster of Flowers and begins raining blows down upon them. The man follows close behind, swinging a massive greatsword that mows down everything in its path.</p><p>The battle is over in an instant. The power of the suits is overwhelming. They will turn the tide of the war. But this overwhelming victory—and the hope it brings—makes them sloppy, and they drop their guard.</p><p>“Look out!” cries the scout.</p><p>“Something’s co—“</p><p>A Flower emerges from the ground under the scout’s feet. She is thrown to the side, where she lands with her neck at an impossible angle. Death is instantaneous.</p><p>“Everyone, behind me!” yells the defense unit.</p><p>He raises a shield as the others form up in his wake. More Flowers rip through the ground beneath them. The magic unit is torn in two, causing chunks of flesh and bone to rain down around them.<br>Don’t lose heart now<br>, thinks the man as he grips his sword. Over a dozen Flowers now loom around them—and a moment later, they unleash hell. The defense unit adjusts his position to take the brunt of the attack, while the medic does her best to keep him upright. Meanwhile, the speed and power units make their way through the chaos, cutting down one Flower before moving on to the next. It is a solid battle plan—at least at first. But while the medic can heal wounds, she is powerless against the pain that accompanies a broken bone or a dislocated joint. Slowly but surely, pain begins to overwhelm the defense unit. Finally, it becomes too much to bear. He turns to flee the battlefield, and is immediately set upon and torn apart by a pair of Flowers. Six of the creatures now remain, and the man in his power suit steps into place at the fore. Each time a Flower strikes at him, he responds with a vicious attack of his own.</p><p>I won’t die here. Not now. Not like this.</p><p>I won’t leave my wife all alone!</p><p>This thought is enough to carry him through the fight. The man hears a terrible sound—a cry of fear and pain and utter, complete rage. He does not even realize he is the one making it.</p><p>Time passes. Time stands still. Eventually the man emerges from his bloodlust and sees the kid resting on his knees.</p><p>“W-we did it…” whispers the kid.</p><p>“We actually did it.”</p><p>Only then does the man notice the shredded remains of Flowers all around them. There might still be more lurking underground. If so, he does not have the energy to fight. Suddenly, he hears a familiar announcement:</p><p>“Enhancement suit battle test complete.”</p><p>“Commencing phase three of the experiment.”</p><p>As though triggered by the voice, pain courses through his head. Suddenly, a voice rings out, blocking all other thought.</p><p>PROTECT YOUR FAMILY.</p><p>PROTECT YOUR FAMILY.</p><p>PROTECT YOUR FAMILY.</p><p>KILL THE ENEMY.</p><p>At the last line, the man loses consciousness.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Operation: Black Lily Part 4<br>[<br>]</p><p>When the man’s eyes next flutter open, he finds himself lying on the floor. He struggles to his feet as the fog begins to lift from his mind… And he beholds a grisly sight. The floor is a lake of blood. In the center, hunks of flesh and a broken staff.<br>That staff… It’s the medic’s.<br> The man examines the chunks and finally finds what remains of the medic’s face. Her suit has been forcefully pried open and her skin peeled from her very bones. There’s not even enough left for a proper burial. The man feels nausea building inside him and turns away. But this only reveals a new horror: The kid—or what remains of him. He has been impaled on a massive greatsword. His arms have been plucked from the body and discarded; his face is little more than a ruined crater. It appears the corpse was pummeled into submission long past the point where the man who existed inside was dead.</p><p>No… No, this can’t be…</p><p>A horrible feeling crawls up his spine. Cold sweat runs down his face.</p><p>That sword… It’s mine.</p><p>“You killed him,” says a familiar voice.</p><p>The man whirls around to find the commander.</p><p>“I…killed him?”</p><p>His mind rejects this fact, as does his heart. But he cannot deny his bloody hands. Or his black suit—which is now a vivid red.</p><p>I did this… Oh god, I did this!</p><p>“Calm yourself. You are not to blame here.”</p><p>The commander proceeds to tell him everything.</p><p>It had all been an experiment. Command had set up the Flowers’ surprise attack—</p><p>and once it was over, they deprived the prisoners of consciousness and had them fight to the death. The commander had planned everything. After revealing this, he begins to regale the man with tales of all the data they gained from the experiment, his glee barely contained. But the man cannot hear him. His thoughts are a whirling vortex of rage.</p><p>“It appears to be somewhat dependent on the user’s mental state and personality,” continues the commander.</p><p>“But overall, the power suit was shown to provide the best balance of offense and defense.”</p><p>“We will begin mass-manufacturing it at once.”</p><p>The man’s rage compresses, finding a target in the commander.</p><p>“So my friends died for a goddamn<br>test<br>?” he growls.</p><p>“No progress is without sacrifice,” says the commander.</p><p>His tone is flat, as if the subject bores him. Enraged, the man rears back and launches a fist directly at the commander’s face. But his arm stops before it connects, his body refusing to allow it.</p><p>For all his power, he is still a prisoner.</p><p>“DAMN YOU TO HELL!” he wails.</p><p>The commander stares at the man impassively.</p><p>“I could dispose of you here and now, you know? It actually might be the smart thing to do, considering all that you’ve learned.”</p><p>An image of the man’s wife leaps into his mind.<br>I can’t die yet.<br> The man furrows his brow and slowly lowers his fist.</p><p>“Good. What happened here today will be our little secret.”</p><p>“We expect great things from your tenacity, prisoner.”</p><p>“No sacrifice is too great if it means victory over the Flowers.”</p><p>This said, the commander collects some bits of suits and departs. Silence fills the void.</p><p>I can’t die yet. I can’t die yet. I can’t die yet.</p><p>The man repeats these four words over and over.<br> I have to live for her. And the more of us who wear these suits, the more of us who will survive. He’s right. This is a<br> good<br>thing<br>. The man had killed them all—Flower and friend alike. Yet he felt a sense of might at his power. A sense of guilt for his actions. And a sense of excitement at the possibilities. All of these things eat away at him.<br>I am strong enough to protect. I am strong enough to kill.<br> The darkness inside him swells and writhes and expands until finally it consumes what remains of his heart.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Escape<br>[<br>]</p><p>The alarm shrieks throughout the base, disturbing the pristine silence of the night.</p><p>“ALERT. DESERTER DETECTED. CAPTURE ALIVE IF POSSIBLE.”</p><p>I hear the commander’s voice murmuring from the comms device I stole and know they’re talking about me. But just as I peek my head around the corner to see what’s what, a searchlight grazes my cheek.</p><p>Crap.</p><p>In front of me stand massive mechanical bodies twice the size of a human. Their eyes gleam ominously in the night as they sweep the area for prey. As I look, another appears. Then another. Then another. While they amass, I creep forward as slowly as possible so as not to catch their attention.</p><p>So how did all this happen? That’s easy: because of the Flowers. The appeared out of the blue one day and stole all of our happy lives away. My wife and I, we had a son, but… God, he was so young.</p><p>I volunteered to fight the Flowers in an attempt to find some kind of revenge, but humanity still hasn’t found the key to victory. My wife’s been in low spirits lately—she’s clearly exhausted by all the fighting—and I worry I may end up losing her at this rate. So that’s why I decided to conduct my own survey of the Flowers and find a way out of this no-win scenario.</p><p>As I delved into the depths of the base, I managed to download reams of data from a computer in a classified area. It was an incredibly risky move, but it ended up being more than worth it; hidden in all that data was the location of something called the Flower Den, which is the enemy’s main base. It was the kind of intel that could change everything.</p><p>But before I could even process what I’d found, I tripped an alarm and had to make a break for it. I spent so much time hiding in the shadows as I made my way inch by agonizing inch toward the exit. And now, an eternity later, I find myself so very close to my goal.</p><p>I reach up and touch my pocket to make sure the downloaded information is still there. The moment I do, a brilliant white light washes over me.</p><p>“DESERTER LOCATED.”</p><p>The voice is cold, and it grows louder as its mechanical owner moves toward my position. I can’t let them catch me here; if they do, all of this will have been for nothing.</p><p>“DROP YOUR WEAPON. LIE ON THE GROUND.”</p><p>Squinting under the light, I put my fingers on the grip of my greatsword. “All right, big fella, no need to get your panties in a twist. I’m not going to fight back.”</p><p>I toss my weapon, which clatters to the floor. “There. I’m unarmed. We good here?”</p><p>“APPREHENDING TARGET.”</p><p>The machine moves forward, ready to subdue me, but I have a surprise in store. Before it can grab me, I slip through its legs and heave myself up and onto its back, then yank the cover off the base of its neck and jam my device into the waiting socket.</p><p>“MALWARE DETECTED. COMMENCING FORCED SHUTDOWN.”</p><p>See, my sword wasn’t my only weapon—I’d also packed a self-replicating virus just in case. As soon as the machine grinds to a halt, I pick up my sword and run as fast as my legs can carry me toward the location of the Flower Den.</p><p>I’m going to end this war.</p><p>I’m going to end it tonight.</p><p>I will never lose anyone I care about ever again.</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: Exploration<br>[<br>]</p><p>My journey to the Flower Den continues. It’s a long trek, but I just put my head down, follow the stolen map data in my device, and try to trust that I know what I’m doing.</p><p>From everything I can tell, the army actually brought the den under our control some time ago, but command didn’t send anyone in to investigate. That strikes me as strange, considering it would be the perfect time to learn how the Flowers live, so I intend to find out for myself.</p><p>As night fades and morning comes, I arrive at my destination and find corpses scattered throughout the area—most likely the soldiers who were first sent in to take the place. But aside from signs of an old battle, what catches my attention is the building that stretches into the air almost beyond where I can see. Though weathered and grungy, there’s a strangely majestic air about the place, and I try to tread lightly as I slip inside through a shattered door.</p><p>The building is dim inside, and large enough that I can’t see the ends of the rooms. The walls are sturdy, their faces lush with vines. As I make my way further in, the only light comes from small streams of morning sunshine that filter in through broken windows. The hallway is a never-ending stream of shattered glass, splintered wood, and rubble. But then…</p><p>“PLEASE. PLEASE.”</p><p>I hear a woman’s voice—barely a whisper.</p><p>“Hello?” I ask. “Is someone there?”</p><p>The only response I get from the darkness is silence. As I carefully proceed forward, the far end of the building finally comes into view.</p><p>“MERCY.”</p><p>The next voice is male. Multiple survivors, maybe? I scan my surroundings, looking for human forms, when suddenly…</p><p>“Okay, what the hell?”</p><p>Resting at the far wall are a series of tiny Flower sprouts. The faces in the juvenile petals distort in agony as they attempt to speak to me.</p><p>“SALVATION.”</p><p>Several voices speak at once. I know this is what happens to people who are consumed by Flowers—they become a part of the whole, unable to express their own will any longer.</p><p>“They aren’t human anymore,” I tell myself. “They’re not human, dammit. They’re Flowers.”</p><p>The sprouts lower their petals to reveal a series of twisted faces. The way they droop toward the ground gives the impression they’re praying.</p><p>“MOTHER. SAVE US, MOTHER.”</p><p>After a moment, I realize the things are actually praying. The subject of their reverence is a dilapidated altar upon which rests a grand portrait. It’s dirty enough I can’t tell what kind of person it’s supposed to show, but it makes my heart beat in my chest for a reason I can’t explain.</p><p>Why do I feel this way?</p><p>But no one is there to answer my question, and the only response is the continued whisper of frantic prayers.</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: Elimination<br>[<br>]</p><p>“AHH. AHH. EVERYONE IS DEAD.”</p><p>In the dingy building, the smallest Flower sniffles. A medium-sized one speaks to soothe it.</p><p>“ALL IS WELL, LITTLE ONE. THE MOTHER WILL SAVE US.”</p><p>“THE MOTHER? SHE WHO CREATED US?”</p><p>Voices of prayer fill the building anew. How eerie it sounds. How horrific. The ones who stole happiness from me and my family have no right to look for salvation.</p><p>“NO. NO. NO.”</p><p>I approach silently from behind, cutting down the young Flowers with faces. I kick their remains aside and approach the altar, staring at the dirty portrait atop it.</p><p>“Hmm?”</p><p>I spy a book fallen behind the altar. Someone’s diary. It’s tattered, the writing faded in places, but some pages are still legible.</p><p>“A Flower…religion?”</p><p>I’d heard about such things before. People believed the Flowers would save the world, and so began to worship them. It seems I had found one of their temples.</p><p>I carefully turn the pages so as not to tear the fragile paper. For a time, those who worshipped the Flowers took in young Flowers and lived alongside them in this place. But they were all eaten in the end, leaving behind only a mass of Flowers to continue a meaningless prayer without end.</p><p>As my eyes continue to scan the diary, I spot the word “portrait.” My hurried hands come to a stop and I read, transfixed.</p><p>That portrait was apparently one of the religion’s symbols, one as revered and important as the Flowers themselves. But why did they find it so precious?</p><p>I find my answer on the final page. The people in the portrait were the ones charge of Flower research—the ones who brought those monsters into the world. Their names…</p><p>“No. I don’t believe this. It’s<br>impossible<br>.”</p><p>I walk up to the altar and wipe away as much of the dirt as possible. Faces slowly appear from beneath the grime. I’m greeted with cold, tense expressions. Though the air about her is different, she looks<br>exactly like HER<br>.</p><p>I reel, staggering to keep myself upright. As my hand comes to rest on the frame, I hear something fall.</p><p>Drip. Drip. Drip.</p><p>This building is a ruin; not surprising that it’s falling apart. But as I look to the ceiling, I see something writhing in the dark.</p><p>Those are…</p><p>I first thought the ceiling was covered in vines, but I was mistaken. Instead, an infinite number of juvenile Flowers have tangled together to create a roof.</p><p>They rush me as one, crying out in voices of madness. I cut them down as I run, barely escaping with my life. But it was all worth it, for I now have evidence for the theory that Flowers are sentient. This data will be a huge boon to our research—it might even be the thread that finally leads to use eliminating them once and for all.</p><p>And yet, even knowing this, I set fire to the church, burning the Flowers and erasing the portrait from existence. The crimson flames howl in the billowing wind. They swallow the building whole, reducing everything within to ash and bone.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: Erase<br>[<br>]</p><p>Once I burn the church, I set off on the long road back to the base where my wife is waiting, arriving after the sun has set.</p><p>I can’t get caught. I<br>can’t<br>. They’re still after me because I’m technically a deserter. Cautious of my surroundings, I creep back to our room.</p><p>“You’re back!”</p><p>She’s been waiting for me the entire time, and looks exhausted as she leaps from her chair.</p><p>“We need to get out of here,” I reply. She’s bewildered, but I don’t wait for her to start gathering our things. I quickly pack the photo of our son, followed by his mementos. After that, I grab some portable rations I’d pilfered on a mission once, just in case.</p><p>“Get out of here and go<br>where<br>?”</p><p>“I don’t know.”</p><p>Her bewilderment grows at my answer.</p><p>“You can’t just vanish, then reappear out of nowhere and say we have to leave!”</p><p>I probably would have said the same in her shoes.</p><p>“Okay. I’ll keep this short, but you have to listen.”</p><p>I tell her what I saw in the church. I tell her about the bizarre Flower buds, the altar, and the portrait. The portrait of the woman who looks exactly like my wife—the one they call “Mother.”</p><p>“Are you sure you weren’t dreaming?” my wife asks quietly. “I mean, that’s just not possible.”</p><p>She’s right. She fights against the Flowers. She can’t be their mother.</p><p>“The superior officers are hiding something.”</p><p>They must have known what was in that church-turned-Flower den, yet they chose not to send a survey team. I can’t understand why; all I feel is an ominous sensation gripping my entire being.</p><p>“Let’s go.”</p><p>I zip the bag shut and hold out a hand. But then…</p><p>“He has admitted to coming across top-secret information.”</p><p>That’s all she says in return. A moment later, the door swings open and commanders fall into place behind her.</p><p>“I believe he found it sometime between the evening previous and this morning. But erase two days’ worth of memories, just in case.”</p><p>“Understood.”</p><p>The commanders do as she says and grab me.</p><p>“Wait! Why are you—!?”</p><p>Ordering around commanding officers? Trying to erase my memory?<br> Before I can ask, my mouth is gagged and I’m pinned to the floor. I realize my mistake then: It isn’t the superior officers who are hiding something.</p><p>“This is for your sake,” she whispers.</p><p>A cold rod stings to my neck as a shock courses through my body. In the instinctual fear of death, my life begins to flash before my eyes.</p><p>I see my wife’s smile.</p><p>Her tear-streaked cheeks.</p><p>Her face colored with anger.</p><p>I thought I knew everything about her, but the look on her face right now is cold and distant.</p><p>Just like the woman in the portrait.</p><p>As the darkness swallows my consciousness, I remain oblivious to her intentions—and her truth.</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>Enthralling Love<br>[<br>]</p><p>A prisoner who fights Flowers for revenge…Wow! That story was like a movie, huh? I mean, he seeks revenge for love, and he falls into the pits of the abyss for love, too.</p><p>Human love sure is a strange thing! No matter how strong or smart someone is, love dulls their judgement and clouds their outlook. It’s almost like a poison that slowly eats them away from the inside, right?</p><p>But what makes the man so incredible is how he can get drunk off that poison. Some may think that foolish, but I quite like it. Heck, you know me—I ADORE pure humans like him!</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>The Talkative Man<br>[<br>]</p><p>Hey there, friend. Up for some action today? I got the cards if you got the scratch!</p><p>How’s that? You think I got nothing to bet ‘cause I lost to 063y? Ha! You shouda seen the run I went on once the chips were down! I was pullin’ aces outta thin air left and right, and by the end of it…</p><p>Nah, I’m kidding. Guy took me to the freaking cleaners. Did that thing where he just stares at you without moving and you can’t ever tell if his hand is great or crap. But listen, here’s the weird thing: After he’d taken everything but my skivvies, he stood up, grabbed a single piece of paper off the table and walked away. Didn’t even look at all the other stuff I bet.</p><p>Weird guy, right? I mean, I know paper’s valuable as hell to us prisoners, but you think he woulda…</p><p>Wait, seriously? He needs the paper so he can write a letter to the missus and cheer her up? Well, ain’t that a hell of a thing. Almost brings a tear to your eye.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>Hymn 42: Become a Flower<br>[<br>]</p><p>Become a flower and bless us with your presence</p><p>(Careful and slow here! Precise breathing!)</p><p>Bestow upon us the truth</p><p>(Make each note clear!)</p><p>We give you our hearts for salvation</p><p>(No stomach falsetto. I know it’s hard!)</p><p>Become a flower and bless us with your presence</p><p>(Harmony! Don’t rush!)</p><p>Come to us as we come to you</p><p>(Big finale! Make ‘em cry!)</p><hr><p>I’m really nervous about the choir performance, but also quite excited. We’re meeting at the rear entrance of the prayer chapel at noon, then rehearsing after. Remember where you’re supposed to stand, everyone!</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>Diary Found in an Empty Room<br>[<br>]</p><p>Battles with the Flowers grow more int■nse by the day, and the prisoners are ■■■■■■ morale. Those who fight with partners ha■e higher stress levels than those who are single, and I beli■ve one particular male prisoner needs the most attention. He seems do■■■e at first, and is generally trusted by the other prisoners, but he often a■ts unpredictably in situations where his wife is in■■■ved.</p><p>How many more misconducts will he have to go through before he ■■ deemed an ■■■■■? Last time, an err■r I disposed of called me a “■■■■■,” but I knew that already. My superiors t■■l me prisoners are all expendable, but I ■■■■■ believe that. As I engage directly with them, I get the ■■■■■ they have wills and personalities of their own. To dispose of them is ■■■■■■■■ work. I t■■■ my coworkers about this, and they ■■■■ me such an em■■■■■■■ ■■■■■■■■■■■ might see<br>me<br> categorized as an error. I couldn’t t■■■ if they were joking, or if ■■■■ ■■■■ ■■■■■■■ ■■■■■ ■■■■.</p><p>Is ■■■■■■■ fear and anxiety another sign of being an error? I’m ■■■■■■.</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><pre><code class="hljs">              </code></pre><p>Salvation’s Teachings: Bloom<br>[<br>]</p><p>Verse 1: Festival</p><p>The Flowers spoke thusly to their five serving priests: Believe in Us and serve Us.</p><p>That was the first day.</p><p>The priests, along with all believers, promised to give all to the Flowers, and thus did pay a price most dear.</p><p>What came of it was this place of worship.</p><p>Entrust all to Them.</p><p>Give all to Them.</p><p>Only then will we become Flowers and reach a new world.</p><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Argo</title>
    <link href="/2024/03/07/Argo/"/>
    <url>/2024/03/07/Argo/</url>
    
    <content type="html"><![CDATA[<h1 id="Argo"><a href="#Argo" class="headerlink" title="Argo"></a>Argo</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>My life’s mission is to explore the entire world, for only great hardships can make me feel alive. Everything besides adventuring is merely a footnote. I wager I’ll feel this way until the day I die.</p><p>I’ve faced the challenge of many unexplored regions in my life: Mountains untrodden by man, scorched deserts, frozen islands, pitch-black forests, caves that lead to an endless abyss… So many adventures I can’t even remember them all.</p><p>Just the other day, my wife and I learned that our long-awaited first child was in her belly! Of course, I wanted to help however I could. Which is why I left our snug house in the snowy mountains and began the long climb down. My destination is a small nearby town. How long has it been since I’ve made this trip? My wife is usually the one who does the shopping. In any case, I don’t mind doing what I must to help out during this time.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>I haven’t tasted the bustle of civilization in a long while, but I pay it little mind as I search for the shops my wife told me about. Heh. It’s funny how quickly I get turned around in the streets—if only I was navigating a mountain path instead!</p><p>As I wander about, a merchant calls me over. He recognizes me as a renowned adventurer, and he says he has items he wants me to look at. He has a keen eye, this shopkeeper! Ha ha ha! The shopkeep lays out several items across his display: flint to create bonfires, a talisman that wards off illness, and ice that never melts, even under the hottest of suns. All extremely useful items on any adventure! He claims these items are all in high demand, so I buy them on the spot. Lady luck is really smiling on me today!</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>The moment I leave the stall, reality smacks me in the face: I spent all our money and didn’t get a thing my wife wanted! Ah, well. Nothing to be done about it now. So I sell my coat and use the money to buy what I came for. Not the smartest thing to go coatless in the dead of winter, but I’m hearty—I’ll find a way to survive. Mine is a body forged in the fires of countless journeys. It’d take more than this to do me in!</p><p>As I make my way back up the mountain, a blizzard suddenly comes upon me. I’m cold—<br> cold—but I spy a nearby rocky shelter and decide to hunker down. As I settle in, I try to start a bonfire with my new flint. But the moment I strike it, the damn thing shatters into pieces. It’s a dud—talk about unlucky.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>Somehow, I manage to make it home through the wind and snow. When my wife sees me, she demands to know why I was wandering around without my coat on, so I tell her the whole crazy story. Still, I’m pretty excited about my two remaining treasures!</p><p>That night, I am plagued by a high fever. You expect this kind of thing when you walk around in a blizzard without a coat, but it means my talisman that wards off illness is<br> a bust! Another dud! Can you believe it? Trying to kill the fever dead, I put my never-melt ice in a sack and set it on my forehead. I bet you can guess how this goes… I take the bag of lukewarm water off my head and toss it aside in disgust. That damn shopkeep took me for all I had! Still, it’s not all a loss; I live on a snowy mountain… So if it’s ice I need, I just have to walk outside! Ha ha ha ha ha!</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>The Mittens—Just in Case Part 1<br>[<br>]</p><p>Before he met an unfortunate end</p><p>Icicles hang from the eaves. The world outside is enrobed in white. The snow here is deep and cold. The trees, bushes, and grasses all lie buried, silently waiting for the arrival of spring.</p><p>A girl of tender age gazes out the window. “Here you go, honey.”</p><p>The girl turns to face the speaker and finds her mother offering her a cup with steam furling from the top. It’s filled with warm goat milk. Her mother swears by it, claiming it’s the best thing for warding off winter’s chill. But the girl doesn’t feel strongly about it one way or the other.</p><p>“Uh, thanks,” she says.</p><p>She accepts the cup from her mother and returns her attention to the outside world, taking small sips now and then.</p><p>“I wonder when your father will come home,” murmurs her mother.</p><p>Without waiting for a response, she quietly retreats back to the kitchen. The girl exhales on the window, her breath warm from the milk. It clouds over in white. She runs her finger across the spot, sketching idle patterns. She is not allowed to play outside during the winter, so boredom is her constant companion. During such times, even a window can make a decent playmate. The girl lets her attention drift as she looks out the window at the piles of snow beyond.</p><p>Her small house sits halfway up a snowy mountain. The girl and her mother are usually the only occupants. Her father is rarely home. According to her mother, he is an adventurer of sorts who is always off traveling the world. The girl isn’t sure what kind of job an “adventurer” is, exactly—all she knows is that her father is very busy. But her mother has a litany of complaints about him, and she is never shy to make her opinions known.</p><p>“Your father never listens! He’s stubborn as a mule, drunk as a skunk, and he never, ever, EVER thinks about his family! He only cares about his damn adventures!”</p><p>And she always finishes her rant with the same exasperated phrase:</p><p>“I honestly don’t know what to do with that man.”</p><p>The girl is too young to speak with her mother as an equal. But as her mother has no one else to talk to, she grumbles away—as much to herself as her daughter most days.</p><p>Recently, her mother told the girl a story. Four years ago, when the girl was born, her father had apparently been off on one of his adventures.</p><p>“Wait,” said the girl when she first learned of this.</p><p>“So you gave birth to me<br>alone<br>?”</p><p>Her mother replied with a chuckle.</p><p>“Oh, I knew he wouldn’t come home, so I made sure to call a midwife up from town ahead of time.”</p><p>The girl nodded as though she understood and said, “Gee, Mom. That’s pretty crazy.”</p><p>When the father finally returned from that freewheeling adventure, his daughter could already hold her head up on her own. After that, her mother raised her almost entirely alone. The girl would always gaze in bewilderment at her father during his rare visits home, and figured that perhaps his behavior was normal, and that’s just what fathers are. But she could not help but feel concern by the dark look that often fell upon her mother’s face. She doesn’t hate her father. Not really, anyway. But once she became old enough to understand some things, she started to resent the way he treated her mother. One year, her father came home before the arrival of spring.</p><p>That was the night it happened. It led to one of the worst moments of her life. The three of them sat around the table enjoying a meal. Suddenly, her father—drunk as usual—leaned over to her and said:</p><p>“Y’know, if you were a boy, I’d take ya on an adventure with me.”</p><p>Before she knew it, her eyes were filled with tears.<br>Why am I crying about this?<br> she wondered.<br>For a moment, her mind was a blazing whirl of emotion. Her father had laughed the whole thing off, claiming it was a joke and ruffling her hair. But it was no joke to her; as far as she was concerned, her father had denied her very existence. As the days passed, another emotion began to bud within the girl, one far different from her usual sadness and isolation. It was a spirit of defiance toward her father.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>The Mittens—Just in Case Part 2<br>[<br>]</p><p>“Y’know, if you were a boy, I’d take ya on an adventure with me.”</p><p>Two years have passed since her father hollowed out her heart. Though she is older now, she still lives alone with her mother. Her father continues to live his life of freedom, stumbling home whenever the mood strikes.</p><p>Why does Dad like adventures so much?</p><p>Why does Dad think they’re more important than Mom?</p><p>Why does Dad hate me?</p><p>These questions often enter the girl’s mind before she falls asleep. But one of her lean years can never find the answer.</p><p>Eventually, as always, her father wanders home. When he crashes through the door, he hands over all sorts of random articles to her mother. They’re a mix of strange statues, odd flowers, and a dozen other useless trinkets—but he refers to them proudly as his “spoils.”</p><p>“Sell ‘em for money!” her father says proudly.</p><p>But the girl knows from her mother that his “spoils” are near to worthless. In the end, her mother always paid their living expenses by knitting clothes and gloves and selling them in town. But of course, her father has no idea. She asked her mother once why she didn’t tell her father this, and she just shook her head.</p><p>“Those spoils are important to him. If he ever realized they were junk, it would make him terribly upset.”</p><p>After handing over his most recent spoils, her father gulps down strong alcohol with dinner. Though he is usually silent on his first night back, this time he gleefully spins tales of his adventures. Ever since the incident of two years ago, the girl had avoided her father when he drank. She couldn’t bear having him say something so cruel again. That’s why she rarely hears his adventuring tales directly. But his booming voice is impossible to avoid in the small house, and it reaches her as she lies in bed. He raves about fighting a ferocious beast in a scorching volcano, claims to have discovered ancient ruins in a deep wood, and weaves a tale of a titan’s mirage in a land of illusion.</p><p>“Bet I would love these stories if I was a BOY,” mutters the girl.</p><p>Annoyed, she closes her eyes and waits for sleep. She occasionally hears her mother make indistinct noises to indicate she’s following along—either because she’s used to such stories after all the years, or because she’s simply tired of hearing them. Soon, her parents start to argue. This is another part of his coming-home “routine.” The cause of their argument is always some trivial matter, mostly involving a supposed hurt suffered by her father.</p><p>“Are you even listening to me!?”</p><p>“This is important!”</p><p>Things like that. Yet to a child, every argument is a new round of pain. Whenever he starts yelling, she feels such empathy for her mother that her entire soul is plunged into a whirlpool of fear and unease. She pulls her blanket over her head and wraps it tight around her ears in an attempt to block out his drunken howls.<br>I wish he’d never come home.</p><p>Soon, she hears her father yell, “Adventuring is my life, woman!” followed by the familiar slam of a door. The argument had ended as it always did. With sleep miles away, the girl slips out of bed and makes her way to her mother, who is sitting silently at the kitchen table.</p><p>“I’m okay, honey,” she says with a slight smile.</p><p>“Go back to bed.”</p><p>Relieved, the girl returns to her bedroom and quickly falls asleep. She thought her father might stick around for a bit this time, but he sets off again in the middle of the night. And she knows that when he returns, he’ll cheerfully drink his favorite drinks, wolf down some food, and argue with her mother. The same pathetic pattern; an endless, worthless cycle. Why did he do the same thing over and over? And why did her mother put up with it? She did not understand at first. One day, the mother said to the girl, “That’s just who your father is.”</p><p>To the girl, it looked as though her mother was forcing a smile. The girl eventually summed it up in a single thought:<br>“I guess that’s just what it’s like to be married.”</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>The Mittens—Just in Case Part 3<br>[<br>]</p><p>Days pass. Months pass. How many winters has it been now? As always, she drinks her warm goat milk and stares out the window at nothing of particular importance. Giant trees. Mysterious animals. Colorful flowers. Creepy insects. From spring to autumn, the whole outdoors surrounding their home is her special place. She spends her days covered in mud as she runs through the mountains, following her curiosity wherever it leads. But winter? Well, winter is different. Deep banks of snow confine the girl to her house; her world shrinks down to a single fogged-over window. She hates winter. She hates it with all that she is.</p><p>This winter, her mother is nearing full term with her second child. But her father is off wandering the world again, so the two of them are home alone. Despite her pregnancy, her mother stays busy with housework and knitting. The girl understands this is what supports them both, and does her best to play alone and out of the way. But the house is so very<br>boring<br>. Lately, she’s been whittling herself small toys out of wood, but that can only pass the time for so long. Today, the girl simply sits and waits for the day to end.</p><p>Eventually, her gaze leaves the window and wanders about. This room, with the large table and fireplace, is where she and her mother—and occasionally her father—take their meals. Bottles of her father’s drinks sit in a row on the mantle. They almost seem lonely, as if wondering why no one has yet popped their corks to enjoy the wonders within. In the kitchen, something bubbles merrily away. Her mother is preparing dinner. Though there is still milk in her cup, she sets it on the table and wanders off to find a different room to play in. Sadly, the house is not very large. She arrives at her destination within seconds. A tired wooden door stands before her. And on the other side…is a mystery. Boredom has made the girl bold. This is the only room in the house she has never seen. It is her father’s room. He has forbidden anyone else from entering it.</p><p>“I have important things in there,” he often said,</p><p>“and I don’t need you fiddling around.”</p><p>“He is<br>definitely<br> hiding something,” says the girl to no one.</p><p>She feels years of defiance and resentment boiling up, and suddenly wants to open that door more than anything. But if her mother catches her, she will be very upset. Her mother takes promises with her father seriously, after all. That was why she snuck past her mother in the kitchen and approached the door on feet as quiet as a cat. Before her, a door. Behind it, a space for her father alone. She can hear her own heartbeat. Sweat glistens on her palms. She is nervous about disobeying her father, but also about learning his secrets.</p><p>Finally, the girl pushes the ill-fitted wooden door ajar, slips through the gap, and closes it behind her. The room is silent in the absence of its owner. It is also exceedingly plain, with only a bed, a desk, and a small assortment of adventuring tools. She begins her exploration at the desk. It is covered with a messy stack of papers. There is a date scrawled on each. The girl flips through the papers idly. They are records of his adventures. The rough handwriting belies the fact he wrote them all himself. Each story tells of dangers faced on his travels; of moments that mark the line between life and death. They tell what he thought, what he did, and how he felt. They also speak of all the marvelous sights he has seen. They’re so detailed, it’s like the girl is there with him. She digs deeper and deeper into the pile before finally reaching the bottom, where she finds a paper from one year in particular: The year she was born. She opens the record and begins to read—and as she does, her heart leaps into her throat.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>The Mittens—Just in Case Part 4<br>[<br>]</p><p>I was very young when I first snuck into Dad’s room. He had a pile of writings there, but one in particular spoke to me. The date on the cover was from the year I was born. My name was written at the top, and below that was paragraph after paragraph of kind words for his beloved child. I’d often doubted he even remembered me at all, so I held it tight and read furiously.</p><p>I want to show my beloved daughter all the secrets that slumber in this wide, wide world. I want to prove to her that I have lived. And I want her to know how so very beautiful the world can be.</p><p>That’s why I’m writing down my adventures starting today: So that someday she can know all this for herself.</p><p>My only wish is that her life be filled with joy and wonder. I would give anything for that.</p><p>Dad was a large, loud, awkward man. And he was<br>terrible<br> at expressing his feelings—especially love. But in that moment… I suddenly understood him. The date on that entry was three months after my birthday.</p><p>Mom told me he was off adventuring the day I was born. He must have written it when he came back. That’s just the kind of man he was. After that, my impression of him changed. Once I knew he loved me—<br>really<br> knew it—my feelings of defiance and revulsion slowly began to change. A few days after I snuck into his room, he came home. Like always, he got hammered, fought with Mom, and stomped off to his room. I was still young, and though I understood him a little bit better, I hadn’t had time to process everything yet, so I was still annoyed. It was hard to hear them fight—especially because I knew how much it hurt Mom. And like I said, I was still processing everything. But somehow I mustered up the courage to give him a present.</p><p>It was the next morning, just as he was heading out. The snow was heavy that day. I woke up early, walked outside, and handed him a letter and a good-luck charm I’d carved out of wood. It was the first present I’d ever given him, and he looked a little shocked to receive it. But then he smiled at me, muttered an awkward thank-you, and tucked them both away in one of his pockets. That smile made me feel like my heart was going to burst. Then he walked over the horizon and disappeared. I was euphoric, flying, so I ran back inside and asked Mom to teach me how to knit. I wanted to make him a pair of mittens for when he got back. I’d never given a damn about knitting before, but now making something nice for Dad was all I could think about. Maybe I thought it would make up for all the coldness I’d shown him over the years. Unfortunately… I was never able to give him those mittens. Because after he left that day, he never came back.</p><p>I’ve been waiting for ten years now.</p><p>“You’re back! You’re back! Tell me a story! An ADVENTURE story!”</p><p>When I open the door and enter the house, my little brother runs up and attaches himself to my leg. He’s far happier than I ever was at that age—and why not? He’s healthy and loved and has the whole outdoors as his playground. But unlike me, all he knows about Dad are his stories.</p><p>“I’m gonna be an adventurer just like you, Sis!”</p><p>I now travel the world as a fledgling adventurer. And on the occasions I make it home, I always make sure to spin my brother a tale or three. The records my father left behind are my most precious treasures. Mom was beside herself when I told her I was going to be an adventurer, but she eventually came around; you can only fight what’s in your blood for so long, you know?</p><p>I still remember what Dad said that night:</p><p>“Y’know, if you were a boy, I’d take ya on an adventure with me.”</p><p>I hated him in that moment—and it took a long, long time for that hate to finally drain away. And while I couldn’t express what I felt when I was a kid, I can put it into words now. He was wrong. I<br>knew<br> he was wrong. And I wanted him to admit it. So I’m going to prove to him that a woman can be just as skilled an adventurer as any man….Heh. I guess I really am his daughter, huh? Anyway, if I ever find him out there in this great, wide world, I’ll do what Mom would do and give him holy hell. And each time I set out for some new and unseen land, I pray this is the time where it will finally happen. And of course, I always carry the mittens.</p><p>…You know. Just in case.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>The Obstinate One<br>[<br>]</p><p>Hee hee! Are we gossiping here? I hope you don’t mind if I join in, because Mama has a juicy little morsel to share.</p><p>So when I went to check on that adventurer the other day, I found him moaning and groaning as he hung from a cliff by one hand. His arm is as thick as my entire body, and yet there it was, just slip, slip, slipping away!</p><p>Well, I was so shocked, I yelped in surprise! And I<br>knew<br> his record didn’t end there, so it was all quite embarrassing, let me tell you.</p><p>…Hmm? What happened next? Well, just as he was about to fall, I heard his wife yell. She was cradling their little girl and staring at him with THAT look, so I knew he was in real trouble. Then she demanded that he stop training and come play with his daughter!</p><p>Can you believe it? The man was just<br>training<br>! And right after she yelled at him, he switched hands and started humming to himself! I swear, some people…</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>Mountain Folk’s Ballad<br>[<br>]</p><p>Mother’s Ballad</p><p>Sturdy scoundrels descend</p><p>from mountain peaks.</p><p>Screams startle from sleep.</p><p>Hide all the swaddled babes</p><p>in the house, quick quick.</p><p>I was born by the sea.</p><p>Raised on the blue.</p><p>If I stay on the mountain,</p><p>I’m naught but a cosset’s dam.</p><p>Blustery snow.</p><p>Swelling courage.</p><p>All who protect, embrace rage.</p><p>They are coming, quick quick.</p><p>They are coming.</p><p>They are<br>here<br>.</p><p>All who protect, stand ready.</p><p>Father’s Ballad</p><p>When home I drink. I brood.</p><p>I gaze out windows and wish</p><p>for cliff and ash and bone.</p><p>I thank mother earth.</p><p>How she battles for me.</p><p>I was born at the foot and</p><p>raised at the peak, and if</p><p>I descend I’m just another</p><p>worthless old man.</p><p>A lion’s fate.</p><p>Unknown stars.</p><p>All who are valiant,</p><p>rise, rise to the zenith.</p><p>I must go quickly.</p><p>I must go<br>now<br>.</p><p>All who are valiant,<br>rise, rise to the sun.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>Notes on a Lovable Adventurer (1)<br>[<br>]</p><p>How did you two meet?</p><p>In the mountains, naturally.</p><p>We met when I attacked him.</p><p>Sorry. You<br>attacked<br> him?</p><p>Yes. I was a bandit then. What, I don’t look like it? I was abandoned by my parents at a young age, so I had to do what was necessary to survive. It was so easy to take things from climbers; they never think a woman could do them harm.</p><p>Was he one such climber?</p><p>Yep—and I don’t think I worried him for a second, either. I approached while he was in the middle of a climb, pretending to be a frail little girl before trying to stab him, but it didn’t work. He just sort of…slid out of the way.</p><p>Did he know how to fight?</p><p>Who knows? I had the same question, but he just laughed and said: “I fight mountains. Of course I can handle at least this much.” He then said to me, “Quit banditry and try adventure instead!” …Heh. He laughed, too. He had this big, infectious laugh, and it started<br>me<br> laughing as well. It’s such a nice memory for me now.</p><p>Anyway, I stopped attacking climbers on the mountains after that, and we had two kids together. I’m really thankful for all he did.</p><p>I’m so glad you’re happy. Thank you for your time.</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Akeha</title>
    <link href="/2024/03/07/Akeha/"/>
    <url>/2024/03/07/Akeha/</url>
    
    <content type="html"><![CDATA[<h1 id="Akeha"><a href="#Akeha" class="headerlink" title="Akeha"></a>Akeha</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>Red spikes top the walls that surround my family’s manor. They stand there proudly as they stretch up to the sky, and the color reminds all who pass of blood. But these spikes are not there to keep intruders at bay; our family has no need of such defenses. None ever approach our house, which is known as The Demon’s Den. And if some foolhardy brigand ever did so dare, he would soon learn that death on the spikes is much, much sweeter than what awaits behind our doors. No, the spikes are not meant to keep people out; they are there to keep the demons in.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>Our training is harsh. Our work cruel. Our teachings inhumane. One might expect that there would be those who are unable to stand it, and scheme to escape. And in fact, there have been a few brave souls who attempted to cross the wall. But every single one of them was killed; the crimson spikes remind us of this fact.</p><p>I personally knew one man who plotted escape. He was the elder brother of the lord in power—my uncle.</p><p>My uncle objected to an assassination demanded of him. But when he tried to flee, he met the same fate as those who did so before him: his head put on display for all to see.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>My family’s teachings are impossibly strict—and as the daughter of the lord, I was not exempt. If anything, my teachings were even more severe. It was only natural given my standing. There are no smiles in a house of assassins; we are showered with naught but shouting and demands.</p><p>My uncle, however, always had time to spare a grin for me. He was the only one who ever did. But on that grim day, his smile vanished. His younger brother cut him down to set an example, and his face would forevermore be frozen in a rictus of pain. I learned many hard truths that day: I would never cross the spikes. Kindness has no meaning. My life is nothing but orders and blood.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>Time passed and I took over the household from my father. Now, I am able to freely come and go as I please. Yet somehow, I remain an assassin. A thought came to me just now: Do I blame the spikes for my murderous ways?</p><p>Am I a bloodthirsty ghoul who uses my job and those spikes as an excuse to kill?</p><p>Do I willingly return because it is the only place where I will ever find acceptance?</p><p>As I look up from outside the wall, the familiar sky stings my eyes. Did I… make a mistake somewhere? The same questions roll ever onward in my mind—yet all I can do is surrender myself to my own dark thoughts.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>A Song of Imprisonment Part 1<br>[<br>]</p><p>A pale and bloody arm flails in the air.</p><p>The hand can grab nothing. The hand will grab nothing.</p><p>Even if it could, it is too fearful a thought.</p><p>It longs for escape. Yearns for it.</p><p>But if it is only going to break in the end, what is the purpose of obtaining it?</p><p>—A Poem of Wayward Imprisonment</p><p>The woman’s bloody hand holds a knife. Her finger notes the light sensation of blade against bone. It is so very familiar. This feeling—one honed to a science while taking countless lives—is the sensation of death. Her life has been spent with a blade in her hands, and she does not intend to fail now. She puts pressure on her middle and ring fingers, while the rest curl tightly around the hilt. Almost as if they are drawing in the death she senses. The bones will separate. The head will fall. The—“Hang on.” Woman and blade alike pause at the voice. The voice, high in tone like a ringing bell, continued.</p><p>“Leave the head. With mackerel, you don’t take the head off until you’re ready to remove the rest of the guts.”</p><p>The woman with the knife replies with a question:</p><p>“And what of the bones?”</p><p>“It’s okay to cut those, but don’t separate it entirely.”</p><p>“Cooking is very different from killing,” muses the woman.</p><p>“Yeah, I suppose it would be,” replies the speaker.</p><p>They giggle slightly while imparting this bit of wisdom. The setting sun floods the room with persimmon light. It is a small interval between the sweltering summer and the coolness of autumn. The sun flees the world earlier each day. And as the day takes its leave, night stretches out greedy fingers to reclaim what was stolen in the dawn. The speaker continues.</p><p>“Once you’ve taken out the innards, you can move on to the bloodline.”</p><p>“Bloodline?”</p><p>The woman stands, knife in hand, and awaits an answer. She typically wielded her blade on a battlefield, not in a kitchen, and is unable to find a comfortable grip on the paring knife.</p><p>“Apparently it’s muscle. See the dark red parts there?”</p><p>“The bloodline… An apt name.”</p><p>A girl of about sixteen—the speaker—peers over the shoulder of the woman with the knife and smiles, her long hair fluttering.</p><p>“Does my cooking amuse you?” asks the woman.</p><p>She stares at the cooking board as she says it, but her annoyance is clear.</p><p>“Heh heh. It<br>is<br> cute to see someone who’s so cool in a fight have trouble with a mackerel.”</p><p>The girl grins as she says this, lighting up the room. Ashamed, the woman looks away. This only serves to delight the girl all the more.</p><p>“I’m obviously no expert,” says the woman.</p><p>“I did not grow up doing such things.”</p><p>“Yeah, well, I’d never done it either until that day.”</p><p>“……”</p><p>The woman knows this well. With nothing to say in return, she falls to silence.</p><p>That day.</p><p>The two of them know exactly what this means.</p><p>Five years ago. Early summer.</p><p>Heavy rain blanketed the sky. It was the day the assassin met the girl—her target. She was going to take her life as she had countless others. The girl was ready to die; perhaps she even sought it. But the woman did not kill her. Call it a whim. But that day—that whim—had brought them to where they are now. Theirs is a relationship forged in checkered fate. They had both cast aside their own lives to form this new one, where each day stretches out in quiet solitude. In the distance, a cricket begins to stir.</p><p>“Hey, I’m sorry,” says the girl.</p><p>“I shouldn’t have teased you.”</p><p>“You’re the only one who actually<br>works<br> around here anyway, so thank you. I really appreciate it.”</p><p>The woman turns to look over her shoulder at her young companion.</p><p>“Flattery will get you nowhere…”</p><p>Turning away once more, she utters a weak protest. But the girl knows this action is an admittance of defeat, and her radiant smile lights up anew.</p><p>“Enough foolishness. Tell me what to do with this creature.”</p><p>“Well, you took the bloodline out, so now you have to wash it.”</p><p>The woman nods, picks the fish up off the cutting board, and dips it into a pail of cool water.<br>Blood seeps out of the mackerel, staining the water a faint red.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>A Song of Imprisonment Part 2<br>[<br>]</p><p>The flower reaches to the heavens above,</p><p>gazing at the brilliant sun and indulging in fantasy.</p><p>It will do so until the time comes that it blackens and withers,</p><p>finally learning that it will never reach the sky.</p><p>Petals unfurl. Grasping. Delicate fingers.</p><p>People fear such honest desire.</p><p>We are scared to even desire at all.</p><p>—A Poem of Forgotten Imprisonment</p><p>The woman looks at the fillet in her hand.</p><p>“Making cuts and inserting salt seems like a method of torture.”</p><p>There are no deep feelings or regrets behind the words; she says them as simply as someone passing the time of day. The girl, however, is taken aback.</p><p>“Uh… Well, sure? But mackerel’s a bluefish, so you have to get the smell out…”</p><p>She is attempting to teach the woman a dish called mackerel miso. It is not a particularly difficult dish to make, and perfect for teaching someone how to handle fish. This is why the girl selected it.</p><p>“Now we let it rest, correct?”</p><p>She confirms each step of the process with the girl. They had divided responsibilities since they began living together. The woman has learned well her young charge’s skill in the kitchen.</p><p>“Yep! Once the salt gets in there, it’ll draw out the moisture.”</p><p>But the girl has not always been skilled at cooking. It was a task she threw herself into after meeting the woman, and her first few years were littered with failed attempts. But now, five years later, she has acquired much culinary skill; this is both a testament to her hard work and proof of the time the two of them have spent together.</p><p>“Then removing the moisture also takes away the smell?”</p><p>“You got it! Oh, and we’re also going to parboil it, so might as well get the water ready in the meantime.”</p><p>The girl pauses and knits her fingers together, looking at the woman shyly.</p><p>“So, um…have you ever actually<br>done<br> that?”</p><p>The woman’s earlier comment is clearly still weighing on her.</p><p>“Torture, you mean? Hmm, not really.”</p><p>“Oh! Oh. Well, um… That’s good?”</p><p>“Killing was my job.”</p><p>“Torture would be the domain of another.”</p><p>The conversation takes the girl back once more to that day. She remembers how the woman saved her life by taking out an entire battalion of samurai. Afterward, the young girl somehow managed to drag her unconscious savior out of the castle. She grabbed all the gold coin she could carry from her house, and hurried in search of a doctor. Soaked from heavy rain and the woman’s blood, her legs threatening to snap under her burden, she screamed for help until her throat was raw. As the woman lay bleeding on a tatami mat, she had said four words to the girl: “Live as you please.”</p><p>No one had ever said such a thing to her. She did not even know it was an option. That was why she sought so desperately to save the woman: because she<br>wanted<br> to. But what the girl knows of the woman is only what she saw on that day, and on the days since. How much pain and hardship had she truly experienced? The girl had felt a sudden awareness of the distance between them.</p><p>A flock of birds flies off into the late summer sunset. Dark shadows bleed across the kitchen like spilled ink.</p><p>“Sorry,” says the girl.</p><p>“That was a weird question.”</p><p>“I probably shouldn’t ask about… You know. That stuff.”</p><p>The woman does not think fondly of her past. The girl is very aware of this. But this night, it does not seem to bother her overmuch.</p><p>“It’s all right. I don’t mind the question.” The girl hesitates.</p><p>“Yeah, but…” She does not like being placated.</p><p>If someone wants to tell her no, it’s far better for them to simply do so instead of pretending. But the woman is smiling, and the girl slowly realizes she actually does mean it after all.</p><p>“I may hide my past, but that doesn’t make it go away.” The girl listens intently.</p><p>“Besides, the two of us have few secrets from each other at this point, wouldn’t you say?”</p><p>The woman’s eyes form a pair of crescent moons as she smiles. Her answer—and her smile—fill the hole in the girl’s heart.</p><p>“Thanks.”</p><p>“Of course.”</p><p>Satisfied, the woman turns away. The girl stares at her back and mutters: “…You’re too good at that.”</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>A Song of Imprisonment Part 3<br>[<br>]</p><p>Some say a flower is most beautiful when its petals begin to fall.</p><p>Yet death is inevitable, and holds no value in itself.</p><p>We reach out our hands, seeking beauty.</p><p>But obtaining it can be a difficult thing,</p><p>and the quest often shows us our limits.</p><p>It is naught but delusion to recall failures to reach beauty as having been beautiful themselves.</p><p>Thus does humanity continue to err in order to console itself.</p><p>—A Poem of Melded Imprisonment</p><p>As the sun sinks below the horizon, hints of night begin to draw over the land. More crickets strike up a chorus in anticipation of the moon. Soon, another sound joins them in harmony. The girl cocks her head as she stirs the pot.</p><p>“Those are giant katydids.”</p><p>“You certainly know this land,” replies the woman.</p><p>She is busy rubbing the sliced skin of the mackerel to remove the oil.</p><p>“Yeah, I just read about them in a book.”</p><p>“Ah, yes. You’ve acquired quite a collection of used books.”</p><p>The two of them live near a forest that is some distance from the closest town. Both due to lack of other diversions, and because of her own passion for reading, the girl was often seen passing the time with book in hand.</p><p>“Just doing some studying. I’ve been thinking it’s about time I looked for work.” The girl smiles brightly.</p><p>“Hmm. That’s how it usually goes, is it?”</p><p>There is a tinge of sadness to the woman’s response. The woman had been “working” from before the age the girl is now. She killed her first man when she was not even ten. But murder is the only work she knows—the mundane worries of a normal, day-to-day job are unknown to her.</p><p>“Okay, I think the mackerel should be ready now.”</p><p>The girl pulls her ladle from the pot, which is bubbling merrily away. The woman stands beside her, holding a towel.</p><p>“Go ahead and put it in there and let’s give it a boil.”</p><p>“Got it.”</p><p>The woman’s voice has a tinge of excitement, which causes the girl to smile. Wielding a large pair of cooking chopsticks even more uncomfortably than she did the knife, she manages to transfer the fillet to the pot.</p><p>“Make sure to put the skin face-up.”</p><p>“Like this?”</p><p>“Yep! Now throw some ginger in there and put the lid on.”</p><p>The woman follows the girl’s instructions with awkward movements. But the dexterity of her fingers is cause for wonder. Perhaps it comes from her horrifying past.</p><p>“So how is work, anyway?”</p><p>The girl watches the pot while she asks the question.</p><p>“Much easier than my old job. I may end up losing my edge.”</p><p>The woman flexes her hands as she speaks.</p><p>There was only one thing she could mean: the martial arts. She is a master of weapons large and small, and her technique and experience made her a formidable foe. And now, she uses those skills to make her living. She takes on occasional work as a bodyguard, or teaches young royals in the way of the sword. At times, she faces down death once again. It makes her feel that she is still the same killer she always was, but in these times in which they live, it is difficult to avoid. And compared to her past, at least, working as a mercenary is much less taxing. Theirs is an era of turbulence and upheaval where people rarely stay put for long, yet they had managed to build a home.</p><p>“I’m glad it’s going well,” says the girl. The girl smiles at the woman.</p><p>“So when you say you’re going to look for work,” begins the woman, “is it because…”</p><p>Something about the girl’s words and smiles doesn’t sit right with the woman. It’s almost as if her young companion feels indebted.</p><p>“Listen,” she says, “you don’t have to feel guilty. You’ve lived a hard life. You deserve to take it easy for a while.”</p><p>Before she can finish her thought—which was going to be “it’s not as if we’re struggling”—the girl cuts her off.</p><p>“I could say the same for you.”</p><p>“But you don’t need to worry about—“</p><p>“Stop. You don’t understand.”</p><p>The girl places her hand on the woman’s wrist. Their eyes meet. The girl holds her gaze, looking right into the woman’s eyes.</p><p>“I just want us to be a team.”<br>She was smiling as she said it. So the woman said no more.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>A Song of Imprisonment Part 4<br>[<br>]</p><p>One earns many scars over a long life.</p><p>There is much we learn and much we regret—</p><p>and none of us emerge unscathed.</p><p>So long as we live, our scars continue to grow.</p><p>Those who surrender to this truth eventually find themselves merely going through the motions of reaching out their arms.</p><p>For the hand of an empty husk has no will to grasp anything.</p><p>The reason flowers look so beautiful in our eyes—</p><p>“Sorry. Is this done?” The woman’s voice breaks the silence as the girl dishes up spoonfuls of rice into bowls. Black night mingles with shades of azure, light purple, and crimson. The clouds in the west are dark; those in the east, light. The sky is a complicated palette waiting for the upcoming darkness to sort itself. The setting sun turns mountains and trees into silhouettes.</p><p>“It sure is! Time to chow down.”</p><p>The girl answers the question in a firm voice, as if to emphasize they have finished.</p><p>“Nice. It looks delicious.”</p><p>Though she did have the girl’s help, this was her first time having cooked a meal herself. Her eyes sparkled just as much as the girl’s. The girl takes up some tableware and passes it to the woman.</p><p>“Well? You’re the chef here—time to serve up your creation!”</p><p>“Is there a particular way it should be served?”</p><p>“It’s just a single dish of one type of food, and we’re the only ones eating, so I guess it doesn’t really matter.”</p><p>Using the ladle, she gently scoops up a portion of the well-boiled mackerel and places it onto the plates. She pours more of the broth over them, and sprinkles chopped green onion on top. The dish is complete. The woman gazes at her plate as if truly moved. The scent of miso and ginger causes her stomach to rumble.</p><p>“It’s getting pretty dark, so let’s hurry up and eat. I’ve already set up the rest.”</p><p>As she talks, the girl carries the rice bowls and her plate to the living room. The woman follows, carrying her own plate. They arrange themselves on cushions and press their palms together in thanks.</p><p>“Time to eat!” cries the girl.</p><p>“Time to eat indeed,” replies the woman. Rice bowl in hand, the girl asks the woman a question.</p><p>“Hey, so what made you want to cook today?”</p><p>Though she had chosen the dish and provided instruction, it had been the woman’s idea for them to do so. While she had helped in the kitchen over the past five years, she had never once mentioned wanting to cook herself.</p><p>“Oh, I don’t know,” says the woman as she nibbles her rice.</p><p>“Work just finished up early today.”</p><p>“Well… That, and…”</p><p>The rice seems to stick in her throat, but she forces it down.</p><p>“This was something I used to see a lot.”</p><p>It was something she experienced back when she was an assassin.</p><p>“I would see families talking about what to have for dinner, or parents cooking with their children, or…”</p><p>She trails off, lost in thought. She had witnessed these scenes as she passed to missions or from them, peering at happy families behind lamp-lit windows. And for a child who had never seen her own parents smile, it seemed a world almost impossibly out of reach.</p><p>“I thought I would never have a life like that.”</p><p>The woman sighs softly. The girl sits quietly and listens.</p><p>“So I suppose I wanted to see what it was like.”</p><p>Once she says this, the woman cast her eyes down, seemingly at a loss for words. Silence spreads across the room. If not for the cries of insects, time would have no meaning. More silence. Finally, the woman breaks it.</p><p>“I just wanted to stand in a kitchen with someone like we did today.”</p><p>She smiles to hide her embarrassment—something the girl has never seen her do before.</p><p>“I see,” says the girl.</p><p>Her reaction is neutral, expressing neither sympathy nor empathy. She then asks a single question:</p><p>“So… How’s the food you made yourself?”</p><p>It is enough. They share a smile.</p><p>“Sweet, actually. More so than I thought it would be.”</p><p>The reason flowers look so beautiful in our eyes</p><p>is because they do not know of surrender.</p><p>Even with broken stems, they carry on.</p><p>The look fearlessly toward the heavens, full of childlike wonder,</p><p>until the moment their lives are snuffed out.</p><p>And we are so envious of this, we find we must look away.</p><p>—A Poem of Eternal Imprisonment</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Life<br>[<br>]</p><p>Fallen leaves swirl in the wind, kicking up dust devils in the courtyard. Though they steal my attention, the bright sunlight causes me to shut my eyes. When I open them again, I find the leaves have drifted to the children’s feet. They pay them no mind. Perhaps they do not even notice.</p><p>I watch them dance.</p><p>It is Hypnotic.</p><p>Beneath the open sky, behind a wall topped by ominous red spikes, children yell as they scamper to and fro. Their movements are clumsy due to their immature limbs and musculature, but their energetic voices still echo across the sky. Passers-by outside the wall hear them and smile, remembering the halcyon days of their own childhoods.</p><p>But the passers-by do not see what they are holding.</p><p>Each child carries a deadly steel blade in one hand. They stand in a triangular formation so they might better observe one another. It is the custom of this family for even the youngest child to wield true steel at all times, save when sparring one another. This is because we must think of out weapons as extension of our own bodies.</p><p>All for the sake of our lord.</p><p>I sigh and look away. A man who had been standing separate from the children meets my gaze and bows—their teacher, most likely. I respond with a brief wave of my hand.</p><p>The family I now lead is an organization of killers. We are killers who support our lord’s rule from the shadows, having polished our skills for decades so we might ensure that his rule is absolute. We are comprised of many generations of blood relatives, as well as supporting staff. Though I hear tell the family was not always so large, it has now grown in size for various reasons: the expansion of territory, securing power for wartime, family feuds, preserving secrets, and so on.</p><p>The head of the household receives direct orders from our lord, while day-to-day management of the organization falls upon the previous lord—my father. But his work is not unrelated to my own; indeed, I hold a position where I have great sway over the futures of our young charges.</p><p>The children are training in assassination. The daggers at their belts and in their hands are common things found throughout the world, and nowhere near as suited for our work as a concealed weapon. But there are times when an assassin cannot choose their weapon. Perhaps they are not yet skilled in stealth, or perhaps their preferred weapon breaks during a mission. This lesson teaches them how to act in such unfortunate situations.</p><p>We have no choice in this.</p><p>Children will give their all to the cruelest regiments precisely because they are young and innocent. Their eyes do not yet perceive the weight of life, and this leads them down a path most dark.</p><p>It reminds me of my own past. Of the day I first took the  life of another. And if I close my eyes, I can still see my blood-soaked hands.</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: Orders<br>[<br>]</p><p>The horizon blurred, almost as if I was viewing it after a long and restless night. I stood in place, staring down at a pair of hands slick with scarlet. I had just killed someone, and this act would be a part of me forever.</p><p>I remember the day I came of age. Even though I would one day inherit our house, I was given a wooden sword and told to drill with one of my father’s many subordinates, no different than any other child in a samurai family.</p><p>My training was merciless, and I endured it day and night without pause. All that time, I pretended not to notice the cheerful sounds of children playing beyond the walls. In hindsight, I realize my instructor’s irritable demeanor and harsh methods were not because he wished to see me succeed, but because he hated my being heir to our house.</p><p>In one particularly brutal session, I watched the man’s swordsmanship closely before slipping through a gap in his swing. But a child’s meager strength and short limbs are no match for an adult—only after we quash our fundamental disadvantages can we first stand on equal footing.</p><p>The nearness of my tutor invited a mistake in judgment. No one in our family flounders when another enters their circle, and my instructor quickly shifted his pivot foot and continued to swipe at my legs. Frantic, I struck his kneecap with the handle of my wooden sword in an attempt to halt his momentum. My plan was to slip past him to the left, then send the blade into his side. But as I readied my next move, I saw him adjust the grip on his sword out of the corner of my eye.</p><p>It was too early to step out of the way, but too late to dodge. Almost without realizing it, I grabbed the man’s clothing and attempted to body slam him. But a child’s grapple means nothing without momentum; all the move did was bring my physical disadvantage to the fore.</p><p>Instantly regretting my mistake, I prepared myself for pain. But rather than deliver a blow, my instructor froze. I followed his widened eyes and turned to see the former head of the family: my father. He greeted my instructor, who sheathed his wooden sword and kneeled, then turned his attention to me.</p><p>“We must speak. Come.”</p><p>My father brought me to the parlor and told me I was to be given a mission. While the news came as a shock, the cold weight in his tone said all I needed to know about the nature of the task.</p><p>“I wish to acknowledge my daughter’s maturity,” he said. “Before the week is out, you will choose a target and bring me their head. But know this: the value of the target determines your own worth.”</p><p>These words caused me to lift my head; while I had expected many possible missions, that had never been one of my considerations. Yet now I had five days to eliminate someone whose death might prove beneficial to my father and our house.</p><p>My mind reeled. Unable to reply, I bowed deeply and exited the room. The question of which life was the correct one to take held me tight, almost as if I had been seized and bound in a great and weighty chain.</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: Fate<br>[<br>]</p><p>If it was ever acceptable to measure the worth of another’s life, who would have the right to do so? Even if it is not acceptable, people still seek their own worth.</p><p>It is as though the value of one’s life is fixed.</p><p>I was given my first order to kill when I was yet young. The trial would serve as a display of our abilities, and involved us killing a target of our choosing.</p><p>I was allowed to venture into the city under supervision of people from the family in order to search for a target. While I sometimes left the house for espionage missions, such instances had been rare. This was the first time I was able to act and search of my own accord.</p><p>As I moved through the city, I recalled something my instructor said to me before I left on my mission:</p><p>Anyone can be killed if they are considered weak. Even you.</p><p>His meaning was clear: If I did not put my life on the line to satisfy my father, he would take it without any hesitation.</p><p>But I was so young, and the hesitation of taking a life combined with the pressure I felt in the face of my trial was enough to drive me into the proverbial corner.</p><p>And that fear bound my shadow to my house. How ironic.</p><p>As I searched for my target, I did my best to hide my trembling fingers in my fists. I wandered the boundary between light and dark, weaving the narrow alleyways between buildings as I tried to make my decision. It was as far from true freedom as one could be, yet I mistook it for such in those early days.</p><p>Removing this samurai will be more than enough to display my strength.</p><p>But I have never killed before. Can I do it?</p><p>That man drowns in unearned riches. His death will be easy and beneficial.</p><p>But is that enough to satisfy my father?</p><p>That merchant has earned great ire from the townsfolk. Many would want him dead.</p><p>Is it my place to make such a judgment?</p><p>My thoughts came to a dead end. I repeated the same actions over and over until the very last day, staring for hours at the boundary between light and dark.</p><p>When that last day came, I grew impatient. Where did I even go? I know I pursued my target with fevered desperation and a kind of awkwardness, and eventually my hesitation led me back home, where I stared at the weapons along the wall of my room and shivered.</p><p>Who can I kill?</p><p>Who is the right candidate?</p><p>Who is all right to kill?</p><p>How should I kill?</p><p>When should I kill?</p><p>Where should I kill?</p><p>In the end, perhaps the answer is for me to kill…<br>me<br>.</p><p>My family made children determine the value of a life, putting their very selves at risk in the process. Indeed, that was likely the purpose of the exercise. Will their sensibilities break under the weight? Will their spirits shatter under the pressure? Can they still bring profit to the family?</p><p>In the end, it taught me that hesitation in the face of a kill was unnecessary to those of my household. Perhaps it even served the purpose of destroying any worthless hopes and dreams.</p><p>I greeted the dawn of the final day with exhaustion and anguish. I had forgotten what it meant to be alive.</p><p>When I finally looked down, I realized my hands were soaked with blood. My eyes clouded, and I found myself unable to hide my irritation. As such, I did not notice my fingertips relax and begin to draw slow patterns in the soft earth below.</p><p>Almost as if this was the way things were meant to be.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: The End<br>[<br>]</p><p>The bodies lay at my feet.</p><p>Their eyes lifeless. Waxy.</p><p>A blossom of brilliant crimson bloomed. Its wretched vermillion petals scattered. As I looked down at my palm and saw a dim reflection of glimmering light, memory finally returned.</p><p>I’d always wondered what was so different between the life I led within the walls and the lives of the children who lived outside it. But when I finally asked the question, it was far too late.</p><p>That was the moment I killed a part of myself.</p><p>My father gave me the mission and allowed me to choose my companions, so I selected my instructor and his younger brother. They had long been dissatisfied with our family and current lord, and since I would one day assume that position, I saw the mission as a chance to solve that most tired of problems.</p><p>Perhaps I let my guard down in the process.</p><p>I knew they schemed to use me to depose the current lord, and when I snuck into their manor under the curtain and shadows of night, the were so engaged in their plans they did not notice me. But as they continued to converse, I felt time growing short.</p><p>Father will be pleased that I am ridding him of traitors.</p><p>Alas, I did not bother think of<br>how<br> I would kill them. Soon, thick sprays of blood flew through the moonlight.</p><p>My father praised me when I returned with their heads. Though I took their lives in a cowardly ambush, he was pleased I had the backbone to kill people I knew personally. Thinking back, I’m sure it was a test—my father knew full well who the traitors were. Though I was now free from the trial, my life as a killer had only just begun.</p><p>Afterward, I meticulously washed the blood from my cold hands and let them rest, folded as though in prayer, on my lap. But it was a fool’s errand; those hands would be soaked in blood countless times after that. No matter how I scrubbed and scrubbed and scrubbed and scrubbed and scrubbed, I could never cleanse the stains of murder.</p><p>I could never walk a different path.</p><p>And so, I began to plan.</p><p>I watch as the children devote themselves to their training. They have yet to learn of the outside world, and know nothing of the circumstances of their existence. I lead this family now, and much as my father before me, I will likely shake them free of their reverie with a trial of blood and death.</p><p>This is wrong. I know it to be so. But I have walked the path of a killer. Even if I were to cast it all aside and free them from this house, I know not if I could protect them from whatever the future holds. Perhaps they would only end up lifeless on the ground, just like those who plotted betrayal and met death by my own hands.</p><p>Birds freed from their cage. Dolls obtaining sentience. Where would they go? Would they travel? Do they even know such a thing is possible?</p><p>And what of me?</p><p>The past steals freedom. Responsibilities steal freedom. The future steals freedom. The fetters of unending reincarnation have returned to me once again, and though I now have the power to choose, I have no solution at the ready.</p><p>It is a riddle with no solution, and I hate it with all that I am.</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><p>File:AkehaHidden5.png                  </p><p>Regret<br>[<br>]</p><p>Home is a place for kin to gather.</p><p>Kin is a concept created by people for the sake of others. They do not have wills of their own. They are but words—or so they are meant to be. Yet it seems those who never intended to find a home now find themselves amongst kin.</p><p>Those who have abandoned a sense of individuality to come together under a singular belief and roof have formed a bond more powerful than anything—and are more feared than anything.</p><p>But she alone is different. She is the only one who stares off into the distance.</p><p>She gazes beyond the walls that encircle the manor. From within the prison that is her home, she looks to a world somewhere beyond.</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>The Regular<br>[<br>]</p><p>There’s one regular who often comes to my shop for a cup of tea and a plate of dango. She’s always alone, and always carries a katana, which tells me she must be of some significant standing. I’m not certain what she sees in my humble little establishment, but I appreciate the business.</p><p>At first, I was terrified of her, for the crest on her clothing belongs to the manor known as the Den of Demons. It’s an eerie place that normal citizens all steer clear of—but when I thought about it more, I realized the reputation came from nothing but hearsay. I felt shame at having judged someone based on rumors, and more ashamed still since she was a regular.</p><p>So today I made her more dangos than usual.</p><p>“This is my thanks for you being a frequent customer,” I say as I hand her two plates piled high with dangos.</p><p>She looks at me in shock and murmurs a brief thanks.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>Indigo<br>[<br>]</p><p>“I’m home!”</p><p>“Welcome back. …Hmm? What’s with the pot?”</p><p>“I got these flowers after helping at the temple today. I was admiring them, and they said they had way more than they needed, so they let me take some back.”</p><p>“Well, how nice of them. You’ll have to return and thank them later.”</p><p>“It<br>was<br> nice, right? Anyway, I figured since they’re letting me have some, I should get blossoms as close to red and blue as possible.”</p><p>“What? Why?”</p><p>“Because then they match our names, silly!”</p><p>“Not sure I’d call that color Scarlet, but I suppose the blue one could be Indigo if you squint real hard.”</p><p>“Oh, don’t be a downer! It’s the thought that counts!”</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><p>File:AkehaHidden8.png                  </p><p>The Poison from the Cure<br>[<br>]</p><p>A peculiar air settled over the house known as The Demon’s Den. Stalwart fighters who were the eyes and ears of the dreadful undefeated hound—and who at times acted as her fangs—gathered in the hall for a somber discussion.</p><p>Though they had successfully vanished the successor of the opposing lord, the body had yet to be found. But more importantly, the woman who served as head of their house had gotten into a skirmish and cut down countless enemy samurai. She then dragged her injured self away and vanished like smoke, leaving only a bloodstain behind.</p><p>If she were dead, well and good. But if she yet lived, it meant trouble. For she was their lord, the one who knew every secret of the house. She was a cure for all problems while within their walls, yet would be poison if ever she turned her back.</p><p>“We cannot permit her to live. Find her. End her.”</p><p>The metallic sound of blades loosening in scabbards echoed throughout the room in reply.</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Dimos</title>
    <link href="/2024/03/07/Dimos/"/>
    <url>/2024/03/07/Dimos/</url>
    
    <content type="html"><![CDATA[<h1 id="Dimos"><a href="#Dimos" class="headerlink" title="Dimos"></a>Dimos</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>Six Months After Fleeing the Kingdom…</p><p>Wind rustles in the trees. Crows caw softly in the gloaming. As I scan the quiet forest in search of any possible threat,<br> at my side murmurs, “It’s so peaceful here.”</p><p>He is here in search of a way to lead our country out of war. And as he travels from nation to nation preaching his message of peace, I walk at his side to protect him from those who refuse to listen. But I am a clockwork man created for war, and no matter how much time we spend together, the truth of his message continues to elude me. I draw close to the prince as he contemplates the setting sun. I wonder why he would think this place to be “peaceful.” Perhaps it has something to do with the red hues of dusk?</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>As the prince’s disease worsened, so did grow his impatience. It would seem he desires to achieve peace as quickly as possible. So when I suggest we rest in a church until he feels better, it takes a good deal of effort to get him to agree.</p><p>Today again, the prince’s condition is poor, so we wait for nightfall in the church. I take this opportunity to ask him: “What is a peaceful world?” He looks at me with surprise, but a willful flame burns in his eyes. After a moment, a thin smile crosses his lips. He reaches out, puts a hand on my chest, and says,</p><p>“It means you never have to hurt<br>.”</p><p>It must be a different sort of pain from wounds as I know them. He does not notice my lack of understanding and continues to talk. I simply nod my head, hoping it will bring him energy.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>The disease spreads. The prince’s body withers and fades. When he can no longer stand, I travel alone to nearby villages in search of any food or medicine they can spare. In the villages, I see people driven mad by the horrors of war. The grieve for lost family. They curse their empty bellies. And they all turn their weapons on me—the clockwork man.</p><p>One day, I find a single apple in the woods. My prince lacks the strength to eat it on his own, so I chew small bites and feed it to him as a mother bird would its own young. As I see his haggard cheeks and hear his final, gasping breath… I feel a pain deep within my chest and finally realize the truth of everything that my prince has been fighting for.</p><p> he had said.</p><p>Oh, but why did it take such loss for me to finally understand?</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>One Hundred Years After Fleeing the Kingdom…</p><p>My bODy is RAvaGeD bY RuSt. mY meMOrIes GrOw DeFEcTIve. YEt I stAy by hIS SIdE: MY PriNCe, wHo TImE eROdED. THerE is A gAPinG, EmpTY hOLE iN mY cHEst. ThE pAiN I feLT jUSt BeFOrE hE DieD… iS GOnE. I wILL PAinT tHIS ChurCH ReD. I wILL uSE THe BloOd OF HUmANs WHo DEniED HiS SalVATioN ANd nOW InTRuDE oN hIS SLuMBeR. IN ACcORDaNCE WiTH thE PROMiSE We MAdE ThAT Day, I WiLL CONTInuE to ProTECt HIm… aNd ThE PEaCE he dESiRed FOReVER…</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Transient Light Part 1<br>[<br>]</p><p>Before he met the boy</p><p>A sudden flash of light streaks out toward the city clock tower. A moment later, a cannon ball makes contact with a thundering crash and a portion of the tower collapses, raining debris everywhere.</p><p>“Estimating landing points and dispersion range. 5.34 seconds until falling debris impacts ground.”</p><p>At the base of the tower, a man performs rapid calculations, then takes ten quick paces back. When he stops, the debris strikes the very spot where he had stood just moments before, creating a billowing bloom of dust. But the man pays it no mind. Instead, he focuses on the enemy base that fired the cannon.</p><p>This battle unfolds in a technologically-advanced city of an enemy country. A city where smoke now rises from every corner. The king the man serves has a reputation as a tyrant, and has conquered many other nations through force of arms. This war was sparked when he severed diplomatic ties. And like many sparks, it has turned into a raging inferno. Whenever the man spies an enemy unit, he silently pulls his gun from the holster. One bullet. One kill. The enemy never knows what hits them. His is a supernatural, inhuman precision.</p><p>He is a mechanical soldier—a clockwork man without life—developed expressly for the purpose of fighting in war. The man dashes out across the battlefield, staying low. He has orders to scout out the enemy forces. It has long been assumed that both armies are of equal strength. But the enemy has developed a new weapon, one that can launch massive artillery shells over great distances. Their front line has been losing ground, and it is now only a matter of hours before the main base comes into range of the enemy’s guns. Having finished his scouting mission and dispatched what enemy soldiers he can find, the man returns to the base.</p><p>“Base” is a generous term—in truth it is little more than a large tent set up to temporarily house their commanders. Inside the tent, a map of the city is spread across a large table. Pawns have been placed on it to show the state of various units. The lead commander is a boy—one too young to even serve in battle.</p><p>“Your decision, Highness?”</p><p>The “Highness” spoken of is the boy: the kingdom’s eldest<br>prince<br>. It is he who sent the clockwork man on his scouting mission. And though the prince volunteered for this command, he now finds himself with the unenviable task of making decisions that hold sway over the fate of the entire war. Eventually, one of his generals suggests using some of their own men as a distraction in order to get the drop on the enemy. The prince frowns at this proposal before rejecting it. He is still clearly a boy in thought as well as appearance. He is unable to sacrifice any of his own men, even when it might lead to the survival of many times that number. It is naivety—and it is on clear display for all to see. The general who made the suggestion scoffs at this decision.</p><p>“Your hesitation will kill us all!” he cries.</p><p>He slams both hands on the table to better illustrate his point. Then he announces his intention to take his men and fight as he sees fit before storming out of the tent in disgust. Such division amongst the ranks only worsens the situation. Yet the prince continues to issue commands. It is unclear what so spurs him to action.</p><p>The clockwork man stands to one side of the tent and watches the prince from the corner of his eye. Though he says nothing, he knows the lack of leadership will eventually lead the enemy right to their door. And all too soon, this comes to pass.</p><p>“The base is lost, My Prince,” says the clockwork man.</p><p>“You must flee and save your own life.”</p><p>“No,” replies the prince.</p><p>“I’ll not leave while my men are still out there fighting and dying.”</p><p>Though the man calmly explains that the prince has no choice but retreat, his young charge does not seem to understand. There is a flash. A cannonball explodes into the tent, blowing it apart. All that remains is a massive crater and a few scraps of fabric. The man hears harsh breathing and turns his head. The young prince is running behind him. Just before the cannonball struck, he grabbed the prince and forcibly removed him from the tent. Now, the two of them run through an underground tunnel that leads outside the main part of the city. Behind them, the sounds of war gradually diminish.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Transient Light Part 2<br>[<br>]</p><p>War still raged in every corner of the city. This is why the clockwork man is leading the prince away. As he runs, he examines every corner for danger; looks in every shadow for possible ambush. The prince follows, gasping for breath. Eventually, the prince loses his footing and falls to the ground with a cry. The man stops. Part of his orders are to protect the prince. Though they gave him information on a need-to-know basis, he was told the prince suffers from a congenital disease. If he forced him to run further, it might cause serious harm.</p><p>The man quickly scans the area. The tunnel is massive, stretching on without end in both directions. The tracks that run under his feet speak to its use as a train tunnel during better times. After a brief search, he locates a door in the wall. It is half-buried in debris, but when the man peers inside, he finds a small storage room behind it. Slumbering within are battered lanterns, picks, and shovels. It is a storage place for tools used to maintain the tunnel. Thinking it the perfect spot to lie low, the man brings his young charge inside.</p><p>“This is all because I took command,” says the prince sadly.</p><p>With his ragged breaths now steadied, he is able to turn a critical eye upon his earlier actions.</p><p>As his kingdom commits to a cycle of endless war, soldiers and citizens alike are growing increasingly weary. The prince chose to take on the burden of command so he might be able to save them all. But in the end, things did not transpire as he wanted. He never considered having to place the lives of his own soldiers on the scales. But he now sees that what he thought of as kindness had instead brought death and pain to multitudes. The man stares at the boy and considers his words.</p><p>“You did well,” he says finally.</p><p>As the words leave his mouth, they feel strange. Off. He cannot grasp the intention behind what he said. It is simply the natural phrase he arrived at when he saw the prince’s grieved expression. The boy stares at the man blankly. They wait that way for a bit, alone in the darkness. But then, a small glimmer of brightness returns to his face. With an awkward, unpracticed smile, the boy thanks the man for saving his life during the recent battle.</p><p>“If I am ever in danger again,” he says, “maybe you can help me out.”</p><p>His words come with a hint of jest, but also a touch of joy.</p><p>The clockwork man continues his conversation with the prince, but as they do so, the boy’s coughs come more frequently. He eventually produces a medicine bottle from his pocket. The man surmises it is used to suppress the cough. But the bottle is empty. A pained look moves across the prince’s face, one that he tries and fails to hide.</p><p>“The royal family cannot show weakness around others,” he says.</p><p>“This is a lesson my father taught me again and again.”</p><p>He had not coughed once at the base because the medicine was able to disguise his symptoms.</p><p>But now…</p><p>“That is why what you see here must remain a secret.”</p><p>His speech complete, the boy raises a pinky finger and extends it to the clockwork man. The man’s database tells him this is a human ritual of promise. Though he intertwines his finger with the prince’s, the action makes him somehow uneasy.</p><p>The man suddenly hears the distant sound of footsteps. He concentrates his aural apparatus on the noise. Enemy soldiers, most likely. He estimates a dozen or so. He fixes his eyes on the gap in the door, half-buried in rubble. A thin, wavering line of light passes through it. He will never outrun the men with the sickly prince in tow. So both man and prince still their breaths, stay put, and wait. The man places his hand over the boy’s mouth so he will not give them away. The light through the door grows brighter, then brighter still.</p><p><em>cough</em></p><p>The prince’s body betrays them both.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Transient Light Part 3<br>[<br>]</p><p>They sit in the darkened room. The man presses a hand against the prince’s mouth, to still his breathing. Men—most likely enemy soldiers—are approaching their position. But as they wait for them to pass, the prince’s cough rips through the silence.</p><p>“Here!” yells a soldier.</p><p>“They’re here!”</p><p>The room surrounded, the man knows he has no choice but to destroy every last soldier in order to keep the prince safe. He kicks open the door and pulls his weapon from his holster. But he does not fire.</p><p>“Highness, you live!” says the general from before.</p><p>Sensing the turning tide of battle, he had taken his men and abandoned the base before seeking shelter in the tunnel. The prince is clearly relieved to see his rescuers arrive.</p><p>But as he approaches the soldiers, the general raises a hand and his men point their swords at him. The prince stops moving and confusion spreads across his face. This sight causes the general to snicker. He then explains a shocking truth: A plot has been unfolding behind the scenes. The prince is to be murdered, and his death blamed on the war. The plan was set in motion by his younger brother, who sought to eliminate his competition for the throne. During the previous battle, they had set their units in inferior positions in order to tilt the battle in favor of the enemy. After their position was overrun, they would use the ensuing chaos as cover to eliminate the prince. Once this was accomplished, the kingdom would send reinforcements to win back all the ground they had lost.</p><p>“This can’t be happening…” murmurs the prince.</p><p>The general grins wide.</p><p>Suddenly, the clockwork man turns to the general, who immediately barks an order:</p><p>“You there! Machine! Stand down at once!” The man is a mechanical soldier manufactured by the kingdom. He is programmed to follow any order from a superior officer. So at the general’s command, he freezes. He watches dispassionately as the general approaches the boy with his sword unsheathed. The prince does not yield ground, but instead stares blankly in the shock of his own country betraying him. But rather than strike the killing blow, the general takes the chance to berate his prey.</p><p>“You’re a useless worm—an unthinking coward who put all of us in danger in a sad attempt to earn your daddy’s approval.”</p><p>“I’ve lost men because of you. Good men. Friends.”</p><p>Tears begin to spill down the prince’s cheeks, but he does not deny the truth of these words.</p><p>His piece said, the general raises his sword above his head and prepares to strike.</p><p>The clockwork man cannot accept what he is seeing.</p><p>I must protect the prince.</p><p>I must stop the general.</p><p>I must reach for my gun.</p><p>But because of the general’s orders, he can do nothing. Instead, in the face of the prince’s last moments, he accesses records of the boy in his memory banks. He sees how the prince desperately issued commands in an attempt to keep his soldiers safe. He sees how the prince showed weakness—and trusted him. Suddenly, his records find a phrase the prince said moments before:</p><p>If I am ever in danger again…</p><p>The man draws iron, his hand fast as blue blazes, and blows the general’s sword arm from his body.</p><p>He fires again. And again. And again. The general’s men, caught off-guard, fall one after the other.</p><p>The prince had said the line in passing jest:<br>If I am ever in danger again, maybe you can help me out.</p><p>But the clockwork man chooses to take these words as royal orders that demanded absolute obedience—orders that override even those of a senior military officer. The wounded general snarls and draws his own weapon. The clockwork man shoots it out of his hand.</p><p>In the blink of an eye, the tables have turned. The ground is painted red. The general begins to plead for his life, but it means nothing to the man, who presses his barrel against the general’s temple.</p><p>“Stop!” cries the prince.</p><p>Despite the general’s actions, the prince still seeks to save his life. Though he did not speak his feelings aloud, the man understands the reason behind the request, and so lowers his weapon. A moment later, more footsteps ring out. This time, it is not traitors, but the enemy army. The man has a choice: Save the general…or save the boy. He lifts the prince up and begins to run.</p><p>“I couldn’t save him,” says the prince as the general’s cries grow weaker.<br>“I tried, but I…I couldn’t…”</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Transient Light Part 4<br>[<br>]</p><p>In the middle of a wasteland where the wind blows dry stands a kingdom surrounded by walls.</p><p>The contours of an enormous castle waver as the sun sets behind it. The clockwork man and the prince approach the kingdom with a sigh. They are home. They stand before a thick metal door at the castle gate that leads to the town beyond. A guard sees the two and approaches.</p><p>“Y-Your Highness? Uh, I see you are safe…”</p><p>Everyone assumed the prince had met his end in battle, and the guards are unable to hide their shock.</p><p>The guards respectfully place the prince on a carriage headed for the castle. But as he watches the prince go, the clockwork man is presented with a false warrant for his alleged crimes.</p><p>The first charge: Abandoning his post.</p><p>The second charge: Betraying his unit.</p><p>The third charge: Murder of a superior officer.</p><p>The man did what he did to save the life of the prince. Though the accusations are willful mistruths at best, he has no way to combat them. And even if they were completely true, he still believes what he did was right.</p><p>The clockwork man is taken to a laboratory. A researcher orders him into a mechanical chair and places alloy fixtures on his limbs and torso. His “treatment” will be a complete memory wipe.</p><p>The man’s consciousness drifts in darkness. It is a strange sensation, almost like floating. This is his memory space. In the darkness, images begin to form. He sees men blasted to bits by his own steel. Memories of war. The face of every man he’s ever killed is recorded here. Next, he sees a conversation he had with the general. He is being ordered to protect the prince at all cost.</p><p>Images appear.</p><p>Images flicker.</p><p>Images disappear.</p><p>But finally, he comes to memories of the prince himself. He sees him desperately issuing orders at the base. He sees his pained expression as he spoke of his weakness. He sees him shed tears at hearing the truth behind the war.</p><p>“That is why what you see here must remain a secret.”</p><p>He sees the secret promise and ritual they shared. Compared to his other memories, these almost seem to…glow.</p><p>Suddenly, a sound—a single, insistent buzz. His memories of the prince begin to fade. He cannot stop it; they vanish one after the other. He should not be bothered by this. After all, he is a mechanical soldier designed for war. The memory-reset program whirs inside him. Though he should be accepting the procedure without pause, the man resists the deletion of any memories of the prince. He reaches out to them with his mind. But he will never find them. The deletion accelerates. The buzzing grows louder. A pained groan slips from his lips. What was the meaning behind his own feelings? Why did he resist the procedure?</p><p>The man’s eyes spring open. He does not know why he is in the laboratory. He knows only that he is a mechanical soldier created for war. One researcher looks at the results and shakes his head.</p><p>“Looks like there was an error in the reset process. You’re going to be discarded.”</p><p>After being informed of his fate, the man is taken away and placed in an underground storehouse. His only companion is the hiss of steam escaping from pipes. Mixed in among similarly discarded scraps of junk, the man attempts to sleep. But an alien sensation in his chest prevents it. Even after he searches all parts of his memory, he cannot locate the cause. He realizes that thinking about it will accomplish nothing. All he can do is wait as he slowly rots away.</p><p>There is someone I must see.</p><p>What comes to mind at the very end is nonsense.<br>But the man ignores it, and instead slowly closes his eyes.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: The First Trials<br>[<br>]</p><p>My wife is the queen of this land. She has long been a strong, kind woman, and the words she uses to describe our country’s future always shine brighter than the stars.</p><p>And yes, it is perhaps idealistic and naive for a ruler to speak of such things, but the more you listen to her, the more it sounds like an achievable reality. The beautiful country in her mind is precious to me, and I want to see the notion become real. But more than that, I want to be at her side on the day she achieves it, because the hours she spent telling me of her ideal future have been some of the finest of my life.</p><p>But I know. I know that in order to achieve her dream, we will  have to, at times, resort to methods she hates. Physical force. Violence. …Or worse.</p><p>A King’s Memoir, Part 1</p><p>Our kingdom had always been adept at creating intricate clockwork mechanisms, with a skill in the art far surpassing that of any neighboring lands. As such, the other countries on the continent considered us to be a great menace.</p><p>And perhaps they were correct to do so, for a new type of research was taking place within our kingdom—one that would secure us an endless supply of soldiers. Throwing all of our money, power, and effort into the task, our country soon found favorable results, and the soldiers were brought to life more quickly than even the most optimistic projections.</p><p>Our new creation was the ultimate soldier: a creature made of steel and wire that would never tire, and with a mind capable of calculating at impossibly fast speeds. The lead researcher, who called his creation “clockwork people,” explained that having passed basic performance tests, they would now enter the final stage of testing before sending them into the field.</p><p>“I appreciate you taking the time to come out all this way, Your Majesty,” said the lead researcher as he gestured to a line of clockwork people on the other side of the window.</p><p>They looked more human than the last time I came to observe the work. And yet, despite their familiar bodies, their eyes were empty⁠; they seemed less like they were standing of their own free will and more that they could do nothing else.</p><p>“We have come to the conclusion,” continued the researcher, “that in order for clockwork people to operate in an optimal manner, we must integrate into their thought processes four laws. And today, I would like to demonstrate for you a test of these laws.”</p><p>The researcher’s fingers flew over the device in his hand. A moment later, the room went dark, and an image was projected onto the wall. It was a bit difficult to make out, but through the shadows and gloom I could see a mass of people heading into a village. Some were the clockwork people, but a number were our own human soldiers—I even recognized a few of their number.</p><p>“This is a live feed of a unit presently en route to the stronghold of some bandits,” said the researcher. He went on to explain that the test was for the clockwork people to protect the senior officer leading the arrest operation.</p><p>The bandit stronghold looked like any other house in the city. But when the unit marched in—their footsteps rough and heavy in the moonless dark—they caught the bandits off-guard and captured them without incident. It was an impressive display, one so good I failed to hide my glee.</p><p>“I see Your Majesty is pleased,” said the researcher. “And yet, we’ve something far more impressive in store.”</p><p>As the squad led the captive bandits out of the building, a few more of the ruffians launched a surprise attack. Chaos engulfed the scene⁠, and I saw the superior officer at the front of the fray take a stray bullet and fall. The clockwork people immediately surrounded him, prioritizing his safety above all else.</p><p>But then I noticed someone strange: one of the clockwork people did not leapt to the officer’s defense. Instead, it hurried to the side of a random human soldier and assumed a protective stance.</p><p>After a bit of a struggle, our unit managed to subdue the bandits, and the video cut out. But all I could think about was the clockwork soldier who had protected the random man—and when I mentioned this to the researcher, I saw a smile appear on his face.</p><p>“You’ve a keen eye, Your Majesty. In truth, we had the commanding officer switch uniforms with that man.”</p><p>“Interesting,” I replied. “I’d heard the clockwork people automatically confirmed rank by the insignia on a uniform. That alone would be impressive, but this one somehow saw past the insignia and recognized the superior officer.”</p><p>“Your Majesty is indeed correct.”</p><p>“But how?”</p><p>The researcher explained that the clockwork person in question had been collecting information of its own accord during the mission. It did not rely solely on the intelligence provided before the mission; instead, it continued to observe and arrived at the correct conclusion through a constant updating and verification of information.</p><p>“To sum up,” said the researcher, “we have given the clockwork people small variations to their cogitation. In essence, each one has something of a personality.”</p><p>“And it appears this ‘personality’ worked in our favor this time,” I added.</p><p>“Indeed, sire. Yet while we have achieved fruitful results, we will make certain not to incorporate any dangerous behaviors to said personalities.”</p><p>As I nodded, another thought occurred to me. “What were you testing in this particular instance, by the way?”</p><p>“The First Law: A clockwork being must always protect the lives of the royal family or its own commanding officer.”</p><p>He turned to me then and bowed his head slightly, “Now then, Your Majesty, do you have any opinions as to what should be done with this particular unit?”</p><p>“Keep testing it,” I said as I turned to leave. “We can always dispose of the thing later if we need to.”</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: The Second Trials<br>[<br>]</p><p>My wife is pregnant. It will be our first child, and the future ruler of this country.</p><p>Her breathing is pained. Her skin, which once shone like a newly-polished pearl, it is now pale and lifeless. As I stand before her and gaze upon her distended stomach, I cannot contain my anxiety.</p><p>She has always been sickly, and I worry she may not survive the birth. It is the first time I realize I have such a weakness, yet somehow I manage to swallow my fear and smile at her.</p><p>“Let’s think of a name for our child,” she says to me in a faint whisper. “We will entrust our baby with the future of this country, so I want to name it together.”</p><p>I grasp her delicate, fragile hand, and nod.</p><p>A King’s Memoir: Part 2</p><p>There came the deafening sound of something large splitting open, followed by a wave of high-pitched, delicate noises. Several clockwork soldiers had obeyed orders and opened fire on a vase of flowers.</p><p>The kingdom was currently pushing the development of automatons of war. Yet if they were to be the ideal soldiers, we would need to implement in them four distinct laws. The destruction of the flower vase was a test of the second law, one many members of the royal court had watched with great interest.</p><p>The Second Law: A clockwork being must follow the orders of the royal family or its highest ranking officer.</p><p>Several soldiers—as well as a common beggar plucked off the street—were shouting commands at the clockwork people. The test was to see if they could pick out the voice of the highest-ranking person and execute that command.</p><p>The clockwork people stood in a line on the other side of thick, reinforced glass. All wore special earpieces; we were told that was how they heard the cacophony of orders. And when they determined the highest-ranking one—to fire on the flower vase—they did so without hesitation.</p><p>As the test continued, they fired on a number of different items from among a jumbled mass on a desk.</p><p>“Let’s have them shoot the clock next,” said the lead researcher. A moment later, the orders came through both the headsets of the clockwork people and speakers in the room where the royal court was stationed.</p><p>“The pot!” cried the beggar.</p><p>“The vase,” murmured the soldiers.</p><p>“The clock,” whispered the commanding officer.</p><p>The clock exploded in a hail of bullets, causing the audience to cheer with delight. After clearing up the mess, the researchers came out of a back room with a number of live rabbits and proceeded to dump them on the ground, where they began hopping about.</p><p>“Might you order them to kill the rabbits, sire?” said the lead researcher.</p><p>The voices began anew, order spilling upon order. But when my voice rang out, it was followed by the predictable thunder of gunshots. But something was strange this time: unlike the previous demonstrations, the gunshots were not in unison. Indeed, while all the rabbits now laid dead on the floor, some had been shot multiple times.</p><p>What could explain this discrepancy? Yes, the rabbits were moving about, but I had been assured the clockwork people had near-perfect accuracy.</p><p>The head researcher clearly sensed my question, “One of the units feels joy when it kills a living being, sire,” he said. “Another is hesitant, while a third makes no distinction between animate and inanimate objects. Basically, the results change depending on their personalities.”</p><p>Ah, yes. The personalities. When I last visited the lab, the researcher informed me that each unit had been given small changes to their cogitation, resulting in what they were terming “personalities.”</p><p>After cleaning away the gore, the scientists brought out a group of monkeys. The head researcher then proceeded to dole out various conflicting orders.</p><p>Bite their ears.</p><p>Soothe them.</p><p>Grab their legs.</p><p>While the clockwork people obeyed, their actions were not anywhere near in unison. And when they were given the final order to kill the monkeys, things diverged even more. Some took their time, enjoying the act of slowly taking a life. Others, however, seemed wracked with guilt, and their hesitation to end a life ended up causing the poor creatures far more suffering than if they had simply been swift and sure with the killing blow. So though the means had been different, the pain experienced by each monkey was ultimately the same.</p><p>I personally found it fascinating. But the expressions of my fellow royals soon clouded over; they clearly had not expected to see such a gruesome sight. The lead researcher, however, paid no attention to their discomfort, and ordered his subordinates to proceed to the final test.</p><p>One held with humans.</p><p>Just as with the monkeys, the lead researcher gave the clockwork people various orders. But this time, their personalities shone through brighter than ever. When they acted against their targets—with their unique hairstyles, face shapes, and clothes—they moved with a grace and skill that belied their mechanical nature. But in the moments where they were<br>not<br> exerting power, their movements were awkward and comical.</p><p>I suddenly understood that was how deadly weapons were meant to be. But I also realized that nothing more could be gained by dragging such a thing out further.</p><p>“Enough,” I said. “End this test.”</p><p>The lead researcher turned to the clockwork people.</p><p>“Kill them,” he said.</p><p>Hearing the order, the crackle of gunfire rang out through the room. One unit, however, did not act. Instead, it simply stood in place, almost as it had been powered off. This was a unit which had obeyed every previous order with a kind of dull, plodding precision—one which I thought might lack a personality altogether.</p><p>As I shook my head in disappointment at having witnessed our first failure, I heard the sound of a sob and looked over to see a small boy crying.</p><p>“Ah, most excellent,” said the lead researcher.</p><p>I turned to him, confused, and he continued.</p><p>“I believe the unit was following a voice not from its earpiece, but from this very room.”</p><p>The crying boy was the heir to one of the country’s most prestigious noble families—and upon hearing his distress, the clockwork soldier had stayed his hand.</p><p>Now that was<br>most<br> impressive.</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: The Third Trials<br>[<br>]</p><p>At the end of a difficult birth, we finally have a healthy baby boy. And yet, my wife’s condition continues to worsen, almost as if the child is stealing her life away.</p><p>But she is too clever to leave things in flux, so before becoming bedridden, she bequeathed the throne to me—leaving the future of our country in my hands.</p><p>Now that I hold the power of a king, I see everything differently, and I realize doing things my wife’s way will make it difficult to bring wealth to our land. This thought—and others like it—plague me more and more with each passing day.</p><p>In our happiest moments, my wife spoke of a bright and shining future. But can I really achieve such ideals alone? Doing things my way? Down one path, we link arms and work in harmony with other countries. Down another, we expand out borders with force. So though we wish for what appears to be the same future, why must the journey be so different?</p><p>A King’s Memoir, Part 3</p><p>The kingdom’s best scientists and most advanced technologies came together during the development of the clockwork people. And as the tests continued—tests to see if they could endure real-world usage—things reached a new and exciting phase.</p><p>The lead researcher had concluded that four laws needed to be incorporated into the clockwork people’s thought processes if they were to operate optimally.</p><p>The First Law: A clockwork being must always protect the lives of the royal family or of its own commanding officer.</p><p>The Second Law: A clockwork being must follow the orders of the royal family or of its highest ranking officer.</p><p>The Third Law: A clockwork being must protect itself, as long as doing so does not contradict the first two laws.</p><p>Now, the team was finally ready to test both the durability of the clockwork bodies, as well as the Third Law.</p><p>Thirty clockwork people stood in neat rows in the testing area. Each one had a slight variances in their thought process, a trait that would manifest as a kind of “personality.” While this was done in order to produce more accurate reports, it meant each clockwork person would act differently in response to the same order.</p><p>“Let us begin,” said the lead researcher.</p><p>A large door at the far end of the room rolled back to reveal one of our largest weapons—a thing the size of an elephant that stomped into the room on multiple legs.</p><p>“This unit has proven to be one of our greatest battlefield successes,” said the lead researcher proudly. I knew all about it, of course: it was a crude device that couldn’t execute fine maneuvers, but was perfect for situations requiring overwhelming destructive power. It was also the first weapon I’d ordered to be built after ascending the throne.</p><p>“In this test, we hope to see the clockwork people defeat their foe while protecting themselves in the process. Any units that accomplish this task will be considered our first field-ready clockwork people.”</p><p>As a buzzer sounded, signaling the beginning of the test, the clockwork people sprang to life before the massive weapon could even respond. They pelted it with gunfire from every direction, but that did little more than scratch its heavy armor plating. After a few seconds of this, they changed course and began focusing their attacks on its joints in an effort to bring it down. But then the weapon unleashed a brilliant beam of white-hot light from its cannons, and attack that sent the clockwork people flying.</p><p>“It’s like watching ants fight a scorpion,” I mused.</p><p>“Precisely,” he lead researcher enthused. “But wait.”</p><p>The different personalities of the clockwork people quickly began to emerge. A handful attempted to escape, but were gunned down before they could reach the doors. Some clung desperately to the massive weapon, while others ran in chaotic circles and fired their guns wildly. The weapon kicked and smashed and stamped them in a frenzy, and it seemed only a matter of time before all the clockwork people would be destroyed.</p><p>There was a clear imbalance of power, and I felt certain the test had entered its final, messiest stage. Irritated, I turned to look at the leader researcher, and was shocked to see him smiling.</p><p>“Please watch, Your Majesty!”</p><p>At his prompting, I saw one clockwork person firing at the weapon from behind cover. As I watched, I realized it was not firing indiscriminately, but instead targeting one specific part of its armor.</p><p>After creating a rather sizeable dent, the unit leapt out from its hiding spot, ducking and weaving through cannon attacks as it approached the weapon. Once there, it reached into the dent and ripped the plating free. Clinging to the weapon itself means there’s no possibility of being struck by any of its attacks. The weapon’s pilot, realizing their predicament, causes the weapon to move in such a way that the clockwork person would be shaken free, but it quickly leapt back on and peeled away more of the plating.</p><p>“There is potential here,” murmured the researcher.</p><p>The newly armored clockwork person—the last one standing—ripped off another chunk to reveal the weapon’s internal circuitry. If it could break through in that precise spot and tear apart the wiring, there was a chance of victory.</p><p>But the unit was in a sad state. Despite the armor, it had been thrown to the ground countless times, losing an arm and suffering various other injuries. Before it could reach into the wires, it was thrown free into a pile of its disabled fellows. And as it struggled to pull itself to its feet, the massive weapon stomped over, raised a single leg, and ended the test for good.</p><p>“A disappointing ending,” I said, shaking my head.</p><p>Having completed its mission, the weapon sat quietly in place, as though awaiting its next orders. The valiant unit that had fought to the end was now buried amidst the husks of its fellow clockwork people, and I could no longer pick it out from among the rest.</p><p>“However,” I added, “that one unit showed promise.”</p><p>The lead researcher nodded in excited agreement.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: A Weapon’s Completion<br>[<br>]</p><p>My wife—our queen—has died.</p><p>Her past, including everything she said and did, now feels as fiction. My light is gone. My world is empty. Hollow.</p><p>I was right: love and kindness are not enough to save us. Only by military force can this country and its people hope to be governed.</p><p>Though I was the one who ordered the development of the clockwork people to begin in earnest, the first prince still looks upon our new soldiers with fear. Though he’s grown into a kind young man—one fitting of the name his mother gave him—I feel he may be too weak to take up a position of power.</p><p>If only the prince had been named not by my late wife, but by me. If we had only named him after our god of war as I desired…then perhaps things would have been different.</p><p>A King’s Memoir, Part 4</p><p>Metal bodies that do not know exhaustion.</p><p>Mechanical brains which calculate at impossible speeds.</p><p>This<br> is the new face of the soldier.</p><p>As our research progressed, tests were carried out in the name of the kingdom’s prosperity. We had been calling our new creations “clockwork people” under the assumption they would take on tasks in place of humans. But one day, the lead researcher said something that changed everything:</p><p>“Your Majesty, I would like you to meet our very first clockwork soldier—the first one to successfully pass all of the tests.”</p><p>Before me knelt a clockwork person—no, a clockwork<br>soldier.<br> Its head was bowed in the manner of a loyal retainer, and I was immediately intrigued; while I had seen many such machines at work in the tests, only a select few had managed to catch my eye.</p><p>“This unit does not seem familiar to me,” I mused. “Which tests did it pass?”</p><p>“Indeed, Your Majesty,” replied the lead researcher eagerly. “This is not a unit you have seen in action. Yet at the same time, one could also say you<br>have.<br>“</p><p>As I frowned, the lead researcher pointed out the window toward the massive testing area, where clockwork corpses were scattered across the floor like discarded toys.</p><p>“This unit is the cumulative result of all our tests, physically as well as mentally.”</p><p>The perfect soldier would have a quick mind, a tenacious body, and an unshakeable spirit. And while humans could come close to these ideals, they could never quite achieve them to the utmost. But now, the lead researcher was claiming this new creation has done so.</p><p>I gazed down at the kneeling clockwork soldier, who remained perfectly still. From all of those clockwork people—all of those sacrifices—this unit had been born.</p><p>“It was not simply a matter of switching out parts, though,” the researcher continued. “We extracted experiences and thought processes from the remaining records in order to optimize this unit’s operational circuits.”</p><p>Images of all the units that had acted in bizarre fashions—the ones that left an impression in past tests—flashed through my mind. “Such a combination would certainly make a clockwork soldier that fights like a human. But I thought I made it clear that was not our ultimate goal.”</p><p>What I wanted were beings that did not think, but instead followed orders, doing whatever was necessary to see a task to completion.</p><p>“As you said, Majesty. Our tests proved the greatest results are obtained from units with the weakest personalities.”</p><p>The lead researcher had once thought instilling human-like emotional variations would lead to the creation of soldiers that could adapt to any environment. It was not an altogether incorrect thought; several of the clockwork people I saw throughout the tests managed to put such personalities to good use. But the clockwork soldiers were weapons—and standardized, practical tools did not require variations.</p><p>“But this is not to say their personalities were a total waste,” continued the researcher. “Their thoughts and experiences played a role in heightening the abilities of the unit before you. Of course, we will ensure it does not manifest as a personality, but as a kind of auxiliary mechanism that helps the unit execute its mission.”</p><p>The researcher wound his way carefully through his words, making them sound less like an explanation and more like an excuse. But I merely nodded, choosing not to question him further. Because even if a personality<br>were<br> to manifest, all we had to do was delete it.</p><p>“And the fourth law?”</p><p>“Expunged, Your Majesty.”</p><p>The researcher originally wanted a fourth law: A clockwork being must serve the royal family and its superior officers of its own will. But weapons did not need a will any more than they needed personalities. All they needed to do was take lives without thinking. And now that this unit had been born, we could unleash our weapons to the world.</p><p>“Raise your head.”</p><p>The clockwork soldier looked up at me as I spoke. Though it was designed to look human, its expression was completely blank, which caused me to smile.<br>This<br> was the face of a killing machine—a heartless creation that would carry out any order without a second thought.</p><p>I crouched before the unit, took its chin between my fingers, and peered into its glassy eyes. “As our country’s first clockwork soldier, I think you are deserving of a name.”</p><p>I smiled as I fell silent. Though I appeared to be deep in thought, I already had a name in mind.</p><p>“You will fight like a god of war and bring victory to this country. Therefore, your name will be…”</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>A Machine’s Will<br>[<br>]</p><p>This man is a clockwork soldier built by a kingdom consumed in never-ending war. He has been programmed to know and feel all manner of things: fighting styles, battle strategies, and of course, loyalty to the kingdom’s rulers. And if I had to guess, I’d say his memories of the time he spent traveling with the prince were also filled with violence. Let’s take a little peek, shall we?</p><p>Oh dear! He’s pointing his gun at a woman who spoke to the prince in town! …Oh, but she was just asking for directions. Hurry away, you poor thing!</p><p>Oh no! He just shot at something in the trees! Was it an enemy, or an assassin or… Oh. No. Apparently he was just getting some fruit out of the tree for the prince’s dinner.</p><p>And now, in the dark of night, he keeps watch over his charge. Each time the boy turns over, he pulls the blanket back across his thin shoulders. He does this over and over and over again.</p><p>I imagine if we asked him why he did these things, he would claim they were merely a byproduct of his programming. But<br>Mama<br> thinks there’s more to this story. In fact, Mama thinks the clockwork man has created his very own will.</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>A Weapon’s Understanding<br>[<br>]</p><p>A lone man waits on a dry and windswept land. Across from him stand several metal dummies—his targets. This is a firing range for a weapon currently in development—a weapon known only as the clockwork soldier.</p><p>Though the man holds a gun for the first time in his life, it somehow feels as familiar as an old friend. He pauses a moment to calculate the bullet’s trajectory, the windspeed, and the recoil, then pulls the trigger.</p><p>It is over in the blink of an eye. As he places the gun in its holster, curls of smoke rise from the single hole in each of the targets’ chests—the exact place where their hearts would be.</p><p>The man admires his work for a moment, then turns and leaves the range. In that brief span of time, he has learned all there is to know of the gun.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>A Weapon’s Mission<br>[<br>]</p><p>“Wait for me. Do not move until I come back.”</p><p>The man does as he is told, standing motionless before a church scarred by endless war. No muscle so much as twitches as he waits for his commanding general to return.</p><p>Eventually, a priestess covered in ash approaches the waiting man and throws herself at him with a cry. “Please, sir! I don’t want to die! Protect me from the army!”</p><p>She clings to him, causing the man to sway ever so slightly. When the general returns a few moments later, he finds the priestess lying on the ground.</p><p>“Why did you kill her?” he asks.</p><p>“You told me not to move. I had to follow your orders.”</p><p>The general grins, clearly Delighted by the man’s answer. “You truly are the perfect little puppet,” he says.</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>A Weapon and A Promise<br>[<br>]</p><p>The boy’s cough echoes through the room, his pale breath vanishing into the air of the underground storage area. The clockwork man notes the temperature and realizes it has fallen another degree.</p><p>“This climate will harm you, My Prince. Allow me to disable my temperature regulators so I might heat the room.”</p><p>At this suggestion, the boy suppresses a cough while holding out one pallid hand.</p><p>“Just promise you won’t destroy yourself trying to help me again.”</p><p>The man, reflected in the boy’s clear gray eyes, replies with a hardened voice and blank expression. “Clockwork soldiers do not understand the concept of promises, My Prince. Only orders.”</p><p>The words appear to wound the boy.</p><p>But the man does not know why, nor does he ask.</p><p>“But<br>I’ll<br> remember,” says the boy. “And that’s enough.”</p><p>He coughs again and weakly lets his hand sink back down to his side.</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><pre><code class="hljs">              </code></pre><p>A Changing Weapon<br>[<br>]</p><p>“I’m going to ask around. Wait here, okay?”</p><p>After arriving at the village, the boy gives the order before stepping inside a small church. The man follows the child’s instruction to the letter, waiting patiently near the door. But after a bit, he hears the sound of screams. A moment later, a child runs up and begins desperately tugging on his arm.</p><p>“Please, sir! Our friend just fell out of a tree! You have to carry him to the doctor!”</p><p>The child then yanks the man’s hand again, pulling him down the road and away from his charge.</p><p>A short time later, the boy emerges from the church to find the man kneeling in the dust of the road. “I failed to follow your orders and await punishment,” he says. “Here is what happened….”</p><p>The boy listens intently to his story. When he learns the child is safe, he sighs with genuine relief and allows himself the briefest of smiles.</p><p>“Don’t be ridiculous. I’m not going to punish you for<br>that<br>.”</p><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2><pre><code class="hljs">              </code></pre><p>A Weapon’s Deception<br>[<br>]</p><p>Let us rest.</p><p>The attending man makes this suggestion upon hearing the boy—his master—breathing in harsh, ragged gasps.</p><p>“No,” replies the boy. “We need to hurry on.”</p><p>As they proceed, a pack of overgrown stray dogs suddenly appear to block their way. Though annoying, they are enemies easily failed. But as the fight proceeds, a thought occurs to the man:</p><p>If I were to let myself be injured here,</p><p>my master would surely accept my proposal to rest.</p><p>On the heels of this thought comes a memory—a thing the man recalls someone saying to him. He immediately discards the option of intentional injury and begins dispatching the dogs with calm efficiency.</p><p>Once the enemy is defeated, the man turns to the boy. “My apologies, but due to exhaustion as a result of that battle, I require rest.”</p><p>At least, the boy nods in agreement.</p><p>*         *         *</p><p>After they make camp and the boy drifts off into a fitful sleep, the man minds the fire and thinks about the events of the day. The thought that came to him during the battle was a memory of himself and his master. White breath. Shaking hands. Gray eyes. And these words:</p><p>Promise me you’ll never harm yourself for my sake again.</p><p>Why did he use his own injuries as an excuse to force his master to rest?</p><p>Why did his promise come to mind in that moment?</p><p>Why did it cause him to alter his actions?</p><p>Why did he lie about exhaustion when he was not tired?</p><p>The flames of the campfire shimmer in his eyes. No matter how many calculations he runs, he can find no answer. Instead, he simply sits back and thinks about the warm emotion rolling about in his chest.</p>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Gayle</title>
    <link href="/2024/03/07/Gayle/"/>
    <url>/2024/03/07/Gayle/</url>
    
    <content type="html"><![CDATA[<h1 id="Gayle"><a href="#Gayle" class="headerlink" title="Gayle"></a>Gayle</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>I am on a journey of revenge. The kingdom razed my home, killed my sister, and took everything from me. But its lust for power fed an unsustainable hunger for war, and it eventually collapsed. Still, scattered remnants of its forces remain. And I won’t stop until every last one of them is dead.</p><p>I tarry for a while in a small village. Under the midday sun, I hear a voice call for help. I see a kingdom soldier raise a fist and bring it down on the head of a woman. He moves to deliver a second blow. I leap in the way and take it myself before swiftly ending his life. The woman begins thanking me profusely… But I ignore her. I fight for revenge—not to save lives or spread justice. As I move to leave, the woman bars my path. Asking to see my prosthetic arm, she draws in close. She examines it carefully, looking it up and down. It was damaged when I took the blow the soldier intended for her. Though I try to explain that I can repair my arm, she waves me off with a dismissive grunt.</p><p>“We’ve a skilled engineer in the village,” she says. “Come along.”<br>Before I can think to protest further, she takes my hand in hers and leads me off.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>I am guided to an engineer so that my arm might be repaired. The engineer is indeed skilled, but lacks the needed parts for repairs—and unfortunately, it will be some time before they’re available. Still determined to show her thanks, the woman huffs loudly, grabs my good arm, and drags me off anew.</p><p>We end up in the village pub. She gathers the drinkers around her and spins an epic tale of how I saved her from the kingdom brigand. Soon, I find myself regaled with food, drink, and song from all corners. I take a bite of something and nearly swoon; I can’t remember the last time I enjoyed a hot meal. When the woman leans in and asks how it tastes, I feel an unfamiliar smile slowly make its way across my lips.</p><p>How long has it been since I smiled? Weeks? Years? More?</p><p>I thought I’d lost the ability to do such a thing long ago.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>Eventually, the parts arrive and my arm is finally repaired. The woman asks me how it feels, and I’m both surprised and delighted that it seems to move more smoothly than before. As I test it out, the engineer smiles at me and says,</p><p>“Consider this my way of saying thanks for saving my wife.”</p><p>It turns out the engineer and the woman are married. She turns red as he talks about everything he loves about her. I can only chuckle and show a wry smile as I listen. Finally, she can take no more attention and leads me out of the shop. As we walk, she tells me they have been married almost three years. She also thanks me again for my actions from before. This time, I manage to face the woman and thank her for the assistance. I tell her my work in the village is done and I will be on my way…… But that’s not the entire truth. I’m also afraid of what might happen if I grow used to the warmth and kindness of others. The villagers all gather at the edge of town to see me off.</p><p>“Come and see us again real soon!” says the woman.<br>As I walk away, the last thing I see is her small hand happily waving goodbye.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>It wasn’t long after leaving the village that I heard the news: A soldier was attacking the village in revenge. Before I even know it, I am on my feet and running like the very wind itself.</p><p>I find the village in flames. The soldier is roaming about madly as he scours the village in search of every last person he can find.</p><p>“That man was family!” he cries as he puts another house to the torch.</p><p>“All of you will pay for his death with your lives!”</p><p>My vision is fire.</p><p>Before I even have the chance to feel my building rage, I engage the man in battle. My arm works even better than before. In a moment, I cut him down like a dog.</p><p>When the deed is done, I walk around the village in search of survivors. In the very last house, I find the woman and the engineer with their arms wrapped around each other and their bodies still. I thought I had saved them—saved<br> of them—from a terrible fate that first night… But my actions had only been the impetus for an even greater tragedy. These innocent people had been caught in the cycle of revenge, and now their lifeless eyes stare accusingly up at me.</p><p>And you know what? They’re right.<br> did this. It is all because of<br>. As I fight, I only add more links to the chain of revenge—but if I stop, the remaining soldiers will continue to commit their horrid atrocities. So I have to fight. I have no choice. But in so doing, will I, too, become an object of hatred in this world of neverending slaughter? All that lays before my eyes is a crimson world of blood and fire.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>A Promise Sworn Part 1<br>[<br>]</p><p>When she was yet young</p><p>A blazing inferno reflects in a pair of eyes. The girl’s empty expression betrays nothing. The sight of flames roaring in the darkness is etched upon her mind. Her heart speaks to her in a dry tone.<br>You will never forget this night. Not for the rest of your life.</p><p>“Mom, come help with this!” The girl’s bright voice rings through the kitchen. Lined across the table are a colorful array of vegetables in hues of green, yellow, and red, as well as a large piece of meat. Cradling the girl’s younger sister, her mother turns to the sound of her older child’s pleas.</p><p>“Well, someone’s enthusiastic about their cooking.”</p><p>The mother looks on as the girl continues bustling about the kitchen. She is learning to cook from her mother.</p><p>“You need to add a little more seasoning, honey.”</p><p>“Here, try it now.”</p><p>The moment the girl brings the food to her mouth, her furrowed brow loosens and a smile breaks out.</p><p>“Oh, yummy!”</p><p>The two chefs look at each other proudly, content in the knowledge the recipe is perfect. The girl sets the steaming dishes down. The mother plops the little sister in her chair as the three of them gather around the table.</p><p>The wood practically groans under the weight of the food, which is far too much for even three hungry mouths. As the mother starts cutting meat into small pieces for her youngest daughter, she looks at the elder with a wry smile.</p><p>“It’s good you got more practice in, but we clearly went overboard on our portion control.”</p><p>Everyone chuckles as they dive into their meal.</p><p>“Dad’s coming home soon, right?” asks the girl as she happily bounces up and down in her chair.</p><p>The letter had arrived a few days ago. It was a notice their father would soon be returning from his military service. The moment the girl read it, she rain into her mother’s room and announced her grand plan:</p><p>“I’m going to make Dad’s favorite dinner when he gets back!”</p><p>She has been awaiting his return for so long. The last time she saw him was the morning he left for the front. His expression betrayed mixed feelings, and the young girl had no way of knowing what sort of emotions they were. But as he held her tight, he leaned into her ear and whispered,</p><p>“I will come back to you. I promise.”</p><p>That promise was everything to her—and now it is coming true. When she thinks of it, she can hardly contain herself. Feelings she managed to keep suppressed all this time are now bubbling up like water from an overfilled pot. But she manages to hold them back and keep her calm.</p><p>I’m the older sister now<br>, she thinks. </p><p>I have to hold it together.<br> Her younger sister was born after her father left, and word of her birth had not been able to reach him on the battlefield.</p><p>What will Dad think when he sees her? Will he love her like me? …Will he love her more than me?</p><p>The girl shakes her head to clear the ugly thought away.</p><p>…………</p><p>……</p><p>As she rubs her swollen belly, she marvels at how well the cooking lessons have gone—aside from her ability to judge proper quantities, of course. She leans back in her chair and indulges in a brief flight of fancy. All of her father’s favorite foods are lined across the table. As he takes the first bite, a satisfied smile crosses his face. She sits at his side, no longer the young child he once knew, but not yet a woman grown.<br>He’ll be amazed to see how much I’ve changed. It’s going to make him so happy.<br> Her reverie is interrupted by the voice of her mother: “When you’re done woolgathering, you can help clean up.”</p><p>The girl starts, nearly tipping her chair over in the process.</p><p>“You’re the older sister now; you can’t afford to be lazy.”</p><p>The girl pouts a little at the scolding, but her mother pays this small rebellion no mind. Instead, she entrusts her to take care of the dishes and heads off to attend to her sister.</p><p>It must be so hard for mom to take care of both of us alone.</p><p>I need to work as hard as I can to support her. She’s always put on a smile for us, no matter what. And that’s why I’ve been able to keep going, even when I was sad or lonely or depressed. I’m too old to be having jealous fits or slinging snide remarks. So what if she doesn’t pay much attention to me anymore?</p><p>She nods to herself as she reaches this conclusion, and proceeds to wash and put away the kitchenware.</p><p>When night comes, the exhausted girl begins falling asleep the moment her head strikes the pillow. As she drifts off, she feels her mother’s hand on her head.</p><p>“Thank you, honey. You are<br>always<br> appreciated.”<br>With that, her mother stands and leaves the room. In her dreams, her entire family sits happily around the table.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>A Promise Sworn Part 2<br>[<br>]</p><p>The girl stares out the window. Whenever she hears a noise coming from the door, she bolts to her feet. Her mother makes a comment about her being worse than a puppy, which causes her cheeks to go pouty once more. With each ring of the doorbell, the girl rushes to the door, only to return each time filled with disappointment. Finally, the moment she was waiting for arrives. The front door opens to reveal her father in his military uniform. How long had they waited for this? How long had they<br>all<br> waited for this? Unable to help herself, the girl leaps up and runs to her father.</p><p>But then… Something shocking happens. Her father shoves her aside. She crashes to the ground, unable to process what just happened. A silence ill befitting a family reunion falls over them. Sensing the heavy atmosphere, the youngest begins to cry. The father covers his ears at the sound of her wails and rushes off to his room.</p><p>“Don’t worry girls,” says her mother as she helps her daughter up. </p><p>“Your father is just tired.”</p><p>She smiles as she says this, but the expression does not carry over to her eyes. The girl remains stunned. She can’t fathom what just happened. Her sister’s sobs echo around the entryway. She does not see her father again until dinner. She is almost beside herself with worry; what if her actions had caused her father’s mood? As she bites her lower lip, her mother comes up behind her.</p><p>“It’s okay, honey. You didn’t do anything wrong.”</p><p>Rather than comfort her, the words make tears spring to her eyes. But she manages to hold them back and force a smile on her face.</p><p>It will be better once he eats. He’s going to love it.</p><p>This is what you’ve been working so hard for, remember?</p><p>Thus determined, she begins helping her mother with the meal. The fragrance of grilling meat covered in her mother’s secret seasoning soon wafts through the kitchen. A knife falls up and down on the cutting board. As the ingredients take on new forms, the girl’s heart leaps wildly between anticipation and anxiousness. They put up the decorations they’d prepared around the room and pile the plates high with steaming warm food in order to celebrate the day. And then, they await the guest of honor.</p><p>Some time later, he enters the room and takes his seat. The whole family is finally together again. But her father doesn’t touch his food. Instead, he just…sits there. The daughter looks at him out of the corner of her eye, noticing for the first time how gaunt he has become; how pale and sickly he appears. Her dream has become reality, but there is no joy in it. She begins to wish it weren’t real after all, that she might wake up from it… As that thought crosses her mind…</p><p>A crash rings out. She is yanked back to reality by the sound of shattering porcelain. The carefully prepared dinner is now scattered across the floor.</p><p>“BUGS!” screams her father, his voice raw with terror.</p><p>“Oh god, they’re EVERYWHERE!”</p><p>Her panicked father leaps up and dances away from the table. He then begins stomping the food into the floor with the heels of his heavy military boots. He is trying to squish the insects: the ones only he can see. Her little sister begins to wail again. Even her normally composed mother stared on, dumbfounded. She can’t even pretend to understand what is happening. A few seconds later, her father comes to his senses.</p><p>“I’m… I’m sorry. I didn’t mean…”</p><p>He lets his words trail off as he sways unsteadily on his feet. Then he bends down and begins to slowly scrape the food off the floor, moving as if in a trance.</p><p>“Dad, no! Let me do it!”</p><p>The girl drops to her knees and begins a frantic cleaning. Her mother rushes to grab some rags, and for a brief, insane moment, it almost feel like everything will be okay. But then…</p><p>“Ow! Dangit…”<br>In her rush, the girl had cut her finger on a broken shard of plate, and now drops of blood spill down to the floor. The moment her father sees it, he turns to the side and vomits. When her mother returns, she finds a room filled with horrid smells, shrieking cries, and chaos. Her father stumbles from the house and into the night without even bothering to clean himself. He does not return until the next day.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>A Promise Sworn Part 3<br>[<br>]</p><p>Her father is unable to find work. Days pass. Then weeks. Nothing changes. With their savings all but depleted, the mother is forced to find work outside the home. The job of watching over the younger sister falls to the elder. But youth has a way of forgetting trouble, and the little sister is constantly happy, vibrant, and full of life. Each time she begs her sister to play, it brings a bit of warmth to her tense heart. But there is also much pain as well.</p><p>One day, she and her sister are playing with blocks. They build a small town with a strong gate and a mighty castle, and populate it with the little sister’s toy soldiers. The girl takes out a small instrument and begins playing a jaunty march as her sister moves the soldiers to and fro. This game—which they call “Parade”—has been the little sister’s favorite of late. Suddenly, her father wanders by the room, his face clouded. The moment he sees the soldiers, he begins to scream:</p><p>“No! NO! Stop that RIGHT NOW!”</p><p>The girls freeze. He tears the soldiers out of the little sister’s hands, rips their heads from their bodies, and kicks over the blocks. The girl stares wordlessly. Her sister begins to cry. Her father throws the ruined toys in the trash and backs out of the room with a terrified look on his face. He is a different person now. She no longer knows him. And yet, he is still her father, whom she loves.</p><p>He’s just sick<br>, she tells herself day after day.</p><p>He’ll get better. Things will go back to how they were.</p><p>Their father does seem to feel guilty about his condition. One day, he offers to help with the housework. Mother and daughter both agree instantly, hoping that perhaps this smallest of steps will be the push he needs to get well.</p><p>The next day, he begins preparing a bath for the little sister. The girl is worried by her father’s slow, clumsy movements, and finds herself checking in on him every few minutes. But watching him draw the bath just feels so very<br>normal<br>, and for a brief moment, she finds happiness in the scene. Expecting things to be ready soon, the girl peeks in and finds her father about to place her sister into the bath. Her little sister is staring at the bath, eyes wide. Sensing something amiss, the girl looks at the water and sees that it is boiling. She runs to her sister and quickly scoops her up.</p><p>“Dad, no! What are you DOING!?” Her father stares at her, confused.</p><p>“I was just…putting her in the bath…”</p><p>Her father’s answer contains no acknowledgement of the situation’s horror. She fumbles out a lame excuse about her not being ready for a bath and flees the room with her sister in her arms. She is glad her father wants to be involved with the family. She truly is. But his actions bring no joy. Mother and daughter find themselves more exhausted with each passing day.</p><p>And one night…it all comes crashing down. Her patience gone, the girl’s mother begins to scream at her husband. Her furious cries penetrate the bedroom walls. The girl has never heard her scream like this before. Within moments, her father begins to bellow back, and the sounds of their rage fill the air. Suddenly, the girl feels a strange sensation, almost like her heart is splitting in two.<br>What’s going to happen to us?<br> She does not know. All she can do is close her eyes and pray.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>A Promise Sworn Part 4<br>[<br>]</p><p>A strange crackling sound stirs her from sleep. Then she begins to cough.</p><p>Smoke. That’s…smoke?</p><p>Oh my god, the house is on fire!</p><p>She wants to believe this is a nightmare; she wants to believe it with all that she is. But the heat will not let her.</p><p>…!</p><p>Dad…</p><p>Mom…</p><p>My sister!</p><p>A moment later, she dashes out of her bedroom.</p><p>“Dad!”</p><p>Her father is standing in the living room. Flames lick up around him. Her mother’s body lies still at his feet. Her father slowly turns to look at her. His eyes are two empty pools. His mind is gone. The girl stares at him, unable to act. The flames grow stronger. A vibration shakes the room. Something falls. Glass shatters. Finally, the girl snaps back to reality. She is standing in the middle of an inferno.</p><p>Suddenly, her vision goes black. She smells a familiar, comforting aroma, and realizes she is wrapped in her father’s coat. He lifts her in his arms and sprints out of the house. When he sets her on the ground and unrolls the coat, her eyes are burned by the intensity of the flames. Her consciousness a whirl, she manages to croak out:</p><p>“M-my sister…”</p><p>She does not know if he hears her or not, but he turns around and runs back into the house. His silhouette is swallowed by fire.</p><p>Time passes. A minute is an age. The girl can only stare and hope. Finally, a figure emerges from the inferno. Her sister is in his arms, wrapped in a blanket. He reaches the girl and collapses to the ground; the smoking blanket unfurls to reveal her sobbing sister. The girl runs her hands over her sister to check for injuries, and is shocked to find she has none. But her father is a different story. His skin is peeled and blackened. His remaining hair crumbles to ash when she touches it. His clouded, bloody eyes stare unseeingly at nothing. After a moment, his mouth begins to move. He repeats the same words over and over. It is an apology. But it is not meant for her—nor for her sister or their mother. Instead, he is apologizing for actions during the war, his mind lost amidst fields of battles long-since fought. His voice grows softer and weaker. In an increasingly faint voice, he calls his daughter’s name. However, she is unable to make out whatever words follow. By the time she attempts a reply, he is gone.</p><p>………………</p><p>…………</p><p>……</p><p>Some time later, she learns portions of what happened to him during the war. The orders he was given. Young children clutching weapons. Blood. Gore. Screams of pain. Eyes staring up from the dirt. The eyes of little girls. Girls much like his own daughter. Her father left the battlefield, but his spirit never did.</p><p>Why why why why why</p><p>Why why why why why</p><p>Why why why why why</p><p>Why why why why why</p><p>Why why why why why</p><p>Why why why why why</p><p>No matter how many times she asks… No one ever answers her. Perhaps there is no answer—or at least, no answer that can roll the stone off her heart. The two girls stare at the smoking remains of their home.</p><p>“Sis? Where’s Mom? Where’s Dad?”</p><p>Her little sister looks up at her quizzically. They are now alone in the world. The girl smiles gently at her sister. Like her own question, hers has no answer. Yet she feels a resolve begin to build.</p><p>I will make her happy. Whatever it takes. She will never have to feel the way I do right now.</p><p>She squeezes her sister’s hand as she makes this silent vow.<br>A vow that is now her entire reason for living.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Pessimism Blues<br>[<br>]</p><p>Glasses clink. Men guffaw. The saloon is filled with chatter, and lively as always. As I attempt to finish my drink in peace, a man who’s so drunk he can barely hold up his head suddenly takes notice of me.</p><p>“Hey! Hey, she’s here! It’s the one-armed woman!”</p><p>At his words, the doors fling wide and spill forth a group of familiar men.<br>Oh joy,<br> I think.<br>The collectors are back.</p><p>“Hey there, sweet thing! We haven’t got your payment this week. Maybe we’ll just take one of your legs instead.”</p><p>The lively saloon suddenly becomes silent, as if someone threw a damp blanket over the rowdy denizens. “Sorry,” I say, my words slurred. “I’ll pay at the end of the week.”</p><p>The collectors scoff. “And how’s the great kingdom-hunter gonna do that, huh? You know that horror show you call a body ain’t no good for manual labor.”</p><p>The kingdom.<br> They were the ones who put my home to the torch and turned my sister into a killing machine before deciding she was a failure and cutting her down. Twenty years ago that was, and I’d spent the long years in between killing every last soldier I could find. I’d been good at my job—maybe even too good, because these days I don’t find anyone who claims to have been part of that army.</p><p>You think I’d be happy to have done such a thorough job, but I don’t feel happiness anymore. I also don’t feel satisfaction, or excitement, or joy. All I feel is an emptiness so deep it threatens to consume me every time I open my eyes in the morning. The only thing that drives me now is this saloon and the mind-numbing cure that awaits inside. If I have money, I drink. If I don’t, I work. If I can’t find work, I use my left arm as collateral and borrow—the same left arm that once cut through so many soldiers of the former kingdom.</p><p>“Try speakin’ up for once!” growls one of the collectors as he grabs me by the collar and lifts me off my feet. The sudden movement causes the drink I was raising to my mouth to reverse course and splatter all over his arm—a development he doesn’t exactly take in stride.</p><p>“Damn fool! I’ll kill you!”</p><p>He throws me aside, grabs a short metal rod from his belt, and begins slamming it into my side. I drop to the floor and curl into a ball as he keeps raining blows down upon me. If I had my left arm—and my wits—I could handle this wretch with ease. But in my current state, I’m a miserably weak and powerless thing.</p><p>“Please… I’ll…pay back…”</p><p>I’m begging now, which some dark corner of my mind finds amusing. Despite my hollow days being filled with nothing but drink and self-loathing, I’m somehow still afraid to die. Life really is a comedy.</p><p>“That’s enough.”</p><p>The words come from a man in a cloak who is standing in the doorway. The setting sun behind him makes it impossible to see his face, but his voice stirs something deep in my chest.</p><p>“Mind your business,” spits my assailant. “This ain’t got nothing to do with—“</p><p>The cloaked man is a blur. One moment he’s standing in the doorway, and the next he’s holding a knife against the collector’s throat.</p><p>“I said, that’s enough.”</p><p>The collector’s breath catches in fear. Unwilling to push the issue further, he lowers his weapon and slinks out of the saloon with his metaphorical tail tucked.</p><p>“You good?” asks my rescuer. He extends a hand down to help me up, and recognition suddenly floods over me. I know this man—and this is the second time he has saved my life.</p><p>The first time we met was the night my sister and I became orphans. We were so cold and tired and so,<br>so<br> afraid, but he extended his hand to us and asked the same simple question: “You good?” From that day on, he taught me everything I needed to survive, from preparing game for eating to wheedling things from adults.</p><p>“Been looking for you,” he says.</p><p>Me? He’s been looking for me? Why the hell would he do that? I’m a drunk, a useless lump with nothing to live for but lacks the guts to die. And yet, apparently my mentor decided I meant enough to track across all the miles and all the years.</p><p>“Why?” I manage to say.</p><p>“Got a request. Hear me out?”</p><p>At that moment, I realize this is my last chance. If I let it go—if I tell him no and turn back to the bottle—I won’t last another week.</p><p>“Sure,” I finally reply. “Let’s hear it. And…thanks.”</p><p>It’s a lousy reply, but the best I can do at the moment. And as I say it, I feel a tiny little something in my soul: A spark of hope that maybe, just maybe, my life is going to change for the better.</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: A Criminal’s Gloom<br>[<br>]</p><p>I reconnect with the man who saved my life once before.</p><p>He’d heard rumors about a woman with prosthetic limbs and sought me out for an important mission: to rescue his beloved, who had been kidnapped by a pack of former kingdom soldiers. Playing mercenary is part and parcel for me these days, but hearing I missed some soldiers makes my blood boil, so I’m happy to take the job for a whole number of reasons.</p><p>“Hang on,” I say to the man as we walk. “I know this road.”</p><p>“‘Course you do. Bastards took up residence in our old home.”</p><p>The reality of this hits me like a cannonball. I remember these trees—how my sister and I used to run through them without a care. I haven’t been here in at least 20 years; maybe that’s why the soldiers decided to hole up here.</p><p>“How’s the new arm?”</p><p>I know he’s changing the subject to lighten the mood, so I go ahead and play along. “Better than the last time I pawned it. Broker did a good job fixing it up.”</p><p>The man bought my arm back as payment for my taking the job. And now that it’s a part of me again, the old bloodlust that came with it has returned as well. But as I turn it this way and that, my companion suddenly looks over at a nearby thicket.</p><p>“Come on out,” he says in a voice casual as a spring day.</p><p>Sensing an enemy, I raise my sword above my head and grit my teeth. This time, every last whisper of the kingdom will perish. This time, all of them will fall. This time—</p><p>“GYaHAhahAHAHahaHA!”</p><p>What leaps out at me is another modified human soldier with prosthetic limbs—someone just like me.</p><p>“It’S BIg siS! EVEryONe, cOOoooOoMe!!”</p><p>On this signal, prosthetic soldiers swarm like insects. I feel a gorge rising in my throat as they approach. My sword wavers. But it isn’t fear that does this. Oh no. Fear would be easy.</p><p>All of them look exactly like my little sister.</p><p>The creatures don’t share my hesitation, and the first one who reaches me kicks my leg out from under me, sending me crashing to the ground.</p><p>“WheEhhEEE hEeEE HEEeE! ThiS Is FUn! THIs feeLS GOOd!”</p><p>She leaps on top of me and makes to plunge her sword into my chest, but I manage to knock her aside. As she tumbles, a small picture locket snaps away from her neck and sails into the sky.</p><p>She was once a girl. A normal girl with a normal life.</p><p>“Come on!” yells the man as he pulls me to my feet. “RUN!”</p><p>We race into the forest, speeding through the trees I once loved so much. When the giggling of the soldiers finally fades, we lean against a pair of tall oaks and try to catch our breath.</p><p>“Lost ‘em,” says the man as he places a comforting hand on my shoulder. At his touch, I realize my entire body is trembling. I can tell he thinks it’s because they looked like my sister, but he’s wrong. That’s not the reason I’m trembling at all.</p><p>I’m just happy they’re still alive.</p><p>After losing my little sister, I lived only to destroy the kingdom—and the day I thought that mission was over, my life lost all meaning. Yet because I wasn’t strong enough to choose death, my life took on a weird sort of limbo, one where I woke up, drank myself into oblivion, then repeated the process all over again. But now? Facing the kingdom again after so very long? I feel…excited. My anger toward the kingdom is what kept me alive all these long years, my life bound to the object of my loathing.</p><p>And I hate myself for it.</p><p>“Hey,” says the man. “I know you think you can only live for revenge, but don’t think that. It’s too sad. Hell, I’m sure the life you’re looking for is out there somewhere.”</p><p>His kind voice is a gentle warmth on my scars, and my small hand fits inside his gnarled one as if it was meant to be there. “I’ll help you when this is over, all right? We’ll find a new way of life. Together.”</p><p>When was the last time I felt such warmth?</p><p>I want to tell him now—tell him<br>everything<br>. Because the walls I’ve spent so long constructing around my heart have finally begun to fall.</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: Warped Echoes<br>[<br>]</p><p>Having accepted my one-time benefactor’s request, I accompanied him to my hometown—a place where former kingdom soldiers were said to be hiding. Though I had twinges of doubt in my heart, I ignored them so I might bring his wish to life:</p><p>I want to save my beloved, who was kidnapped by men from what remains of the kingdom.</p><p>We snuck toward town, deftly avoiding the soldiers who patrolled the area. But once inside, I could hardly believe my eyes. The town was brightly decorated as if for a festival—and amidst the glitter and pomp, augmented soldiers went about their regular lives.</p><p>“WhAT aN AusPICIouS DaY!</p><p>WHat AN auSPIcioUS daY!”</p><p>Perhaps it’s fairer to say they were<br>trying<br> to live regular lives. Some were giving morning greetings. Some were cleaning. Some were eating. But their every movement was stiff and unnatural, like old toys in need of repair.</p><p>“The hell is going on here?”</p><p>I did not mean to speak the words aloud, but the sight so shocked me that they simply slipped out. The moment my breath became sound, the augmented soldiers turned as one to look at me.</p><p>“KIlL! KIlL! I wAnT to KiLL!”</p><p>They swarmed like insects, and I barely managed to protect my companion from the initial assault. “We’re getting out of here NOW!” I cried, shoving him back. I didn’t want to lose anyone important to me ever again—I<br>couldn’t<br>. But then an electric shock coursed through my whole body, sending me crashing to the ground.</p><p>“Seize her, but do not harm her.”</p><p>Just before my world faded to black, I realized the person giving the orders was the very same man I had been trying to protect.</p><hr><p>“Ah, good. You’re awake.”</p><p>The man’s voice pulled me from my unnatural sleep. I tried to move and couldn’t, and quickly realized one of the soldiers was holding me in place.</p><p>“Are my toys not adorable? Ah, I tried to get them to act human, but it didn’t work out quite as I planned.”</p><p>His expression was bright, his voice as gentle as ever. It only made the experience all the more uncanny.</p><p>“Why!?” I cried. “Why are you working with the kingdom!?”</p><p>“Oh, there’s no need to worry about<br>that<br>,” he said, placing a hand on my shoulder. “The kingdom is gone—consigned to the dustbin of history. All I did was borrow a bit of their technology regarding human augmentation.”</p><p>He pulled out a locket and opened it, staring spellbound at the photo inside. “Do you recall my wife?” he murmured, almost to himself.</p><p>Memories of a more peaceful time flooded over me. Though older than me, his wife was a tiny waif of a thing who resembled a little girl more than a woman grown.</p><p>“We ran when the kingdom attacked, but our journey only led to a different kind of hell.”</p><p>He stopped his story, pulled a newspaper clipping from his pocket, and tossed it at my feet. The headline read: ROYAL MILITARY EXPANSION CAUSES CHEMICAL POLLUTION.</p><p>“The rot started in her lungs before spreading to the rest of her body. It was fast—<br>so<br> fast. Like a wind. The doctors had no idea how to help her, but rather than surrendering hope, I decided to replace her failing body with that of a machine.”</p><p>“You wanted to augment your own<br>wife<br>!?”</p><p>“Yes. And if you wish to know how it ended, you need only remember the thing that jumped you in the forest.”</p><p>At that moment, I realized the face in his locket was the same as the soldier I encountered in the woods. Even though the kingdom itself was gone, its horrid technology lived on to birth new pain—and those who weren’t compatible with augmentation inevitably lost all control of themselves.</p><p>“Ah, yes,” he said in response to the horror that moved across my face. “I fear she’s been like that ever since the operation. I needed to know if there was a way to get her back, so I kidnapped people and experimented on them to further my research.”</p><p>The soldiers I had seen in the forest? The people I’d seen in the town? All victims of his cruel work.</p><p>“Alas, I could never get the results I wanted. But then I found<br>you<br>.”</p><p>Me—someone who survived the operation. Even though I was deemed a failure, I still retained a sense of self.</p><p>“I wanted you to see the pain of those who do not have the sweet release of death. With you helping me, I can<br>end<br> that! My research will grow by leaps and bounds!” A flame lit in his eyes then, one stoked by madness. “You endured the augmentation, so give me your mind! Give me your body! Do so for the sake of my wife, as well as for all who suffer in agony and pain!”</p><p>He had come down a road from which he could not turn back, all for the sake of one he loved. It was a truth I knew painfully well. </p><p>Which is why I could not permit him to continue.</p><p>I shook off the soldier holding me and readied myself for battle. This nightmare would end today.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: Final Brilliance<br>[<br>]</p><p>The man who once saved me had modified human bodies at the cost of countless lives.</p><p>“AAaaAAHh Ha HA hA ha HA!</p><p>LEt’S dANce, sIs!”</p><p>I didn’t want to hurt the augmented soldiers more than he already had, so instead I damaged their machine parts, rendering them inoperable.</p><p>“Animal! You would destroy the fruits of my research!?”</p><p>Realizing the tide had turned, he tried to slip away through crowds of augmented soldiers. But I saw right through his ruse and chased him down.</p><p>“The kingdom’s technology dies with you.” I said as I stood over him, sword at the ready.</p><p>“No, wait! This is good for you, I swear! I’m going to help you find a new way of life, just as I promised!”</p><p>I could tell he was trying to curry favor, but instead of rage, the attempt created only a kind of emptiness inside me.</p><p>“You think having me aid your experiments is a new life?”</p><p>“Yes! You can<br>help<br> people! You can finally be a savior, not a murderer!”</p><p>Oh, but he knew how to spin a pretty tale. Yet I was viscerally aware of how his technology brought about only misfortune and misery.</p><p>“I bet she would be happy if you helped!” he continued frantically. “Your sister―”</p><p>He spoke my sister’s name.</p><p>“You…”</p><p>The tip of my blade shuddered.</p><p>I saw a distant past, then. Beheld forgotten memories—memories of the only time in my life that could hope to soothe me. And he destroyed them. He used my sister’s name for his own ends.</p><p>“All I want is to perfect the technology!”</p><p>As my memory fell apart, I destroyed him.</p><p>“That’s a shame.”</p><p>There was a flash as my blade struck flesh. Silence descended over the area. It was over quickly—far too quickly.</p><p>Enough is enough.</p><p>I had my revenge, and lost my life’s meaning in the process. I know now that my days would run into each other one after the next, turning into a meaningless, insubstantial blur I could never escape.</p><p>“Time to join her.”</p><p>The ending of my own life would snuff out any lingering existence of the kingdom. I brought the blade to my chest, felt the pressure. But the moment I began to push, a soft thud from somewhere beyond the trees brought me to a halt. If there were augmented soldiers left, I had a duty to dispatch them quickly and painlessly. But as I approached the sound…</p><p>“Who are you?” asked a little girl who could be no more than 10. “What are you doing here?”</p><p>“Me? I, uh… What are<br>you<br> doing here?”</p><p>“I live here with Papa and—<br>cough, cough<br>!” The hand to her mouth turned pale red. “Sorry. I can’t stop coughing. Mama was like that too.”</p><p>“What happened to your mom?” I asked.</p><p>Her eyes clouded. “Mama…stopped being Mama. But Papa’s trying to fix her.”</p><p>“Is he now?”</p><p>“Yes! And once Mama’s fixed, he’s gonna fix me, too!”</p><p>The man had expressed his wish to save his beloved. That, at least, had not been a lie.</p><p>“But Papa’s been so busy with research that he…forgot me.”</p><p>It all started with a wish to save his wife, all well as his daughter. It started with a desire to keep his family safe. What did he say in the end?</p><p>I want to perfect the technology.</p><p>The poor fool was so caught up in the journey that he forgot the destination.</p><p>“Have you seen my papa?”</p><p>There was only one thing to do. I can’t say it was the correct thing, or that I even had the right to do it in the first place. But…</p><p>“Your papa went on a journey. He’s trying to find a way to save you. You can stay with me until he comes back.”</p><p>I must be at her side.</p><p>“Aw! I wanted to wave bye.”</p><p>The girl took my hand with her own. It was soft and warm as the sun.</p><p>“He didn’t want to see you sad,” I whispered.</p><p>“Papa’s so nice,” she said with a smile. As she did, I felt the evening breeze slowly push aside whatever remained of my hesitation.</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>Half a Hunter’s Life<br>[<br>]</p><p>“All right, let’s leave our review there for today.”</p><p>“Okay.”</p><p>“Sure.”</p><p>“Good idea.”</p><p>“When’s the next one?”</p><p>“Not a problem.”</p><p>“Um, if I may?”</p><p>“Yes? What is it?”</p><p>“So I understand she gave her life for revenge, but that wasn’t all it was about.”</p><p>“Go on. Please. I’d love to hear your thoughts.”</p><p>“Well, a lot of people passed through her life.”</p><p>“That’s true. Her record is much longer than most, making analysis difficult.”</p><p>“And of course, she made mistakes along the way. But she slowly grew because of it.”</p><p>“Precisely. But let’s leave our judgments until we watch to the end of the record.”</p><p>“But we’re the only ones who can watch over her journey.”</p><p>“Thank you for pointing this out. We need to take this seriously or ■■■■■■</p><p>ERROR: INSUFFICIENT MEMORY</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>Big Sister Observation Diary<br>[<br>]</p><p>Today is my birthday and it’s sunny! My big sister made me sooo much food!</p><p>It’s been a long time since we had so many vegetables and so much meat! The meat was kind of hard but it tasted great! My sister is great!</p><p>She said Mom taught her a lot about how to cook food! I want Mom to teach me too so I am going to be on my best behavior all the time!</p><p>So I helped clean up too! My sister made a big mess while cooking, so the whole house was a mess! It was funny.</p><p>By the way the neighborhood dog went missing so we are all going to go looking for him.</p><p>Maybe he just wants to play hide and seek?</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>Father’s Teachings<br>[<br>]</p><p>After repeated cries of exertion, the finishing blow arrives. The animal—which had been rushing at the speed of an arrow not moments earlier—crumples to the earth before the man. When that happens, a small girl less than half his size peeks out from behind a tree, her eyes glittering in wonder.</p><p>“Footprints in mud. Broken branches. The forest leaves many clues for us to find.”</p><p>The man does not know how to be a father; all he can teach her is hunting and survival. Though he knows logically that teaching a woman such skills will only make her life difficult in this day and age, it remains all he can do for her. But his daughter is blissfully unaware of his worries; she is only delighted to watch his gallantry.</p><p>Soon, the man will be drafted and sent to war. He must return alive, lest his family starve. This fears kick the cogs of his mind into gear, and he shakes his head to clear his musings.</p><p>“While I am away, you must look after your mother and the new baby. Understand?”</p><p>His words are casual, the meaning behind them lost on the little girl. But in her eyes, she clearly realizes this is what a family protector should look like.</p><p>“I will come back to you,” he says as he enfolds the girl in his massive arms.<br>“I will return. I promise.”</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>Mentor’s Prescence<br>[<br>]</p><p>“What do you think?”</p><p>“Tasty.”</p><p>“This is what meat tastes like when the animal doesn’t suffer and you dress it correctly.”</p><p>“I’m sorry.”</p><p>“Why did you kill that dog and steal those vegetables?”</p><p>“The house burned up. We had nothing left to eat.”</p><p>“But you still know there are things you shouldn’t do, right?”</p><p>“I know. But I don’t want to worry my sister any more.”</p><p>“She’ll be okay. You’re doing a fine job.”</p><p>“…She knows I cry when she’s not looking.”</p><p>“And yet she doesn’t seem upset about it. In fact, she’s been having a great time writing in her diary.”</p><p>“She does that to make me feel better. She knows I’m hiding something.”</p><p>“Perhaps it’s her way of showing you kindness.”</p><p>“I don’t want to lie to anyone anymore. Not to myself—and definitely not to her.”</p><p>“That’s why I’ll teach you all you need to survive.”</p><p>“Thank you. I really want to hunt by myself next time.”</p><p>“You’ll be doing that soon. Hell, you’re already good at stalking prey! Where’d you learn to do that, anyway?”</p><p>“…My dad.”</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Rion</title>
    <link href="/2024/03/07/Rion/"/>
    <url>/2024/03/07/Rion/</url>
    
    <content type="html"><![CDATA[<h1 id="Rion"><a href="#Rion" class="headerlink" title="Rion"></a>Rion</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>“How do you fare, My Prince?”<br> asks about my condition as we walk through the forest toward the wasteland.</p><p>“Well enough,” I say as I glance in his direction.</p><p>“But shouldn’t you stop and conduct some maintenance? This forest air can’t be good for clockwork bodies like yours.”</p><p>“All is in good order, My Prince. Do not trouble yourself.”</p><p>I know he only says this because he worries about my illness. I stop our progress for a moment and turn to him.</p><p>“And what if a fight finds us? We should check to be sure.”<br>He nods slowly before taking a seat. Then he powers down, causing the eyes behind his bandages to go dark.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>It’s so much easier to start a war than stop one. Once the fighting starts, violence leads to distrust, creating a vicious circle where peace seems impossible. This is why we are currently traveling from country to country: To create a third power which might mediate negotiations and find a way to lead us out of this bloody war. But my status and bloodline mean there are many who wish me ill. Thankfully, my companion has saved my life time and again. He is a clockwork man, and there is little I can offer him. The best I can do is assist in his maintenance.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>I feel a tightness in my chest. My body grows heavy. Sweat slicks my hair against my head. It’s clear my illness plans to claim me one way or the other. Stifling a cough, I retrieve a bottle from an inner pocket. I snap off the seal and drink it down. It is the last of the medicine that holds my illness at bay. Once it wears off, I will know how bad my condition truly is. My breathing steadies. It is but a temporary reprieve, but it will do. Maintenance is almost finished.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>I return the empty bottle to the same pocket I took it from and wait for my guardian to wake up. He won’t worry now—at least for a while. The medicine will see to that. I can’t afford to show him my true pain. And besides, it’s not like I’m going to get better. Suddenly, my companion wakes with a whirr.</p><p>“I’m operating well,” he says.</p><p>“Thank you.”</p><p>“Glad to hear it,” I reply softly.</p><p>“Let’s keep going.”</p><p>“Yes, My Prince.”</p><p>We have no time to waste and no time to stop. That is why I decided to continue with the lie. It’s the right thing to do—I know it is.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>The Flame Sparks Part 1<br>[<br>]</p><p>Before the king abandoned his son</p><p>Gray eyes scan the page.</p><p>“A king is not a conqueror.”</p><p>“A king is the symbol of a nation.”</p><p>“A king is the representative of his people.”</p><p>Row upon row of words about how a king should be. Yet the eyes in which these words are reflected showed no hint of admiration or discovery. The boy exhales in tedium; these things are already known to him. As a prince, he has been striving to develop all manner of wisdom in order that he might prepare for his future as a king.</p><p>“All these books say the same things.”</p><p>Annoyed, the prince closes the book and makes to return to his quarters.</p><p>When he reaches the exit, he notices that the guards all seem a bit more on-edge than normal.<br>Ah, yes,<br> he thinks.<br>The signing ceremony.<br> Today, his father was signing a trade agreement with a neighboring country, supplying them with clockwork soldiers in exchange for large amounts of their natural resources. The neighboring kingdom desired these clockwork soldiers greatly, for they were of small population and thus lacked in troops. But clockwork men who would fight eternally without grumble or pause were a breakthrough solution to this particular problem. And as for the prince’s kingdom, they needed natural resources to further their own research and development, much of which was dedicated to these very same clockwork soldiers.</p><p>His footsteps echo across the marble floor. The castle is large, and it is quite a distance to his chambers. He thinks about the ceremony as he greets another set of guards. Though he is a prince, he has yet to witness such an international affair for himself.</p><p>It would be good for me to know about such things.</p><p>Maybe I should take a quick peek and see what it’s like.</p><p>It can only benefit me in the future, after all.</p><p>Thus having rationalized it, he decides to walk past the drawing room where the ceremony is being held on the way back to his chambers.</p><p>The group from the neighboring country has already arrived, and there is quite a large crowd gathered. There are numerous guards from the prince’s kingdom, as well has ones from the opposing side. There are ministers and clerks and advisors and lawyers, and in the center of it all, the two kings. But then, at the edge of the crowd, the prince spies a young girl. She lifts the hem of her white skirt and curtseys at the room, seemingly at ease amidst all the murmuring adults. After gazing at her for a bit, realization finally dawns.</p><p>She’s the daughter of the other king—a princess.</p><p>He recalled what he just been reading in his book.</p><p>She is not a king herself, but she seems to understand how a royal family member should act.</p><p>As he stares, the prince reflects on his own position.<br>Will I ever be that confident? That composed?</p><p>As if sensing his attention, the princess suddenly turns around. He immediately hides his face behind the book in his hand, but it is a useless gesture. Before he knows it, the princess is approaching him. He tries to pull himself together and fails miserably, but the princess either doesn’t notice or doesn’t care. Instead, she stands right in front of him and says:</p><p>“You seem pretty weak for a prince.”</p><p>“Whaaa?” he responds. The prince immediately rejects his earlier thoughts.</p><p>She’s not acting like royalty at all—she’s just RUDE.</p><p>“Y-you’re the daughter of the king!” he stammers.</p><p>“You should be ashamed to treat a fellow royal in such a way!”</p><p>He thinks his argument came out rather well, all in all, but it is a wasted effort. The princess is wholly uninterested in what he has to say.</p><p>“Right, whatever. Listen…”</p><p>“<br>Whatever<br>!? What do you—“</p><p>The girl suddenly places a finger on his mouth, cutting off his argument. Her lips, which are the color of early spring blossoms, break into a smile as she says: “Want to go play?”<br>His gray eyes widen in bewilderment.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>The Flame Sparks Part 2<br>[<br>]</p><p>A bead of sweat drips down the prince’s white hair and down his ashen face.</p><p>“A-all right. But if we get in trouble, don’t blame me.”</p><p>The pair dodges their way through a web of security. Though the princess wanted to leave the castle entirely, the guards at the entrances were far too numerous—so they would have to content themselves with the castle courtyard.</p><p>“You see?” she says.</p><p>“Everything is fine. I’m a perfect angel when we’re on official business.”</p><p>Her eyes glow with an inner flame as she surreptitiously watches the guards, causing him to think she must be his complete opposite. And yet, he cannot deny the truth of her words. Tales of her flawless decorum had reached his ears as well. However, such tales often took the form of comments implying she was strangely unhuman—almost like a perfect doll. This is why the prince considered the meaning behind her attitude. Even if all of her famous good conduct was merely an act to impress foreign powers, why was she not acting like that now?</p><p>“That guard is such a nuisance. We need to get by him to get through here.” she growls.</p><p>“Well? What do YOU think we should do? You live here, after all.”</p><p>But the prince does not respond; he is staring down at his pocket watch, lost in thought. The princess grabs his wrist and pulls him close.</p><p>“Hey! Are you even LISTENING to me!?”</p><p>“Gya!” he cries.</p><p>“I’m sorry, I didn’t mean to… Um…”</p><p>The prince trails off; now it is his counterpart’s turn to be lost in thought.</p><p>“Oh,” she says, as another smile slowly emerges on her face.</p><p>“What a pretty watch…”</p><p>“There’s a banquet tonight, right?”</p><p>Her tone is high-pitched and playful, but there is a touch of something else creeping in around the edges.<br>She must mean the formal dinner after the signing ceremony.<br> Before he can respond, she continues:</p><p>“In that case, the castle will be heavily guarded all night. Which means<br>that<br> soldier must have a shift change coming up.”</p><p>Suddenly, the prince understands what she is driving at. But just because he understands, it doesn’t mean he likes it.</p><p>“He’s going to be anxious for his relief to come, which means he’s going to be staring at his watch.”</p><p>“And… you want to slip by while he’s distracted?”</p><p>The princess winks, clearly pleased that he’s finally caught up.</p><p>“Y-yeah, but it doesn’t matter if he’s looking at his watch, because he’ll hear us when we run past him.”</p><p>“Then we just have to run<br>quietly<br>. Right?”</p><p>“But…”</p><p>The princess turns away as he speaks, her mind already made up. As he trails off, she watches the soldier and waits for her moment.<br>There’s no reasoning with this girl. Words and logic are meaningless.</p><p>Suddenly, the princess tenses. The guard takes one hand off an automatic rifle and brings his wrist to his face. A yawn breaks out. Then another. It happens in a moment—not even ten seconds in all. But it is all the princess needs; she grabs her reluctant new friend by the scruff of his neck and makes a break for it. The two race down the corridor and out of the guard’s sight. The prince, feeling yanked in all directions, only prays his feet won’t betray him with a fall.</p><p>“Yesss!” cries the delighted princess as they come to the door that leads to the courtyard. The prince tries to slow his ragged breathing as the princess reaches for the handle…</p><p>And suddenly stops.</p><p>“What the hell?<br>Seriously<br>!?”</p><p>Windows line the courtyard, each with a guard behind it. Though they will be able to enter the outdoor area, they’ll have to move carefully to stay out of sight.</p><p>“Dammit! We can’t play like this!”</p><p>“Shhh! You’re too loud!”</p><p>In the end, they sit down in the shade of a shrub and use its leaves to stay out of sight. The rays of the midday sun cast their shadows on the grass, but it seems unlikely such a thing will be noticed. The princess mutters in discontent as she looks up at an opening in the courtyard roof.</p><p>“Well, this has been an extraordinary waste of effort.”</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>The Flame Sparks Part 3<br>[<br>]</p><p>The princess reaches down and plucks a handful of grass from the perfectly manicured green lawn. She stays silent, and the prince is too winded from their run to the courtyard to strike up a conversation. Perhaps out of pity for his weakened physical state, the princess seems willing to set aside her desires for play.</p><p>“Hey, so…” begins the prince.</p><p>“What did you want to do, anyway?”</p><p>“Huh? Oh, that.”</p><p>She places her hand on her forehead in a clear display of thinking—or perhaps she is only<br>pretending<br> to think—and responds with a sigh.</p><p>“I don’t know. I didn’t plan that far ahead.”</p><p>“So this was all a spur of the moment thing?”</p><p>“Yeah. I mean, I figured we’d come up with something.”</p><p>The prince laughs dryly.</p><p>I’m a sad, scrawny introvert who treasures careful thought, and she is a lighthearted dynamo who shoots from the hip. We couldn’t be more different.</p><p>Though the prince was worried their conversation would be stilted, it quickly proves to be anything but.</p><p>“You know, there’s stuff you can’t learn from books.”</p><p>“True. There are some things you cannot know without experiencing them yourself.”</p><p>“Oh, so you<br>do<br> know that! How delightful.”</p><p>“It has been especially true today.”</p><p>“Hee hee! And what does that mean, hmmm?”</p><p>The prince smiles with her.</p><p>“You are a rather strange princess.”</p><p>“And you are a very odd prince.”</p><p>Above them, a bird with black tail feathers chirps merrily away. The princess peers at the prince.</p><p>“So talk to me. You’ve studied lots of subjects, right?”</p><p>“I suppose?”</p><p>“Well, what kind of king do you want to be? What kind of country do you want to build?”</p><p>She stares at him, waiting for a response.</p><p>“Well, you have to promise not to laugh, but…”</p><p>He holds the book in front of his face again, as if to ward off her inevitable scorn.</p><p>“I want to make this a country without war.”</p><p>“There are many people in this world, and it is filled with so many wonderful things…”</p><p>“But I believe all of us working together could create even more wonderful things.”</p><p>“If everyone was working toward the same goals, no one would be harmed at the expense of another.”</p><p>“Anyway, um… That’s my wish.”</p><p>“So what about you?”</p><p>“Me? Hmmm…”</p><p>Before she can respond, a shrill ring interrupts them. It’s coming from the prince’s pocket.</p><p>“Sorry,” he says with a bow.</p><p>“It’s my father.”</p><p>The princess shrugs.</p><p>“Eh, don’t worry about it.”</p><p>He apologizes again before leaving their shady spot and bringing the communicator up to his ear.</p><p>The voice on the other end is most familiar.</p><p>“Where are you? What are you doing?”</p><p>“F-Father, I was just…”</p><p>The prince’s expression stiffens as his voice turns hoarse. He had tricked his own guards to reach an off-limits courtyard. He was cavorting about with the princess of a neighboring country. The truth would only lead to trouble. But his father was not a man who could be led astray with lies.</p><p>There’s no choice. You have to tell him.</p><p>You have to take responsibility for your actions.</p><p>“I am in the courtyard, Father.”</p><p>“Are you alone?”</p><p>His father’s tone is unemotional: a simple request for information. And that terrifies the prince.</p><p>“…No. The princess is here.”</p><p>As he squeezes out his answer, he doesn’t notice his new friend’s worried gaze from across the yard.</p><p>“I see.”</p><p>Father and son fall quiet—but the weight of that silence could not have been more different for the two.</p><p>He is furious with me. Punishment will be swift.<br> But the next thing he hears defies all expectations:</p><p>“Very well,”</p><p>The king pauses a moment.</p><p>“I’ll be there soon. The two of you stay put.”</p><p>The call ends as quickly as it began. When he returns, the princess peers at him worriedly.</p><p>“You okay there?”</p><p>“Er, yes,” he replies nervously. “Everything is fine.”</p><p>“So, um, what were we talking about again?”</p><p>His words couldn’t have sounded more hollow to his ear. But the princess makes no more mention of it.<br>“Oh, that? I dunno. I’ve totally forgotten.”</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>The Flame Sparks Part 4<br>[<br>]</p><p>“Hey, so…why did you invite me to play?”</p><p>This question has been on the prince’s mind. But his true concern is about the call from his father. Something about the instruction to stay put gnawed at him. Perhaps because he expected his father would be angry with him; regardless, he can’t help but feel something ominous about it. Across from him, the princess squirms.</p><p>“Um…”</p><p>“Well, see…”</p><p>Unlike her rapid-fire banter from earlier, she seemed to be choosing her words carefully.</p><p>“I think you probably feel the same way, but my circumstances are sort of…unique.”</p><p>She stares off into space as she talks, looking at nothing.</p><p>“My parents are always too busy for me—all the adults are.”</p><p>“The only other kid I ever see is the one in the mirror.”</p><p>“Maybe it would be different if I wasn’t an only child, but…”</p><p>“It’s just that, I’ve always felt like I had to act a certain way around other people, you know?”</p><p>Once she says that, she turns back to look at the prince. And he looks at her in return.</p><p>“That’s why I thought maybe I could find someone who—“</p><p>Her sentence would never be finished. It has been blotted out. He feels the shadow of his father. Smells the aroma of gunpowder. And stares at a white dress quickly turning red. It is too late to stop it. Military boots thunder around him. Her spring-blossom lips are as lush as ever. And he understands that his father’s men have shot the princess.</p><p>…He wishes he didn’t.</p><p>“Well done, my son.”</p><p>A low voice rumbles in his ears.</p><p>The soldiers lower their guns at the king’s approach. His face twists in a bitter scowl as he speaks.</p><p>“What a disgusting nation.”</p><p>“To think they would use a young girl in such a way. To think they would scheme to kidnap my own son!”</p><p>The prince sits absolutely still. Not a breath stirs.</p><p>“We shall have no agreements with such a country.”</p><p>The prince finds it hard to believe she could have had such plans. But he doesn’t have definite proof, and his father’s shadow now looms over his heart, chiding him.</p><p>“What could you possibly know about someone you’ve just met?” it seems to say.</p><p>“I could not leave this matter unattended,” continues the king.</p><p>“Dangerous buds must be quickly plucked.”</p><p>He turns to his men as if seeking agreement. The soldiers all nod heartily. At the sight, the prince feels both relief and a disturbing fear that seems to crawl across his body.</p><p>“Come, Rion. We must be off.”</p><p>Turning to leave, the king calls out to him.</p><p>“Y-yes, Father.”</p><p>He responds firmly, as if to push aside his jumbled thoughts. It was his father, the king of this country, who had spoken, which means it must be true.</p><p>You heard the stories. She was “strangely unhuman,” remember?</p><p>As he follows his father, clutching his book to his chest, he does all he can to convince himself.</p><p>The blood splashed across the cover drips onto his sleeves.</p><p>The next morning…</p><p>Clad in ceremonial dress, the prince stands before his people. His clothes speak his station to all the world. By wearing them, he plays a role as his country’s symbol. His legs quake as he stands on the platform. His father has given him a single order: “Tell the people of the fear you experienced.”</p><p>She had never scared him. Yet he has no choice but to say it. His own assassination has just been foiled…which is the perfect justification for war. His mouth, dry as a desert, struggles to form words.</p><p>“……”</p><p>He does not know what he is going to say. Perhaps she was an assassin. Perhaps she was innocent.<br>He does not know. But there is one thing he does know: His words will spark a war. With a shaking voice, he begins to tell his tale. A chill alights on his fingertips before spreading across his body. But he balls his hand into a fist and fights to ignore it.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>An Ashen Tomorrow, Part 1<br>[<br>]</p><p>The hush of night falls over the castle.</p><p>Unsteady footsteps and scraping metal echo through marble corridors.</p><p>A pallid face. A wheeze. Exhaustion.</p><p>The guards offer to help their liege as he walks, but he waves them off and leans heavier on his aged metal staff.</p><p>“I’m fine,” he insists. A clear lie.</p><p>More than anything, the boy simply wishes to be alone.</p><p>The illness which has long eaten away at his body has now begun to prey on his weakened heart.</p><p>His vision wavers. He takes an unsteady step, then another, cursing heavy feet that seem unconnected to his legs.</p><p>Every time he coughs, the scent of metal fills his head.</p><p>Yet he continues to walk alone.</p><p>He is the first prince of this nation.</p><p>But that is not how people know him.</p><p>The prince, kind to the point of simplicity, has long dreamed of seeing his land at peace.</p><p>Yet now, even that compassion seems to have vanished from his dimming gray eyes.</p><p>He finally arrives at his room. Lacking the strength to spark a lamp, he collapses in the dark.</p><p>As breath leaks from his withered body, he leans against a wall and lets his thoughts spin.</p><p>He thinks back on his day. On the battle.</p><p>As he was responsible for the spark that set off the war, he volunteered to lead on the front lines.</p><p>Wracked with guilt, he sought to bring the conflict to a peaceable conclusion as quickly as possible.</p><p>But the world does not turn on a child’s dreams alone.</p><p>War has taught him just how harsh reality can be—and just how soft he is.</p><p>Though he once yearned for a world at peace, he now understands such things to be the gibbering dream of a madman.</p><p>As he hangs his head in despair, he notices something on the floor.</p><p>It is a folded piece of paper.</p><p>Someone must have slipped it under the door.</p><p>After a brief moment of fear, he reaches out to take it.</p><p>It contains rows of numbers: dead and injured as a result of the most recent battle.</p><p>The moment it registers, tears blur his vision.</p><p>The number is<br>so<br> much larger than usual.</p><p>All those lives, gone. Vanished like smoke in the wind.</p><p>He thought he understood the weight of his sins.</p><p>Yet this new number causes his heart to creak anew.</p><p>The deaths, the numbers; they had always been something apart from himself.</p><p>Something vague. But this piece of paper makes them terribly real.</p><p>Thus, he blames himself.</p><p>His gaze rests sadly on the paper in his hands.</p><p>And then, a realization.</p><p>Someone wrote this for him.</p><p>In today’s battle, his brother attempted to take the prince’s life and put himself next in line for the throne.</p><p>In much the same manner, someone wrote this note to amplify his guilt—to point out how his hypocrisy comes at the greatest of costs.</p><p>And whoever believes this lurks in the shadows of the very castle he calls home.</p><p>“Perhaps wishing for peace is a mistake.</p><p>Perhaps his<br>life<br> is a mistake.”</p><p>His naivety led only to tragedy; every action he took and every belief he held dear has all been for naught.</p><p>As he sits alone in the dark, he hears the sounds of conversation from the corridor, and soon his shoulders begin to shake with quiet, maniacal laughter.</p><p>He can never return to the light again.</p><p>He locks the door and drags his heavy body to his desk.</p><p>He tears open the top drawer, causing his most precious possessions to clatter to the ground.</p><p>Among them is a knife with a wicked edge.</p><p>His clouded eyes gaze upon it. His hand hovers above it.</p><p>There is no point in any of this.</p><p>No point in his body. In his dreams.</p><p>They are things utterly without worth.</p><p>Perhaps the world would be better off without them.</p><p>A cold sensation settles over him, one that makes him feel not himself.</p><p>It is as if the warmth he once felt from his arm is now a thing separate from his body.</p><p>Or more accurately, one could say it felt as though its warmth was flowing out of him.</p><p>From some distant place, he ponders his own actions.</p><p>Drops fall from his arm, causing red splotches to slowly spread across the rug below.</p><p>It looks so much like what he saw that day.</p><p>The dreadful sight that set the entire affair in motion.</p><p>It is a memory that haunts him, and will continue to do so for the rest of his days.</p><p>He sits there throughout the long night, recalling the face of the girl who lost her life amidst the crimson smudges.</p><p>When the dawn’s light finally streams through a gap in the curtains, it finds the boy hunched over his desk, staring at his arm.<br>With a new day arrived, there is no choice but to carry on.<br>But in his red and muddled blackness, the brilliance of the day feels like pain.</p><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>An Ashen Tomorrow, Part 2<br>[<br>]</p><p>Peace is nothing more than a simple wish. A simple kindness.</p><p>Yet the price for that wish had been dear, with a great many lives lost in its name.</p><p>There will always be sacrifices in times of war. That is simply the way of things.</p><p>The boy remembers hearing those words, and they cut straight to the core of him.</p><p>Perhaps they were right<br>, he thinks to himself.<br>Perhaps I will never escape the horror of my sins.</p><p>He spent the entire night on the floor, wrapped in his pain.</p><p>As though he sought to punish himself.</p><p>The brilliant morning sun pouring through the window brings no light to his heart.</p><p>His body is still caked with blood and earth from the battlefield.</p><p>His bleary eyes reflect white curtains dancing in the wind. </p><p>He does not know why the window has been left open when he yearns only for darkness and respite.</p><p>When he approaches the window, the fluttering curtains agitate his spirit. But as he grasps them, he hears the sounds of argument from outside.</p><p>He cannot make out the words.</p><p>But in the tone he senses anger, as well as a deep sadness.</p><p>He peeks through the curtains in search of the speakers.</p><p>They are somewhere beyond the gate, out of sight.</p><p>The voices rise and fall, agitated. Someone is clearly in trouble.</p><p>Can he help? He forcibly clears the weight from his mind and begins moving to action, but then…</p><p>He hears an impossible voice.</p><p>A sound that should no longer exist in this world.</p><p>“You? Help? What a joke! You’ll only kill them like you do every time.”</p><p>A creeping sensation travels down his spine.</p><p>This cannot be.</p><p>Oh, but it is. He cannot mistake that voice for any other.</p><p>“I know you hear me.”</p><p>Salt in a wound.</p><p>There is a joy in her tone, the kind that comes from toying with another.</p><p>His throat and tongue go dry.</p><p>Despite the coolness of the morning, he begins to sweat.</p><p>It is a symbol of his inescapable past—a shadow that pushes him further into the dark.</p><p>He clenches his shaking hands and slowly turns around.</p><p>When he sees her, his head falls.</p><p>It is the princess from the neighboring nation.</p><p>She whose death sparked the flames of this war.</p><p>It was supposed to be a ceremony where their two countries entered an era of peace, but she was killed under the suspicion of plotting something nefarious.</p><p>The boy’s own father—the king—had ordered her death.</p><p>That is why she cannot be here.</p><p>This is a hallucination<br>, the boy tells himself as he presses his hands to his eyes.</p><p>Quiet footsteps echo through the silent room.<br>Tap. Tap. Tap.</p><p>The closer they get, the harder it is for him to breathe.</p><p>The princess comes to his side, then leans close to peer at his face.</p><p>“You’ve noticed. Haven’t you?”</p><p>Her small hand rests on his arm.</p><p>“Whenever you get involved in things, they end in unnecessary tragedy.</p><p>That’s why things turned out the way they did.”</p><p>As her quiet voice comes to a stop, she turns to look at the paper on his desk.</p><p>The paper. The number of souls sacrificed in his quest for peace. </p><p>Lives that should never have been lost.</p><p>He cannot bear to face her.</p><p>His mind is filled with images from the day of the ceremony.</p><p>White fabric stained red.</p><p>Light snuffed from eyes.</p><p>Soldiers killed the princess on the order of their king. And the reason for that order…</p><p>The boy reels.</p><p>What if he had turned down her invitation?</p><p>What if he had not accompanied her to the courtyard?</p><p>Her death lies on him.</p><p>His thoughtless actions had wrought unnecessary tragedy.</p><p>Nothing she said to him was wrong.</p><p>He knows it still holds true—even now.</p><p>Even if he ran from the room and dashed to the person in distress, he would not be able to save them.</p><p>His heedless actions bring only misfortune, twisting any shred of hope into despair.</p><p>Had he understood this in earlier days, perhaps he could have saved the princess.</p><p>As he continues to ask himself increasingly pointless questions, the strength in his body fades.</p><p>“I’m not blaming you, you know. So why carry this burden by yourself?</p><p>You would have been better off if you never got involved in the first place.”</p><p>Sweet whispers fill his ears—ones to which the boy has no answer.</p><p>Finally, he turns from her, placing a hand on the windowsill.</p><p>Outside, the argument continues.</p><p>But instead of helping, he pulls the window closed.</p><p>He will extend no hand. He will not permit himself to suffer that pain again.</p><p>He shuts the curtains, causing darkness to blanket the room once more.</p><p>He lies on the bed and closes his stiff eyes, as though trying to shut out the world.</p><p>Once, he made a vow.<br>As the boy who would one day ascend the throne, he vowed to create peace.<br>It was a goal he would never turn from, no matter what.<br>But now, for the first time in his life, he has turned his back on that dream.<br>For the first time in his life, he has turned his back on another.<br>And in so doing, he denies all that he was.<br>The boy who wished for peace has become the boy whose naive ideals bring about only grave misfortune.</p><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>An Ashen Tomorrow, Part 3<br>[<br>]</p><p>There comes a soft, timid knock at the door.</p><p>The sound brings consciousness back to the boy.</p><p>He slowly sits up on rumpled sheets.</p><p>Though his mind is hazy, he looks at the door. The knocking continues, meek yet persistent.</p><p>Finally, a voice calls out.</p><p>“How do you feel, sire? I hear you have been unwell.”</p><p>Were he his usual self, the boy would immediately open the door and feign a smile.</p><p>But now he finds himself unable to get up from bed. Unable to do more than stare at the door.</p><p>“Pretty words, but is he truly on your side?”</p><p>The princess stands next to his bed.</p><p>Her phantasmic eyes bore straight through him.</p><p>“Let me see your face, sire. Please. You must at least eat something.”</p><p>The voice is worried.</p><p>But the princess speaks over it.</p><p>“Do you really believe him?”</p><p>“Of course not.”</p><p>“No one in this castle worries for you.”</p><p>“Everyone thinks you’re a nuisance. Nothing more.”</p><p>The words of the princess are poison dripping through his ears.</p><p>As she says, he has no proof the voice behind the door does not wish him ill.</p><p>As he learned in battle, there are people plotting betrayal within these very walls.</p><p>He cannot trust anyone.</p><p>Not even his own blood, for his brother is clearly after his life.</p><p>He quiets his breathing and strains his ears.</p><p>At last the knocks stop. The sound of footsteps grows distant.</p><p>The silence in the room stings the boy’s ears.</p><p>The exhaustion that controls his entire being grows a bit lighter.</p><p>How long did he sleep? He gets up from his bed in search of an answer.</p><p>He blindly gropes about in the darkness, aiming for the curtained window.</p><p>His metal staff lies on the ground where he carelessly discarded it.</p><p>His foot catches it, causing him to stumble.</p><p>Momentum slams his body into a nearby wall.</p><p>He makes no cry. He simply sits on the ground, weakly rubbing his own back.</p><p>He no longer has the willpower to reach the window, nor the strength to return to bed.</p><p>Yet his fingers latch onto something odd.</p><p>The robust wall of the castle broke his fall, remaining unharmed by the impact.</p><p>But there is a small, yet obvious gap in the wall.</p><p>He knows there are hidden passages throughout the castle to be used in emergencies.</p><p>But he did not know there was one in his room.</p><p>Perhaps it had gone forgotten amidst the constant reconstruction.</p><p>He reaches out, drawn in by the inky darkness that extends beyond the gap.</p><p>It opens with a push, revealing a space wide enough for him to pass through.</p><p>Beyond is a never-ending hallway.</p><p>The walls are rotting, brittle enough to crumble under his touch.</p><p>Holes here and there speak of the vast expanse of time it has sat forgotten.</p><p>He senses<br>something<br> in the darkness—something that makes goosebumps crawl across his skin.</p><p>Yet he steps forward all the same.</p><p>An opaque shadow blankets him.</p><p>He feels suddenly defenseless. His steps grow unsteady.</p><p>A voice from behind offers caution:</p><p>“I wouldn’t do that if I were you.”</p><p>It comes from his room behind the wall, where the girl shows no intentions of joining him on his journey.</p><p>The prince turns back to the corridor and continues to walk.</p><p>He hears small objects scraping against one another from somewhere ahead.</p><p>He rubs his eyes and sees the darkness writhe.</p><p>But it is neither human nor beast.</p><p>When he finally sees what is coming, his breath catches in his chest.</p><p>Suddenly, a swarm of insects assails him from all directions.</p><p>They crawl across him, scratching at his skin.</p><p>Buzzing fills his ears. Stingers pierce his flesh.</p><p>Hundreds of legs carry dozens of bodies into his throat, and he utters a hapless cry.</p><p>Yet he continues on.</p><p>For he has seen the faint light of an exit beyond the swarm.</p><p>He uses every ounce of effort to move forward, tearing apart the darkened mass that weighs on him.</p><p>He seeks only the light, even though he knows not what it may be.</p><p>Finally, he batters his way through the horrifying torrent of insects and passes through the exit.<br>The moment the light touches them, they scuttle back into the gloom.<br>His vision opens up before him.<br>He has found what the rotting corridor led to.<br>The moment he lays eyes upon it, an odd sensation fills his heart.<br>For this is a place buried deep within his memory.</p><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>An Ashen Tomorrow, Part 4<br>[<br>]</p><p>A familiar scene waits beyond the corridor of writhing insects.</p><p>Moonlight floods the room through a small window near the ceiling.</p><p>The furnishings are similar to the prince’s own room.</p><p>But they have sat here untouched and forgotten for an age, and are now covered in a thick layer of dust.</p><p>Yet somehow, he knows this place.</p><p>In the distant past, he once knew the moonlight pooling through that little window.</p><p>He once knew how the edges of everything glittered in the lamplight.</p><p>He remembers.</p><p>Seeking answers, he reaches out and takes a photograph off the desk.</p><p>A shaking finger lightly skims the glass, revealing a faded image of a smile long since lost.</p><p>This is the queen’s bedroom. His mother’s bedroom.</p><p>It had been built behind his own.</p><p>After her death, it was sealed up and locked away; the castle staff did not even come here to clean.</p><p>Sitting atop the small desk is an empty glass, a fountain pen, and a bottle of ink that was never put away.</p><p>His mother’s life remains here, frozen in time. It feels as though she was present mere moments ago.</p><p>The boy gazes fondly on the chair as he slowly runs his hand across its back.</p><p>A moment later, his eye catches a discolored piece of paper.</p><p>It rests on the edge of the desk, as if it was meant to be concealed and then forgotten.</p><p>He takes it in his hand.</p><p>The writing is gentle, just as it is in his memory.</p><p>It is his mother’s hand.</p><p>Written before she passed from illness, the letter never found its intended recipient, and was lost to time along with her room.</p><p>Guilt washes over him in waves.</p><p>The letter sat here long enough for the color to change, yet he never found it.</p><p>Now that he has, he feels obligated to deliver it.</p><p>He looks for the name of the addressee and is shocked to see his own.</p><p>The letter is an apology.</p><p>His mother apologizes for shouldering him with the heavy burden of being first in line for the throne.</p><p>She apologizes for passing to him a weak constitution that makes him more susceptible to illness.</p><p>The more he reads, the more his joy turns to despair.</p><p>The letter serves as proof of the pain he caused his mother.</p><p>If only he had not found the hidden passageway.</p><p>If only he had never ventured down it.</p><p>His thoughtless actions have once again wrought unnecessary tragedy.</p><p>The cruel words of the princess begin to ring out again in his mind.</p><p>Determined to read no more, the prince moves to place the letter back on the desk.</p><p>But then he notices a second page, one folded perfectly in with the first.</p><p>Though he does not want more hurt, he yearns to know what else his mother said.</p><p>He carefully peels the second page from the first and begins to read.</p><p>But it is<br> because<br>I know weakness and pain that I have the strength to provide company to others.</p><p>No one can avoid hardship. Many cannot bear through it, and ultimately lose heart.</p><p>But…</p><p>Finding someone who understands their pain is the help they need to carry on to another tomorrow.</p><p>If ever you see someone hurting, I pray you might go to them and be that understanding ear.</p><p>You may even lose heart yourself.</p><p>But if that ever happens, someone you have aided in their time of need will do the same for you.</p><p>I gave you your name in the belief you will find blessings and hope in your path.</p><p>After all, what name could inspire more hope for the future than one that means “tomorrow”?</p><p>The boy’s eyes snap open to reveal a familiar ceiling.</p><p>He feels as though someone just called his name.</p><p>He looks around, confused. Once again, he has collapsed on the floor of his room.</p><p>A strange feeling overcomes him, and he hurriedly climbs to his feet.</p><p>The spiteful image of the princess is nowhere to be seen.</p><p>The knife wound on his arm is gone.</p><p>Perhaps it had all been a dream?</p><p>In which case…</p><p>Once on his feet, he goes to the spot in the wall where he found the hidden passageway.</p><p>It has clearly been moved recently.</p><p>But no matter how hard he pushes, the door does not open.</p><p>He knows not what is dream and what is reality.</p><p>But there is an invigorated feeling in his heart.</p><p>He feels a breeze on his cheek; the window has been left open.</p><p>He remembers now.</p><p>People were arguing outside. Was that real?</p><p>He is yet to forgive himself for his own mistakes. His own failures.</p><p>But if he were to lose heart over that and give up on others, he would ever remain a failure.</p><p>So if the arguing is real, he knows what he must do.</p><p>He picks up his staff, unlocks the door, and moves boldly into the outside world.<br>The white curtains flutter in the breeze, as though seeing him off.</p><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: The Wolf’s Gaze<br>[<br>]</p><p>Silver dashed through the snow-powdered wood, chasing down prey so she might feed her hungry children.</p><p>How old was I when I first read this book?</p><p>I’m looking at a picture book about a wolf who takes in abandoned human children, giving a kind of home to the otherwise helpless creatures. I loved it as a child, and found myself reading it over and over again.</p><p>Why am I reading this book now?</p><p>The wolf’s skills grew sharper with age. Her eyes were ice, her claws razors. The rocky, snowy terrain posed no hazard for her, and within moments, she had a single rabbit wedged between her teeth.</p><p>Where does this book take place?</p><p>Though the wolf was powerful, she was also kind. In the beginning, it troubled her how the children wailed without pause and refused the meat she provided, but her spirit never broke. She began to skin the rabbits, cutting their flesh into tiny pieces before chewing it and presenting the results to her changeling pups. And after some time, human and animal slowly came to understand one another.</p><p>That’s what this picture book was about.</p><p>I keep reading the book, but still don’t understand what’s going on. Then a voice from behind me, sudden. I begin to turn around, hoping to find the source, when it dawns on me:</p><p>Oh. Right. I’m dreaming.</p><p>My mother had departed the world when I was young, but at this moment, she’s talking to me. Looking at me with her soft, kind eyes.</p><p>That’s right. We read it together.</p><p>Why did it take me so long to realize this was a dream?</p><p>At the end of this book, humans kill the wolf in an attempt to protect the children. The same creatures who abandoned their own offspring in the woods hunt down and kill the beast that attempts to care for them. They hold the children at bay as they reach for her, and sing praises for justice as they slaughter the passive animal.</p><p>This part always bothered me when I was young. I’d been unable to accept it, and remember asking my mother why the wolf didn’t fight back when she had been in the right. “I suppose that’s just how mothers are,” she replied after a moment of thought. I didn’t understand back then—in fact, her response made me angry. But when my mother saw my reaction, she only smiled.</p><p>I have been dreaming.</p><p>I have been dreaming of memories long past.</p><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: Eye and Steel<br>[<br>]</p><p>I am dreaming.</p><p>I am dreaming of the day my mother and my younger self were reading a book together, and my heart quivers as I see her for the first time in many, many years.</p><p>No, that’s not true. I kept her picture with me—the old news clipping that reported the queen’s death.</p><p>When I was exiled, I had no time to gather photographs or keepsakes—there was time only to run. But I happened across the clipping while making my escape and snatched it up, and it has never left my side since.</p><p>The woman in the photograph, however, is not the mother I knew so well. I do not see her gentle smile or her kind eyes—I see only the regality of a queen. Yet even knowing this—and knowing I am in a dream—I desire to speak with her above all else. But despite my fervent wish, my mother’s face shifts like smoke in the dusk, and the closer I tried to study her, the hazier her visage becomes.</p><p>The next thing I know, I am standing in a different place: a hallway filled with the acrid tang of metal and cordite.</p><p>There is something strange about the way I am viewing the world, and after a moment I realize my eye level is different than it had been. I am taller now, viewing a memory of a different time.</p><p>I look around and take in my surroundings. Before me stands a great window filled with massive panes of glass; beyond are row upon row of guns belonging to the clockwork soldiers. They resemble human arms, and the way they are spaced equally apart disturbs me in a way I cannot easily explain.</p><p>Beside me, another figure observes the laboratory. It is none other than my father—the king of our country.</p><p>Ah. I see now. This is the day we visited the clockwork laboratory.</p><p>One after the other, the metal arms let fly a bullet. Each time, the researchers write something down, fiddle with this or that, then reload and repeat the experiment. It is what my father calls “fire-control systems research,” and I find it equal parts fascinating and horrifying.</p><p>I spent more time with Father after Mother passed. I wonder what he had thought about that?</p><p>My father was never much of a talker, but I don’t recall him uttering a single word about my mother’s death. The question of why this is sits quietly in my mind as we stand in the laboratory, but eventually I find myself inquiring about another matter:</p><p>“Why did we start conducting research into clockwork soldiers, Father?”</p><p>I don’t really care about this matter. I just want to talk about something,<br>anything.<br> I want to hear my father speak, because if he does, maybe it will lessen the gnawing fear of him that sits eternally in my heart. But his answer only strokes the flame of my disconcert:</p><p>“One’s superiors do not often give their answers,” he says. “I am superior to all—including you—yet one day this crown will lie upon your brow. Perhaps I will hear your thoughts of this matter at some point.”</p><p>Without waiting for a reply, my father turns on a heel and departs.</p><p>But can I follow him?</p><p>Do I even have the right?</p><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: Dark Eyes<br>[<br>]</p><p>I dreamt of my past: memories of my mother, recollections of my father.</p><p>Rarely did I dream after I left on my journey; days of my childhood, images that paid me a visit for the first time in many years, were enough to fill me with nostalgia. The sensation was so powerful, the time back then so different from now, that it almost caused me to raise whines of misery.</p><p>I wondered if what my mother said to me back then was true.</p><p>I wondered what my father was thinking about when he spoke to me that day.</p><p>As the questions from my dream arose, the sight before me warped once again. Heaven and earth flipped; light and shadow melded.</p><p>Would these be memories of another time?</p><p>The next thing I know, I’m standing in a run-down shack. Before me I see someone’s back, one I am familiar with. I know right away what this is—I am in the process of repairing his clockwork body.</p><p>“I am sorry, my prince.”</p><p>There is a slight crackle to the voice I hear from over his shoulder—dust must have gotten into his sound box.</p><p>But it’s my fault that he was injured. My symptoms had gotten worse, and he had taken a blow meant for me instead. I couldn’t fault him for that. I tell him that I should be the one apologizing, but he shoots me down. He is so kind to me, and that’s why…</p><p>…That’s why I’d been wondering this whole time if I’m just a burden to him.</p><p>He supports me, and so is doing all he can to help stop the war. He is powerful, yet gentle—I always wonder if there had been a different, more effective path that he could take to make my vision a reality.</p><p>All I can do for him is repair his clockwork mechanisms. And if I were ever to teach someone else how to do it, then he would have no more use for me.</p><p>The unease bubbles within me and I give it voice: “Should you really be accompanying me on my journey, for the sake of my dreams?”</p><p>He falls silent, shocked. Terrified of the quiet, I immediately apologize, but the silence still hangs heavy over us.</p><p>He says nothing. Nervous, I lean over and peer at him…to find that his eyes had gone dark and still, his operations ceased.</p><p>My unusual question had caused an error in his operations that day.</p><p>I reprimanded myself: I shouldn’t bring these sort of things up during repairs, and frantically returned to my work.</p><p>And so, I never heard what his answer had been to my question.</p><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: Closed Eyes<br>[<br>]</p><p>Dreams come to me, one after the next. I dream of life when I was young, of things that have recently happened—all of them moments important to me. And yet, why do I dream of such things<br>now<br>?</p><p>Pain steals my consciousness, wiping away my thoughts. The sights before me slowly fade away. Now I understand: I’m waking up.</p><p>I slowly lift my eyelids, but can no longer sit up. In fact, I can scarcely move. The pain is a weight that shackles me to this place. I had forgotten all about these things in my dreams: the ruined church, the illness that prevents me from moving. Ah, if only it<br>was<br> a dream.</p><p>Though my eyes can barely focus, I see a figure move. The brim of his hat is wide and round, and he peers at me with worry. It is clear he has been watching over me even as I dreamed. I want to speak to him, but my strained throat can produce nothing but a harsh rasp. It seems our days of long, fulfilling chats are now over.</p><p>As I tense, he lifts me into his arms and sets me down atop an old, weathered pew. My body relaxes as I sink into it. It’s much easier to breathe here than when I’m leaning against the wall, and I’m so relaxed I have trouble keeping myself awake. Yet despite my newfound ease, I am still unable to produce any kind of sound.</p><p>Suddenly, a thought enters my mind, as true thing as I have ever experienced: If I close my eyes now, they will never open again. And so I muster all of my strength to force out a sound. I have to speak to him. I<br>must<br>.</p><p>He has traveled with me across land and time.</p><p>He is my best friend.</p><p>And this is the end.</p><p>“Thank you”</p><p>“I’m sorry.”</p><p>At last, I manage four meager words. He initially tries stop me as I desperately reach for my voice, but then falls into silent thought. Finally, after a long pause, he says:</p><p>“—“</p><p>Alas, my ears can no longer hear his words. But strangely, I know his message regardless.</p><p>Thank you,<br> I say to myself.</p><p>Thank you,<br> I say, repeating the words over and over in my mind like a mantra until sleep finally steals up and claims me.</p><p>In the end, my dreams never came true; I was not powerful enough to end our endless wars. And yet, there were people who stood by my ideals. Not many, of course, but some of them eventually agreed to form a third party that could act as mediators for various warring nations. They were small in scope, and it would be a long while before they had the pull to bring negotiations to other countries. But I had lit the spark. And hopefully, that spark would one day burn brighter than any fire of war and bring peace to the world.</p><p>I want to believe this. For the sake of all those days I spent traveling with him, I want to believe it more than anything.</p><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>Throne in the Sky<br>[<br>]</p><p>Oh, you want to know more about him?</p><p>He was born the eldest son and first prince of a royal family. When he was young, his father started a war, but he was a kind boy who found this hard to accept. I hear he wanted to preserve peace for the people, so he turned his back on his country. Isn’t it nice he got to choose a life for himself?</p><p>Sadly, he took after his sickly mother. His physical condition—coupled with his kind, pacifist disposition—made him unpopular with ministers, soldiers, and his own father. Even the citizens occasionally besmirched him, asking him to stop blindly believing in the good of people’s hearts.</p><p>But even with all that, Mama thinks his thoughts and words saved a great many people. If he ever became king… No. It’s<br>because<br> he never became a king that he was who he was.</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>Kingship<br>[<br>]</p><p>My son was born today—our first child. Under normal circumstances, the emergence of the nation’s new prince would have been welcome news. But right after the birth, both mother and boy were taken to the medical facility.</p><p>Knowing they are in danger of losing their lives reminds me how fortunate they are to even draw breath, for the burden birth places on the body has claimed countless lives. Yet she understood this, which is why she gave me the throne that day.</p><p>And yet, I cannot help but think on how she paid a great price for our child. How was he going to live? What would he bring to this country?</p><p>I looked at his face before they were taken away. The way she smiled at me, in both pain and joy, would not permit me to dismiss such thoughts.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>Voice Memo: ff7119<br>[<br>]</p><p>[Sounds of a campfire]</p><p>“So whatcha think of that prince?”</p><p>“You mean the philanthropist kid?”</p><p>“Yeah. Him. Whenever he opens his mouth, all of these sweet little ideas come pouring out—ideas almost as sweet as his face. A world without war? Ha! Easy for him to say.”</p><p>[Sounds of silverware being thrown]</p><p>“Kid’s heart’s in the right place, but he don’t understand<br>reality<br>. Got no interest in risking my ass for a general like that.”</p><p>“How the hell are we supposed to feed ourselves in a world with no war, anyway?”</p><p>“Right? Who’s gonna hire a couple’a old farts like us that only know how to fight?”</p><p>[Laughter]</p><p>[END RECORDING]</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>Little Brother<br>[<br>]</p><p>When I coughed at the ceremony this morning, my younger brother gently rubbed my back. Father didn’t even try to hide his annoyance.</p><p>That brother—the second prince—is the only one who bothers to show me kindness. Of all us brothers, I am the only one with a different mother. Though the eldest, I am sickly, which makes me seem terribly unreliable. Yet here I am, next in line for the throne—and I cannot imagine my younger brothers being happy with the prospect.</p><p>But I will not give up, for how I can I hope to eliminate war among nations if I cannot resolve quarrels among brothers?</p><p>My first task is to become closer to the second prince—he who treats me most favorably. I feel certain he will listen to my ideas.</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><pre><code class="hljs">              </code></pre><p>To the Young Leader<br>[<br>]</p><p>Forgive me for writing you a lousy goodbye letter on the day you leave. I would’ve gone to see you off in person if it weren’t for this damn job.</p><p>I wanted to talk to you about the formation of a neutral organization to address international warfare. I’m sorry my country couldn’t work with you; what power I do have holds little sway over people at the top of the food chain.</p><p>I know this doesn’t make up for things, but I pulled some strings to secure the medicine enclosed in this letter. It helps with coughs, heart palpitations, and chest pains, and while it’s not a cure, it should at least make things a little easier for you. I’m sorry this is all I can do, but I really hope it helps.</p><p>On a side note, I want you to know how much you motivate me. You’re younger than I am, yet you work twice as hard—so I’m going to take a page from that book and do what I can to earn more power within my own parliament!</p><p>I’m really looking forward to the day we can sit down and talk about the future together. Until then.</p><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2><pre><code class="hljs">              </code></pre><p>Recording 93a6ab<br>[<br>]</p><p>“Yeah, that kid in the old church? I think he died.”</p><p>[BACKGROUND TAVERN CHATTER]</p><p>“You mean that kid you went out to check on that one time? I got a real kick outta that, by the way—look at you, actin’ like some kinda saint.”</p><p>“Yeah, that’s the one. I haven’t seen that dude who used to bring him food every day, either. Considering the kid’s state, I’m betting he didn’t just get better and move on.”</p><p>[ICE CLINKING AGAINST GLASS]</p><p>“Rumors say he’s the prince who was exiled from the kingdom.”</p><p>“Hard to know considering how gaunt his face was, but I guess he looked similar—and if it<br>is<br> him, he’ll likely be carrying valuables. Probably wouldn’t be hard to secure, given his condition.”</p><p>“…Well, let’s find out.”</p><p>[GLASS CLINKING AGAINST GLASS]</p><p>[END OF RECORDING]</p>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:10H_(Reincarnation)</title>
    <link href="/2024/03/07/10H_(Reincarnation)/"/>
    <url>/2024/03/07/10H_(Reincarnation)/</url>
    
    <content type="html"><![CDATA[<h1 id="10H-Reincarnation"><a href="#10H-Reincarnation" class="headerlink" title="10H_(Reincarnation)"></a>10H_(Reincarnation)</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>Another meaningless day dawns. I remain confined to a distant base in anticipation of an emergency that will never happen. Almost 365 days have passed since I was stationed here. In a futile attempt to stave off my boredom, I fiddle with the fake red flowers Pod gave me to celebrate the occasion.</p><p>I’m sick to death of being bored. Isn’t there anything fun to do? I grumble, drowning in my excess of time. Pod then makes an irritated gesture and reluctantly shows me some data.</p><p>It’s data I’ve never seen before in my work. Rather than rows of numbers, it’s packets of natural speech. As I debate internally on whether or not to read into the data, Pod begins to slowly read the data aloud in a gentle voice. To my surprise, it’s a tale of the human world.</p><p>A story of a<br> and his<br>. Together, amidst the fires of war, they travel to meet those who have been harmed. So humans weren’t born solely to wage war. It’s the first time I feel any interest in learning about humanity, and it was enough to bring color to my dull life.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>My days in this distant base were meaningless and dull, but Pod’s stories transformed that boredom into elation. My appetite for stories whetted, I ask for more. But Pod says to me, “Maybe another day.”<br>, I think to myself,<br>.</p><p>Making sure Pod doesn’t notice, I search for the source of these stories and hack into the server where information on humanity is kept. Just as I expected, I find a number of stories. Bingo! Stingy little Pod… I mutter as I lose myself in the data.</p><p>Before long, I find myself going back to the story about the boy. I want to read it for myself. However… I find that quite a bit differs from what was read to me. Or rather, the story itself is… The words are…changing… Dancing.</p><p>If I sound the alarm, Pod will find out my secret. But I want to save the boy’s story. Without further hesitation, I call Pod over. If it’s angry with me, then so be it.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>Let’s quit our traveling. We’ll never stop this war… The boy huddles in a shed. His attendant pats his back to comfort him. Pod and I jump into the overwritten story and gaze at the changed boy and his attendant.</p><p>Is this really him? He seems like a different person… The boy gave up on his journey. The story data is corrupted. A little black bird sits perched on his shoulder. We conclude that the bird is the source of the corruption.</p><p>We quietly approach the boy from behind and shoo the bird away. But the boy remains withdrawn. Contrary to our expectations, nothing changes.</p><p>Analysis: We…may have been too late, Pod says. The story may be contaminated to its very core. I ask how we can fix it, but Pod says there’s nothing we can do. It’s a hopeless situation. But I refuse to give up.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>The tale of a sweet, but short-lived boy… The first story Pod ever read to me. It’s impossible to repair the corrupted story data, and so I decide…that simply means I’ll have to rewrite it myself from scratch.</p><p>I rely on my memory alone to manually repair the story. Along with Pod’s assistance, I slowly but surely rebuild the boy’s life. And at last…the story is complete. All that’s left is overwriting the old story with the new, completed one.</p><p>With a sigh of relief, a question comes to me: why would a mere story be saved so deep, under so many layers? It’s almost as though humanity’s memories themselves are being carefully protected… A thought akin to fantasy crosses my mind. “Pod?” But in that moment, a bright red flower bursts a hole through my chest.</p><p>I’m s※○△y—I did not want you to r□○□○ze the tr□□□. I will be fighting the black ※※※※※ on my own ※○w. I turn around to see P※□ in the ○△※ with its weapon. From the □□□□ in my chest s※○lls my □※△○※ies of Pod, all of the stories… I must…gather them…</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Yuzuki</title>
    <link href="/2024/03/07/Yuzuki/"/>
    <url>/2024/03/07/Yuzuki/</url>
    
    <content type="html"><![CDATA[<h1 id="Yuzuki"><a href="#Yuzuki" class="headerlink" title="Yuzuki"></a>Yuzuki</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>It happened when I started elementary school.</p><p>I used to come home crying every day. I was extremely shy, and my classmates saw that weakness and took to bullying me. I’d try to wipe the tears away and put on a brave face, but Mom always knew. She’d ask if something happened, and I would just nod. She never said anything else; she’d just sit there and quietly stroke my hair.</p><p>I remember moonlight pouring in through a window. I used to lie in her bed while she sang me a lullaby. I don’t remember the words exactly, but it went something like this:</p><p>“Though the moon stands alone in the night sky, its gentle light shows the way for everyone else.”</p><p>Part of my name means “moon”—Mom apparently named me after the lullaby. She wanted me to be the kind of person who helped others.</p><p>Even if no one sought me out specifically.</p><p>Even if I didn’t fit in.</p><p>The moment she told me this, I swore to become the moon.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>I was shy as ever when I started middle school.</p><p>Everyone else could just strike up conversations with perfect strangers, and they all had tons of new friends within the first week. I couldn’t begin to fathom how their brains worked. But I was used to being alone.</p><p>Around that time, I saw a boy in glasses being bullied in a secluded staircase. The bullying was typical—even cliche. Like something you’d see in a bad movie. The timid boy was surrounded by a group of larger classmates. They were pushing him around. Demanding his money. It was painful to watch.</p><p>The boy in glasses eventually pulled out a thousand-yen note from his wallet. But the moment he did, a bucket of water came crashing over the bullies’ heads. They were soaked from head to foot.</p><p>“We’ll get you for this!” they shouted as they ran away.</p><p>It was me, of course. I’m the one who threw the water. And then I watched as they scurried up the stairs and escaped to the floor above.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>After I helped the boy in glasses escape his tormentors, I was reminded of Mom’s lullaby.</p><p>Maybe I really<br> help others.</p><p>After that, I made a point of stopping bullying whenever I saw it.</p><p>Like that day in science class…</p><p>When the classroom skeleton with limbs attached to string suddenly started dancing.</p><p>Or the day on the landing…</p><p>Where a wave of ping pong balls came clattering down the stairs.</p><p>Each time, the bullies ran away howling with their tails between their legs. I loved seeing that; it was such a hilarious contrast to their usual invincible air. But the last time I stood there laughing as the bullies scattered, I heard a voice behind me:</p><p>“Was that you?”</p><p>It was the boy in glasses. Though I’d helped him from the shadows again and again, that was the first time he’d spoken to me. Unsure what to say in response, I could only bring myself to nod.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>That day, the hum of cicadas provided a comforting background noise as the sun set over the school. I stood waiting at the gates. The boy with glasses had asked me to walk home with him. When was the last time I left school with someone else?</p><p>Brilliant orange light reflected off the windows of skyscrapers as we made our way home. We walked in perfect silence. Honestly, I had no idea what to say. But though I felt somewhat lost, I also felt a strange sense of comfort.</p><p>We passed through the busy part of town and came to an empty street. When we did, the boy with glasses finally spoke:</p><p>“Please don’t bother me anymore. Things are easier when I’m being bullied. I don’t want to be a loner like you.”</p><p>We parted ways after that, and I took my usual route home. The moon shone lonely against the pitch-black curtain of night.</p><p>I stared at the sky the entire way home. The sharp edges of the beautiful moon blurring beneath my tears.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Moonlit Solitude, Part 1<br>[<br>]</p><p>Divergent Phenomena: Record 202809</p><p>The city is an empty gray expanse.</p><p>A uniformed group marches through the rubble-strewn streets—a 20-person platoon dispatched by the organization. One boy—quiet by nature—walks behind the rest. His eyes suddenly drop to his feet, and what he sees there steals his words away.</p><p>White powder is strewn over the pavement, blown here and there in the wind. It is salt. But this is no ordinary mineral; this has come from human corpses.<br>White chlorination syndrome<br>. Those afflicted by the disease find their fate in one of two ways.</p><p>One: Their bodies turn to salt and they die.</p><p>Two: They lose themselves and become monsters called<br>Legion<br>.</p><p>The quiet boy makes a sound then: a small yip. In an attempt to avoid the blowing salt, he has lost his footing. But he does not hit the ground. A uniformed girl behind him grabs his arm, effortlessly keeping him upright.</p><p>Shocked by her strength, he opens his mouth to thank her. But her mouth widens in a mischievous grin, her crooked teeth on full display.</p><p>“You tripped on nothing there, man! Goddamn, you really are the Feeble Kid.”</p><p>The boy draws a breath to reply, but finds himself too intimidated to speak.</p><p>“Cut it out,” says another girl as she twirls her red hair with a finger. “Us rejects need to get along.”</p><p>The girl with crooked teeth turns her savage gaze towards the redhead.</p><p>“Who you calling a reject?”</p><p>“You. Me. All of us. Haven’t you noticed? This platoon is made up of underachievers.”</p><p>She speaks the truth. The platoon is comprised entirely of rejects. This mission is their last chance to remain with the<br>organization<br>. But the girl with crooked teeth does not accept this.</p><p>“I bet the people up top are worried about the reject platoon, so they stuck me here as insurance.”</p><p>The platoon’s mission is to venture into an unexplored area and find a specific individual. Said individual is a researcher. Eyewitnesses claim that though he is afflicted with white chlorination syndrome, he retains his mental faculties. They must find this man. If they do not, the platoon will be out of chances.</p><p>“Hey, c’mon,” says a small boy with uneasy eyes. “Stop fighting.”</p><p>This boy knows the girls will argue forever unless he intervenes. His voice is nasally. His eyes twitch. He is the very picture of a coward. The girl bears her crooked teeth at the cowardly boy and hisses, sending him scuttling away.</p><p>The quiet boy gives the rowdy trio a sidelong glance. Sighing, he turns his gaze to the sky and examines the gloomy violet cloud that hangs low over the city.</p><p>It’s coming.</p><p>He knows this. He has known it since they first set foot in the city two hours and forty-two minutes ago. Rain is on the way, a torrential downpour with lightning, wind, and fury.</p><p>The quiet boy hoped conditions would improve, but it is not to be.</p><p>“Guys?” he says. If a storm is incoming, they need to change their route. But no one replies. Instead, they come to a sudden halt and fix their eyes on a spot. Color slowly drains from their faces.</p><p>“Legion,” whispers a platoon member. Their voice is despair. A skyscraper stands on the edge of collapse, its metal frame bared to the open air. And behind it, Legion. This is the fate of a person who becomes infected with white chlorination syndrome and loses control.</p><p>Its outer shell is hardened bone—a cross between an insect and a crustacean. And it is easily over 130 feet tall. Fear and bewilderment race through the platoon; they had no warning so massive an enemy might be waiting for them.</p><p>Humans of flesh and blood—and rejects at that—stand no hope against it. It is so unreal, the platoon has trouble accepting it. The Legion slowly turns to look at them. Time is short, now. As a single screaming mass, they turn and run into a nearby ruin of a building.</p><p>Behind them, the monster’s howl causes their ears to bleed. The building in which they sought shelter shudders, scarcely holding together. The Legion is attempting to smash the building and everyone inside it. The platoon members shudder in terror, their minds threatening to break at any moment. All except the quiet boy. His breaths alone remain measured. Steady. Calm.</p><p>He stares out the window and thinks. Beyond the shattered glass, small droplets of rain quickly turn into a torrential downpour. Flashes of lightning illuminate gray clouds, followed by thunder nearly as loud as the Legion’s howl.</p><p>Suddenly, realization strikes. He knows how they can escape—and more than that, how his platoon of rejects can defeat the Legion outside.</p><p>“I have an idea,” he says. The cold steel in his voice instantly stills the panic rippling through his fellows.</p><p>Prompted by their gazes, he begins to explain. He tells them how they can get out of this despair. About his one-in-a-million bet. The platoon hesitates at first, but they eventually realize it is the only hope they have. At least it’s better than waiting for death.</p><p>The quiet boy runs up a set of collapsing stairs to the roof and looks down over the city. Positioning himself somewhere with a clear view of the city below, he begins issuing orders that he hopes will get the Legion’s attention.</p><p>First up is the cowardly boy, who bursts from the building and begins to run. He is the swiftest of their group. He is the lure for the Legion. The bait. His fellows make sure the path is open for him. The girl with crooked teeth uses superhuman strength to remove piles of rubble, creating the shortest route to the target location. The rest of the platoon helps as best they can, clearing a path for the boy as he races past.</p><p>The Legion lumbers after him, growing ever closer. But just as it is ready to reach down and rend the cowardly boy in two…</p><p>“Hey, dummy! Up here!”</p><p>The redheaded girl’s voice echoes around the ruined city. From atop a nearby roof, she fires a bullet that knocks the Legion’s hand away.</p><p>Every member of the platoon knows what they must do, and they give their all to the effort. All is going according to plan. Because the quiet boy understands the strengths of his reject platoon. Finally, coward and monster arrive at a suspension bridge on the verge of collapse. A gaping hole yawns beneath it.</p><p>Aging wires extend from worn-out towers, barely holding up the bridge deck as it sways in the storm. The bridge groans as the massive creature steps upon it. A flash of lightning streaks across the sky, covering the empty city in blinding white light. The entire platoon looks up as if in prayer.</p><p>A loud rumble rips apart the sky. Lightning has struck the bridge’s supporting tower. Wires twist and snap as the deck begins to give way. The cowardly boy dashes across the undulating surface and leaps to safety. But the Legion is not so coordinated, and it stumbles to the side.</p><p>As it does, the bridge finally gives way, plunging stone and wire and beast down into the abyss. It wails as it falls, giving voice to madness. Though it is unlikely to be dead, the Legion will not be crawling up anytime soon. The platoon rejoices at the quiet boy’s brilliance.</p><p>He knew lightning always strikes the highest point. So he had them lead the Legion to the bridge in the hopes a bolt might strike one of the towers. It was not so much a strategy as a last gasp—yet when he proposed the idea, everyone trusted him completely. There are no casualties. The reject platoon lives on. And in that moment, they all begin to praise their newfound savior.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Moonlit Solitude, Part 2<br>[<br>]</p><p>A platoon of rejects has been given a mission.</p><p>They are to find a researcher who is afflicted with white chlorination syndrome, yet retains his faculties. On the way, an unexpected enemy appeared: a monster known as Legion. But they worked together to overcome the threat.</p><p>…Or so they thought.</p><p>“Come in! I repeat, come in. Do you copy? Over!”</p><p>The quiet boy stands atop a skyscraper. He speaks into his wireless communication device and attempts to issue orders. Yet the only responses he receives are the death throes of his platoonmates. They are the last thing he hears before communications cut off entirely. They avoided one Legion threat, but a total of six were lurking in the area.</p><p>The quiet boy has strategic prowess. His companions have hidden powers. Yet a mere twenty of them cannot hope to take out multiple Legion. They requested backup from the organization, but none is coming. They are cornered now. Trapped. Doomed to annihilation.</p><p>He hears his companions screaming for help before Legion howls drown them out. Unsure what to do, the boy stands frozen. He prays this hell might pass him by.</p><p>A sudden quiet descends like a hammer. The rampaging Legion go silent. Then they whirl about as one and begin marching away. They retreat before cornered prey. The boy does not know what is happening. Regardless, it is a miracle. His prayer has been answered.</p><p>His surviving platoonmates slowly make their way to him. They cradle bloody corpses in their arms: remnants of their fellows. Thirteen corpses lay on the floor of a ruined building—including that of the cowardly boy. He was quick, and agreed to act as bait. But he was not fast enough to escape the other Legion, and when they caught him, they tore him limb from limb.</p><p>“This is all<br>your<br> fault!” cries the girl with crooked teeth as she grabs the quiet boy by the collar. Her bloodied face twists into a scowl of rage.</p><p>“I knew we never should’ve followed the Feeble Kid.”</p><p>The Feeble Kid. The organization’s commanding officers use this insult whenever they want to ridicule the boy. And he can never argue with it.</p><p>“Enough,” says the redheaded girl. “The Legion retreated. We’ve got a chance.”</p><p>The other girl snarls in response.</p><p>“You know they only retreated because they were responding to something, right?”</p><p>The girl with crooked teeth’s lips tremble in fear.</p><p>“This means there might be a<br>Red Eye<br> nearby.”</p><p>Red Eye.</p><p>The nickname for intelligent Legion—those whose eyes glow red. They have the ability to control other, mindless Legion, which makes them infinitely more terrifying. The thought that a Red Eye might be in the area makes the quiet boy drop his gaze.</p><p>When he does, his vision alights on the arm of the girl with crooked teeth. He sees white skin in the tears of her sleeve. White. Like salt.</p><p>“Your arm…”</p><p>At his words, she looks down at her arm and gasps.</p><p>Those affected by white chlorination syndrome meet one of two ends: They either turn to salt and die, or become Legion. Her face twists in despair as she realizes the future that awaits her.</p><p>And she is not alone. Of the seven survivors, three are infected. Legion. Red Eye. White chlorination syndrome. The platoon has been plunged into the depths of despair. But there is one hope.</p><p>If they can find the researcher who has white chlorination syndrome and yet retains his intelligence…</p><p>Then maybe, just<br>maybe<br>, they can be saved.</p><p>“We keep going,” says the quiet boy. “Now let’s move.”</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Moonlit Solitude, Part 3<br>[<br>]</p><p>A platoon of twenty has become seven after a battle with the Legion.</p><p>And three of those are infected with white chlorination syndrome. Those afflicted by the disease find their fate in one of two ways: They either turn to salt and die, or become monsters called Legion. Yet the platoon has not surrendered hope.</p><p>The organization has given them a mission. They are to find a researcher who is afflicted with white chlorination syndrome, yet retains his sense of self. If they can do this, they may learn of a way to best the disease. They believe because they must.</p><p>Twilight. Boots clack over a cold floor. The smell of chemicals moves through the boy’s nose. The platoon slowly picks their way through a research facility. The researcher should be here somewhere.</p><p>They were lucky not to encounter more Legion on the way here, or the Red Eye that controls them. But as they venture through the facility, disappointment colors their faces.</p><p>The corridor is quiet as the dead. Clumps of salt lie scattered at their feet. The girl with crooked teeth walks beside the boy. Though her expression remains haughty, her hands, white with disease, quiver slightly. The redheaded girl speaks to her kindly.</p><p>“It’s okay. It’s going to be okay. We just have to find the researcher.”</p><p>After wandering the halls of the silent facility, they find the researcher’s name tag. It rests atop a pile of salt in the shape of a human. The boy turns away from his despairing companions and reaches for a sheaf of research documents next to the pile. He flips through the pages and finds accounts of white chlorination syndrome. There is no going back. No cure. Once a person contracts the disease, there is no way to recover.</p><p>With that, their last thread of hope goes taut and snaps. A researcher who retains his wits despite the disease? It is nonsense. Madness. All the boy can do is chuckle.</p><p>The Legion. White chlorination syndrome. After battling for so long against despair,<br>this<br> is what greets them. He crumples the documents in his fist and begins to roar with laughter. A fist of white.</p><p>There are seven survivors. All of whom are now infected. Their bodies no longer obey. All they can do is huddle together in the darkness. The backup they requested is nowhere to be found. They cannot proceed, and they cannot go back.</p><p>“Hey,” says a small voice, breaking the silence. It is the girl with crooked teeth.</p><p>“Sorry for calling you Feeble Kid.”</p><p>Her apology delivered, she slowly begins to tell about herself. As if she is looking back on her life in the face of oblivion.</p><p>She wanted to do more for the organization. But she didn’t get along with the brass, and before she knew it, she was labeled a reject…</p><p>“Sounds familiar,” chuckles the redhead. Nods move around the room; all of them are a slightly different version of the same story.</p><p>At first, they all dreamed of being outstanding members of the organization. But once they were labeled as rejects, loneliness crushed whatever hopes they once had. Yet as they sit in this place and slowly turn to salt, they find themselves filled with a shared happiness. If this is to be their end, at least they are able to share it together.</p><p>“What about you?” asks the girl with crooked teeth. “What did you dream of?”</p><p>She turns to the quiet boy, who thinks carefully for a moment.</p><p>Then he answers.</p><p>“I wanted to be a person worthy of my older sister.”</p><p>Beyond the window, the large moon hanging in the night sky casts a faint rainbow across the clouds. The boy’s calcified hand catches the light and shimmers like a crystal. Looking over the room, he sees the same pale glow surrounding each of his new friends.</p><p>There are worse ways to go than this<br>, he thinks as he lets his eyes slip closed.</p><p>Morning comes. He wakes to a scream. The girl with crooked teeth is no longer smiling. Instead, she has torn the throat out of one of their companions. Madness has taken her. She will become Legion. The redheaded girl turns her gun on the thing that was once her friend. But she cannot pull the trigger.</p><p>The quiet boy bites his lip and shuts down his own emotions. He snatches the gun away and shoots the maddened girl through the head. Five now remain, including himself. They all thought they would sit in that place and wait for death.</p><p>But as that shot rings out, something happens. The organization’s reinforcement helicopter finally arrives, the rumble of its landing shaking the facility. A voice comes from static.</p><p>“Do we have any survivors here? Please respond.”</p><p>The boy replies in a quiet voice, gazing at the corpses of his comrades as he does.</p><p>Five living. And with nothing to show for it. They are taken into organizational custody, leaving the salt-drenched facility behind. And though they have lost much, despair has been held at bay for the moment.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Moonlit Solitude, Part 4<br>[<br>]</p><p>They are a small platoon of rejects sent into battle by the organization.</p><p>Though white chlorination syndrome encroaches on their bodies, they have returned home from a Legion-filled hell. Despite paying a heavy price, they have obtained a key piece of information: The researcher who was said to retain his intelligence while living with the disease does not exist. Once it is contracted, there is no way back.</p><p>In a deep recess of the organization’s base, the boy lies on the floor of a cage. His skin is white. Frozen. He can no longer move. The disease has almost reached its end.</p><p>How did things end up like this?</p><p>After risking their lives for the mission, all that awaited them were endless tests in a cramped and filthy cage. Dimly, the boy hears a woman scream. He slowly turns his gaze outward. A four-limbed monster thrashes wildly.</p><p>She used to be a girl. A girl with red hair.</p><p>How did this happen?</p><p>He hears more sounds. A door opening. Boots on cold tile. The boy’s commanding officer and subordinates have entered the room. He stares at the monster as it thrashes.</p><p>“This experiment is a failure,” he murmurs. “Kill it.”</p><p>There is a gunshot. And another. And another. Each time, the monster’s screams shake the darkened room. By the time it falls silent, the boy’s vision is bathed in red. Words of animosity choke from his whitened throat.</p><p>“I hate you…”</p><p>Their mission had been a lie.</p><p>The researcher had been a lie. The mission’s true objective was to send the platoon into unexplored areas to see if they would catch white chlorination syndrome. At which point, the organization could observe its progress.</p><p>The redheaded girl had figured it out some time ago. After being taken off to one room or another, she’d gotten a look at some files. The night she told him, a large moon had hung in the sky—just like the one he’d seen above the research facility. She quietly tapped on the ground as she spoke.</p><p>“We’re experiments. That’s it. That’s all.”</p><p>The boy did not believe her at first. But now he understands. They were just cogs in a great wheel of deception.</p><p>“I have to thank you,” says the commanding officer. He stares down at the boy with cold eyes.</p><p>He goes on to explain that the appearance of the Legion had been a surprise. They thought the platoon would be wiped out, but when the boy saved them, the mission—the experiment—was able to continue.</p><p>“Sadly,” concludes the officer, “we have fewer samples than initially estimated.”</p><p>The boy does not know how long he has been here. As his body weakens, his hatred grows. It is an angry emotion. Red.</p><p>“We just wanted…to do our best…”</p><p>The officer tilts his head at the words.</p><p>“What are you talking about, Feeble Kid? You<br>did<br> do your best. These experiments will serve our better personnel quite well indeed.”</p><p>The smiles of his companions flash through the boy’s mind. They all dreamed of helping the organization. But now those dreams have been scattered to the winds. In that moment, something snaps deep inside the boy.</p><p>The light in the room turns red. Sirens begin to wail, signaling a Legion attack. Screams echo throughout the base, followed by the wet sound of rotten fruit thrown against a wall. The commander and his men are baffled—and afraid. Things are moving far too fast for them to control. Suddenly, the door is torn from its hinges.</p><p>White aberrations—Legion—tear chunks from fleeing researchers. Meat slips from bone like a glove leaving a hand. Blood. Slaughter. Death. A feeling settles in the boy’s chest as he watches from his cage. It is not fear. Nor is it despair.</p><p>“Heh… Ha ha ha…”</p><p>His small, dry laugh slowly grows louder. He guffaws madly as he writhes on the floor, laughing and laughing until he is covered in blood and vomit and bile. The feeling…is delight. These people had ridiculed him and his comrades. Called them rejects. Toyed with their lives. And now the bill has come due.</p><p>At last, the Legion stands before the boy. Its aberrant hands tear open the cage with ease. But he is not afraid. Instead, he closes his eyes and patiently waits. And waits. And<br>waits<br>.</p><p>But the end does not come. Instead, the Legion kneel before him and bow their heads. Bowing before his bright red eyes.</p><p>Kill them. Kill the enemies of our Gods. Kill them all.</p><p>Voiceless thoughts fill his head. When he hears this, he finally understands what he has become.</p><p>Red Eye.</p><p>A being who exists to control the Legion and end humanity. It is his presence that brought the Legion here. The boy—the Red Eye—slowly gets to his feet. The commanding officer huddles in the corner. He slowly strides over to him.</p><p>“Please!” cries the man. “No!”</p><p>He looks at the boy and the Legion behind him as he begs for his life. The man will do anything to live, including flattering the enemy of all humanity.</p><p>“I always knew you were special! I knew it! And you could use that power for the organization! You’re nothing like those rejects! Nothing!”</p><p>His platoonmates—his friends—were all dead. Yet even now, this man cannot help but trample upon their memories.</p><p>“This would have never happened if you didn’t send us into that godforsaken place.”</p><p>The Legion rips the officer to shreds. The boy grinds chunks of meat beneath his heel as he strides out into the corridor.</p><p>Legion perch atop unidentifiable corpses, bowing to the boy as he passes. He takes them into his procession with a smile. When they find a living member of the organization, he kills them. It is revenge. Revenge for himself and his companions. Revenge for being named rejects. Revenge for being discarded.</p><p>At last, silence descends over the base. There is no one left to slight the boy; this place belongs to the Legion now.</p><p>The boy approaches a bowing Legion and gently runs his hand over its body. His crimson eyes turn to the window. The brilliant moon hangs in the clear night sky. Shining over the bloody fortress as though in celebration.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Hina</title>
    <link href="/2024/03/07/Hina/"/>
    <url>/2024/03/07/Hina/</url>
    
    <content type="html"><![CDATA[<h1 id="Hina"><a href="#Hina" class="headerlink" title="Hina"></a>Hina</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>We were a perfectly average family leading a perfectly average life. I used to love Sundays when I was little. It was the one day of the week I got to spend with Mom, Dad, and my little brother. We’d always make lunch together.</p><p>And cooking is<br> an adventure for a little kid. I’d try to copy the cooking video playing on the tablet, but every time I went to crack an egg, things got…interesting. I’d go through an entire carton trying to get it right, and Dad would laugh each time I didn’t.</p><p>One day, I<br> got my egg in the pan with a minimal amount of shell. I whispered the magic word for my secret flipping technique and…</p><p>“EEEEEK!”</p><p>My brother poked the ticklish spot on my side, causing the egg to smear all over the pan. He was always such a little jerk…</p><p>Anyway, I draped the remains of the egg over some golden rice and called it good. Then I drew a smiling sun on it with ketchup and gave it to Dad.</p><p>“This looks just like you,” he said. And just like a sun, I beamed.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>It was the first parents’ visiting day of my elementary school life. The unusual prospect of a family visit set the class abuzz. Even our teacher—who was terrifying when angry—seemed nervous. Dad even took off work so he could come.</p><p>Our first class of the day was social studies, followed by science and math. Whenever the teacher asked who knew an answer, I waved my hand over my head like a crazy person and screamed, “Me, me, me!” Dad watched as I breezily wrote the answer down on the blackboard.</p><p>In our final class, the students had to give a presentation about the origins of our names. Everyone seemed embarrassed by their parents’ reasons for choosing names. But I was ready. The day before, Dad said they named me Hina because it means “sunshine.”</p><p>, he’d said.</p><p>When I was finished, my teacher told me my name suited me perfectly.</p><p>“You<br> have a very bright smile! It always cheers me up.”<br>My friends all agreed, and I felt like I was going to explode with pride.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>When I got to high school, our family underwent a seismic shift. My parents got divorced. We used to cook together on the weekend. Go on trips together. Now everything was different. I thought happy families like ours only got ripped apart in TV shows.</p><p>I ended up living with Dad. He was mentally and emotionally broken, and no longer smiled like he used to. He’d just lay down and stare into space. Even breathing seemed to cause him pain.</p><p>The people around me all worried about him. Teachers. Counselors. Friends. They constantly asked if I was doing okay, and seemed to be searching for a way to connect with me. But I just smiled and said everything was fine.</p><p>Even if it wasn’t. Even if I was miserable. Because as long as I kept smiling…</p><p>I thought there was a chance Dad would go back to his old self.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>The days following the divorce turned into weeks. Months. I tried everything I could think of to get our lives back, all while going to school. I just wanted a life like everyone else. But if Dad and I ever wanted to get there, I was going to have to put in some serious work. And I had no idea just how far we’d actually fallen.</p><p>One day, I was having a mindless chat with a friend on the phone. We were gossiping about random things at school. Near the end of the call, she got serious and asked if everything was okay at home.</p><p>“Everything’s fine!” I replied in a chipper voice.</p><p>I ended the call. The screen went black. I could see my reflection in its surface, my face strained under the weight of a false smile. And in that moment, I understood everything.</p><p>My parents chose my name because they wanted me to smile as brightly as the sun. But it quickly became a curse that bound me. Because no matter how hard or painful my life…</p><p>Everyone expected me to have a brilliant, beaming smile on my face.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>An Ocean Sunset, Part 1<br>[<br>]</p><p>Divergent Phenomena: Records 202005-202806</p><p>2020 - Tokyo</p><p>The ruined city lies covered in a thick layer of cloud.</p><p>The soft patter of rain echoes through empty streets.</p><p>Amidst the still and silence, a young voice emerges from the second floor of a crumbling building:</p><p>“It’s okay. A kiss will make the hurt go away.”</p><p>A young girl gently affixes a bandage to a scratch on her little brother’s knee.</p><p>The pair have been drifting through the ruined city for days, as though running from something.</p><p>Wet clothes. Dry throats. Empty stomachs. Lost parents.</p><p>All these anxieties and fears weigh heavy on their minds.</p><p>Suddenly, there is a quick, faint shudder in the earth. They hold their breaths and grip each other tightly. The ground shudders again.<br>It’s getting closer.<br> They grasp each other’s clothes as the shaking grows greater. More intense. They know what is causing it, and that knowledge is a horror.</p><p>But then, the tremors come to a stop. And the bleached white bones of a monster’s eyes peer through the building window.</p><p>2028 - Harbor</p><p>A girl stands on the deck of an escort vessel docked at a military harbor. Clad in a military uniform, she gazes up at the sky. It is the same girl from the abandoned city. She now stands in the warm sunlight, lost in thought. Years have passed since that day; she is no longer a scared little girl, but a soldier.</p><p>“The general is asking for you, Captain,” says a boy in the same uniform. She turns around, smoothing hair mussed by the ocean breeze. “I’ll be right there,” she says softly.</p><p>The girl walks into the ship’s control room and finds a number of officers gathered. None are older than twenty; all wear the same worried expression. The general—the same one who has summoned them here—begins his brief in terse tones.</p><p>“In our previous operation, some of you retreated from the front line without my orders.”</p><p>The purpose of the previous operation was to capture<br>Legion<br>. Legion are white monsters with bone-like shells, and the greatest threat humanity has ever known. The<br>organization<br> the girl belongs to was formed for the sole purpose of eradicating Legion. Talented personnel have been gathered from across the world to dispatch the monsters wherever and whenever they crop up.</p><p>Just a few days prior, the girl and her squadron engaged multiple Legion in battle. But faced with greater enemy numbers than anticipated, several of her soldiers lost their nerve and ran. Now those same soldiers sit in the briefing room with sweat running down their bodies. The general opens his mouth to scold them—perhaps even punish them—when the girl suddenly speaks.</p><p>“I issued the order to retreat, sir” she says.</p><p>Her squad turns to look at her in surprise. She issued no such order. It is a lie. Yet she tells it in order to protect those who serve beneath her. “As the leader of this squad, our failure is my responsibility alone. If there is punishment to be had, permit me to take it in their place.”</p><p>The general stammers in the face of his subordinate’s sudden confession. But he quickly regains himself and informs the girl of her punishment:</p><p>Her squad will be assigned to maintenance and cleaning duties about the ship. Said vessel’s purpose is to transport some precious cargo overseas. The ship must be fueled and prepped for the journey, then made ready to depart with all speed. Though the girl and her squad are combat personnel, they will now be used as the most base of laborers.</p><p>“I expect this ship to be ready to depart by nightfall,” continues the general. “Once preparations are complete, return here.”</p><p>“Should you fail, a number of your squadron will be discharged—no matter where the true fault lies.”</p><p>It is an entirely unreasonable demand, but the girl only nods.</p><p>A moment later, she and her squad gather around a map of the ship on a nearby wall. The girl runs her finger across the map, calling out names as she glides over each room. When everyone has their assignments, she turns to depart.</p><p>“Begging your pardon, ma’am?” says a young squad member. “But the jobs you gave yourself are…terrible.”</p><p>The boiler. The morgue. The sewage tanks. The girl has taken on the most demeaning and horrific tasks for herself. “Oh? I didn’t realize,” she responds with a smile before dismissing her squad to their work.</p><p>They say no more as they scatter to their stations. The girl makes for the morgue straightaway. Here she finds bodies of those who perished during the voyage, having suffered grave injuries in the last battle with the Legion. She follows the medical team’s orders and disposes of the bodies, praying they might find peace in the next life.</p><p>Afterwards, she moves through the ship, taking care of preparation, maintenance, and cleaning in each of her assigned areas. Footsteps echo throughout the ship as her squad rushes to and fro. Crew members offer cheerful greetings as they slip by in cramped hallways. A warm, comfortable breeze blows through the ship as it prepares for an arduous voyage.</p><p>Once she is finished, the girl makes her way to the control room, where the deadline is looming. If she is even one second late, the general will dismiss her squadmates without mercy or recourse. After a moment’s hesitation, she pushes open a rigid door to take a shortcut to her destination…</p><p>And finds herself in a storehouse far too large for the ship. In the center lies a sturdy cage that contains the massive Legion they captured the other day. This is the creature to which so many of her squad lost their lives. In an instant, she understands the nature of the ship’s “precious cargo.”</p><p>She gazes upon its white body, covered by a shell that looks like it might belong to some manner of crustacean. Part of it is stained a deep red, perhaps because it absorbed blood. The left arm is cracked and shattered like porcelain—damage sustained in the recent fight. Images of her squadmates being torn to shreds replay in the girl’s mind.</p><p>The Legion’s head moves slightly as it turns to look at her. Its eye sockets are empty. But when their gazes lock, a different emotion roils inside of her. She feels as though it sees straight through her, and so looks away.</p><p>Less than two minutes remain until the deadline. The rest of her squad has finished their tasks, and now waits for the girl in the control room. Fifty seconds left. Thirty seconds. None can hide their unease—their entire lives now lie in her hands. With ten seconds to spare, the girl bursts through the door.</p><p>“Sorry to cut it so close!” she says with a grin. Though he seems disappointed, the general announces there will be no further punishment. Muttering his displeasure, he leaves the control room.</p><p>Seconds pass after he leaves. The remaining squad members exchange glances…</p><p>Before bursting into a raucous cheer.</p><p>“We knew we could count on you, Captain!” they say. Some laugh. Some shed tears. They crowd around her, reveling in a shared joy.</p><p>The girl has always been willing to place her life on the line for her squad. She is skilled in both martial and intellectual pursuits, as well as capable and kind. She is, in short, the finest leader any of them could ask for. And as the sun dips below the horizon, its few remaining rays shine over them as though giving a blessing.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>An Ocean Sunset, Part 2<br>[<br>]</p><p>2020 - Tokyo</p><p>Tokyo lies abandoned.</p><p>A girl and her little brother huddle in a collapsed building, hiding from a monster called Legion. As its earth-shaking footsteps grow closer, the monster’s massive face appears in the window. They hold their breath, waiting for it to leave. But no matter how hard they pray, it does not go.</p><p>After a moment of stillness, the monster wails and leans against the building, where it has apparently decided to take its rest. Though the girl’s brother is on the verge of tears, she takes his hand and attempts to lead him out quietly.</p><p>I’m the big sister. I need to stay focused.</p><p>Because if that thing sees us, it will be over in a moment.</p><p>How much longer would they have to live through this hell?</p><p>2028 - An escort vessel, at sea.</p><p>After finishing refueling and maintenance at the military harbor, the escort ship sets off across the ocean. The girl gazes at the cloudy sky through the windows of the officer’s quarters.</p><p>“Four hours until we get there,” she murmurs quietly. “Guess I’ve got time to read.”</p><p>The whole squad enjoys a rare bit of downtime as they sail.</p><p>Their mission is the transport of a massive Legion to a foreign research facility. Once there, it will be researched so anti-Legion weapons might be produced. It is a vital mission—one which may well lead to the end of the battle between humanity and the Legion. Once they dock, they will have to transport the creature overland. As it is likely they will encounter more of the Legion; the girl and her squadron are under orders to guard the cargo.</p><p>With their lives, if necessary.</p><p>The squad is painfully aware of this truth. But for now, they rest to regain their strength. Suddenly, an emergency broadcast echoes through the ship:</p><p>“Alert. All personnel, report to the control room immediately.”</p><p>A minute later, the crew is lined up neatly in the control room. They all wear serious expressions, their relaxed moments from the beginning of the voyage a forgotten dream. The general informs them the ship has received a request for support from their destination. The harbor was attacked by a horde of Legion with no warning, and they are presently engaged in a fierce battle. Their ship has been asked to aid in the fight.</p><p>If possible, they will assemble a vanguard unit and dispatch whatever Legion remain once they make landfall—a most dangerous mission indeed. The general pauses, clearly preparing to ask for volunteers. But the girl takes the initiative and volunteers to lead the charge. The moment she knew someone was being attacked by the Legion, remaining on the ship became untenable.</p><p>She quickly issues orders, assigning her unit various tasks. Some prepare first-aid kits in the infirmary. Others ready a submarine for infiltration. She leads the rest of the squad to the armory.</p><p>They gather black swords, handguns, grenades, and communication devices. Though the squad grumbles about having their rare moment of downtime interrupted, the girl does her best to put their minds at ease. Once they are outfitted, they prepare to leave the armory. But then something shakes the ship. Something<br>massive<br>.</p><p>As an alarm wails to life, a voice crackles over the PA system.</p><p>“We’re under attack! We’ve got ten Legion on the deck—twenty! There’s more! More are coming! Someone get up here and—“</p><p>There is a crunching sound, followed by a bloodcurdling scream. Then silence.</p><p>The ship is under attack. But why? Why would the Legion be attacking a vessel so far out at sea when the creatures live on land? It is a baffling situation, and panic immediately sweeps over her squad.</p><p>“What’s going on!?”</p><p>“We’re nowhere near the harbor yet!”</p><p>“We need to get on deck NOW!”</p><p>A window shatters. Metal groans.</p><p>“Why are they even here!?”</p><p>“Why is this happening!?”</p><p>“We’re gonna sink! We’re all gonna drown!”</p><p>The girl moves to each soldier in turn, calming them. Once they have themselves under some semblance of control, she whirls around and rushes to the main deck. Though she has survived countless battles with the Legion, this is a scenario she has never before encountered. She prays her unit can somehow remain safe as she flings open the door to the main deck. As she does so, the top half of a human torso comes skittering through the door and down the stairs.</p><p>One of the Legion stands on the deck, its arms covered in fresh blood. It howls, its voice terror incarnate. She has never seen such a creature before. A carapace clings to its back. A hard shell covers countless thin legs and tentacles. Fin-like protrusions wriggle from openings across its body. It is a monster that has adapted to life in the ocean—a kind of crustacean.</p><p>And now it and its fellows are launching a surprise attack at sea. Legion clamber up the side of the ship, shattering windows and wriggling their way inside. Screams ring out. Horror reigns.</p><p>“No,” whispers the girl. “Not here. Not like this.<br>I won’t let you<br>.”</p><p>As one of the monsters turns in her direction, she tightens her grip on her sword and prepares to fight.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>An Ocean Sunset, Part 3<br>[<br>]</p><p>2020 - Tokyo</p><p>As rain pours over an abandoned Tokyo, a young girl and her brother hide in a dilapidated building. The white monster called Legion has crouched near their hiding place to rest. They are attempting to slip away without alerting the creature. But when they open the door, it makes a piercing, metallic scrape.</p><p>They pray the rain drowns out the sound. But it is not to be. The Legion lifts its head and peers into the building. The girl feels as though her eyes have met the monster’s. It has found them. They are going to die. The girl hides her brother in a futile attempt to save him. The monster reaches out, likely to idly crush them with a single massive hand.</p><p>2028 - An escort vessel, at sea.</p><p>An escort vessel has met with an ambush at sea. A horde of Legion crawls from the sea and into the ship. But on the main deck, a girl and her squad fight back.</p><p>The sound of machine gun fire is incessant. Deafening. The girl deftly dodges wildly flailing arms. After several hundred shots, the creature finally falls over and lies still.</p><p>But they can find no joy in subduing a single foe. The girl asks her fellow soldiers to guard the deck, then makes her way inside to take out whatever has infiltrated the ship. She prays to save as many of her squad as she can.</p><p>She runs through the ship at full speed. Each time a cry for help comes over her wireless system, she runs for the source. She knows the layout of the ship like the back of her hand. When she moves, it is always along the fastest route. Suddenly, one of the Legion juts its head into the hallway in front of her.</p><p>Without stopping, she draws her sword and leaps into the air. Her blade flashes like a meteor. Sword meets sheath as she lands. As she continues her mad dash down the hall, a head thumps to the floor.</p><p>The girl fells several Legion by herself as she moves through the ship. Using her handgun and precise marksmanship, she pierces the skulls of smaller enemies. She explodes Legion heads by kicking ammunition meant for the ship’s cannons. She is the distinguished leader of an elite unit whose sole purpose is to eradicate the Legion. And now, all of her skills are being put to the test.</p><p>Each time she clears out a new area, she checks on the survivors. All who can still fight are sent to the deck to help ward off further attack. The despair in peoples’ eyes slowly clears whenever they hear her voice. She is a single ray of hope in the gloom.</p><p>As she and her squad form up, they slowly push the Legion back. The ship is barely holding together. Casualties are great. But if they can keep it up…</p><p>She mulls over the situation as she runs down another corridor.</p><p>Suddenly, there comes the high-pitched shriek of metal, followed by a violent shudder.</p><p>“Status report now!” cries the girl into her comm.</p><p>The news is even worse than she feared. The hull of the ship has been torn open and water is rushing in.</p><p>For a moment—just one—she closes her eyes.</p><p>“<br>What should I do?</p><p>How many will die?</p><p>There are still Legion inside the ship.</p><p>I have to locate the enemy.</p><p>I have to kill them.</p><p>Is everyone safe?</p><p>I have to protect them.</p><p>How far is land?</p><p>We’re going to sink.</p><p>How did they breach the hull?</p><p>We’re going down.</p><p>We need to close off flooded areas.</p><p>Was I not strong enough?</p><p>There must be some way out.</p><p>I have to get everyone out.<br>“</p><p>Despair fills her being, threatening to overwhelm her.<br>Her heart beats faster. Faster.<br>Faster.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>An Ocean Sunset, Part 4<br>[<br>]</p><p>2020 - Tokyo</p><p>In a ruined Tokyo, a girl and her brother have been discovered by a monster called Legion. The enormous creature reaches out to kill them. The girl places herself in front of her brother and closes her eyes. But then, the sound of gunfire and shattering rock rumbles through the air.</p><p>She cautiously opens one eye. Then another. The Legion’s splintered body collapses to the ground in a cloud of white dust. Moments later, young soldiers in military uniforms rush to her side.</p><p>“You’re all right,” says the voice of salvation.</p><p>This deadly game of hide-and-seek has lasted for days. The girl’s brother begins to bawl as he is released from overwhelming unease. As the young girl holds him tight, powerful emotions well up from the depths of her heart. She wants the strength to protect what is most precious to her. And at the same time…</p><p>2028 - An escort vessel, at sea.</p><p>Sirens wail throughout the escort vessel. A hole has been torn in the ship’s hull, and it is beginning to sink. The survivors are mired in despair, but the girl alone refuses to succumb to it.</p><p>She activates her comm and speaks to whoever is left.</p><p>“All crew, abandon ship. I repeat: Make for the submarine and abandon ship. This is an order.”</p><p>All who are able drop what they’re doing and race for the submarine.</p><p>Minutes later, roughly forty souls are gathered in the hanger. It is less than half the number they started the voyage with—and the girl will not permit any more to be lost. The survivors clamber into the submarine. Once they’re safely inside, the girl looks up at the lone figure beckoning her from the open hatch.</p><p>“No,” she says. “I’m staying here.”</p><p>“Captain, no! Don’t say that!” As the soldier reaches for her hand, a Legion tears the hangar door from its hinges. Suddenly, the meaning of her sacrifice is clear: If she does not stop the remaining Legion, the submarine will never get clear of the ship.</p><p>She orders the submarine to push off as quickly as possible.</p><p>“Don’t die, Captain!” she hears over her comm. “We’ll come back for you!”</p><p>“All right,” she replies with a grim smile. “Now go.”</p><p>She turns her back on the sub as it begins to slip free of the ship.</p><p>Fearsome howls echo through the hangar for a time, as well as the clash of steel on bone. The creatures almost seem to be mocking her. Later—she knows not how long—she steadies herself against the wall of the hangar and looks out at the trail of dead. Her bones are shattered. Her body is pain. But she is not finished.</p><p>She still needs to escape. As water fills the halls, she finds herself losing the sense of up from down. But then, a deep rumble fills the air. Something is coming. And she knows precisely what it is.</p><p>Their cargo—the entire reason they set off on this transport mission—slowly rises up before her. The massive Legion has rent its cage asunder and is now wandering the ship.</p><p>This<br> is what tore the ship apart. Water rushes in. Every movement is agony. An enormous foe looms in her path. Yet in the face of this hopelessness…</p><p>The girl smiles.</p><p>She drops low and swipes her blade at the Legion, her wounds forgotten. She dodges the arm it brings down and plunges her blade into the thin joint between bones. She is glee. She is<br>delight<br>.</p><p>This is her secret—one she has kept hidden ever since the day she awoke in Tokyo…</p><p>The city was a gray ruin. It was the day the organization saved the girl and her brother from the Legion. As she cradled her sobbing brother, she turned her face from him. Because she was smiling.</p><p>The girl suffered from a stress-induced psychiatric disorder, one that developed as a result of constantly protecting her brother. This illness led her to volunteer for increasingly dangerous assignments.</p><p>Like when she shouldered punishment in place of her squadmates. Or when she volunteered to lead the vanguard after receiving the SOS signal. Or when she single-handedly rid the ship of Legion. Each time, the stress of the situation sent waves of ecstasy flooding through her system.</p><p>“It’s…over…”</p><p>But now, her chest fills with an unfathomable emptiness as she stands atop the Legion’s shattered corpse. She gently lifts the monster’s decapitated skull in her small hands.</p><p>“Thank you for amusing me,” she says before pressing her lips to an exposed piece of bone.</p><p>The ship slowly slips beneath the waves. A girl clings to a broken secret amidst a broken world. And a metal vessel carries this secret into the depths. Moments later, the waves wash quietly atop one another as though nothing was ever there at all. And the rays of sun that shine between the clouds bathe the ocean in a soft and fleeting light.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Levania</title>
    <link href="/2024/03/07/Levania/"/>
    <url>/2024/03/07/Levania/</url>
    
    <content type="html"><![CDATA[<h1 id="Levania"><a href="#Levania" class="headerlink" title="Levania"></a>Levania</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>Images of outlandish scenery race through my mind. Where am I? Why am I here? I can’t remember anything. My memory has abandoned me. I had something I needed to do, right? I<br> had something I needed to do. I find it difficult to gather my thoughts. Suddenly,<br> appears in my consciousness.</p><p>“I’m afraid this all comes at a cost. You’re going to lose your voice, your senses, your—“</p><p>“Are you certain?” A voice…</p><p>That’s right. I lost it all. My will. My speech. My hope.<br> This girl in white…<br>Pain constricts my chest. Stirs my empty memory. I know that girl. She was… She was my… Argh, I can’t remember! Who<br> I, anyway!?</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>These hands. These legs. This body. Am I… human? No. I’m not human. I<br> human. I got this body when I accomplished my objective. In this bleak world, I ate the dreams of people and desired to become human above all else…. But why is it so damn<br>? I’m finally the human I wished to be, so<br>?</p><p>“You need to collect more dreams, dear.”<br>That voice echoes in my head again. Now that I’m human, why do I have to do this? Fragments of memories pierce my heart like thorns. An impatience I don’t understand drives me forward. The girl in white. Me, a human. I have to do<br>. Otherwise there’s no turning back. That’s all I know.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>That should have been my only goal in life. But now that I’ve accomplished it, not only am I not happy… I don’t even understand these feelings of guilt roiling inside me. I wander the darkness with no destination. I have no way to tell what happened to my face. But this slender physique… This fluffy hair… The collar and manacles that clamp down on me… Oh yes, I know<br> who I am. The girl in white—I can’t get her out of my head. Who is she? Why do I look like her? What did I do to her? What did she do to<br>? I hear the sound of water splashing in the darkness.</p><p>“Hey, Mr. Monster?”</p><p>“When you become human, will you still be my friend?”</p><p>I know she said… Yes! She<br> say something! My scattered fragments of memories slowly come together…</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>How long have I been asleep? I sit up in discomfort and stand on the cold stone floor. I dreamt of the girl over and over again. What precious times we spent together. All my memories came back in my long sleep. Once again, I stand in The Cage. I need to go back to her as soon as I can; I need to give back what I have stolen.</p><p>“Well! Look who’s finally up.” An odd object floats up and speaks to me, pretending it has no idea what’s happening. I can’t imagine anything more audacious, but I will have to rely on the thing for now. I’ve lost so much—<br> much—but at least I have my memories. I retrace my steps through The Cage in order to save her. Once she’s back to normal, I will reply to the question I had left unanswered. And I will say…<br>.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>A Man in Life Part 1<br>[<br>]</p><p>The shadow of an alien creature flickers against a dirt wall. Deep in a mine that was sealed off centuries ago, he waits in perfect silence. Before him is an ancient dragon—an exceptionally diabolical creature. The dragon notices the intruder and gives a mighty roar that causes the mineshaft to shudder violently. A moment later, its throat begins to grow red with fire. The battle has finally begun. Two hours later…</p><p>MISSION COMPLETE!</p><p>Golden letters flash on the monitor. As the dragon lies motionless on the ground, the adventurers raise their swords and staves high.</p><p>The fanfare is accompanied by a blizzard of dazzling particle effects. Inside a dimly-lit room, the effects reflect off the glasses of a man facing his computer. He is deep into a raid in an MMO. It is an incredibly popular title, with a player base nearing almost one million members. The man and his fellow party members have vanquished the Ancient Dragon—which the most recent patched dropped as the game’s newest, most powerful enemy. The group chat is flying with exclamations of his online friends. Everyone is reveling in their victory.</p><p>nice work all</p><p>sry I died so many times</p><p>This was our first time seeing this, so it’s okay!!!</p><p>we won so its fine LOL</p><p>it was pretty much just Levania taking the stage tho haha</p><p>The man’s avatar is an alien creature named Levania. It is, of course, only his character’s name—not his own. The man types a message out to the party.</p><p>For me, this isn’t a game.</p><p>They retort with their own good-natured jabs.</p><p>YUP there it is! He said it!</p><p>What the man—no, what<br>Levania<br> said—was just an act for his friends. The party has been raiding together for some time, and they have an easy camaraderie among themselves. Theirs is a relationship of inside jokes among informal friends. But everyone knows the man had been the key figure in taking down the dragon. Without him, they likely would not have been victorious.</p><p>As the hands of the clock tick past one in the morning, his friends slowly begin returning to the real world.</p><p>alright I’m out</p><p>night!</p><p>i’ve gotta get up at 6 lol</p><p>I’m going to bed too!</p><p>later!</p><p>The man types “See you tomorrow,” and logs out. Regardless of how hard he works in the game, reality always claws its way back. The man gleefully crawls into bed and removes his glasses.</p><p>The next morning… The man stands on the train, moving his tired, empty eyes across the crowd packed in around him.<br>I’m sleepy,<br> he thinks.<br>I’m tired. I want to go home.<br> As these thoughts cycle through his head, the train pulls up to the station near his office. The man works as a mid-level engineer for a start-up IT venture called Dull, Inc.—the same job he’s held for the past four years. Each department holds a team huddle before starting the day. The meetings are an excuse for bosses to talk, check in on progress, announce schedule changes, and so forth. As the man’s boss drones on and on, he tunes him out and thinks back to the raid of the night before. He wonders what his actions in battle looked like to his friends. Had he successfully played the part of Levania?</p><p>Whenever he plays him, his personality changes. Levania is a leader who takes initiative; one who cracks wise with a keen sense of humor. Someone his companions can be honest with; a person both trustworthy and charismatic. But this person—this role—only exists in the game. In reality, the man is Levania’s exact opposite. He is introverted, stoic, and lacks even one true friend. He communicates only as much as necessary to get by in society, and has no desire to take any of his relationships deeper. Additionally, he is plagued by a vague, smoldering dissatisfaction of how unfair and irrational modern society is. The only thing that brings him joy are games. Whether he is playing the work of another or crafting his own, it is the only time his ever experiences happiness. His own game—which he’s been working on in his spare time—was reaching completion. It is an old-fashioned RPG where the player takes on the role of hero to save a princess captured by the demon king. And of course, the hero’s name is Levania.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>A Man in Life Part 2<br>[<br>]</p><p>“Hey! You listening!?” The man suddenly snaps back to reality. The team huddle is still going on. He sputters out a half—whispered apology for daydreaming, but it falls on deaf ears. Instead, the boss takes the opportunity to berate him.</p><p>“You know, you could stand to be a lot more productive.”</p><p>“Hell, we’ve got people with half your experience that are doing twice the work!”</p><p>The youngest member of the team graduated from college a mere two years ago, yet the boss misses no chance to praise him for his work ethic.</p><p>“But sir,” says the junior member suddenly, “he does a lot, too.”</p><p>“I have a lot to learn, but he’s always patient.”</p><p>“And he’s willing to help with whatever I need.”</p><p>Rather than easing off at this, the man’s boss doubles down.</p><p>“Do you see that!?” he roars.</p><p>“That kind of humble attitude is<br>exactly<br> what we need around here! Am I making myself clear!?”</p><p>The man glances at his coworker and sees his mouth twist into a sneer.<br>Gotcha!<br>, it seems to say.</p><p>Though the junior employee presents a humble, helpful front, he actually only takes assignments that are sure to earn him praise—leaving the dirty, difficult work to the man. He knows he’s the boss’s favorite, and uses this fact to his full advantage. And the boss thinks he’s found a new lackey, so he’s willing to let his sneaky attitude slide. The man knows what they both think of him: He is a target—a lump to be misused however they wish.</p><p>Lunchtime arrives. The man sits in the corner break area munching on a vending-machine pastry. A stout coworker approaches with a can of coffee in hand and gives it to the man.</p><p>“Rough morning, huh?” he says.</p><p>This stout man is an engineer who joined the company at the same time as him and now works on his team. Though not close enough to call each other friends, the man does not find his coworker’s thoughtfulness unpleasant. But he also knows him to be the type who tries to please everyone and avoid making waves.</p><p>“Anyway, hope it all works put.”</p><p>The stout man stands there awkwardly for a moment before shuffling back to his desk.</p><p>The day comes to a close. As the man is packing up to leave his boss approaches. He wonders dispassionately if he is in for another scolding. It turns out he is: his boss immediately tears into him for one thing or another. But no matter what he says, it will never resonate with the man.<br>This is just a job. It pays for food and a roof over my head. That’s all.<br> The man repeats this to himself as he waits for his boss to tire himself out.</p><p>Eventually, he finds himself standing on the train home. It’s full, but not uncomfortably so, and he has room to scroll through his phone as he rides. As he peruses his usual gaming news sites, an advertisement catches his eye. The game-development company that makes his MMO is looking for an engineer. He typically scrolls through advertisements almost unconsciously, but this one seizes his attention immediately and refuses to let go.</p><p>Later, the man sits down in front of his computer. Morning. He types a joking greeting in the group chat., and several people immediately respond.</p><p>morning</p><p>did you just wake up? lol its night already</p><p>yay Levania’s here!!!</p><p>He vaguely wonders why he feels so at home with these online strangers who he has never met, then sets the question aside. For the next few hours, the man and his friends run raids together.</p><p>But their attempts go miserably. The party is disjointed and out of sorts, and they end up failing apart at the end. The man apologizes for his poor leadership, and suggests a new strategy for their next encounter. His teammates are aware the loss is not the man’s fault, so they listen to his plan and offer up occasional suggestions or tweaks. It is a very constructive discussion. Eventually, as always, he must return to reality. His friends log off one after the other, their names disappearing from the screen. Then, one of them offers a parting remark.</p><p>I bet you’re really helpful irl too, Levania</p><p>It’s a compliment, the kind of casual thing people exchange a dozen times a day. But it causes a terrible sense of guilt to rise up in the man.<br>I’m fooling them. Lying to them. I’m nothing like Levania in real life. But if I could, I would love to be just like him…</p><p>Though his body cries out for sleep, the man logs out of the game and opens his internet browser. He arrives at the game developer’s website and navigates to the section on open positions. He doesn’t want his online friends to know what he’s like in reality. He doesn’t want them to be disappointed. But if he ever wants to change that, he will need to make a greater change to himself, stop drifting through life, and take some initiative. Levania would know what to do and put a plan in motion right away. In fact… After a brief moment of hesitation, he attaches his resume and sends it off.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>A Man in Life Part 3<br>[<br>]</p><p>The man’s smartphone lights up as he receives a notification. He has an email from the game company congratulating him on passing their initial screening. Though the man hardly ever shows emotion, he smiles as he reads the email again and again.</p><p>Several months later, the man finds himself entering the doors of the company in his finest suit. He has spent the last few months burning the candles at both ends in order to complete his game and use it as a sample of his work. They were clearly impressed, because they invited him in for a face-to-face interview. Interviews have never been the man’s forte, but he has a plan: He will assume the role of Levania in his mind during the entire process. As they fire question after question at him, he tries to react as if it was another boss battle. It works better than he could have imagined, and his answers are both positive and proactive. As the interview ends, they compliment him again on his answers and his game, and he leaves the building floating on air. He heads towards the train station. The sky above him is a cloudless, brilliant blue.<br>I think I aced that interview. I really do. If I get the job, I’ll be reborn. I can be like Levania in my real life. Then maybe I can be my true self around my online friends…<br> As the man sets off for home, his face is alight with hope.</p><p>The next day… When the man arrives to work at Dull, Inc., he comes across the stout coworker and junior teammate having a serious conversation. Though he doesn’t like to eavesdrop, he finds he can’t help himself. Their hushed voices still carry across the empty office. It seems the junior employee has made a serious error in some of his work. Scared of how their boss will react, he tried to bury it. But he now realizes he will not be able to keep it hidden forever. Backed into a corner, he finally decided to seek out the other man for advice. After hearing the story, the stout man leans back in his chair and knits his fingers together.</p><p>“You have to tell the boss,” he says.</p><p>“Do it today.”</p><p>“The longer you put it off, the worst it’s going to be.”</p><p>Clearly dejected, the young man wanders off in a daze.</p><p>Later that afternoon… The stout employee is called into the boss’s office. The man can’t hear things clearly, but it’s obvious from the tone that the boss is chewing him out. A few words drift through the closed door, enough for the man to realize his coworker is being blamed for the junior employee’s mistake.<br>Why is he taking the blame? It wasn’t even his fault.<br> He glances around the room, and sees the junior employee and a couple of his friends looking over at the boss’s office and snickering behind their hands.<br>I am going to kill this guy.<br> He feels himself suddenly overwhelmed by terribly dark emotions. The man suddenly realizes what happened: The junior teammate had pinned the mistake on his coworker. He did so knowing full well their boss would never question the word of his favorite employee. Unable to stand it a second more, he pushes his chair back and begins walking toward the boss’s office.<br>Grant me your courage, Levania. Just this once.<br> As he nears the office, the conversation grows increasingly clear.</p><p>“You two were over there whispering earlier!” says the boss.</p><p>“Don’t deny it!”</p><p>The man knows exactly how this will play out. In the end, his poor coworker will take the blame. The man readies himself and opens the door.</p><p>“I’m busy here!” cries the boss.</p><p>“Can’t you see that!?”</p><p>The man pauses, takes a deep breath, and begins to tell his side of the story. After a few moments, his boss interrupts.</p><p>“I see. You’re in on this too.”</p><p>“Enough. Back to your desks, both of you.”</p><p>“I’ll figure out what to do with you later.”</p><p>When he hears this, the man feels his willpower drain out of him. Though he swore to be a stronger person like Levania, he’s still himself at the end of the day. He can’t even help a single coworker.<br>I’ve had enough of this company. I’ve had enough of me. I wonder if this fight would be too much even for Levania?<br> The man has no answer. But he knows one thing: Trying to fight a boss like him is pointless.</p><p>Several weeks later… The man receives a letter. It is a formal offer of the employment from the game company.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>A Man in Life Part 4<br>[<br>]</p><p>The man receives a formal offer of employment from the game company. The next day, the man walks into his boss’s office and hands him a letter. It is his two-week notice. But it is also notice that he plans to take the rest of those two weeks off as vacation, and will only come back for his final day of work. He will still leave the job with far more vacation than he can ever use, but he doesn’t care. He simply wants to get out. His boss receives the letter coolly, showing no particular sorrow or surprise.</p><p>He then informs the team of his departure during the morning huddle. Soon, word spreads to the rest of the office. After the meeting, the stout coworker approaches the man and places a hand on his shoulder. “Thanks for all your hard work—and for trying.”</p><p>They both know what he is referring to: After the incident with the junior coworker, each of the men received a reduction in salary. The fact he was punished for the fault of another upset the man greatly. But there was nothing to be done. The stout coworker, never one to make waves, simply accepted the pay cut without a word and continued on.</p><p>That night… For the first time ever, the man and his coworker head out for a night on the town. Though his team held occasional drinking parties, he had never attended one. He never had a reason to. But this time, his falsely accused coworker had invited him, and they both understood it would be the first and last time such a thing ever happened.</p><p>At the bar… Alcohol works its dark magic and the man begins to open up. He talks about his favorite games, his next job, and his hopes and dreams for the future. He speaks of his desire to change himself. He has never laid himself bare like this; it is both liberating and terrifying. His tipsy coworker listens for a long time before finally responding, “I’ll be so lonely with you gone.”</p><p>Two weeks later… It’s the man’s last day at work. He leaves his house with a spring in his step. The thought of never entering Dull, Inc. again makes the packed train feel like a vacation. All he has to do today is finish some paperwork and sign a couple of documents. Once he turns in his security badge, he will walk out the front door for the very last time. Before he reports to security, he wanders the office looking for the stout coworker so he can say goodbye. But he can’t find him anywhere. He asks the junior teammate if he’s seen him and the man responds, “That guy? How should I know?”</p><p>Yet again, he feels his blood begin to run cold as rage overwhelms him. Perhaps his coworker called in sick. Perhaps he had a planned day off. With no other choice, the man finishes his paperwork and leaves.</p><p>He then makes his way to the station. He stands at the center of the platform, waiting for his train to arrive. It’s early, and the station is relatively empty. Tomorrow, he will begin a new life at a new company. He will never have to set foot in this station again. It is another in a series of goodbyes. A momentary feeling of loneliness quickly transforms into one of excitement.<br>Starting tomorrow, I’ll be reborn in a new world—one where no one knows me. I’ll be strong and reliable, just like Levania.<br> The light of hope shines brightly on the man’s heart.</p><p>A voice echoes through the station announcing the arrival of the next train.</p><p>……</p><p>…………</p><p>………………</p><p>Suddenly, something collides with the man from behind. He stumbles forward and goes flying onto the tracks.</p><p>What happened?</p><p>Where are my glasses?</p><p>Oh god, I need to get back!</p><p>But the man finds himself frozen in confusion and fear. A lone figure looks down on him from the platform. It is muttering something.</p><p>“With you gone…” The man’s head snaps up. Standing before him was the coworker the man had tried to protect.</p><p>“With you gone…”</p><p>“<br>I’ll<br> be the one they bully!”</p><p>“I can’t<br>stand<br> that!”</p><p>“I can’t<br>stand<br> the thought of you being happier than me!”</p><p>“But with you gone—“</p><p>The shrill sound of a train whistle drowns out the rest of the thought. All sound stops. In a silent vortex of darkness, a few thoughts swirl:</p><p>I don’t want to die. I want to keep living.</p><p>Dreams… Hope…</p><p>Re…born…</p><p>I… I… I…</p><p>I…am…</p><p>Levania!</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>The Monster’s Instincts<br>[<br>]</p><p>“The dream-eating monster is a species that instinctually devours dreams in an attempt to secure a human form. This particular monster, however, chose to turn the girl<br>back<br> into a human rather than keeping the form for himself.”</p><p>“Then he’s acting against his instincts? How kind! It must be love.”</p><p>Goodness, but those two are<br>such<br> a bother. Carrier always speaks in such a condescending manner, while his substitute just mumbles under his breath.</p><p>I know, I know—if Mama can’t say anything nice about them, perhaps I shouldn’t say anything at all. Still, I find our conversations<br>so<br> unpleasant!</p><p>“Why do these monsters want to become human, anyway? I mean, they’re sturdy enough as is—far more admirable creatures than those human meatbags.”</p><p>“How can you say such things considering all the knowledge you have on the matter?”</p><p>“Oh, but I don’t know as much as<br>you<br>, my dear! Perhaps you’d be willing to teach me more about them, mmm?”</p><p>“…teach…more…”</p><p>“Well, how can I say no to that face?”</p><p>Carrier is right: I know far more about the monsters, which is why I understand just how much of a miracle his sacrifice is—and how close to destiny it flies.</p><p>Not that Mama would teach that rapscallion a single thing!</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>With Love, From<br>Carrier<br>[<br>]</p><p>“Hey, Carrier. Is she here yet?”</p><p>Silence, you incessant boob! It’s always<br> she this, she that<br>with you!</p><p>“Goodness me! That<br>is<br> a bit worrying, isn’t it?”</p><p>Does this fool even remember why he’s walking around like this in the first place?</p><p>Well, better do my job and remind the oaf that this is no playdate.</p><p>“When you eat the young miss’s dreams, you will become human.”</p><p>“…I know.”</p><p>“But of course you did! You are so clever after all, Master Levania!”</p><p>Good god, now I have to flatter this dunce just to keep him on track. You’re working for ME, pal! ME!</p><p>And I’M the one using YOU! You ain’t worth SQUAT without me, and don’t you forget it!</p><p>…All right, that’s enough internal screaming for one day. Best settle into work mode for the day and keep my darling idiots on the straight and narrow!</p><p>“Now then, I believe the young miss should be here soon.”</p><p>“Hurry up.”</p><p>“And…here we go!”</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>The Monstrous Trio<br>[<br>]</p><p>Gloomy Monster: This dream…tastes bad…</p><p>Shallow Monster: Mine’s great. I really hit gold this time!</p><p>Doubtful Monster: QUIET, YOU. TASTE DOESN’T MATTER.</p><p>SM: Don’t be such a stick in the mud. Hey, you agree with me, right?</p><p>GM: You…are annoying…</p><p>DM: SEE? IF YOU WOULD BE SO KIND AS TO SHUT UP WHEN YOU GET THE HINT.</p><p>SM: Aww, that hurts! This is why all of you are a miserable bunch of monsters.</p><p>DM: I’M FINE BEING MISERABLE. DON’T YOU AGREE?</p><p>GM: I want to be…more cheerful…</p><p>DM: HAH. LIKE THAT COULD EVER HAPPEN TO YOU.</p><p>GM: How do I…be cheerful?</p><p>SM: Think of what a delightful future you’ll have once you become human.</p><p>GM: Delightful…future?</p><p>DM: AND WHAT DELIGHT IS THERE IN BECOMING HUMAN?</p><p>SM: Oh, that’s easy! It’s… Actually, I have no idea.</p><p>DM: THEN WHY DO WE WANT TO BE HUMAN?</p><p>SM: No idea.</p><p>GM: Then why…are we alive?</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><pre><code class="hljs">              </code></pre><p>Promise for Another Day<br>[<br>]</p><p>Two figures stand atop red leaves blanketing the cold stone floor. One is the dark monster, the other the girl who follows close behind.</p><p>“There are so many things I want to do with you when you turn human, Mister Monster!” says the excited girl.</p><p>“Like what?” asks the monster without turning around.</p><p>“First I want to look at flowers with you. Next. I want to eat cake with you. Then, I want to study with you so we can learn lots and LOTS of fun things together!”</p><p>“What nonsense.”</p><p>Though the monster immediately dismisses the girl’s ideas, the strides which had kept him slightly ahead of her slow to a stop. After a moment, he peers down at her and says gruffly, “Just let me eat more of your dreams. Then maybe we can do some of those things.”</p><p>A smile blooms on the girl’s face. “Okay, Mister Monster! It’s a promise!”</p><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><pre><code class="hljs">              </code></pre><p>The Path to Monsterhood<br>[<br>]</p><p>A silent girl stands on the dusty stone path and stares at a closed door. She holds thoughts of the dark monster in her heart—the one with willful eyes that appeared before her and Mama and then vanished. Though they pursued the monster, they eventually lost sight of it. However, there can be no doubt it now lies beyond the closed door.</p><p>The dark monster stands on the precipice of despair. Unable to understand human emotion, perhaps she will never comprehend the meaning behind the child’s pain. The monster hates this thought, and curses her own powerlessness. But she also knows she can be the child’s friend—and stay with her.</p><p>“I know how you feel, but let’s keep going.”</p><p>Mama’s voice comes from behind the girl, gently urging her forward. And she’s right—they have no time to stand about. They must restore the warped tales within the memories, collect the weapons, and take back the lost fragments.</p><p>All so they might save that child.</p><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Fio</title>
    <link href="/2024/03/07/fio/"/>
    <url>/2024/03/07/fio/</url>
    
    <content type="html"><![CDATA[<h1 id="Fio"><a href="#Fio" class="headerlink" title="Fio"></a>Fio</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>This is where I play: An old ruin a little ways from my house. It’s my special place, and I don’t wanna tell anyone about it. I always come here when I want to be alone.</p><p>But one day, there was someone else here, which had never happened before. It was an older girl reading a book in the shade—I remember she looked kinda sad. I could tell right away she was a Noble: Her clothes were beautiful… And she was the prettiest person I’d ever seen in my life! After a second, she saw me staring and gave me a weird smile.</p><p>“You want this book?” She asked me.</p><p>“I’m done with it.”</p><p>I took it from her, but I was nervous the whole time; I’d never actually talked to a Noble before!</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>The book she gave me was a collection of children’s stories. It had tons of pretty pictures, and I’ve read it every single day since. Each story was about a princess who fell in love with a prince. It was so different from my own life, and it helped me forget how sad everything was for me, if just for a little while.</p><p>But the book was also weird: All the pictures of the princesses had been scratched over with black ink… And the last page of every story was torn out. While I was certain all the princesses would live happily ever after… I also wanted to know how the stories ended, which meant I needed to find the Noble girl.</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>Eventually, I decided to go into town and look for her. It’s not just that I wanted to know how the stories ended—I also wanted to see her again. Because even though I knew we were worlds apart, I still thought I might be able to be her friend.</p><p>There was a lively wedding taking place in town that day. And while the pretty bride in her white dress was surrounded by crowds of people, she looked so very lonely. I recognized the bride right away. It was the Noble girl. Part of me wanted to run up and congratulate her, but I hesitated. Because even though everyone around her was smiling big, she looked like… she was screaming on the inside.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>I had a dream. In it, the Noble girl in her white dress was trying to tell me something. “Don’t lose ⬜⬜ ⬜⬜,” she said. As she talked, red started to spread out from her chest, staining her nice white dress. The color was far too sad for the nice Noble girl, and I woke up from the dream in a panic.</p><p>I went back to playing alone in the ruins. But one day, I noticed something stuck between a couple of stones. It was one of the missing story endings. It showed the prince and princess at their happy wedding. Later, I started hearing rumors in town:</p><p>But I know they’re not talking about the nice Noble girl, because all princesses get to live happily ever after.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>Rainy Winter, Sleeping Princess Part 1<br>[<br>]</p><p>Months before she was cast down to the lowest class</p><p>“Is this dress too garish?” My sister drew up her shoulders as she spoke, grasping the hem of her beautiful white dress. It was generously decorated in layer upon layer of delicate lace, with small diamonds sparkling here and there. I let out a small sigh as I stared at her. “You look lovely, my sister. And well you should, for today is certain to be the finest day of your life.”</p><p>My sister nodded, satisfied, and turned this way and that to better admire her reflection in the mirror.</p><p>We were twins, both princesses in the land we called home. Though we shared a visage, my sister was bright, sociable, smart, and popular. She was the very image of perfection. Whereas I was shy, dull, not at all clever, I didn’t have many friends… I was wholly unremarkable. This day, my sister was setting off on a journey to be wed to a foreign prince. It would be a grand ceremony on a scale I had never seen. Our country and the prince’s had long been at war, you see, but this wedding would unite our families and finally bring an end to the seemingly eternal conflict. It had all been set in motion by our mother—the queen.</p><p>The day was clear, and a warm sun sat high in the sky. Before stepping into the jewel-studded carriage, my sister turned to take a final look at the castle where she was born and raised.</p><p>“I will birth a son and raise the next king, Mother,” she said with pride.</p><p>“So wait and stay safe until then.”</p><p>With these words, she entered her carriage. Moments later, the carriage set off with great pomp. It would be several days before she crossed the border, so she settled in for a long ride. It sparkled in the sunlight, as though lighting the path ahead.</p><p>What a perfect beauty! What a perfect wedding! What a perfect prince!</p><p>I was so proud of my sister; seemingly nothing was beyond her reach, and she had accomplished everything she ever set out to do in life. I knew her future would be bright, with nothing but great things waiting for her. That’s how her life always was, after all. I waved and waved until the carriage vanished from view.</p><p>……</p><p>………</p><p>…………</p><p>The girl slowly opens her eyes. Then closes them. She had been dreaming again. In her dream, she was a princess. She is disappointed that sleep has fled; she wanted to see more. For even though she wasn’t the lead princess in this particular dream, it was still much nicer than her usual nightmares. Defeated, she opens her eyes, gazes for a moment at the foul, grime-covered ceiling above, and rises from her shabby bed. Today, she will study hard, help however she can, and spend another day being a very good girl.</p><p>“Good morning, Mommy. Do you want to hear about my dream?”</p><p>She greets her mother cheerfully, as she does every day. The older woman does not even look up; she just continues peeling potatoes.</p><p>“Dreams are nonsense, girl, and you’ve no time for such foolery. Now eat your breakfast and get to school.”</p><p>On the table is a bowl of thin gruel and a heel of bread. The girl sits on a rickety chair and pulls the food close. The bread is hard enough to shatter teeth. But it’s all Commoners like them can afford, so she’s quite used to it.</p><p>“Last night’s dream was special, Mommy. I was a princess!”</p><p>Her mother sets a potato down and turns to stare at her daughter. Her eyes seem to bore holes in her.</p><p>“I told you to knock off that fool talk. You’re a Commoner, not a Noble—and you never will be.”</p><p>The girl is well aware of this.</p><p>Even the youngest child knowns of the country’s strict class system. Here, the disparity between Nobles and Commoners is great indeed. The Commoners have long been discontent with their lot in life, and the Nobles worry increasingly about social unrest. But the girl had no wish to argue politics—she simply wanted to make conversation with her mother. Stung, she drops her eyes and quickly finishes her breakfast.</p><p>“I’m going now, Mommy.”</p><p>The girl hurriedly gets dressed, gathers her things, and leaves the house for school. Winter. A most rainy season. Though the rain has stopped, puddles still dot the road. She stands at one and looks at her face reflected in the water. She does not look like her mother. Nor does she look at all like her father. She senses she is not much loved by either. And she believes her face to be the reason. Suddenly angry, she stamps on the face in the puddle and rushes off to school. She is determined to study hard and win her parents’ praise.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>Rainy Winter, Sleeping Princess Part 2<br>[<br>]</p><p>The roses were finally blooming. From my window, I saw the bright red flowers stretching out as far as the eye could see. The buds had been firmly shut for so long, but warm weather had finally come yesterday to loosen winter’s icy hold. But as magnificent as the flower garden was, I had grown so very weary of looking at it. I had been staring at it since the day I arrived in this country…. Since the day they locked me in this room. To pass the time, I started counting the roses. When I reached the 48th rose, I spotted the prince walking alongside his young and beautiful princess.</p><p>I knew the princess well. She was my twin, after all. A group of Nobles followed them, chattering merrily away. The castle, a fun and lively place for most inhabitants, hosted a tea party in the garden at this time every week. Delighted peels of laughter soon intermingled with the clinking of porcelain. I quietly slipped out of view and listened in.</p><p>“You have been beaming with happiness every day since the wedding, Your Highness.”</p><p>“People all across the land speak of the princess’s beauty!”</p><p>It was true: The marriage of a prince from the west and my sister from the east was on the lips of people in both countries. Of greatest concern was when she might bear him a child.</p><p>That was the reason I am here; the reason I was summoned to this place soon after the wedding was complete. Because I…I am to birth the prince’s child in place of my sister.</p><p>“Oh, I can hardly wait! Will it be a prince or princess?”</p><p>“No matter what, I’m certain it will be adorable.”</p><p>“I’ve heard His Majesty the King has already prepared several midwives for the happy day.”</p><p>It didn’t take long for the prince and his court to realize his new bride was barren. So I was smuggled into the country in the dead of night. No one could be allowed to know of my existence. Of course, I would do anything for my sister.<br>Anything….<br> I just thought she might come see me at some point.</p><p>“The sun is beginning to set.”</p><p>“You should not be out and about in the cold, Princess. Let us return to the castle at once.”</p><p>As the crimson glow of dusk began to fill the room, the lively voices grew distant. It seemed the party had ended. I moved from the window and began preparing myself for the prince’s arrival—for though my sister had not seen fit to visit, he arrived every night like clockwork. And there, in that darkening room, I waited.</p><p>……</p><p>………</p><p>…………</p><p>The loud ringing of a bell pulls the girl back to reality. She had been unable to concentrate during class; she kept thinking about last night’s dream. The sun sits high in the winter sky, its rays peeking through gaps in the clouds to brighten the classroom. It was the continuation of her previous dream, the one where the princess rode off in a carriage. The girl is yet young, and while she does not understand her dream completely, she knows that Nobles sometimes have to do what their parents say and live a life not wholly their own. In this way, she finds being a Commoner a relief. And once she is grown up, she hopes to live a life of even greater freedom.</p><p>The school she attends is specifically for Commoners. Everyone, from the highest-ranking teacher to the lowliest student, is still a Commoner at the end of the day. The classroom grows lively as some of the more impatient children begin to gather up their textbooks.</p><p>“That’s all for today,” says the teacher.</p><p>“Oh, but before I forget, I have the results from last week’s test.”</p><p>The teacher looks directly at the girl and smiles.</p><p>“Your classmate here had top marks yet again. I hope you all learn from her and study hard!”</p><p>The girl happily hugs her textbook to her chest at the news. She runs the whole way home to tell her mother.</p><p>“Mommy, Mommy! Guess what!? I got first on the test again!” Her mother is standing in the living room with her back to her, holding a large mug in her hands. She slowly turns around at her daughter’s voice.</p><p>“If I study lots, do you think I could become a doctor or a lawyer?”</p><p>Her mother finishes off the contents of the mug—which is clearly some sort of alcohol—and slams it down on the table. The scent of her breath fills the room like a cloud.</p><p>“Are you mad, girl?” she says loudly.</p><p>“We’ve not the money to let you study forever.”</p><p>“Now clear your head of these fool dreams and get to the laundry!”</p><p>Dejected, the girl leaves to fetch the hamper. For a brief moment, a long-buried thought rises up in the girl’s chest:<br>What if she’s not my mother? We look nothing alike, after all.<br> She shakes the thought away.<br>No. I love her. Even if we aren’t related by blood…<br> But the poor girl’s desire for love has no outlet, so it simply continues to swell painfully in her chest.</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Rainy Winter, Sleeping Princess Part 3<br>[<br>]</p><p>Winter had arrived; the flower garden was cold and barren. But inside a heated room, a newborn baby made its first cry.</p><p>“Oh dear. A girl.”</p><p>The midwife holding the baby made no attempt to hide her disappointment; nor did the king and prince, who were both leaning against a nearby wall. With sweat running down my body, I instinctively reached out to hold the new life I created. But they do not even grant me that kindness.</p><p>“A shame,” said the king.</p><p>“Very well. Dispose of her at once.”</p><p>He and his son left the room without another word. But the princess—my twin sister—remained.</p><p>“You there,” she said to the midwife.</p><p>“You are dismissed.”</p><p>The woman froze in place for a moment. Then she set the baby down, bowed, and scuttled out of the room along with the rest of the women who attended the birth. The last time my sister and I were alone was a year ago—when I praised her exquisite wedding dress. But I lay still and quiet in my bed, unsure if I should view this as a heartfelt reunion or begin begging for mercy.</p><p>“This is your fault, you know? What I’m about to do? If you’d just given birth to a son, it wouldn’t have come to this.”</p><p>With that, my sister produced a small knife from her pocket…</p><p>…………</p><p>Cradling my newborn daughter, I ran from the castle with only the clothes on my back.</p><p>My mind was chaos.</p><p>They were going to kill my daughter. My own sister was going to kill her! Why!? Why, why, why!?</p><p>I had no answer to this question. But then again, I’d never been especially bright. I came to this wretched country for my sister’s sake. I bore a child for my sister’s sake. All for her sake. All for her sake all for her sake all for her sake…</p><p>I had nowhere to go. A traveling merchant kindly allowed me to ride on his cart, and after a night of hard travel, I woke up in a small border town. On the harsh midwinter morning, a mixture of snow and sleet rained down without mercy or pause. Having pushed my body to its limits right after giving birth, I was stricken with a high fever and fuzzy thoughts. But my sweet daughter was warm and dry in a thick blanket, and as I held her to me, my troubles seemed to dissipate. She was asleep. She looked just like an angel.</p><p>“Hey, there’s someone on the ground over here!” I heard footsteps splash in a puddle near my ear, and the voice of a young woman echo above my head.</p><p>“Heavens, she’s got a baby…” Another voice called out—a man this time.</p><p>“Aye, I fear this girl’s done for.”</p><p>“Poor thing. To think she’ll be leaving this child behind…”</p><p>They almost seemed to be talking about someone else. Apparently I collapsed, though I did not remember it. I could hear my daughter crying nearby. Despite how hard the sleet was coming down, I could do nothing for her; I did not even have the strength to stand. Thankfully, someone had found us. With great effort, I turned my head and looked at the couple. Please…raise her as your own. Make her happy. The words I had intended to say never made it from my mouth. The chill of the sleet pounding my body slowly faded away, the sound growing distant…distant…distant… And finally, my conscious faded….Forever.</p><p>……</p><p>………</p><p>…………</p><p>The girl briskly walks through a bone-chilling cold. Her mother had sent her out to fetch their bread ration. It’s a rainy winter day—just like the one from her dream. She is wearing every layer she owns, but the sudden downpour cuts through her garments like a knife. As she listens to the never-ending torrent, she thinks back on the sight she dreamed of that morning. Now that I think about it…<br>It’s funny how the couple that found “me” on the ground looked a lot like Mommy and Daddy…</p><p>“Mommy! I’m home!”</p><p>The girl, her pigtails dripping, produces three loaves of bread from the inside of her coat and grins happily. The bread is a bit damp, but dry compared to the girl. Her mother, who was warming herself at the hearth, takes the loaves with a bit of a guilty look.</p><p>“Thank you, girl. Now hurry up and get changed! You’re dripping water all over the house.”<br>As the girl slowly peels off her clothes, she only thinks of one thing: I hope that made Mommy happy…</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Rainy Winter, Sleeping Princess Part 4<br>[<br>]</p><p>“How long are you planning to sleep, child!? Get up already!” The woman throws the bedroom door open. Her daughter, who usually wakes up on her own, has slept late into the morning today. She stomps over to her tiny bed.</p><p>“Come now, get up. I need you to fetch the bread again.”</p><p>The woman throws back the blanket on the bed to reveal the girl lying there languidly, her face red.</p><p>“M-Mommy… I think I’m sick…” croaks the girl.</p><p>“I’m cold and hot all at once…and I c-can’t move…”</p><p>Her mother places a hand on her forehead. She is burning up. The woman immediately recalls how she sent her out in the sleet the previous day to fetch their food. Then she emits a small sigh and pulls the blanket back in place.</p><p>“Well then, never mind the bread. You just rest.”</p><p>“Th-thank you, Mommy…”</p><p>As the woman gets up and makes to leave, the girl calls out to her weakly.</p><p>“Well?” says the woman.</p><p>“What is it?”</p><p>“I wanna slurpy apple,” replies the girl in a pitiful voice.</p><p>“Is that okay?”</p><p>The woman stares at the child in the blanket. She never asks for things, she thinks. Without a word, the woman closes the door behind her. And to request slurpy apple—a grated fruit treat she used to make her when she was small—is even stranger.</p><p>She walks into the living room to find her husband peeling off his coat, still damp from his turn on the watch.</p><p>“Raining again,” he says.</p><p>“Awful stuff.”</p><p>The woman places a bowl of warm soup on the table. Her husband peers down at it, clearly disappointed, but she chooses to overlook this. With a small sigh, he digs into his meager meal. But after a few moments, he suddenly puts the spoon down.</p><p>“Hey, how’s the kid?”</p><p>“Feverish. I’m letting her rest today.”</p><p>“I swear, that child is next to useless.”</p><p>The woman sits opposite her husband and plucks an apple off the table.</p><p>“She came home soaked after her errands yesterday—probably what made her ill.”</p><p>She picks up a small knife and begins peeling the fruit.</p><p>“You sent her out in that?” says her husband.</p><p>“Hells, the other guards won’t even leave the barracks when it’s coming down so.”</p><p>The woman stops peeling and glares at her husband.</p><p>“Oh, so now I’m a magician who knows exactly when the rain is going to start and stop?”</p><p>Her husband wisely turns his attention back to his soup. The woman returns to her peeling.</p><p>“You know, she’s not a bad kid,” he says finally.</p><p>“You don’t have to be so cold to her.”</p><p>“Honestly, sometimes I feel like she’s…wasted on us.”</p><p>The peeled apple skin curls into a neat pile on the table.</p><p>“You’re right there,” she replies.</p><p>“Why, if she had our genes, she’d grow up to be a frightful beast just like us!”</p><p>The man looks down at his bowl again; silence was always his retreat when things weren’t going his way. The woman picks up the empty soup bowl, takes it to the kitchen, and returns with a grater. She slides the apple against it, creating a harsh rasp.</p><p>“You know I hate it when she rubs our differences in my face.”</p><p>The sound of the apple on the grater hangs heavy in the air.</p><p>“It’s almost her birthday,” says the husband. He stares out the window as he talks.</p><p>The rain is coming down harder, turning into sleet.</p><p>“I mean, not like we know exactly when she was born…”</p><p>“But we found her on a cold, rainy day much like this one.”</p><p>The grating slows as the apple is worn down to nothing.</p><p>“She’s starting to look like her mother,” says the woman after a long pause.</p><p>“Won’t be long until she realizes she don’t look like us at all.”</p><p>“Aye, that woman was a great beauty indeed.”</p><p>The woman glares at her husband again, but says nothing. Instead, she gets up and tosses the apple core into the sink. With the bowl of grated apple in hand, she returns to the girl’s room.</p><p>Her face is still red, but she is at least sleeping.<br>Pity this poor thing ending up with us when she could have lived a good, free life as a Noble.<br> The woman reaches out to touch the girl’s cheek, but stops. Instead, she places the bowl on the nightstand and leaves. The girl is beginning to realize she is not their true daughter. And yet, she does all she can to earn their love. But her looks aren’t the only thing that set her apart: there is also her purity, her honesty, and her bravery. The beauty of her very spirit tells the couple how different she is…. Perhaps they made a mistake taking her in that day. The apple sitting beside the girl begins to brown. It grows darker still. Uglier. Horrid. But the girl notices nothing in her deep, deep sleep.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>A Wish in Full Bloom, Part 1<br>[<br>]</p><p>It is a terrible, terrible monster. His body is jet-black armor, and he has twisted insect wings on his back.</p><p>And sometimes, the monster comes to this world and EATS people.</p><p>This is why we must all unite and fight him whenever he appears.</p><p>……</p><p>…………</p><p>………………</p><p>As a light spring breeze dances through the plaza, four young girls sit around an open picturebook. The image on the page displays an eyeless, ebon monster. It resembles a large insect, yet is somehow uncannily human. The sight makes the hair of all who see it stand on end.</p><p>The children take one glance at the picture and begin to scream with both terror and delight.</p><p>The tale of the monster has been passed down in this country for an age.</p><p>The picturebook which now entertains the four children is based upon it.</p><p>The girls enjoy themselves regardless—huddling close, laughing, scaring one another.</p><p>But then comes the sound of light footsteps—thin soles on flagstone.</p><p>The four girls look up from the book, their frigid gazes alighting on the source of the sound. It is another girl, her hair tied back in pigtails. Her head hangs low. On her neck and wrists are manacles and a collar, a symbol of her status as a Goat Person.</p><p>Goat People<br>.</p><p>That is the name for this nation’s lowest class of person. The Goat girl attempts to hurry past the other children, trying not to look at them as she does. And then…</p><p>“Hello.”</p><p>The leader of the four gently calls out to the Goat girl.</p><p>The lone girl’s face brightens.</p><p>The leader’s personality can be a bit overbearing, but she is a good student, and her greeting sounds both pleasant and sincere.</p><p>The Goat girl is delighted.</p><p>But as she is about to return the greeting, she falls forward.</p><p>Her words are swallowed by cobblestone and shame.</p><p>The leader has tripped her.</p><p>She looks at the Goat girl and laughs, and her friends soon join in.</p><p>Goat People are the lowest of the low; they are meant to be abused without reason or cause. This idea has diffused itself among the young children.</p><p>The leader then speaks: “We are honored to be in the presence of a Goat Person this day, girls! Now…shall we play Monster?”</p><p>Play Monster.</p><p>In this game, one child takes on the role of the monster while the others pursue them. And, of course, the Goat girl is to take on the role of monster.</p><p>The other children throw the book at the lowly girl’s feet.</p><p>The open page shows the dark monster standing by himself.</p><p>He is hated. Just as she is. And so the girl begins to run. She runs and she runs and she runs—for she knows<br>terrible<br> things will happen if she is caught.</p><p>As she flees for her life, she eventually comes to a desolate and aging ruin. It is her precious, secret spot for play. Though it is typically worn and dirty, beautiful flowers bloom here at this time of year. After she ensures the other girls have not followed, she crouches down among the blossoms and breathes a sigh of relief. When her ragged breath finally calms, she lifts her head…</p><p>Only to be greeted by a surprising sight. The man-eating monster stands before her with his jet-black body and hideous insect wings. He waits silently among the colorful blooms.</p><p>“Are you…Mister Monster?” asks the girl. Her voice is a whisper’s memory. He remains silent. Suddenly, a thought comes to her:</p><p>We are the same.</p><p>The dark creature is her twin in all but name.</p><p>“Are you lonely, Mister Monster?”</p><p>She approaches him slowly. Flowers dance in the wind around her feet. “I think you are.”<br>Poor Mister Monster. Everyone hates you just like they hate me.<br> She gently places her hand on the silent monster. Strangely enough, she feels no fear. What she sees in front of her is not some terrible brute, but a creature who is alone no matter where he goes. A creature just like her. This is why she is not afraid.</p><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>A Wish in Full Bloom, Part 2<br>[<br>]</p><p>Tap. Tap. Tap.</p><p>The Goat girl’s light footsteps echo across the plaza. She makes her way for the blossom-covered ruin. Her secret spot where the monster waits.</p><p>“Hey. You.”</p><p>A voice suddenly stops her in her tracks. She turns to find the four girls who are always playing in the plaza. The leader has called to her. “You haven’t been coming by lately. We miss you! Why don’t you play Monster with us today?” A cruel smile twists the corner of the girl’s mouth as she speaks. They want to play Monster with the Goat girl so they have an excuse to cause her pain.</p><p>The Goat girl’s eyes drop to the ground. She takes a quiet step backwards. “I’m sorry,” is all she says before dashing away.</p><p>The children exchange bewildered glances. The leader’s expression twists further. Her mind reels.<br>That<br>Goat<br> disobeyed me! ME!</p><p>Also, she’s been in a strangely good mood lately.</p><p>It makes me sick.</p><p>No Goat Person should ever smile like that.</p><p>The leader’s eyes bore into the girl’s back as she runs.</p><p>One. Two. Three.</p><p>One. Two. Three.</p><p>Red flower. Blue flower. White flower.</p><p>The girl’s voice echoes throughout the ruin, which overflows with colorful flowers. She moves around the aberrant monster, dancing ballet on a beat of three. Only recently did girl and monster meet, yet already they are in perfect sync. It’s as if they are partners—as if they have been dancing together for the whole of their lives.</p><p>One. Two. Three.</p><p>The girl dances.</p><p>One. Two. Three.</p><p>Flowers nod.</p><p>One. Two. Three.</p><p>Wind blows. Petals flutter this way and that in the air.</p><p>Suddenly, the girl gasps in wonder, her dance coming to a halt. Both she and the monster look to the sky. They see petals soaring though the blue.</p><p>“Where do you think the flowers are going, Mister Monster?”</p><p>The monster does not reply. He is ever silent, never speaking. But the girl feels she hears his answer regardless. His voice is gruff, yet kind. Time spent alone with the monster is unbelievably precious to the girl. As a Goat Person, all she has ever known is abuse. But this lonely monster makes no attempt to wound the girl. This is why she hides away in the ruin.</p><p>It is so she does not have to face a painful reality. Yet while this is all happening…</p><p>A lone figure hides among the crumbling walls, quietly watching the girl. It is the leader of the children who play in the plaza. She thought the Goat girl’s pleasant mood strange, and so followed her in secret. And when she came to the ruin, she beheld a most confusing sight. The Goat girl was dancing by herself. Laughing by herself.</p><p>Mister Monster!<br>The leader watches in silence as the girl turns to empty space and calls to the monster over and over again.</p><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>A Wish in Full Bloom, Part 3<br>[<br>]</p><p>The Goat girl’s bindings garner cold stares as she walks through town. But she does not care. For no matter what terrible things might happen, she has the companionship of a very kind monster. Yet another day finds her racing down the street for the ruin where the monster waits. Suddenly, she comes to a halt.</p><p>Smoke tickles her nostrils. Her face clouds. Something is on fire.</p><p>Knowing this bodes ill, she makes for the ruin as fast as she can.</p><p>I hope Mister Monster is okay<br>, she thinks to herself.</p><p>She soon arrives at the ruin. It is ablaze. Flames billow from a great pile of discarded junk. Broken chairs. Shattered clocks. The flames lick at the flowers, threatening to turn everything to ash. The ruin was meant to be a secret place for herself and the monster, and now it is lost.</p><p>“Mister Monster, no!” cries the girl. She sounds as though she could start sobbing at any moment. The monster is sitting listlessly in the middle of the ruin.<br>He’s going to die.</p><p>But as she leaps into the flames to save him…</p><p>“She’s here! The Goat is here!”</p><p>High-pitched laughter scratches the girl’s ears. She turns in the direction of the voice. The four girls from the plaza are waiting for her. Their leader takes a step forward, a lopsided smile on her face. In her hand she holds a stick, the tip smoldering with flame. She realizes these four are the ones who set the ruin to burn—the ones who stole her special place.</p><p>A black snake worms its way into her heart. She has never felt such an emotion before.</p><p>“You’re awful…” she mutters fiercely. “How<br>dare<br> you do this to Mister Monster!”</p><p>“Mister Monster?” The children exchange glances and begin to snicker amongst themselves. A moment later, the leader speaks.</p><p>“Your ‘Mister Monster’ doesn’t exist, Goat. He’s just a thing from a picturebook.” The leader had glimpsed the girl’s secret. She saw her playing by herself. She saw her speak to empty air.</p><p>“You poor thing. You must have been so<br>lonely<br>!”</p><p>Her words tear at the Goat girl like glass.</p><p>“Don’t you get it? You made the monster up!”</p><p>“……”</p><p>The girl remains quiet, her eyes glistening under tears.</p><p>But then…</p><p>“No. He’s here. I know he’s here.”</p><p>She refuses to acknowledge it—she<br>cannot<br>. Doing so would mean her only friend does not exist.</p><p>“Are you okay, Mister Monster? You must be in so much pain.”</p><p>With teetering steps, she enters the flames. She finds herself entering an empty space. Flames lick at her legs. Her arms. But she pays them no mind. Because she can<br>see<br>. She sees the monster sitting amidst the fire, his body covered in burns. He is her precious friend.</p><p>Her hand brushes empty air. But to her, it is the monster’s cheek. She crouches down to pluck a single burning flower at the monster’s feet. Hot fire chars her palm. The pain is an idle thing. Distant. For she knows the monster suffers far more than she.</p><p>This is all<br>their<br> fault.<br>Her gaze rests on the burning flower.<br>Dancing flames reflect in dull eyes.</p><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>A Wish in Full Bloom, Part 4<br>[<br>]</p><p>The sun sets.</p><p>Darkness falls over the area. The once-dancing flames, now clinging to life, cast an eerie light on the ruin.</p><p>The children who started this fire are long gone, returned home to warmth and family. They had amassed the junk and lit the spark.</p><p>The ruin—the secret spot for the girl and the monster—is now little more than a wreck.</p><p>The girl stands silent. Alone. She stares at the monster, who is now a shriveled thing covered head to foot in burns.<br>Your “Mister Monster” doesn’t exist.<br> The leader claimed the girl’s monster was merely a vision. But the girl never had any intention of acknowledging that truth. Her monster is here. He is<br>right<br> here. Yet the children filled the ruin with garbage and set it ablaze all the same. They hurt her monster.<br>Hurt<br> him.</p><p>I will not let them get away with this.</p><p>A new emotion, dark and heavy, encroaches on her heart. She picks up a piece of kindling and sets fire to the tip, creating a torch. Then she begins to walk. Her steps are unsteady, as though possessed by some entity. She arrives at a beautiful house, a dwelling that resembles the magnificent homes one might see in picturebooks. It belongs to the leader of the children.</p><p>The girl lifts the torch. Her mind whirls as she stares into the flame. The leader of the children set fire to her ruin. She burned her monster. Which means… Which means…</p><p>Which means she can destroy her home. She can destroy what the other holds most dear.</p><p>Burn it all.</p><p>With darkness urging her on, she raises the torch high above her head and thrusts it forward. Fire crackles. Sparks fly. Before her, something begins to burn.</p><p>…It is the monster.</p><p>The torch never reaches the leader’s house. Instead…</p><p>The monster has leapt in front of her, letting the flames strike him. Almost as though he is trying to stop her.</p><p>“Mister…Monster?”</p><p>The monster falls face-first onto the ground, his burning body writhing in pain.</p><p>“MISTER MONSTER!”</p><p>She rushes to him.</p><p>“I’m so sorry, Mister Monster! This is my fault! This is all my fault!”</p><p>All she can do is weep. She repeats her apology as she clings to the monster’s blazing body. But then she realizes something…</p><p>The blaze enveloping him holds no heat. Because the monster is nothing more than a figment of her imagination. Somewhere deep inside, she had known this—yet acknowledging it was a weight too heavy to bear. Because the kind monster had always been by her side. And yet…she hurt him. The monster’s hand trembles and gently brushes her cheek. It is incorporeal. Cold. Yet she imagines warmth anyway.</p><p>He’s so warm…</p><p>It is a strange warmth, one that makes her feel the darkness which had overcome her heart is beginning to fade. The monster’s body quietly burns in the gloaming. It twinkles. It shines. Finally, it turns to ash and begins the long ascent into the sky.</p><p>“Goodbye, Mister Monster.”</p><p>I had so much fun.</p><p>I had fun dancing with you.</p><p>I…fun watching flowers…in the wind.</p><p>I…fun…you silently…my side…</p><p>And…</p><p>And…</p><p>The girl realizes something. As the darkness that had encroached on her heart fades away, so too do her memories of the monster. The monster has taken all of her twisted feelings with him.</p><p>“Thank you, Mister Monster.”</p><p>Her memories dim, then fade. Soon the girl does not understand why she is crying at all. Yet she continues to repeat herself.<br>Goodbye. Goodbye.<br> She does not fall silent until the final speck of ash has vanished into the heavens.</p><p>……</p><p>…………</p><p>……………………</p><p>The junk sits in a pile in the ruin. The beautiful spring blooms are gone. She is sad her secret place was laid to waste like this, but she is a Goat Person. It is to be expected. She repeats this to herself as she begins cleaning up the junk. “There we go,” she says as she lifts a broken clock. Suddenly she stops. Her heart catches in her chest. Beneath it, she finds a small flower still in bloom. The rest are blackened ash, yet this one alone remains. It shines brilliantly in the dark. A strange feeling suddenly bubbles up in the girl’s heart.</p><p>I miss you.</p><p>I don’t know who you are…</p><p>But I miss you.</p><p>We’ll play together when I see you again. We’ll be even better friends.</p><p>Bewildered by the sudden well of emotion, the girl falls to her knees beside the flower. She begins to pray. She does not know the name of whom she misses, nor what they look like. But whoever they are, they have given her such<br>warmth<br>.</p><p>And so, she prays she might one day see them again.</p><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><pre><code class="hljs">              </code></pre><p>Angelic Sacrifice<br>[<br>]</p><p>Mama: If I were to describe her in a word, it would be…angelic! Yes, that’s it.</p><p>Carrier: seems you ain’t been acquainted with her more devilish side yet.</p><p>Mama: Society can be so cruel. How could they possibly sacrifice a blameless child?</p><p>Carrier: Same cruel society is always sacrificing my poor salary too…</p><p>Mama: Still, I believe her fate changed when she met the monster.</p><p>Carrier: My fate changed when I met my wife―in many meanings of the word! Heyo!</p><p>Mama: Goodness, but you are an irritating creature.</p><p>Carrier: Ow! Hey! don’t pinch me like THAAAT! OWWW!</p><p>Mama: The girl never lost her kindness, even in the face of needless malice. But though that kindness was not enough to bring her salvation, it saved<br>him<br>, and he brought salvation to her heart. In this feedback loop of benevolence, she became herself anew.</p><p>Carrier: GYAAAAAAH! HRAAAAAGH! …HAH!</p><p>Mama: Oh my. You managed to escape my grasp.</p><p>Carrier: Gimme a goddamn break already, lady!</p><p>Mama: Language! That poor girl would be sad to hear such things from you, Carrier. After all, she adores you.</p><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><pre><code class="hljs">              </code></pre><p>REPORT CARD<br>[<br>]</p><ol><li>GRADES</li></ol><p>Composition: A</p><p>Grammar: A</p><p>Mathematics: A</p><p>History: A</p><p>Geography: A</p><p>Science: A</p><p>Art: C</p><p>Music: A</p><p>Physical Education: A</p><p>Ethics: A</p><p>Labor: A</p><p>Nature Appreciation: A</p><ol start="2"><li>ATTENDANCE</li></ol><p>Days Present: 80</p><p>Absences: 0</p><p>Late Arrivals: 0</p><p>Times Left Early: 0</p><ol start="3"><li>TEACHER COMMENTS</li></ol><p>Your daughter’s grades and attitude are excellent.</p><p>She is considered an exemplary student among the staff, and interacts with genuine care for all her classmates. Your daughter’s stellar personality is a testament to her wonderful home environment and the love you show her.</p><p>As she is a student of particular quality, we strongly recommend she pursue higher-level education. We believe she will prove a valuable asset for society in the future.</p><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><pre><code class="hljs">              </code></pre><p>A Gift from Mommy and Daddy<br>[<br>]</p><p>One cold and snowy morning, I looked out the window and watched as my daughter had a snowball fight with some of the neighborhood kids. They were all bigger than her—and probably four or five years older—but she kept making snowballs and throwing them as best as she could. That’s when I realized she was the only one without gloves, and that her poor hands were bright red. Yet she still wore a beaming innocent smile on her face, which made my heart hurt.</p><p>“Fio’s so cheerful, even on a frigid day like this.”</p><p>My husband, having just woke, came over to stand beside me, watching our daughter amidst the large crowd of children. Once he left for work, I looked for one of my old sweaters. He’d given it to me years ago and I’d always taken good care of it, so I figured it would still be in decent shape. After pulling it out of the closet, I unraveled it and began to knit a pair of gloves from the yarn, figuring the soft hues would look better on her than me, anyway. But when my husband came home that night, we looked at each other and burst out laughing, because he’d gone to town and used what little money we had to buy her a pair of mittens.</p><p>That night, I watched as our little girl, worn out from playing all day, snored softly in her sleep.<br>May these blissful days continue into eternity<br>, I prayed as I gently placed a small blanket over her.</p><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nier:Saryu</title>
    <link href="/2024/03/07/saryu/"/>
    <url>/2024/03/07/saryu/</url>
    
    <content type="html"><![CDATA[<h1 id="Saryu"><a href="#Saryu" class="headerlink" title="Saryu"></a>Saryu</h1><h1 id="Character-Story"><a href="#Character-Story" class="headerlink" title="Character Story"></a>Character Story</h1><h2 id="Story-1"><a href="#Story-1" class="headerlink" title="Story 1"></a>Story 1</h2><p>After years in school, all of my hard work has finally paid off. I’m now researching magical pharmacology with my best friend—the slightly scatterbrained girl in glasses.</p><p>Everyone in our class approaches their research carefully. That’s because each month, the teachers look over our work and evaluate its merits. Knowing this, I dive into my studies with gusto.</p><p>I’m good at focusing on the tiny kinds of details others tend to miss. After a while, the others take notice of this talent, and I’m eventually chosen to be our class representative.</p><p>But while I usually try to do everything myself, my best friend is always reminding me to try and work with the others. So I decide to give it a shot—for her.</p><h2 id="Story-2"><a href="#Story-2" class="headerlink" title="Story 2"></a>Story 2</h2><p>At first, everyone in class seems to be enjoying themselves. But as the days go by, the others start to get more and more worn down.</p><p>I find this terrifically disappointing, because it’s not a lack of talent that holds them back—it’s a lack of effort. But they soon begin to drop out of class. One…after the other…after the other.</p><p>Eventually, the only students left are me and my best friend. I can tell this stresses her out, but the harder she works, the more nervous she gets—and her work soon begins to suffer.</p><p>One day, I turn to her and put a calming hand on her shoulder. “Hey,” I say. “You’re going to be all right. We’re almost through this, so just stay focused.”</p><h2 id="Story-3"><a href="#Story-3" class="headerlink" title="Story 3"></a>Story 3</h2><p>I can tell the lack of other students disturbs my friend, but it doesn’t bother me at all. I’ve never needed outside sources for motivation, and I won’t ever give up on a task before seeing it through to the bitter end.</p><p>That’s not to say this is easy, because it’s not. It’s hard. A task of this size split between two people is<br> hard. But my friend and I put our heads down and keep going, and somehow we come to the moment of the final experiment.</p><p>It all comes down to this: The two of us have to pour separate compounds into our beaker at the same time. And if we’re off by so much as a drop, all of our work will have been for nothing.</p><p>The moment of truth. My hands are slick with sweat. Slowly,<br> slowly, we begin pouring our compounds. But then my friend makes a sound—a tiny, almost imperceptible gasp—and our potion immediately turns from a bright blue to a dark, muddy brown.</p><h2 id="Story-4"><a href="#Story-4" class="headerlink" title="Story 4"></a>Story 4</h2><p>Later that night, I knock on my best friend’s door. And while I know she’s in there, she refuses to answer. “Hey,” I say finally. “Come on. We have to try again.”</p><p>“Why?” she responds in a trembling voice. “You’re so good and I just… I don’t understand any of this. You’d be better off without me.”</p><p>“You’re right,” I say bluntly. “But me being so good means that no matter how many times you blow it, I’ll be there to pick you up. Now let’s go.”</p><p>The door creaks open and my friend’s face appears. She wipes absently at tears with one hand and puts her glasses back on. Then, grasping her other hand, I drag her back to the lab.</p><h1 id="Dark-Memories"><a href="#Dark-Memories" class="headerlink" title="Dark Memories"></a>Dark Memories</h1><h2 id="Story-1-1"><a href="#Story-1-1" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">                </code></pre><p>The Day I was Born Part 1<br>[<br>]</p><p>A while after the girl was enrolled in the school of magick</p><p>She was brought here as a child so long ago. Days. Months. Years. Who can even say anymore? The reliefs carved on the outer walls seem to deny all who would dare seek entry to this place.</p><p>The wooden door creaks ominously whenever it opens. Each time, she sees a corridor shimmering with sunlit beauty as all the colors of the rainbow filter in through stained glass.</p><p>This is the school of magick. It has always been thus, and thus will it always be.</p><p>With everyone at rest this holiday morning, the school lies quiet as a grave.</p><p>But one student is up and about. It is the wavy-haired girl, who has abandoned the possibility of sleep in order to sneak into the school kitchens. Once there, she sets her bag on a table and reaches up for a nearby shelf.</p><p>One by one, she begins pulling down utensils. She takes each item and carefully sets it next to a pile of ingredients and a recipe book. When this task is complete, she wipes a bit of sweat from her eyes and dons an apron. By their own kind of magick, the girl’s assembled ingredients eventually become a thin, flat disc of dough. She takes a heart-shaped cutter and begins to stamp out smaller pieces from it. Once ready, her cookies slide into a warm oven.</p><p>After a minute of waiting, a sweet, gentle scent drifts across the empty kitchen.</p><p>The girl kneels down and peers through the glass oven door, watching as her treats slowly turn a golden brown. “I hope you taste good,” she whispers.</p><p>The children at the school of magick all live together. With a sizeable roster of students, there are always a couple dozen sharing birth months in any given term. Next month is the wavy-haired girl’s turn, along with one of her friends from class. The wavy-haired girl is practicing making the gift she intends to give her, because she wants it to be perfect. She pulls a cookie from the oven and bites into an edge. Flavors dance on her tongue, as well as an almost indescribably subtle sweetness.</p><p>Her mouth bends into a smile.<br>These will work,<br> she thinks.<br>These are good.</p><p>Now she just needs to practice her wrapping skills. Still smiling, she tidies up the kitchen, picks up her cookies, and returns to the dorm. She places her bag on her desk and waits for the special gift-wrapping fabric she had ordered to arrive. She would use some of it to wrap her practice batch of cookies and give the entire thing to her best friend, the bespectacled girl who lives next door.</p><p>Suddenly, the soft sound of a bell echoes through the room.</p><p>My fabric!<br> Delighted, she flings the door wide…only to find her teacher standing there.</p><p>She looks her teacher in the eye and smiles calmly, hoping her expression does not betray the butterflies that suddenly race inside her stomach. “Yes?” she asks. “What is it?”</p><p>Excuses for her recent kitchen excursion race through her mind. With an indecipherable look, the teacher slowly reaches out and hands her an envelope.</p><p>She pauses, unable to process what is happening. Finally, she manages to speak.</p><p>“Is that…a letter?” There is a slight tinge in her voice. Relief, perhaps?</p><p>Regardless, her teacher does not notice. “Yes. A letter. Come find me once you’ve read it.”</p><p>As she takes it with a puzzled look, her teacher turns around and departs.</p><p>She closes the door and stares at her new prize. The crisp white envelope has been closed with a wax seal.<br>It’s so formal,<br> she wonders.<br>What could it be?</p><p>She withdraws an opener from a drawer and slips it under the wax seal.</p><p>When she pulls the letter free, she sees that it is from the hospital in her hometown.</p><p>…The hospital? But why?<br> She begins to read the words on the page, her eyes darting back and forth like moths before a flame. The writing is clinical. The message brief.</p><p>Her mother has been admitted. As she ruminates over this new information, she feels the tips of her fingers grow cold. What should her response be?<br>What would it be if she came from a normal family? The moment the thought enters her mind, she knows her reaction is wrong. Her mother is ill. Perhaps dying. Yet she does not lose composure.<br>She feels no sadness. No worry. She simply stands in place, reading the same scant words over and over and over again.</p><h2 id="Story-2-1"><a href="#Story-2-1" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">                </code></pre><p>The Day I was Born Part 2<br>[<br>]</p><p>After passing through the stonework city, the girl’s vision fills with green.</p><p>The air on her skin feels different somehow. Brisker. She is making her way back to her hometown.</p><p>A few days earlier, she went to her teacher and revealed the contents of the letter.</p><p>She told how her mother had taken ill.</p><p>And she explained that the hospital had asked her to come out so they could go over the issue in person.</p><p>After hearing this, her teacher granted permission for the journey.</p><p>As the scenery continues to change, the girl begins to recognize more and more of her old home.</p><p>A sense of nostalgia weighs heavy on her heart.</p><p>She had been nervous in the days leading up to her departure.</p><p>So much so that her teacher had given her some kind words as she departed: “Try not to worry. I’m certain everything will be all right. And I know your mother will be thrilled to see you.”</p><p>But her mother is the very thing casting the shadow on the girl’s heart. Not because she is sick.</p><p>Oh no. That is not it at all. It is because of what she did.</p><p>The girl does not think of the woman who birthed her as her mother. To tell the truth, she barely thinks of her at all. Because she also remembers something else her mother once told her:</p><p>“I wish you had never been born.”</p><p>For these reasons, the thought of returning home fills the girl with a quiet, gnawing dread.</p><p>The closer she gets to her destination, the heavier her legs grow.</p><p>The image of her mother—so successfully pushed down for so long—begins to take unwelcome root in her mind. And awful memories start roiling in the deepest crevices of her heart.</p><p>Despite the sunlight beaming down on her, the girl’s sweat is cold.</p><p>The straps of her damp leather bag are stained a dusky brown.</p><p>The hospital looms before her like a challenge. And her mother awaits inside.</p><p>Trees rustle in the breeze outside the hospital doors.</p><p>Bright orange fruit hangs heavy from thin branches.</p><p>The girl stares at it and recalls a time, long ago, when she came here with her mother.</p><p>This fruit was ripe then, too.</p><p>It caught my eye, so I reached out to grab one that had fallen to the ground.</p><p>But when my mother noticed, she smacked me in the hand with her cane.</p><p>I cried. No, I didn’t cry. I<br>sobbed<br>. And all my mother could do was glare at me.</p><p>A ghostly pain from that long-ago day flashes through the back of her hand, and she quickly shakes it off. She wraps her fingers around the doorknob and pulls it open.</p><p>An empty reception desk sits sadly in the lobby. Not knowing what else to do, she begins wandering the halls in search of her mother’s room.</p><p>But the rest of the building is as empty as the lobby.</p><p>The entire hospital stands cold and forgotten, almost as if it is ready to dry up and blow away in the breeze.</p><p>She walks from one hallway to the next, opening doors and peering around corners, but finds only solitude. All that moves in this place are the thin white curtains on the windows.</p><p>The girl begins to feel as though she has been left behind, and unease wells up inside her.</p><p>The afternoon is warm. Languid. Tranquil. If the breeze were to stop, there would be no way to tell that time was still passing.</p><p>She makes her way down a long corridor, counting numbers as she goes.</p><p>103, 104, 105, 106…107.</p><p>Her mother’s room—or at least the room where she is supposed to be.</p><p>The girl gently pushes a door that swings on silent hinges and peers into the room.</p><p>A lone woman sits upright in bed, facing away from her as she gazes out the window.</p><p>Her mother. Despite the grim news contained in the letter, her posture seems firm.</p><p>Though her figure seems to have diminished a bit since the girl had seen her last.</p><p>Or perhaps it is simply that she herself has grown.</p><p>Her imagination begins to whirl. She pictures what her mother will look like when she finally turns around. How she will sound. What she might say.</p><p>With her head hanging low, she braces herself for whatever is to come.</p><p>It’s all right,<br> she thinks.<br>There’s nothing to be afraid of. There’s nothing to be afraid of. There’s nothing to be afraid of.</p><p>But the girl knows she cannot stand in place forever. She slowly moves forward, sliding her feet across the floor in an attempt to hide their sound.</p><p>One step…….</p><p>And another…….</p><p>After another step, her mother starts to rotate her head.</p><p>Another step later and now she is facing her. It is nothing at all like the girl imagined.<br>Her mother’s face is calm. After a moment, a childlike expression of glee moves across her features and she begins to speak. “Oh, Grandma! I’m so happy you’re here!”</p><h2 id="Story-3-1"><a href="#Story-3-1" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>The Day I was Born Part 3<br>[<br>]</p><p>Gentle sunlight fills the white room. Thin curtains dance on the wind. Alone, the girl and her mother face each other. The older woman’s expression is the pure joy of a child.</p><p>It is so,<br>so<br> different from the image the girl has carried heavy in her memory for all this time.</p><p>She wonders briefly if this is even her real mother, and the thought makes ice run in her veins.</p><p>The mother of her memory is stern. Cold. Unfeeling. The thought of a smile from such a woman is folly.</p><p>Even when the girl truly needed help, her mother would turn away and walk off without a word.</p><p>Never had she reached down to help her up. Not once. But now…</p><p>“I’m sorry,” says a sudden voice from behind the girl. She whirls around to find an elderly man clad in a crisp doctor’s coat. “I’m sorry I could not be here to meet you in person,” he continues.</p><p>“We’ve just been so very understaffed lately.”</p><p>“Oh, um, that’s all right,” manages the girl. Before she can say more, the doctor takes a breath and begins to explain her mother’s condition. Something had gone terribly wrong with the cognitive functions in her brain, causing her to collapse. She had been discovered in her home a few days prior. But by the time they found her, she was too far gone.</p><p>Despite the best treatment they could muster, her brain function had not recovered.</p><p>Her state of mind had reverted to that of her own childhood. The more the doctor tells her, the more the girl’s mind reels. He seems to sense her discomfort, but his profession demands a certain clinical nature, so he soldiers on. “It is perhaps a bit cruel to say this to a child, but I feel you have the right to know.” He takes a breath, then another.</p><p>“We do not know how much time your mother has left. And if it is possible…We would like you to stay with her until the end.”</p><p>He stops talking then and waits. After a pause the length of an age, the girl tells him she will need some time to think. He nods and leaves her alone with her thoughts.</p><p>And alone with her mother.</p><p>Origami stars and animals are taped to the walls. Balloons hang brightly in one corner.</p><p>Her mother’s room has been decorated like the play area of a child.</p><p>The girl stares at one of the stars.<br>Did my mother make this? Did she make all of these?</p><p>Behind her, her mother opens a desk drawer. After a bit of rustling, she pulls out a few sheets of origami paper. “Let’s make something!” she cries happily.</p><p>“I’m so good at it! Come on, please?” She tugs on her daughter’s clothing as she speaks.</p><p>The girl can’t believe her eyes. Her mother—the same woman to whom a smile was a forbidden thing—was now pleading for attention. It’s too much. It’s all just too much.</p><p>With a sudden cry, the girl smacks her mother’s hand away. The reaction makes the older woman burst into tears.<br>THIS is who I was afraid of all these years? This pathetic creature?</p><p>The girl’s bewilderment finally gives way to rage.</p><p>Her mother had caused her so much grief. So much pain. And for what purpose? To what end?<br>As she stares at the sobbing thing before her, she wishes it would just hurry up and die.<br>Am I a terrible daughter? A terrible person?<br>The girl does not know the answers to these questions; she knows only that she cannot come up with even a single kind word for her mother. So instead she stands in place and listens to the sound of her weeping echo off the stale hospital walls.</p><h2 id="Story-4-1"><a href="#Story-4-1" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>The Day I was Born Part 4<br>[<br>]</p><p>The girl sits in a rough wooden chair and stares out the window. Days have passed since the shocking meeting with her mother, and she has yet to fully grasp the reality of the situation.</p><p>But after speaking with the doctor, it was decided that she would stay at the hospital, at least for a little while.</p><p>A letter was drafted to explain the circumstances and sent to her school.</p><p>And against all odds, the doctor’s kind and continuous treatment begins to have an effect.</p><p>Her mother’s mind begins to age, moving from that of a child to that of an adult.</p><p>And though it is a strange and bewildering time for the girl, she sits by her mother’s side through it all.</p><p>At first, it seemed as though there was no hope. But after a week, her expression changes.</p><p>It becomes more mature, and she begins to speak of romance. Over the span of a few weeks, the girl watches her mother gradually grow up. She now has the mental age of a young adult.</p><p>Her mother loved origami as a child. Her mother hated bugs as a teenager.</p><p>Her mother still hates carrots as an adult. The woman before her is always soft. Always kind.</p><p>But it is not the sort of kindness a mother shows her daughter.</p><p>One day, her mother awakens in a terrible state.</p><p>Her voice is the picture of confusion and helplessness.</p><p>“Stay with me, Grandma! Please stay with me!” The girl meets her mother’s gaze calmly.</p><p>She summons her courage. “Of course,” she finally replies. “I’ll be right here.”</p><p>Her mother has never called her anything but “Grandma.”</p><p>Perhaps, in her mind, she is not even a mother yet.</p><p>Which means that, in her mind, the girl does not actually exist. All of this lies heavy on the girl’s mind.</p><p>I hated my mother. And I thought she hated me. Did I ever want to be close to her?</p><p>And did she ever want to be close to me?<br> But the answers remain always out of reach.</p><p>Another week goes by, and her mother’s condition takes a turn for the worse.</p><p>Her arms are as weak and thin as the branches of the fruit tree outside the hospital.</p><p>She slips in and out of consciousness.</p><p>The doctor pulls the girl aside and says he does not expect her to live through the night.</p><p>So the girl stays by her side through the long dark, holding her wrinkled hand all the while.</p><p>The only light is the dim glow of an indifferent moon.</p><p>It illuminates her mother’s pained expression as she moans in her sleep.</p><p>Suddenly, her eyelids twitch open.</p><p>“Do you want some water?” asks the girl. Her mother shakes her head.</p><p>She opens her mouth as if to speak. Something is clearly troubling her.</p><p>“I have to talk to you, Grandma,” she says finally. Though weak, her mature voice carries the air of a childhood secret.</p><p>The girl merely nods, waiting for her to continue.</p><p>She begins to speak of children, and how conflicted she is by the idea.</p><p>“I don’t want a baby,” she says.<br>There it is…There it is.</p><p>Her mother had never wanted her. Not ever.</p><p>If her mother notices the pained expression and lowered head of her daughter, she pays it no mind and continues to speak. She tells of how she began having problems when she was a young woman. After a while, she finally sought medical help.</p><p>And in time, she was diagnosed with a mental illness.</p><p>It was this diagnosis that caused her husband to abandon her.</p><p>The girl raises her head. She had no idea about this—about<br>any<br> of it.</p><p>She had spent but a short time with her mother, and had not been nearly old enough to understand the truth of complex adult affairs. Even now, the story is so complicated that it threatens to blow away from her at any moment.</p><p>She talks of how her illness will eat away at her.</p><p>How it will change her. How it will hurt her and everyone she cares for.</p><p>She worries abut this. She worries without ceasing or pause.</p><p>If she were to ever have a child, she would surely hurt them as well. Despite how much…</p><p>Despite how<br>very<br> much…</p><p>She loves the child that lies inside her now.</p><p>Wet heat drips down the girl’s cheeks. It falls to the floor like slow rain.</p><p>As she listens to her mother’s confession, the girl’s anger and hatred finally begin to escape her body in the form of small drops at the corners of her eyes.</p><p>Finally, her mother sighs and lays back. She closes her eyes.</p><p>Every worry of a life—every worry of a million lifetimes—seems to have contained itself in the dark circles beneath her eyes. The room grows silent as the girl squeezes her hand.</p><p>And for the first time since she came to the hospital…</p><p>For the first time in so long, she says… “Mom.”</p><p>Dawn breaks after an endless night. It is the girl’s birthday.<br>Bright, cheerful sunlight pours over her hometown.<br>The girl blocks it out with one unsteady hand as she stares out the window.<br>She has changed since she came here. Grown. Matured.<br>Today, the girl’s birthday will be celebrated in the form of a farewell.<br>She dons a pure white dress of mourning…and prepares to see her mom for the very last time.</p><h1 id="Recollections-of-Dusk"><a href="#Recollections-of-Dusk" class="headerlink" title="Recollections of Dusk"></a>Recollections of Dusk</h1><h2 id="Story-1-2"><a href="#Story-1-2" class="headerlink" title="Story 1"></a>Story 1</h2><pre><code class="hljs">              </code></pre><p>Ch. 1: Rumors<br>[<br>]</p><p>“Feeling good about the upcoming test?”</p><p>I turned to see my best friend running up behind me as I hurried to the arcane-experiments room. His hair was as unruly as ever, shooting out and away from his head as if it desired to enter orbit.</p><p>“Are you really asking me that question? As I recall, I scored much higher than you on the last one.”</p><p>“Yeah, yeah. But I’m going to make up for it this time!”</p><p>“You’d better, because this is just getting embarrassing.”</p><p>We had bantered like this since the first day we met in the hallowed halls of the magick academy. Each semester we challenged each other to see who could score higher on the endless series of tests we were given, and each semester he somehow manages to keep up with me.</p><p>I always found this fact supremely annoying, because I didn’t see how he could possibly pull off such high scores while also being a complete slacker.</p><p>This semester’s contest was currently deadlocked at five wins each, and I’d sworn to study even harder so I could pull away from him before things came to a close.</p><p>Fortunately, the next test was in my best subject, so I felt confident I would be able to seal the deal.</p><p>When I reached the experiments room, I found my classmates buzzing about in preparation for the practical exam. Our test today was all about transmutation: changing a thing of one substance into another. It was a tricky problem that required a number of delicate, subtle skills; students who simply attacked it with raw magickal strength would quickly find their efforts ending in failure.</p><p>As the other students pulled out their various ores and plants, I slowly reached into my bag and removed a sleepy frog. I know it was a risky move—frogs are notoriously hard to transmute—but if I could pull it off, I’d certainly have the final win I was looking for.</p><p>I set the frog on my desk and began casting my spell. Light flowed from my staff and swirled around the animal, who seemed merely bored by the proceedings. As I worked, I began to form an image of the transmuted shape I was aiming for, being careful not to add too much or too little magick. I felt good. Confident. Almost cocky.</p><p>But then everything went wrong.</p><p>The magick I thought I’d conquered suddenly yanked against the reins, and the slow trickle of power became a surging waterfall. A million different colors of light blazed across the walls as my staff began to shake in my hands.</p><p>“Let go!” Cried my professor as she ran toward my station. When I hesitated a fraction of a second, she slammed her hands on the desk and screamed again. “NOW!”</p><p>The moment I released my grip on the staff, the other classmates begin to scream. The staff floated higher into the air, whirling like a maddened dervish as it poured more and more magick into the now very-much-concerned frog. The poor creature began to grow, swelling into the size of a watermelon, then a small dog, then a human. Skin stretched. Eyes bulged. Screams rang out anew.</p><p>And then…it exploded.</p><p>That was three days ago, and needless to say, I did not win the grade contest with my best friend. But honestly, I have much bigger issues on my mind right now—like the fact I’ve suddenly lost the ability to control even the smallest magickal spell.</p><p>As I hurry toward my room with my head hanging low, I hear students whispering behind me in the stairwell.</p><p>“Hey, did you hear about the exploding frog thing?”</p><p>I know—it’s SO disgusting! Apparently they were cleaning gung off the walls for hours.”</p><p>“Yeah, but do you know who’s responsible?”</p><p>I hear a giggle, then a whisper that sounds suspiciously like my name, and I suddenly want nothing more than to find a nice, warm hole to crawl into and live in forever.</p><p>“So sad—she used to be pretty talented. Hey, do you think it’s that Omen thing? The one that makes you unable to use magic?”</p><p>“I dunno, but I heard one of the older kids say that same thing.”</p><p>I Knew exactly what they were talking about—we all did. Rumors of the Omen had been swirling around the school since the day we arrived:</p><p>A magic user’s power is never more unstable than in the days leading up to their tenth birthday.</p><p>And if they cannot gain control over it before the full moon rises in the sky, they will never be able to use their power again.</p><p>I laughed it off when I first heard about it—we all did. But right now, laughing was the furthest thing from my mind. Because I’d celebrated my tenth birthday just a few days ago, and now there was only a week left until the next full moon.</p><h2 id="Story-2-2"><a href="#Story-2-2" class="headerlink" title="Story 2"></a>Story 2</h2><pre><code class="hljs">              </code></pre><p>Ch. 2: The Library’s Keeper<br>[<br>]</p><p>Five days until the full moon…</p><p>The thought of losing my magic terrifies me. But as I sit motionless in the classroom and try not to consider this possibility, my best friend wanders over and begins our usual banter.</p><p>“Aw, you look down. Did losing to me make you that sad?”</p><p>Usually, I’d let such snarky comments go. But this time, I get up and storm off without a word—because I know he’ll just laugh if I tell him what I’m thinking.</p><p>Eventually, I make my way to the library and take a moment to breathe in the atmosphere. Bookshelves scrape the ceiling, while haphazard shelf placement makes it less organized than an ancient maze. If I’m going to find a clue—if there’s some way to undo the curse that haunts me—I’m going to find it here.</p><p>Not this one. This is no good. Nope. Not this one either.</p><p>I’m concentrating so hard on finding my book, I don’t even realize that I’m lost. And when I finally recognize that fact, I’m so startled that I take an involuntary step backward and collide with a bookshelf—which immediately spins on its axis and sends me crashing through a revolving door.</p><p>I am floating.</p><p>Slowly, I force my eyes open and see that several of the tomes which had fallen from the shelf are drifting gently in front of me.</p><p>Somehow—some<br>way<br>—the books and I are slowly falling down, down, down an endless hallway lined as far as the eye can see with shelves.</p><p>I don’t know if there is a bottom. Or a top. Heck, maybe I’ll just float like this until thirst and starvation take me.</p><p>But then, someone speaks.</p><p>“TELL ME THY NAME.”</p><p>“Sorry, but where are you? And, um,<br>who<br> are you?” I try to put some force into my voice to hide my fear, but it all falls apart at the end.</p><p>“I AM THE KEEPER OF THE LIBRARY.”</p><p>“Oh. That’s, um…I’ve never heard of you.”</p><p>“THOU HAST INTRUDED UPON MY DOMAIN, AND NOW MUST ANSWER THREE QUESTIONS TRUE. IF THINE ANSWERS SATISFY ME, I SHALL GRANT THY MOST CHERISED DESIRE.”</p><p>I have to be careful here—<br>incredibly<br> careful. The first thing they teach you when you arrive at the academy is to be wary of powerful mages. There’s strength in their questions, you see…and penalties if you lie. But I also know this is my best—and maybe only—chance to find the answers I need.</p><p>“All right, then. Ask away.”</p><p>“WHAT STRIKES THE GREATEST FEAR IN THEY HEART?”</p><p>“My greatest fear? Um, well, I suppose I’m afraid of disappointing my teachers.”</p><p>Sort of a boring answer, but also very much true.</p><p>“IN WHAT DOST THOU PLACE THE MOST TRUST?”</p><p>“My own power.”</p><p>I mean, I came to a floating hallway to keep it, so I’d better trust it.</p><p>“THY FINAL QUESTION COMES.”</p><p>I try to swallow, but my throat might as well be made of sand.</p><p>“WHAT IS MOST PRECIOUS TO THEE?”</p><p>“Most precious? That’d be my…”</p><p>“Magick” is what I want to say. Magick. I mean, of<br>course<br> it’s my magick. But for some reason my mind decides this is a great time to go running off on its own, and hear myself say:</p><p>“My family.”</p><p>Oh god. Oh no. I’m in real trouble now. I feel my body come to a halt and reverse direction, meaning I’m now floating UP. Expecting some kind of horrible punishment, I squeeze myself into the smallest ball I can and shut my eyes tight. But then…</p><p>“THAT ANSWER HAS SAVED THY LIFE.”</p><p>The next thing I know, I’m standing in the library entrance. At my feet is a book I’d never seen, flipped open to a page for a potion that enhances a person’s magickal ability.</p><p>Was I dreaming?<br>Am<br> I dreaming?</p><p>A weird feeling settles over me as I look around at the library, I expect something strange—something higher—but all I see before me is the same, quiet space I have so come to love.</p><h2 id="Story-3-2"><a href="#Story-3-2" class="headerlink" title="Story 3"></a>Story 3</h2><pre><code class="hljs">              </code></pre><p>Ch. 3: The Vile Butterflies<br>[<br>]</p><p>Two days until the full moon.</p><p>I’ve been busy collecting ingredients for my magick-enhancement elixir ever since I found that tome in the library. I feel myself losing strength by the day, and I’m panicking. I have to do whatever it takes to secure the ingredients by the night of the full moon.</p><p>Currently, I’m slogging my way through a dark forest ripe with magick, collecting the various items I need. When my satchel is finally filled to bursting with a supply of herbs, I turn to leave and notice a little butterfly hovering around me.</p><p>Have I seen this butterfly before?</p><p>The front side of its gray wings glow faintly. I count one butterfly, then another, then another. Soon the creatures blanket my entire vision, so I swipe my hand through them to clear a path.</p><p>“Ow!”</p><p>The sudden voice makes me jump, and I whirl around in an attempt to find the source.</p><p>“Pffft! This kid has no idea who’s talking.”</p><p>Yeah, she seems like a real dum-dum, all right!”</p><p>Laughter ripples out before me in waves, and I suddenly realize the source of the voices are the butterflies themselves. At that moment, I remember where I’d seen them: a textbook I was glancing at back at school. These are no normal insects, but instead beautiful, cruel creatures that feed on the darkest parts of the human heart. And if you inhale their scales, you are subjected to an increasingly horrible series of illusions.</p><p>“This isn’t a place for a loser like you.”</p><p>“Aww, did that make you feel bad? It’s true, though, you useless little witch.”</p><p>After a theatric series of insults, the butterflies gather in one spot, almost as if they are a single organism. They then take the shape of a human—one I know all too well.</p><p>“I’m disappointed in you. A witch without magick has no value to anyone.”</p><p>It’s my alchemy professor, and while I know it isn’t real, it looks and sounds exactly like the actual thing. As I stare in horror, the insects transform into classmates, villagers, and friends, each one pelting me with horrible statements.</p><p>And then…</p><p>“What’s got you looking so miserable?”</p><p>It’s the boy—my best friend.</p><p>“No…Not this…”</p><p>“You’ve always been ugly, you know that? Plus, you’re always arguing with me over one thing or another. Still, you’ve got good grades, which is why I keep pretending to be your friend.”</p><p>My eyes fill up with tears. He would never say something like this to me.<br>Never.<br> And yet, what if he’s been thinking such things all this time and never told me?</p><p>“But without magick? Useless. Just another dumb little witch. So…bye.”</p><p>I let out a strangled cry and reach for him, then stop myself. This isn’t real—these are just creatures taking his form in an attempt to eat my heart. And even if he<br>did<br> think such things…</p><p>“I won’t lose to you!”</p><p>I grip my staff and attempt to launch a fireball, but am rewarded with a tiny poof and a pathetic spark instead. Was this actually happening? Was my magick really so weak? My best friend cackles madly at my shocked expression, then slowly dissolves into a mass of swarming butterflies. But just before he fades completely, he gives one last twist of the knife:</p><p>“There’s no place for you here. There’s no place<br>anywhere.<br>“</p><h2 id="Story-4-2"><a href="#Story-4-2" class="headerlink" title="Story 4"></a>Story 4</h2><pre><code class="hljs">              </code></pre><p>Ch. 4: The Stone Giant<br>[<br>]</p><p>Tonight is the first night of the full moon since my 10th birthday—the last chance to get my magick back before I lose it forever.</p><p>Warm rays of sunset light beam through the window, guiding me as I walk through the dusty corridor. Suddenly, I hear the horrible sound of stone scraping on stone behind me, and realize I’ve found what I came for.</p><p>Got you.</p><p>The potion recipe in my book said I needed to secure the heart of a massive stone golem before nightfall, and I’d come to this crumbling manor to find one. Suppressing my overwhelming desire to run, I reach into one of the hidden pockets of my robe and withdraw a small arcane pearl I’d created for this very moment.</p><p>“I’ll see you in hell, buddy!” I scream as I hurl the object into the oncoming creature. There is a bright flash of light, followed by a deep rumble that echoes throughout the manor. But then…</p><p>“Oh. That’s not good at all.”</p><p>When the smoke clears, the golem is unharmed—my precious pearl didn’t even slow it down. As my legs begin to tremble, it presses me up against a wall with its massive bulk. Its eyes peer down at me from the ceiling, questioning, unblinking. Then it raises one enormous hand and prepares to bring it down, ending my life as a tiny little splat on the floor that no one will even recognize come the morning.</p><p>“This way!”</p><p>As a familiar voice cries out, a bolt of lightning knocks the golem’s killing blow aside. I turn in wonderment to see the boy standing there—my best friend. As I dash past the grumbling golem and to his side, he casts another powerful spell at my enemy.</p><p>“I’m barely slowing this damn thing down!”</p><p>I know that, just as I know there’s only one way out of this: I’ll tell him to run and save himself while I distract the creature. But before I can speak this plan aloud, he holds his staff out and blesses me with a familiar crooked smile.</p><p>“Here,” he says in a low voice. “Hold my staff. We’ll hit this jerk with a combined spell like we learned in class!”</p><p>“No! I can’t! I can’t use magick anymore!”</p><p>No sense in trying to hide it anymore; the cat is not only out of the bag, it’s running off down the road. I expect him to turn and leave in a cloud of disgust when I say this, but to my astonishment, his smile just grows wider.</p><p>“Wrong! You’re an<br>amazing<br> spellcaster! You just have to trust in yourself. Now get ready, because that ugly thing’s coming right for us!”</p><p>His voice sparks a mad sense of encouragement in me, and almost without realizing it, I reach out and grip the staff. Moments later, a whirlpool of light spills out of his weapon. A gust of wind whips up, threatening to blow me away. And as I stand in the swirling light, I feel my body being filled with magick.</p><p>Oh my god…This is incredible!</p><p>This is our magick; our powers intermingling to make a storm of unimaginable ferocity. The roof detaches and soars away. Walls crumble. Pillars explode. And at the end of it all, the once-mighty golem is nothing but a heap of rocks on the floor.</p><p>“How did you know I was here?” I ask as I dust myself off.</p><p>“You’d been acting weird lately, so I peeked at your notes and saw something about creating an elixir, as well as the location of this place.” He pauses for a moment to dislodge a small pebble from his shoulder, then looks at me again. “Say, do you remember what our professor said about mages and witches having really unstable magick at the age of ten?”</p><p>“What?”</p><p>“Yeah, that whole thing about us ‘losing our magick’ is just a superstition, but it’s based around the fact stuff tends to run amok at this age.”</p><p>As his words settle over me, I realize my magick worked perfectly fine when we cast the combined spell. “So, um… You knew I was upset about all of this?”</p><p>“Yeah, and I was worried.”</p><p>His voice is both gentle and warm, and I have to resist a sudden urge to burst into tears as I hear it. Shame rises in my heart as I realize how stupid it was to think this friend might have abandoned me if I lost my magick, when the whole time he was more concerned about me than I ever imagined.</p><p>“Um, thanks,” I manage as I pull my hat lower over my eyes. I don’t want him to see me like this, but he just bursts out laughing.</p><p>“Hey, of course! You’re family, after all.”</p><p>Family.<br> Though I’m happy to hear him use that word, I’m not exactly sure how to feel about it.</p><p>“Hey, so let’s get out of here, yeah?”</p><p>“Yes. Let’s.”</p><p>As we walk home beneath a shimmering full moon, I deliberately take slower steps than necessary, all so the moment might last just a little bit longer.</p><h1 id="Hidden-Stories"><a href="#Hidden-Stories" class="headerlink" title="Hidden Stories"></a>Hidden Stories</h1><h2 id="Story-1-3"><a href="#Story-1-3" class="headerlink" title="Story 1"></a>Story 1</h2><h2 id="Story-2-3"><a href="#Story-2-3" class="headerlink" title="Story 2"></a>Story 2</h2><h2 id="Story-3-3"><a href="#Story-3-3" class="headerlink" title="Story 3"></a>Story 3</h2><h2 id="Story-4-3"><a href="#Story-4-3" class="headerlink" title="Story 4"></a>Story 4</h2><h2 id="Story-5"><a href="#Story-5" class="headerlink" title="Story 5"></a>Story 5</h2><h2 id="Story-6"><a href="#Story-6" class="headerlink" title="Story 6"></a>Story 6</h2><h2 id="Story-7"><a href="#Story-7" class="headerlink" title="Story 7"></a>Story 7</h2><h2 id="Story-8"><a href="#Story-8" class="headerlink" title="Story 8"></a>Story 8</h2><h2 id="Story-9"><a href="#Story-9" class="headerlink" title="Story 9"></a>Story 9</h2><h2 id="Story-10"><a href="#Story-10" class="headerlink" title="Story 10"></a>Story 10</h2>]]></content>
    
    
    <categories>
      
      <category>Nier</category>
      
    </categories>
    
    
    <tags>
      
      <tag>story</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的世界mod开发规划</title>
    <link href="/2024/01/09/MinecraftMod/"/>
    <url>/2024/01/09/MinecraftMod/</url>
    
    <content type="html"><![CDATA[<h1 id="我的世界Mod开发规划"><a href="#我的世界Mod开发规划" class="headerlink" title="我的世界Mod开发规划"></a>我的世界Mod开发规划</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>经过这么多次尝试，终于搭建好了mod开发的环境。写一下未来的模组开发的计划。</p><h2 id="1-移动背包"><a href="#1-移动背包" class="headerlink" title="1.移动背包"></a>1.移动背包</h2><p>设计一个类似于饥荒中的切斯特Chester的移动背包，设计时可以参考MC中已经有的悦灵生物</p><p>血量设定也要类似于悦灵，不然失手误伤太难受了</p><h2 id="2-传送仪"><a href="#2-传送仪" class="headerlink" title="2.传送仪"></a>2.传送仪</h2><p>设计一个类似于泰拉中的魔镜的物品，可以把自己传送会出生点。如果有条件的话，还可以设计一个类似的物品，将自己传送回到传送前的位置（相当于逆向工程）。</p><h2 id="3-音乐播放器"><a href="#3-音乐播放器" class="headerlink" title="3.音乐播放器"></a>3.音乐播放器</h2><p>可以是类似于插件的播放界面，也可以是直接作为唱片添加到游戏之中。</p><h2 id="4-坐标记录器"><a href="#4-坐标记录器" class="headerlink" title="4.坐标记录器"></a>4.坐标记录器</h2><p>手动记太麻烦</p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h2><p>如果有机会，还可以尝试制作泰拉的模组。</p>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>text1</title>
    <link href="/2024/01/06/test1/"/>
    <url>/2024/01/06/test1/</url>
    
    <content type="html"><![CDATA[<p>dawdioaidjaoda</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog</title>
    <link href="/2024/01/06/blog/"/>
    <url>/2024/01/06/blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/30/hello-world/"/>
    <url>/2023/12/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
